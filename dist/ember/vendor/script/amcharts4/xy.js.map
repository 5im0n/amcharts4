{"version":3,"sources":["webpack:///./xy.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/xy.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/series/HeatMapSeries.ts"],"names":["window","amcharts4","xy","__WEBPACK_IMPORTED_MODULE_0__src_xy__","__webpack_require__","d","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_35__internal_charts_cursors_Cursor__","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","HeatMapSeriesDataItem","_super","_this","call","this","className","applyTheme","__extends","__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__","HeatMapSeries","fillRule","column","dataItem","value","series","component","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","minColor","maxColor","minValue","maxValue","percent_1","values","workingValue","fill","__WEBPACK_IMPORTED_MODULE_5__core_utils_Colors__","getFor","columns","template","width","Object","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","height","prototype","validate","_prevMin","_prevMax","dispatchImmediately","validateDataElementReal","defineProperty","getPropertyValue","setPropertyValue","__WEBPACK_IMPORTED_MODULE_1__core_utils_Color__","_maxValue","high","invalidateData","_minValue","low","__WEBPACK_IMPORTED_MODULE_3__core_System__","registeredClasses"],"mappings":"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","file":"xy.js","sourcesContent":["import * as m from \"../../src/xy\";\n(window as any).amcharts4.xy = m;\n\n\n// WEBPACK FOOTER //\n// ./xy.ts","/**\r\n * Module: xy \r\n */\r\n\r\n/**\r\n * Elements: types \r\n */\r\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\r\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\n\r\n/**\r\n * Elements: charts \r\n */\r\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\r\n\r\n/**\r\n * Elements: series \r\n */\r\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\r\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\r\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\r\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\r\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\r\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\r\nexport { HeatMapSeriesDataItem, IHeatMapSeriesDataFields, IHeatMapSeriesProperties, IHeatMapSeriesEvents, IHeatMapSeriesAdapters, HeatMapSeries } from \"./.internal/charts/series/HeatMapSeries\";\r\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\r\n\r\n/**\r\n * Elements: axes \r\n */\r\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\r\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\r\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\r\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\r\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\r\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\r\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\r\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\r\n\r\n/**\r\n * Elements: elements \r\n */\r\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\r\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\r\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\r\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\r\n\r\n/**\r\n * Elements: cursors \r\n */\r\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\r\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/xy.ts","/**\r\n * HeatMapSeries module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[HeatMapSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class HeatMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {HeatMapSeries}\r\n\t */\r\n\tpublic _component: HeatMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"HeatMapSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[HeatMapSeries]].\r\n */\r\nexport interface IHeatMapSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[HeatMapSeries]].\r\n */\r\nexport interface IHeatMapSeriesProperties extends IColumnSeriesProperties {\r\n\t/**\r\n * A color to apply to columns with the lowest value.\r\n *\r\n * @type {Color}\r\n */\r\n\tminColor?: Color;\r\n\r\n\t/**\r\n\t * A color to apply to columns with the highest value.\r\n\t *\r\n\t * @type {Color}\r\n\t */\r\n\tmaxColor?: Color;\r\n}\r\n\r\n/**\r\n * Defines events for [[HeatMapSeries]].\r\n */\r\nexport interface IHeatMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[HeatMapSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IHeatMapSeriesAdapters extends IColumnSeriesAdapters, IHeatMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n * \r\n * @see {@link IHeatMapSeriesEvents} for a list of available Events\r\n * @see {@link IHeatMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class HeatMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IHeatMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IHeatMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IHeatMapSeriesProperties}\r\n\t */\r\n\tpublic _properties: IHeatMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IHeatMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IHeatMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<HeatMapSeries, IHeatMapSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<HeatMapSeries, IHeatMapSeriesEvents>>;\r\n\r\n\r\n\t/**\r\n\t * User-defined lowest value in the series.\r\n\t * @ignore\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minValue: number;\r\n\r\n\t/**\r\n\t * User-defined heighest value in the series.\r\n\t * @ignore\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxValue: number;\r\n\r\n\t/**\r\n\t * previous min value\r\n\t * @ignore\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevMin: number;\r\n\r\n\t/**\r\n\t * previous max value\r\n\t * @ignore\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevMax: number;\r\n\r\n\t/**\r\n\t * A function which fills columns with intermediate color between minColor and maxColor if dataItem has value\r\n\t *\r\n\t * @todo Description\r\n\t * @type {function} \r\n\t */\r\n\tpublic fillRule: (column: Sprite) => any = function(column: Sprite) {\r\n\t\tlet dataItem: HeatMapSeriesDataItem = <HeatMapSeriesDataItem>column.dataItem;\r\n\r\n\t\tif (dataItem && dataItem.value) {\r\n\t\t\tlet series = dataItem.component;\r\n\t\t\tif($type.hasValue(series.minColor) &&  $type.hasValue(series.maxColor) && $type.isNumber(series.minValue) && $type.isNumber(series.maxValue)){\r\n\t\t\t\tlet percent = (dataItem.values.value.workingValue - series.minValue) / (series.maxValue - series.minValue);\r\n\t\t\t\tcolumn.fill = $colors.interpolate(series.minColor, series.maxColor, percent);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.minColor = new InterfaceColorSet().getFor(\"background\");\r\n\t\tthis.className = \"HeatMapSeries\";\r\n\t\tthis.columns.template.width = percent(100);\r\n\t\tthis.columns.template.height = percent(100);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tif (this.minValue != this._prevMin || this.maxValue != this._prevMax) {\r\n\t\t\tthis.dispatchImmediately(\"valueextremeschanged\");\r\n\t\t\tthis._prevMin = this.minValue;\r\n\t\t\tthis._prevMax = this.maxValue;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.fillRule(dataItem.column);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Color for the lowest value in a heat map.\r\n\t *\r\n\t * In heat map, each object will be colored with an intermediate color\r\n\t * between `minColor` and `maxColor` based on their `value` position between\r\n\t * `min` and `max`.\r\n\t *\r\n\t * @param {Color}  value  Lowest color\r\n\t */\r\n\tpublic set minColor(value: Color) {\r\n\r\n\t\tif (!$type.isObject(value)) {\r\n\t\t\tvalue = $type.toColor(value);\r\n\t\t}\r\n\t\t\r\n\t\tthis.setPropertyValue(\"minColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Lowest color\r\n\t */\r\n\tpublic get minColor(): Color {\r\n\t\treturn this.getPropertyValue(\"minColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Color for the highest value in a heat map.\r\n\t *\r\n\t * In heat map, each object will be colored with an intermediate color\r\n\t * between `minColor` and `maxColor` based on their `value` position between\r\n\t * `min` and `max`.\r\n\t *\r\n\t * @param {Color}  value  Highest color\r\n\t */\r\n\tpublic set maxColor(value: Color) {\r\n\r\n\t\tif (!$type.isObject(value)) {\r\n\t\t\tvalue = $type.toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setPropertyValue(\"maxColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Highest color\r\n\t */\r\n\tpublic get maxColor(): Color {\r\n\t\tlet maxColor = this.getPropertyValue(\"maxColor\");\r\n\t\tif ($type.hasValue(maxColor)) {\r\n\t\t\treturn maxColor;\r\n\t\t}\r\n\t\telse if(this.fill instanceof Color) {\r\n\t\t\treturn this.fill;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * User-defined highest value in the series.\r\n\t *\r\n\t * If not set, the map will use the highest `value` out of actual items in\r\n\t * the series.\r\n\t *\r\n\t * This is used to determine object's color in a heat map.\r\n\t *\r\n\t * @param {number}  value  Highest value\r\n\t */\r\n\tpublic set maxValue(value: number) {\r\n\t\tthis._maxValue = value;\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @return {number} Highest value\r\n\t */\r\n\tpublic get maxValue(): number {\r\n\t\tlet maxValue = this._maxValue;\r\n\t\tif ($type.isNumber(maxValue)) {\r\n\t\t\treturn maxValue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.values.value.high;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * User-defined lowest value in the series.\r\n\t *\r\n\t * If not set, the map will use the lowest `value` out of actual items in\r\n\t * the series.\r\n\t *\r\n\t * This is used to determine object's color in a heat map.\r\n\t *\r\n\t * @param {number}  value  Lowest value\r\n\t */\r\n\tpublic set minValue(value: number) {\r\n\t\tthis._minValue = value;\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Lowest value\r\n\t */\r\n\tpublic get minValue(): number {\r\n\t\tlet minValue = this._minValue;\r\n\r\n\t\tif ($type.isNumber(minValue)) {\r\n\t\t\treturn minValue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.values.value.low;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"HeatMapSeries\"] = HeatMapSeries;\r\nsystem.registeredClasses[\"HeatMapSeriesDataItem\"] = HeatMapSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/series/HeatMapSeries.ts"],"sourceRoot":""}