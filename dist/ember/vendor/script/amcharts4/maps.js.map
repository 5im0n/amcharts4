{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///./maps.js","webpack:///../../src/maps.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../src/.internal/charts/map/projections.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts"],"names":["__webpack_require__","d","__webpack_exports__","MapObject","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","_super","_this","call","this","className","isMeasured","layout","clickable","applyTheme","prototype","validate","series","readerTitle","itemReaderText","registeredClasses","Object","defineProperty","value","normalizePoint","multiline","multiline_1","multiline_1_1","next","done","segment","segment_1","segment_1_1","point","wrapAngleTo180","geoPoint","x","longitude","y","latitude","__WEBPACK_IMPORTED_MODULE_1__core_utils_Math__","Math","asin","sin","latitude180","abs","angle","MapLine","__WEBPACK_IMPORTED_MODULE_1__MapObject__","__WEBPACK_IMPORTED_MODULE_2__MapLineObject__","__WEBPACK_IMPORTED_MODULE_3__core_elements_Triangle__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Polyline__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_12__Geo__","createLine","line","stroke","parent","strokeOpacity","interfaceColors","getFor","shortestDistance","positionToPoint","position","getPropertyValue","multiGeoLine","setPropertyValue","images","i","len","length","image","map","hasKey","getKey","events","on","event","property","invalidate","chart","imagesToConnect","_a","_b","push","newMultiGeoLine","geoLine","newGeoLine","p","plen","geoPointA","geoPointB","stepCount","max","intermediatePoint","projection","previousPoint","segments","projectGeoLine","_arrow","validatePosition","lineObjects","iterator","measureElement","_lineObjects","handleLineObjectAdded","_disposers","template","mapLineObject","newValue","mapLine","arrow","createChild","shouldClone","width","height","triangle","fillOpacity","rotation","horizontalCenter","verticalCenter","copyFrom","source","clone","dataItem","north","south","east","west","multiPointToGeo","points","geoPoints","pointToGeo","multiPolygon","multiGeoArea","surface","hole","multiLine","MapImage","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","moveTo","convert","MapPolygon","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polygon__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","polygon","fill","tooltipPosition","multiGeoPolygon","projectGeoArea","pixelWidth","pixelHeight","MapLineSeriesDataItem","MapLineSeries","__WEBPACK_IMPORTED_MODULE_1__MapSeries__","__WEBPACK_IMPORTED_MODULE_2__MapLine__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_5__MapUtils__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Disposer__","_mapLine","mapLine_1","component","mapLines","create","addSprite","removeValue","_line","_multiLine","_geoLine","_multiGeoLine","updateLineExtremes","updateExtremes","dataFields","createDataItem","validateData","data","clear","useGeodata","geodata","geoJSON","features","type","indexOf","geometry","console","log","feature","id_1","id","this_1","checkInclude","include","exclude","coordinates","dataObject","multiLineString","properties","dataItems","moveValue","_mapLines","lineTemplate","handleObjectAdded","SmallMap","__WEBPACK_IMPORTED_MODULE_2__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","_chart","align","valign","percentHeight","percentWidth","margin","background","moveToPosition","updateMapSize","seriesContainer","rectangle","strokeWidth","_series","handleSeriesAdded","handleSeriesRemoved","contains","newSeries","dataUsers","interactionsEnabled","svgPoint","rectPoint","zoomLevel","scale","min","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","ceil","pixelX","pixelY","scaleRatio","afterDraw","maskRectangle","processConfig","config","MapLineObject","adjustRotation","MapSpline","__WEBPACK_IMPORTED_MODULE_1__MapLine__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyspline__","tensionX","tensionY","MapArc","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyarc__","ZoomControl","__WEBPACK_IMPORTED_MODULE_2__core_elements_Button__","__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Keyboard__","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__","padding","plusButton","label","text","fontFamily","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","language","translate","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","body","ev","topParent","hasFocused","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","createBackground","__WEBPACK_IMPORTED_MODULE_0__es2015_maps__","window","am4maps","__WEBPACK_IMPORTED_MODULE_0__internal_charts_Legend__","__WEBPACK_IMPORTED_MODULE_1__internal_charts_elements_HeatLegend__","__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_MapChart__","__WEBPACK_IMPORTED_MODULE_3__internal_charts_map_MapSeries__","__WEBPACK_IMPORTED_MODULE_4__internal_charts_map_MapObject__","__WEBPACK_IMPORTED_MODULE_5__internal_charts_map_MapLineObject__","__WEBPACK_IMPORTED_MODULE_6__internal_charts_map_MapPolygon__","__WEBPACK_IMPORTED_MODULE_7__internal_charts_map_MapImage__","__WEBPACK_IMPORTED_MODULE_8__internal_charts_map_MapLine__","__WEBPACK_IMPORTED_MODULE_9__internal_charts_map_MapSpline__","__WEBPACK_IMPORTED_MODULE_10__internal_charts_map_MapArc__","__WEBPACK_IMPORTED_MODULE_11__internal_charts_map_MapPolygonSeries__","__WEBPACK_IMPORTED_MODULE_12__internal_charts_map_MapLineSeries__","__WEBPACK_IMPORTED_MODULE_13__internal_charts_map_MapSplineSeries__","__WEBPACK_IMPORTED_MODULE_14__internal_charts_map_MapImageSeries__","__WEBPACK_IMPORTED_MODULE_15__internal_charts_map_MapArcSeries__","__WEBPACK_IMPORTED_MODULE_16__internal_charts_map_MapUtils__","__WEBPACK_IMPORTED_MODULE_17__internal_charts_map_ZoomControl__","__WEBPACK_IMPORTED_MODULE_18__internal_charts_map_SmallMap__","__WEBPACK_IMPORTED_MODULE_19__internal_charts_map_projections_Projection__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_map_projections__","__WEBPACK_IMPORTED_MODULE_21__internal_charts_map_Geo__","MapChartDataItem","MapChart","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","__WEBPACK_IMPORTED_MODULE_2__map_MapSeries__","__WEBPACK_IMPORTED_MODULE_3__map_MapImage__","__WEBPACK_IMPORTED_MODULE_4__map_MapPolygon__","__WEBPACK_IMPORTED_MODULE_5__map_projections_Projection__","__WEBPACK_IMPORTED_MODULE_6__map_SmallMap__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Keyboard__","__WEBPACK_IMPORTED_MODULE_8__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_9__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Ease__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_15__map_Geo__","zoomDuration","zoomEasing","_prevZoomGeoPoint","deltaLongitude","maxPanOut","homeZoomLevel","once","handleAllInited","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","zIndex","chartContainer","inited","_mapAnimation","stop","updateScaleRatio","_zoomGeoPointReal","each","updateTooltipBounds","chartContainerBg","e","dragStart","interactions","downPointers","getIndex","dragStop","focusable","handleMapDown","_zoomControl","getEventKey","pan","mouseWheelBehavior","goHome","ww","seriesWidth","hh","seriesHeight","maxWidth","maxHeight","applyInternalDefaults","htmlContainer","handleWheel","shift","_mouseWheelDisposer","dispose","wheelable","invalidateProjection","pWest","pEast","pNorth","pSouth","centerPoint","northPoint","southPoint","westPoint","eastPoint","vScale","innerWidth","hScale","innerHeight","Infinity","northPoint2","westPoint2","_centerGeoPoint","invert","definedBBox","dispatch","seriesPoint","seriesPointToGeo","geoPointToSVG","geoPointToSeries","_geodata","invalidateData","_dataUsers","center","duration","animate","to","pixelPaddingLeft","pixelPaddingTop","zoomToMapObject","mapObject","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","removeDispose","zoomControl","createSeries","_dataSources","getDataSource","loadData","setDataSourceEvents","createClassInstance","configOrder","a","b","asIs","field","homeGeoPoint","centerGeoPoint","setPaper","paper","svgContainer","hideOverflow","MapPolygonSeriesDataItem","MapPolygonSeries","__WEBPACK_IMPORTED_MODULE_2__MapPolygon__","_mapPolygon","mapPolygon_1","mapPolygons","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","updateAreaExtremes","mapPolygon","parsingStepDuration","processIncExc","_parseDataFrom","_mapPolygons","polygonTemplate","getPolygonById","dataContext","MapSplineSeriesDataItem","MapSplineSeries","__WEBPACK_IMPORTED_MODULE_1__MapLineSeries__","__WEBPACK_IMPORTED_MODULE_2__MapSpline__","MapImageSeriesDataItem","MapImageSeries","__WEBPACK_IMPORTED_MODULE_2__MapImage__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_6__MapUtils__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Disposer__","_mapImage","mapImage_1","mapImages","_point","_geoPoint","mapImage","multiPoint","multiGeoPoint","_mapImages","validateDataElement","MapArcSeriesDataItem","MapArcSeries","__WEBPACK_IMPORTED_MODULE_2__MapArc__","__WEBPACK_IMPORTED_MODULE_0__projections_Mercator__","__WEBPACK_IMPORTED_MODULE_1__projections_Miller__","__WEBPACK_IMPORTED_MODULE_2__projections_Eckert6__","__WEBPACK_IMPORTED_MODULE_3__projections_Orthographic__","__WEBPACK_IMPORTED_MODULE_4__projections_Projection__","Mercator","__WEBPACK_IMPORTED_MODULE_1__Projection__","unproject","atan","exp","PI","project","lambda","phi","tan","Miller","Eckert6","j","k","sqrt","cos","delta","Orthographic","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","getClipRectangle1","deltaLatitude","getRect1","getClipRectangle2","getRect2","clipGeoArea","geoArea","clippedArea","clipRectangle1","clipRectangle2","rect1","rect2","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","clippedAreas_1_1","area","len_1","prevPoint","i_1","extraPoints","s","splice","apply","Projection","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_3__Geo__","deltaGama","clippedGeoArea","convertGeoArea","convertGeoLine","clipGeoLine","clippedLine","clippedSegments","clipLine","concat","clippedSegments2","convertedPoints","convertedAreaPoints","convertedSurface","slen","convertedHole","hlen","convertedSegmentPoints","rotate","pointInRadians","unrotate","deltaGamma","deltaLambda","deltaPhi","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","z","atan2","subjectPolyline","clipPolygon","cp1","cp2","inside","intersection","dc","dp","n1","n2","n3","inputList","subjectPolygon","outputList","r1","r2","pointA","pointB","phi1","lambda1","phi2","lambda2","sinPhi1","cosPhi1","sinLambda1","cosLambda1","sinPhi2","cosPhi2","sinLambda2","cosLambda2","A","B","phi3","lambda3"],"mappings":"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","file":"maps.js","sourcesContent":["/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapObjectEvents}\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSeries}\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\t}\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo-point\r\n * @return {IGeoPoint}            Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint[][]}  multiline  Source geo-line\r\n * @return {IGeoPoint[]}               Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param  {number}  angle  Angle\r\n * @return {number}         Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo point\r\n * @return {IPoint}               Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $geo from \"./Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineEvents}\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t *\r\n\t * @type {Polyline}\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * [_lineObjects description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {ListTemplate<MapLineObject>}\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * [_arrow description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MapLineObject}\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _distance: number;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t * @ignore\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\tthis.createLine();\r\n\t\tthis.line.stroke = color();\t\r\n\t\tthis.line.parent = this;\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyline();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.line) {\r\n\t\t\treturn this.line.positionToPoint(position);\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [multiGeoLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IGeoPoint[][]} multiGeoLine [description]\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} [description]\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoLine\");\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t *\r\n\t * Parameter is an array that can hold string `id`'s to of the images, or\r\n\t * references to actual [[MapImage]] objects.\r\n\t *\r\n\t * @param {MapImages[]}  images  Images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[] | string[]) {\r\n\t\t//@todo dispose listeners if previous imagesToConnect exists\r\n\t\tfor (let i = 0, len = images.length; i < len; i++) {\r\n\t\t\tlet image = images[i];\r\n\t\t\tif ($type.isString(image)) {\r\n\t\t\t\tif (this.map.hasKey(image)) {\r\n\t\t\t\t\timage = <MapImage>this.map.getKey(image);\r\n\t\t\t\t\timages[i] = image;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t}, this, false);\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] | string[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\t\t//let multiPoints: IPoint[][] = [];\r\n\t\tlet multiGeoLine: IGeoPoint[][] = this.multiGeoLine || [];\r\n\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tmultiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tsegment.push({ longitude: (<MapImage>image).longitude, latitude: (<MapImage>image).latitude });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.shortestDistance) {\r\n\t\t\tlet newMultiGeoLine: IGeoPoint[][] = [];\r\n\r\n\t\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\t\tlet newGeoLine: IGeoPoint[] = [];\r\n\r\n\t\t\t\tfor (let p = 1, plen = geoLine.length; p < plen; p++) {\r\n\t\t\t\t\tlet geoPointA: IGeoPoint = geoLine[p - 1];\r\n\t\t\t\t\tlet geoPointB: IGeoPoint = geoLine[p];\r\n\r\n\t\t\t\t\tlet stepCount: number = Math.max(Math.abs(geoPointA.latitude - geoPointB.latitude), Math.abs(geoPointA.longitude - geoPointB.longitude));\r\n\t\t\t\t\t//let latitudeStep: number = (geoPointB.latitude - geoPointA.latitude) / stepCount;\r\n\t\t\t\t\t//let longitudeStep: number = (geoPointB.longitude - geoPointA.longitude) / stepCount;\r\n\r\n\t\t\t\t\tfor (let d = 0; d < stepCount; d++) {\r\n\t\t\t\t\t\tlet intermediatePoint = chart.projection.intermediatePoint(geoPointA, geoPointB, d / stepCount);\r\n\r\n\t\t\t\t\t\tif (newGeoLine.length > 0) {\r\n\t\t\t\t\t\t\tlet previousPoint = newGeoLine[newGeoLine.length - 1];\r\n\t\t\t\t\t\t\tif (Math.abs(previousPoint.longitude - intermediatePoint.longitude) > 359) {\r\n\t\t\t\t\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t\t\t\t\t\tnewGeoLine = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewGeoLine.push(intermediatePoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// add last point to avoid gap\r\n\t\t\t\t\tnewGeoLine.push(geoPointB);\r\n\t\t\t\t}\r\n\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t}\r\n\t\t\tmultiGeoLine = newMultiGeoLine;\r\n\t\t}\r\n\r\n\t\tthis.line.segments = chart.projection.projectGeoLine(multiGeoLine);\r\n\r\n\t\tif (this._arrow) {\r\n\t\t\tthis._arrow.validatePosition();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\tx.validatePosition();\r\n\t\t});\r\n\t\t\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects, the line consists of.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @readonly\r\n\t * @return {ListTemplate<MapLineObject>} List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param {IListEvents<MapLineObject>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\t\t\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param {MapLineObject}  arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapLineObject} Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\t//triangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param {MapLineObject}  source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n * \r\n * @param  {number[][][][]}  multiPolygon  Source multi-polygon\r\n * @return {IGeoPoint[]}                   Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i = 0, len = multiPolygon.length; i < len; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n * \r\n * @param  {number[][][]}  multiLine  Source multiline\r\n * @return {IGeoPoint[]}              Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0, len = multiLine.length; i < len; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n * \r\n * @param  {number[][]}   points  Source points\r\n * @return {IGeoPoint[]}          Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n * \r\n * @param  {number[]}   point  Source point\r\n * @return {IGeoPoint}         Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n *\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapImageProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapImageAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageEvents}\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapImageSeries}\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param {number}  value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param {number}  value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\tthis.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================f================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapPolygonProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapPolygonAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonEvents}\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t *\r\n\t * @type {Polygon}\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t *\r\n\t * @type {number[][]}\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[]}\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapLine} Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo([line]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param {IGeoPoint[][]}  geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiGeoLine = [geoLine];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param {IGeoPoint[][]}  multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.updateLineExtremes(multiGeoLine);\r\n\t\tthis.mapLine.multiGeoLine = this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateLineExtremes(multiGeoLine: IGeoPoint[][]): void {\r\n\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\tthis.updateExtremes(geoLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapLines.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiLineString\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLineString: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLineString) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLineString = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super\r\n\t\t// if data is parsed in chunks, lines list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapLines.moveValue(dataItem.mapLine);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return {ListTemplate} Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapLine} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISmallMapEvents}\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this, false);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this, false);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\t//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\trectangle.x = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\trectangle.y = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.updateRectangle();\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineObjectEvents}\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * A reference to the [[MapLine]] object this object is attached to.\r\n\t *\r\n\t * @todo Review if necessary (same as parent)\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\t\tif (this.mapLine) {\r\n\t\t\tlet point: IOrientationPoint = this.mapLine.positionToPoint(this.position);\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t *\r\n\t * @param {number}  value  Position within the line (0-1)\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Position within the line\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Auto-rotate\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Auto-rotate\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSplineProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSplineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineEvents}\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t *\r\n\t * @type {Polyspline}\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSplineSeries}\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\t\t\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapArcProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapArcAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcEvents}\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t *\r\n\t * @type {Polyarc}\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapArcSeries}\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyarc();\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapArc, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IZoomControlEvents}\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tplusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this, false);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this, false);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this, false);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tminusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false),\r\n\t\t\t\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart, false),\r\n\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = 552\n// module chunks = 5","/**\n * Duplicated\n */\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Maps\n */\nexport { MapChartDataItem, IMapPolygonDataObject, MapLineType, IMapLineDataObject, IMapImageDataObject, IMapDataObject, IMapChartDataFields, IMapChartProperties, IMapChartEvents, IMapChartAdapters, MapChart } from \"./.internal/charts/types/MapChart\";\nexport { MapSeriesDataItem, GEOJSONGeometry, IMapSeriesDataFields, IMapSeriesProperties, IMapSeriesEvents, IMapSeriesAdapters, MapSeries } from \"./.internal/charts/map/MapSeries\";\nexport { IMapObjectProperties, IMapObjectEvents, IMapObjectAdapters, MapObject } from \"./.internal/charts/map/MapObject\";\nexport { MapLineObject } from \"./.internal/charts/map/MapLineObject\";\nexport { IMapPolygonProperties, IMapPolygonEvents, IMapPolygonAdapters, MapPolygon } from \"./.internal/charts/map/MapPolygon\";\nexport { IMapImageProperties, IMapImageEvents, IMapImageAdapters, MapImage } from \"./.internal/charts/map/MapImage\";\nexport { IMapLineProperties, IMapLineEvents, IMapLineAdapters, MapLine } from \"./.internal/charts/map/MapLine\";\nexport { IMapSplineProperties, IMapSplineEvents, IMapSplineAdapters, MapSpline } from \"./.internal/charts/map/MapSpline\";\nexport { IMapArcProperties, IMapArcEvents, IMapArcAdapters, MapArc } from \"./.internal/charts/map/MapArc\";\nexport { MapPolygonSeriesDataItem, IMapPolygonSeriesDataFields, IMapPolygonSeriesProperties, IMapPolygonSeriesEvents, IMapPolygonSeriesAdapters, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\nexport { MapLineSeriesDataItem, IMapLineSeriesDataFields, IMapLineSeriesProperties, IMapLineSeriesEvents, IMapLineSeriesAdapters, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\nexport { MapSplineSeriesDataItem, IMapSplineSeriesDataFields, IMapSplineSeriesProperties, IMapSplineSeriesEvents, IMapSplineSeriesAdapters, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\nexport { MapImageSeriesDataItem, IMapImageSeriesDataFields, IMapImageSeriesProperties, IMapImageSeriesEvents, IMapImageSeriesAdapters, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\nexport { MapArcSeriesDataItem, IMapArcSeriesDataFields, IMapArcSeriesProperties, IMapArcSeriesEvents, IMapArcSeriesAdapters, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo } from \"./.internal/charts/map/MapUtils\";\nexport { IZoomControlProperties, IZoomControlEvents, IZoomControlAdapters, ZoomControl } from \"./.internal/charts/map/ZoomControl\";\nexport { ISmallMapProperties, ISmallMapEvents, ISmallMapAdapters, SmallMap } from \"./.internal/charts/map/SmallMap\";\n\n/**\n * Elements: projections\n */\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\nimport * as projections from \"./.internal/charts/map/projections\";\nexport { projections };\nimport * as geo from \"./.internal/charts/map/Geo\";\nexport { geo };\n\n\n\n// WEBPACK FOOTER //\n// ../../src/maps.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\nimport { Paper } from \"../../core/rendering/Paper\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n *\r\n * @type {string}\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tlineString?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLineString?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLineString?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLineString?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n *\r\n * @type {IMapPolygonDataObject | IMapLineDataObject}\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t *\r\n\t * @type {Projection}\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\tmaxPanOut?: number;\r\n\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IMapChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapChartProperties}\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapChartEvents}\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t * @type {number}\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t *\r\n\t * @type {ZoomControl}\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t *\r\n\t * @type {SmallMap}\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t * @type {number}\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {MapSeries}\r\n\t */\r\n\tpublic _seriesType: MapSeries;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t *\r\n\t * @type {Animation}\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _zoomGeoPointReal: IGeoPoint;\r\n\r\n\tprotected _centerGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.deltaLongitude = 0;\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t// so that the map would render in a hidden div too\r\n\t\tthis.minWidth = 10;\r\n\t\tthis.minHeight = 10;\r\n\r\n\t\tthis.events.once(\"inited\", this.handleAllInited, this, false);\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.draggable = true;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this, false);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this, false);\r\n\t\tseriesContainer.events.on(\"drag\", this.handleDrag, this, false);\r\n\t\tseriesContainer.zIndex = 0;\r\n\t\tseriesContainer.background.fillOpacity = 0;\r\n\r\n\t\t// Set up events\r\n\t\t//this.events.on(\"validated\", this.updateExtremes, this);\r\n\t\tthis.events.on(\"datavalidated\", this.updateExtremes, this, false);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.parent = this;\r\n\t\tchartContainer.isMeasured = false;\r\n\t\tchartContainer.zIndex = -1;\r\n\r\n\t\tthis._disposers.push(seriesContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tif (this._mapAnimation) {\r\n\t\t\t\t\tthis._mapAnimation.stop();\r\n\t\t\t\t}\r\n\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\tthis.zoomToGeoPoint(this._zoomGeoPointReal, this.zoomLevel, true, 0);\r\n\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this, false);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\tprotected handleAllInited() {\r\n\t\tlet inited = true;\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (!series.inited) {\r\n\t\t\t\tinited = false;\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (inited) {\r\n\t\t\tthis.updateExtremes();\r\n\t\t\tthis.goHome(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tregistry.events.once(\"exitframe\", this.handleAllInited, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore\r\n\t */\r\n\tprotected handleDrag() {\r\n\t\t// not good doing it with adapters.\r\n\t\tlet ww = this.seriesWidth * this.zoomLevel * this.scaleRatio;\r\n\t\tlet hh = this.seriesHeight * this.zoomLevel * this.scaleRatio;\r\n\t\tlet x = this.seriesContainer.pixelX;\r\n\t\tlet y = this.seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww / 2, -ww * (maxPanOut - 0.5));\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut + ww / 2, this.maxWidth + ww * (maxPanOut - 0.5));\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh / 2, -hh * (maxPanOut - 0.5));\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut + hh / 2, this.maxHeight + hh * (maxPanOut - 0.5));\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tthis.seriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]}  event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param {\"zoom\" | \"none\"} mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return { \"zoom\" | \"none\"}  mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Eckert6\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * Orthographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Projection}  projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tprojection.deltaLongitude = this.deltaLongitude;\r\n\t\tif (this.setPropertyValue(\"projection\", projection)) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Projection} Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tlet pWest = this.west;\r\n\t\tlet pEast = this.east;\r\n\t\tlet pNorth = this.north;\r\n\t\tlet pSouth = this.south;\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\tlet chartContainer: Container = this.chartContainer;\r\n\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif ((this.west > series.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = series.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < series.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = series.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < series.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = series.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > series.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = series.south;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif ($type.isNumber(this.east) && $type.isNumber(this.north)) {\r\n\t\t\t// must reset\r\n\t\t\tthis.projection.centerPoint = { x: 0, y: 0 };\r\n\t\t\tthis.projection.scale = 1;\r\n\r\n\t\t\t// temporary setting deltaLongitude to 0 in order to measure w/h correctly\r\n\t\t\tlet deltaLongitude = this.projection.deltaLongitude;\r\n\t\t\tthis.projection.deltaLongitude = 0;\r\n\r\n\t\t\tlet northPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet southPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.south });\r\n\r\n\t\t\tlet westPoint: IPoint = this.projection.convert({ longitude: this.west, latitude: 0 });\r\n\t\t\tlet eastPoint: IPoint = this.projection.convert({ longitude: this.east, latitude: 0 });\r\n\r\n\t\t\tthis.projection.deltaLongitude = deltaLongitude;\r\n\r\n\t\t\tthis.projection.centerPoint = { x: westPoint.x + (eastPoint.x - westPoint.x) / 2, y: northPoint.y + (southPoint.y - northPoint.y) / 2 };\r\n\r\n\t\t\tlet scaleRatio: number;\r\n\r\n\t\t\tlet seriesWidth = eastPoint.x - westPoint.x;\r\n\t\t\tlet seriesHeight = southPoint.y - northPoint.y;\r\n\r\n\t\t\tlet vScale: number = chartContainer.innerWidth / seriesWidth;\r\n\t\t\tlet hScale: number = chartContainer.innerHeight / seriesHeight;\r\n\r\n\t\t\tif (vScale > hScale) {\r\n\t\t\t\tscaleRatio = hScale;\r\n\t\t\t} else {\r\n\t\t\t\tscaleRatio = vScale;\r\n\t\t\t}\r\n\t\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\t\tscaleRatio = 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.projection.scale = scaleRatio;\r\n\r\n\t\t\tthis.seriesWidth = seriesWidth * scaleRatio;\r\n\t\t\tthis.seriesHeight = seriesHeight * scaleRatio;\r\n\r\n\t\t\tlet northPoint2: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet westPoint2: IPoint = this.projection.convert({ longitude: this.west - this.deltaLongitude, latitude: 0 });\r\n\r\n\t\t\tthis._centerGeoPoint = this.projection.invert({ x: westPoint2.x + this.seriesWidth / 2, y: northPoint2.y + this.seriesHeight / 2 });\r\n\r\n\t\t\t//this.seriesContainer.width = this.seriesWidth; // not good, doesn't resize\r\n\t\t\t//this.seriesContainer.height = this.seriesHeight; // not good, doesn't resize\r\n\t\t\tthis.seriesContainer.definedBBox = { x: westPoint2.x, y: northPoint2.y, width: this.seriesWidth, height: this.seriesHeight };\r\n\r\n\t\t\tthis.updateScaleRatio();\r\n\r\n\t\t\tlet seriesContainer: Container = this.seriesContainer;\r\n\r\n\t\t\tseriesContainer.x = chartContainer.pixelWidth / 2;\r\n\t\t\tseriesContainer.y = chartContainer.pixelHeight / 2;\r\n\r\n\t\t\tif (pWest != this.west || pEast != this.east || pNorth != this.north || pSouth != this.south) {\r\n\t\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t\tseries.invalidate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected updateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param  {IGeoPoint}  point      Center coordinate\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\r\n\t\tif (!point) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._zoomGeoPointReal = point;\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = {\r\n\t\t\t\tx: this.maxWidth / 2,\r\n\t\t\t\ty: this.maxHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\",\r\n\t\t\t\tto: svgPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio - this.pixelPaddingLeft\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\",\r\n\t\t\t\tto: svgPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio - this.pixelPaddingTop\r\n\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\tthis._disposers.push(this._mapAnimation.events.on(\"animationended\", () => {\r\n\t\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t\t}))\r\n\r\n\t\tthis.seriesContainer.validatePosition();\r\n\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param  {MapObject}  mapObject  Target map object\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\tif ($type.isNumber(zoomLevel)) {\r\n\t\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.zoomToRectangle(dataItem.north, dataItem.east, dataItem.south, dataItem.west, null, center, duration);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param  {number}     north     Latitude of the North-most boundary\r\n\t * @param  {number}     east      Longitude of the East-most boundary\r\n\t * @param  {number}     south     Latitude of the South-most boundary\r\n\t * @param  {number}     west      Longitude of the West-most boundary\r\n\t * @param  {number}     level     Adjust zoom level\r\n\t * @param  {boolean}    center    Center on the given coordinate?\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param {IPoint}  shift     Vertical and horizontal shift\r\n\t * @param {number}  duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return {IGeoPoint} Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.svgPointToGeo({\r\n\t\t\tx: this.pixelWidth / 2,\r\n\t\t\ty: this.pixelHeight / 2\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {SmallMap}  smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {SmallMap} Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {ZoomControl}  zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ZoomControl} Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return {MapSeries} Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @param {number}  value  Map center shift\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Map center shift\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max pan out\r\n\t *\r\n\t * @param {number} Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param {IGeoPoint}  value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param {number}  value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t */\r\n\tprotected invalidateProjection() {\r\n\t\tthis.updateExtremes();\r\n\t\t//\t\tthis.projection.deltaLatitude = this.deltaLatitude;\r\n\t\tthis.projection.deltaLongitude = this.deltaLongitude;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n * This function is used to sort element's JSON config properties, so that\r\n * some properties that absolutely need to be processed last, can be put at\r\n * the end.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  a  Element 1\r\n * @param  {string}  b  Element 2\r\n * @return {number}     Sorting number\r\n */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic get centerGeoPoint(): IGeoPoint {\r\n\t\treturn this._centerGeoPoint;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif (homeGeoPoint) {\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to use to draw elements.\r\n\t * @ignore\r\n\t * @param {Paper} paper Paper\r\n\t * @return {boolean} true if paper was changed, false, if it's the same\r\n\t */\r\n\tpublic setPaper(paper: Paper): boolean {\r\n\t\tif (this.svgContainer) {\r\n\t\t\tthis.svgContainer.hideOverflow = true;\r\n\t\t}\r\n\r\n\t\treturn super.setPaper(paper);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @type {MapPolygon}\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {number[][][][]}\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][][]}\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapPolygon} Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(mapPolygon);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo([polygon]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo(multiPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param {IGeoPoint[][]}  geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.updateAreaExtremes(multiGeoPolygon);\r\n\t\tthis.mapPolygon.multiGeoPolygon = this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateAreaExtremes(multiGeoPolygon: IGeoPoint[][][]): void {\r\n\t\tfor (let i = 0, len = multiGeoPolygon.length; i < len; i++) {\r\n\t\t\tlet geoPolygon: IGeoPoint[][] = multiGeoPolygon[i];\r\n\t\t\tlet surface: IGeoPoint[] = geoPolygon[0];\r\n\t\t\tthis.updateExtremes(surface);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapPolygonSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapPolygonSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapPolygonSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.parsingStepDuration = 250; // to avoid some extra redrawing\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapPolygonSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc(){\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapPolygons.clear();\r\n\t\t}\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\r\n\r\n\t\t\tif(this.geodata){\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// if data is parsed in chunks, polygon list is corrupted, fix it here\r\n\t\t// !important this should go after super!\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapPolygons.moveValue(dataItem.mapPolygon);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\t\t\t\r\n\t\t\tmapPolygon.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapPolygon>} Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param {string} polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapSplineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSplineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSplineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSplineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapSpline} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @type {MapImage}\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number[]}\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t *\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return {MapImage} Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number[]} point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis.geoPoint = $mapUtils.pointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param {IGeoPoint} geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.updateExtremes([this._geoPoint]);\r\n\r\n\t\tthis.mapImage.latitude = this._geoPoint.latitude;\r\n\t\tthis.mapImage.longitude = this._geoPoint.longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapImageSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapImageSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapImageSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapImageSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiPoint\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet mapImage = dataItem.mapImage;\r\n\t\t\tthis.mapImages.moveValue(mapImage);\r\n\t\t\tif($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)){\r\n\t\t\t\tdataItem.geoPoint = {latitude:mapImage.latitude, longitude:mapImage.longitude}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapImage>} Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapArcSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapArcSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapArcSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapArcSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapArcSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapArc} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","export { Mercator } from \"./projections/Mercator\";\nexport { Miller } from \"./projections/Miller\";\nexport { Eckert6 } from \"./projections/Eckert6\";\nexport { Orthographic } from \"./projections/Orthographic\";\nexport { Projection } from \"./projections/Projection\";\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/projections.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude in radians\r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn {\r\n\t\t\tlongitude: x,\r\n\t\t\tlatitude: 2 * Math.atan(Math.exp(y)) - Math.PI / 2\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn {\r\n\t\t\tx: lambda,\r\n\t\t\ty: Math.log(Math.tan((Math.PI / 2 + phi) / 2))\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n * \n * ```\n * Copyright 2017 Mike Bostock\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, \n *    this list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice, \n *    this list of conditions and the following disclaimer in the documentation \n *    and/or other materials provided with the distribution.\n * \n * 3. Neither the name of the copyright holder nor the names of its \n *    contributors may be used to endorse or promote products derived from this \n *    software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\nimport { IPoint } from \"../../../core/defs/IPoint\";\nimport { registry } from \"../../../core/Registry\";\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\n\t/**\n\t * Converts screen coordinates to latitude/longitude.\n\t * \n\t * @param  {number}     x  X\n\t * @param  {number}     y  Y\n\t * @return {IGeoPoint}     Geographical coordinates in radians\n\t */\n\tpublic unproject(x: number, y: number): IGeoPoint {\n\t\treturn {\n\t\t\tlongitude: x,\n\t\t\tlatitude: 2.5 * Math.atan(Math.exp(0.8 * y)) - 0.625 * Math.PI\n\t\t};\n\t}\n\n\t/**\n\t * Converts geographical coordinates to screen coordinates.\n\t * \n\t * @param  {number}  lambda  Lambda parameter\n\t * @param  {number}  phi     Phi parameter\n\t * @return {IPoint}          Screen coordinates\n\t */\n\tpublic project(lambda: number, phi: number): IPoint {\n\t\treturn {\n\t\t\tx: lambda,\n\t\t\ty: 1.25 * Math.log(Math.tan(Math.PI / 4 + 0.4 * phi))\n\t\t};\n\t}\n\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n * \n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude.\r\n\t * \r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates in radians\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\tlet j = 1 + Math.PI / 2,\r\n\t\t\tk = Math.sqrt(j / 2);\r\n\t\treturn {\r\n\t\t\tlongitude: x * 2 * k / (1 + Math.cos(y *= k)),\r\n\t\t\tlatitude: Math.asin((y + Math.sin(y)) / j)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\tlet k = (1 + Math.PI / 2) * Math.sin(phi);\r\n\t\tfor (let i = 0, delta = Infinity; i < 10 && Math.abs(delta) > 0.00001; i++) {\r\n\t\t\tphi -= delta = (phi + Math.sin(phi) - k) / (1 + Math.cos(phi));\r\n\t\t}\r\n\t\tk = Math.sqrt(2 + Math.PI);\r\n\t\treturn {\r\n\t\t\tx: lambda * (1 + Math.cos(phi)) / k,\r\n\t\t\ty: 2 * phi / k\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0, len = clippedArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\t//let hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet len = surface.length;\r\n\r\n\t\t\t\tlet prevPoint = surface[len - 1];\r\n\r\n\t\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif ($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)) {\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints: IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif (stepCount > 1) {\r\n\t\t\t\t\t\t\tfor (let s = 1; s < stepCount; s++) {\r\n\t\t\t\t\t\t\t\textraPoints.push({ longitude: prevPoint.longitude, latitude: prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s })\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tpublic centerPoint: IPoint = { x: 0, y: 0 };\r\n\r\n\tpublic scale: number = 1;\r\n\r\n\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t}\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t}\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tif (segment) {\r\n\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\r\n\t\t\t\tif (this.deltaLongitude != 0) {\r\n\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedLine;\r\n\t}\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet convertedPoints: IPoint[][][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\r\n\t\t\t\tfor (let s = 0, slen = surface.length; s < slen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\r\n\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t}\r\n\r\n\t\t\tif (hole) {\r\n\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\tfor (let s = 0, hlen = hole.length; s < hlen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\r\n\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t}\r\n\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\tfor (let s = 0, slen = segment.length; s < slen; s++) {\r\n\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\r\n\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t}\r\n\r\n\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param  {IGeoPoint} geoPoint Geo point (lat/long)\r\n\t * @return {IPoint}             Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param  {IPoint}    point Screen point (x/y)\r\n\t * @return {IGeoPoint}       Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\r\n\t\treturn geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number} lambda [description]\r\n\t * @param  {number} phi    [description]\r\n\t * @return {IPoint}        X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: lambda, y: phi };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number}    x X coordinate\r\n\t * @param  {number}    y Y coordinate\r\n\t * @return {IGeoPoint}   Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn { longitude: x, latitude: y };\r\n\t}\r\n\r\n\r\n\trotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tunrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\r\n\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\r\n\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = segment;\r\n\t\t\tsegment = [];\r\n\t\t\ts = inputList[0];\r\n\t\t\tfor (let i = 0, len = inputList.length; i < len; i++) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\r\n\t\treturn [segment];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//@todo add credits to roseta code\r\n\t//@todo: someday make it better\r\n\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\r\n\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar outputList = subjectPolygon;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = outputList;\r\n\t\t\toutputList = [];\r\n\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\t\t\tfor (let i in inputList) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t}\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\t\treturn outputList;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number) {\r\n\t\tvar phi1 = pointA.latitude * $math.RADIANS;\r\n\t\tlet lambda1 = pointA.longitude * $math.RADIANS;\r\n\r\n\t\tlet phi2 = pointB.latitude * $math.RADIANS;\r\n\t\tlet lambda2 = pointB.longitude * $math.RADIANS;\r\n\r\n\t\tvar sinPhi1 = Math.sin(phi1);\r\n\t\tlet cosPhi1 = Math.cos(phi1);\r\n\t\tlet sinLambda1 = Math.sin(lambda1);\r\n\t\tlet cosLambda1 = Math.cos(lambda1);\r\n\t\tvar sinPhi2 = Math.sin(phi2);\r\n\t\tlet cosPhi2 = Math.cos(phi2);\r\n\t\tlet sinLambda2 = Math.sin(lambda2);\r\n\t\tlet cosLambda2 = Math.cos(lambda2);\r\n\r\n\t\t// distance between points\r\n\t\tvar deltaPhi = phi2 - phi1;\r\n\t\tvar deltaLambda = lambda2 - lambda1;\r\n\t\tvar a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\t\tvar delta = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n\t\tvar A = Math.sin((1 - position) * delta) / Math.sin(delta);\r\n\t\tvar B = Math.sin(position * delta) / Math.sin(delta);\r\n\r\n\t\tvar x = A * cosPhi1 * cosLambda1 + B * cosPhi2 * cosLambda2;\r\n\t\tvar y = A * cosPhi1 * sinLambda1 + B * cosPhi2 * sinLambda2;\r\n\t\tvar z = A * sinPhi1 + B * sinPhi2;\r\n\r\n\t\tvar phi3 = Math.atan2(z, Math.sqrt(x * x + y * y));\r\n\t\tvar lambda3 = Math.atan2(y, x);\r\n\r\n\t\treturn { latitude: phi3 * $math.DEGREES, longitude: lambda3 * $math.DEGREES };\r\n\t};\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts"],"sourceRoot":""}