{"version":3,"sources":["webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/MapSeries.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/SmallMap.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/ZoomControl.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/core/responsive/ResponsiveDefaults.ts"],"names":["__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","__webpack_require__","MapSeriesDataItem","_super","_this","call","this","className","values","value","applyTheme","__extends","Object","defineProperty","prototype","setValue","updateExtremes","geoPoints","s","length","longitude","latitude","west","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","east","north","south","__WEBPACK_IMPORTED_MODULE_0__series_Series__","MapSeries","isMeasured","minColor","getFor","nonScalingStroke","dataFields","createDataItem","validateData","__WEBPACK_IMPORTED_MODULE_2__core_utils_Iterator__","dataItems","iterator","dataItem","chart","validate","minValue","_prevMin","maxValue","_prevMax","dispatchImmediately","checkInclude","includes","excludes","id","indexOf","getPropertyValue","setPropertyValue","invalidateData","max","_maxValue","high","min","_minValue","low","processIncExc","handleObjectAdded","event","mapObject","newValue","parent","series","__WEBPACK_IMPORTED_MODULE_1__core_System__","registeredClasses","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","SmallMap","_chart","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","align","valign","percentHeight","percentWidth","margin","interfaceColors","background","fillOpacity","fill","events","on","moveToPosition","updateMapSize","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__MapSeries__","processSeries","seriesContainer","createChild","__WEBPACK_IMPORTED_MODULE_0__core_Container__","rectangle","__WEBPACK_IMPORTED_MODULE_1__core_elements_Rectangle__","stroke","strokeWidth","strokeOpacity","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","verticalCenter","horizontalCenter","svgPoint","rectPoint","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","zoomLevel","scale","Math","x","pixelWidth","y","pixelHeight","geoPoint","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","width","height","ceil","pixelX","pixelY","scaleRatio","afterDraw","moveTo","maskRectangle","__WEBPACK_IMPORTED_MODULE_5__core_System__","ZoomControl","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","layout","padding","plusButton","__WEBPACK_IMPORTED_MODULE_1__core_elements_Button__","label","text","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","readerTitle","language","translate","property","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","log","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Interaction__","body","ev","topParent","hasFocused","__WEBPACK_IMPORTED_MODULE_4__core_utils_Keyboard__","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","stepCount","createBackground","__WEBPACK_IMPORTED_MODULE_2__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_System__","__WEBPACK_IMPORTED_MODULE_7__charts_map_ZoomControl__","__webpack_exports__","relevant","container","state","object","stateId","__WEBPACK_IMPORTED_MODULE_0__charts_axes_AxisRenderer__","states","create","properties","minLabelPosition","maxLabelPosition","__WEBPACK_IMPORTED_MODULE_2__charts_axes_AxisRendererY__","inside","__WEBPACK_IMPORTED_MODULE_3__charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_6__charts_map_SmallMap__","disabled","__WEBPACK_IMPORTED_MODULE_4__charts_Chart__","__WEBPACK_IMPORTED_MODULE_5__charts_Legend__","position","__WEBPACK_IMPORTED_MODULE_1__charts_axes_AxisRendererX__"],"mappings":"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","file":"responsivedefaults.js","sourcesContent":["/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IMapDataObject, IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateExtremes(geoPoints: IGeoPoint[]): void {\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((this.west > longitude) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = longitude;\r\n\t\t\t}\r\n\t\t\tif ((this.east < longitude) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < latitude) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = latitude;\r\n\t\t\t}\r\n\t\t\tif ((this.south > latitude) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n * \r\n * @type {string}\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field number in data for a numeric value of the map object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A color to apply to map objects with the lowest value.\r\n\t *\r\n\t * @type {Color}\r\n\t */\r\n\tminColor?: Color;\r\n\r\n\t/**\r\n\t * A color to apply to map objects with the highest value.\r\n\t *\r\n\t * @type {Color}\r\n\t */\r\n\tmaxColor?: Color;\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from geoJSON or not\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tgetDataFromJSON?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\texclude?: string[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents { \r\n\t/**\r\n\t * Invoked when minValue or maxValue changes\r\n\t */\r\n\tvalueextremeschanged: {};\t\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesProperties}\r\n\t */\r\n\tpublic _properties: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<MapSeries, IMapSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapSeries, IMapSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * User-defined lowest value in the series.\r\n\t * @ignore\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minValue: number;\r\n\r\n\t/**\r\n\t * User-defined heighest value in the series.\r\n\t * @ignore\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxValue: number;\r\n\r\n\t/**\r\n\t * previous min value\r\n\t * @ignore\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevMin: number;\r\n\r\n\t/**\r\n\t * previous max value\r\n\t * @ignore\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevMax: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.minColor = new InterfaceColorSet().getFor(\"background\");\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tif ((this.west > dataItem.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = dataItem.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < dataItem.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = dataItem.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < dataItem.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = dataItem.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > dataItem.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = dataItem.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.chart.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tif (this.minValue != this._prevMin || this.maxValue != this._prevMax) {\r\n\t\t\tthis.dispatchImmediately(\"valueextremeschanged\");\r\n\t\t\tthis._prevMin = this.minValue;\r\n\t\t\tthis._prevMax = this.maxValue;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param  {string[]}  includes  A list of explicitly included ids\r\n\t * @param  {string[]}  excludes  A list of explicitly excluded ids\r\n\t * @param  {string}    id        Id of the object\r\n\t * @return {boolean}             Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element, such as title, from\r\n\t * GeoJSON format?\r\n\t * @todo: review description, this is more about polygons/lines/points and not about titles. if a mapPolygonSeries doesn't have this set to true, it won't show any areas unless you pass data directly to the series\r\n\t *\r\n\t * @param {boolean}  value  Use GeoJSON data?\r\n\t */\r\n\tpublic set getDataFromJSON(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"getDataFromJSON\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use GeoJSON data?\r\n\t */\r\n\tpublic get getDataFromJSON(): boolean {\r\n\t\treturn this.getPropertyValue(\"getDataFromJSON\");\r\n\t}\r\n\r\n\t/**\r\n\t * Color for the lowest value in a heat map.\r\n\t *\r\n\t * In heat map, each object will be colored with an intermediate color\r\n\t * between `minColor` and `maxColor` based on their `value` position between\r\n\t * `min` and `max`.\r\n\t *\r\n\t * @param {Color}  value  Lowest color\r\n\t */\r\n\tpublic set minColor(value: Color) {\r\n\t\tthis.setPropertyValue(\"minColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Lowest color\r\n\t */\r\n\tpublic get minColor(): Color {\r\n\t\treturn this.getPropertyValue(\"minColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Color for the highest value in a heat map.\r\n\t *\r\n\t * In heat map, each object will be colored with an intermediate color\r\n\t * between `minColor` and `maxColor` based on their `value` position between\r\n\t * `min` and `max`.\r\n\t *\r\n\t * @param {Color}  value  Highest color\r\n\t */\r\n\tpublic set maxColor(value: Color) {\r\n\t\tthis.setPropertyValue(\"maxColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Highest color\r\n\t */\r\n\tpublic get maxColor(): Color {\r\n\t\treturn this.getPropertyValue(\"maxColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * User-defined highest value in the series.\r\n\t *\r\n\t * If not set, the map will use the highest `value` out of actual items in\r\n\t * the series.\r\n\t *\r\n\t * This is used to determine object's color in a heat map.\r\n\t *\r\n\t * @param {number}  value  Highest value\r\n\t */\r\n\tpublic set maxValue(value: number) {\r\n\t\tthis._maxValue = value;\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @return {number} Highest value\r\n\t */\r\n\tpublic get maxValue(): number {\r\n\t\tlet max = this._maxValue;\r\n\t\tif ($type.isNumber(max)) {\r\n\t\t\treturn max;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.values.value.high;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * User-defined lowest value in the series.\r\n\t *\r\n\t * If not set, the map will use the lowest `value` out of actual items in\r\n\t * the series.\r\n\t *\r\n\t * This is used to determine object's color in a heat map.\r\n\t *\r\n\t * @param {number}  value  Lowest value\r\n\t */\r\n\tpublic set minValue(value: number) {\r\n\t\tthis._minValue = value;\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Lowest value\r\n\t */\r\n\tpublic get minValue(): number {\r\n\t\tlet min = this._minValue;\r\n\r\n\t\tif ($type.isNumber(min)) {\r\n\t\t\treturn min;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.values.value.low;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param {string[]}  value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param {string[]}  value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param {IListEvents<MapObject>[\"insert\"]} event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"insert\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"MapSeries\"] = MapSeries;\r\nsystem.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/MapSeries.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { system } from \"../../core/System\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n * \r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<SmallMap, ISmallMapEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<SmallMap, ISmallMapEvents>>;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t * \r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t * \r\n\t * @type {ListTemplate<MapSeries>}\r\n\t */\r\n\tpublic series: ListTemplate<MapSeries>;\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t * \r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create series\r\n\t\tthis.series = new ListTemplate<MapSeries>(new MapSeries());\r\n\t\tthis.series.events.on(\"insert\", this.processSeries, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[MapSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t * \r\n\t * @param {IListEvents<MapSeries>[\"insert\"]} event [description]\r\n\t */\r\n\tpublic processSeries(event: IListEvents<MapSeries>[\"insert\"]): void {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t * \r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif(this.chart){\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"SmallMap\"] = SmallMap;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/SmallMap.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { interaction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n * \r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ZoomControl, IZoomControlEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ZoomControl, IZoomControlEvents>>;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t * \r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t * \r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t * \r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t * \r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\t\t\t\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\t\t\t\t\t\t\r\n\t\t\tthis.thumb.maxY = 0;\t\t\t\t\t\t\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\t\t\t\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t * \r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tinteraction.body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\t\t\t\tthumb.height = slider.pixelHeight / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = Math.log(chart.zoomLevel) / Math.LN2;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * (step + 1) / this.stepCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step:number;\r\n\t\tif(this.layout == \"vertical\"){\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight) - 1;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\t\r\n\t\t}\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"ZoomControl\"] = ZoomControl;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/ZoomControl.ts","/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters } from \"../Sprite\";\r\nimport { SpriteState } from \"../SpriteState\";\r\nimport { Container } from \"../Container\";\r\nimport { Button } from \"../elements/Button\";\r\n\r\nimport { Optional } from \"../utils/Type\";\r\n\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../../charts/axes/AxisRendererRadial\";\r\nimport { Chart } from \"../../charts/Chart\";\r\nimport { Legend } from \"../../charts/Legend\";\r\nimport { SmallMap } from \"../../charts/map/SmallMap\";\r\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\r\nexport default [\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Microcharts and sparklines\r\n\t * W<=100 || H<=100\r\n\t * @todo\r\n\t */\r\n\t\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 100) || (container.pixelHeight <= 100)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRenderer) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.minLabelPosition = 1;\r\n\t\t\t\tstate.properties.maxLabelPosition = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Narrow\r\n\t * W<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererY) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.height = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"vertical\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginLeft = 0;\r\n\t\t\t\tstate.properties.marginRight = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Short\r\n\t * H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererX) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.width = 100;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"horizontal\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginTop = 0;\r\n\t\t\t\tstate.properties.marginBottom = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"right\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Super-small\r\n\t * W<=200 && H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200) && (container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Hide legend\r\n\t\t\tif (object instanceof Legend) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t}\r\n\r\n];\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/core/responsive/ResponsiveDefaults.ts"],"sourceRoot":""}