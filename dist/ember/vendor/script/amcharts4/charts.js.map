{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/types/PercentChart.ts","webpack:///../../../../../src/.internal/charts/elements/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts"],"names":["__webpack_require__","d","__webpack_exports__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","__WEBPACK_IMPORTED_MODULE_2__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__","__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_9__core_elements_ZoomOutButton__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_11__core_Registry__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Utils__","_super","_this","call","this","className","applyTheme","_axisRendererX","_axisRendererY","maskBullets","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","Object","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","_bulletMask","prototype","applyInternalDefaults","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","updatePlotElements","series","iterator","invalidate","validateData","_parseDataFrom","dataChangeUpdate","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","axis","newValue","chart","renderer","axisLetter","observe","handleXAxisRangeChange","dataProvider","processAxis","processXAxisRemoval","oldValue","off","processYAxis","handleYAxisRangeChange","processYAxisRemoval","range","getCommonAxisRange","xAxes","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","start","end","yAxes","seriesAppeared","show","appeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","invalidateDataItems","defineProperty","_xAxes","_yAxes","handleSeriesAdded","xAxis","yAxis","undefined","fill","colors","next","stroke","e","raiseCriticalError","_cursor","cursor","removeDispose","_disposers","push","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","visible","isHiding","xPosition","yPosition","showAxisTooltip","showSeriesTooltip","x","y","hideObjectTooltip","updateLegendValue","sprites","sprite","hideTooltip","position","topLeft","bottomRight","pixelWidth","pixelHeight","seriesPoints","each","tooltip","setBounds","point","showTooltipAtPosition","sort","a","b","length","top_1","bottom","topSeriesPoints","botSeriesPoints","i","len","nextY","pointY","invalid","validate","label","pixelY","measuredHeight","pixelMarginBottom","nextHeight","pixelMarginTop","dataItems","getUpdatedRange","difference","behavior","xRange","getIndex","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","maxPanOut","panStartRange","newStart","Math","max","newEnd","min","newRange","_scrollbarX","orientation","handleXScrollbarChange","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","round","realRange","dataInvalid","diff","roundPosition","axisRange","zoom","getPropertyValue","setPropertyValue","handleWheel","svgPoint","htmlContainer","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","locationY","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dispose","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","type","Error","axisRanges","index","configOrder","createSeries","_zoomOutButton","button","copyFrom","source","registeredClasses","CategoryAxisDataItem","CategoryAxis","__WEBPACK_IMPORTED_MODULE_1__Axis__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","text","locations","category","endCategory","properties","setProperty","dataItemsByCategory","axisFieldName","_lastDataItem","createDataItem","component","createAxisBreak","validateDataRange","dataCount","startIndex","floor","endIndex","ceil","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","dataItem","__disabled","isInBreak","appendDataItem","validateDataElement","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","ghostLabel","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","indexToPosition","endPosition","isRange","axisFill","location","positionToPoint","tick","updateTickElement","grid","updateGridElement","updateLabelElement","updateFillElement","fillRule","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","adjustDifference","startLocation","endLocation","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","angle","positionToAngle","anyToPoint","anyToPosition","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","initRenderer","baseGrid","disabled","AxisLabelCircular","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","fdx","fdy","radius","isMeasured","pixelRadius","axisRadius","sign","inside","fixPoint","atan2","relativeRotation","dy","_measuredHeight","dx","_measuredWidth","labelRadius","bbox","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","XYSeriesDataItem","XYSeries","__WEBPACK_IMPORTED_MODULE_1__Series__","__WEBPACK_IMPORTED_MODULE_2__core_Sprite__","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","working","stackValue","field","getWorkingValue","getValue","getMax","_xAxis","_yAxis","mainContainer","setElement","paper","stacked","pointerOrientation","returnBulletDefaultState","_tmin","clear","_tmax","_smin","_smax","defineFields","data","_xField","_yField","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","_chart","disposeData","dataItemsX","dataItemsByAxis","dataItemsY","xAxisFieldName","xField","xOpenField","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","_xValueFields","_yValueFields","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","fillPath","path","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","oldAxis","removeKey","removeValue","set","registerSeries","invalidateData","_baseAxis","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","dispatchImmediately","_prevTooltipDataItem","toAxisPosition","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_a","bullets","_b","done","isHover","showTooltip","bullet","isDisposed","positionBullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","moveTo","bulletLocation","workingLocations","duration","animation","interpolationDuration","delay","sequencedInterpolation","sequencedInterpolationDelay","minZoomed","maxZoomed","isFinished","once","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","field_1","setCalculatedValue","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","map","hasKey","xKey","yKey","stackKeyX","stackKeyY","DateAxisDataItem","DateAxis","__WEBPACK_IMPORTED_MODULE_1__ValueAxis__","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","endDate","dates","getTime","endValue","gridIntervals","dateFormats","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minSeriesDifference","MAX_VALUE","gridInterval","_gridInterval","gridDuration","pushAll","periodCount","baseDuration","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","hasMoreThanOne","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","startTime","startTimeStr","this_1","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","markUnitChange","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","adjustedMax","endTimestamp","valueToPosition","location_1","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","time","openTime","openDate","prevSeriesTime","_prevSeriesTime","abs","differece","_baseInterval","timeInterval","breakTemplate","template","startLine","endLine","fillShape","tooltipDateFormat","dateFormat","leftCount","leftDataItem","leftDate","rightCount","rightDataItem","rightDate","getCurrentLabelFormat","ticks","labels","zoomToDates","skipRangeEvent","parse","zoomToValues","asIs","XYCursor","__WEBPACK_IMPORTED_MODULE_1__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","_lineX","_lineY","interfaceColors","selection","getFor","lineX","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","w","_positionPrecision","h","validatePosition","triggerMoveReal","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","interactionsEnabled","reset","_selection","element","LineSeriesDataItem","LineSeries","__WEBPACK_IMPORTED_MODULE_1__XYSeries__","__WEBPACK_IMPORTED_MODULE_3__core_Container__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__","__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__","__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","connect","tensionX","tensionY","segmentsContainer","previousDataItem","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegment","_workingStartIndex","sliceData","_workingEndIndex","openIndex","closeIndex","points","propertiesChanged","getFirst","contents","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","line","x2","copyToLegendMarker","hasLabels_1","children","child","clone","tooltipText","LineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","fillElement","PieSeriesDataItem","PieSeries","__WEBPACK_IMPORTED_MODULE_1__PercentSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__elements_PieTick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","radiusValue","toValue","alignLabels","startAngle","endAngle","createSlice","createTick","createLabel","initSlice","slice","defaultState","scale","handleSliceScale","handleSliceMove","states","shiftRadius","togglable","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","percent","reverse","arrangeLabels","innerRadius","pixelInnerRadius","arc","normalizedMiddleAngle","middleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","_pixelRadius","_pixelInnerRadius","getContainerBBox","Candlestick","__WEBPACK_IMPORTED_MODULE_1__Column__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__","createAssets","lowLine","highLine","AxisRendererCircular","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","pixelRadiusReal","useChartAngles","pixelPerfect","tooltipLocation","setAxis","cos","sin","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","createGrid","createFill","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","RadarChartDataItem","RadarChart","__WEBPACK_IMPORTED_MODULE_1__XYChart__","__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_4__core_Container__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__","innerRadiusModifyer","radarContainer","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","definedBBox","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_1__AxisBreak__","DateAxisBreak","__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__","startValue","Cursor","__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","_stick","trackable","clickable","interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","isLocalElement","pointer","svg","local","_stickPoint","triggerMove","isHidden","hideReal","stick","getPositions","triggerDown","setGlobalStyle","grabbing","triggerUp","getHitOption","interactions","default","cancelable","preventDefault","lockElement","RadarSeriesDataItem","RadarSeries","__WEBPACK_IMPORTED_MODULE_1__LineSeries__","connectEnds","unshift","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_1__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__","__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__","__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","gridType","axisAngle","title","gridLocation","count_1","cellEndLocation","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","updateTooltip","tooltipOrientation","bigNum","axisFullLength","ClockHand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","_axis","pin","startWidth","endWidth","hand","leftSide","rightSide","x0","x1","_pin","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","PieChart","__WEBPACK_IMPORTED_MODULE_1__PercentChart__","__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__","minHeight","minWidth","updateRadius","chartCont","chartRadius","chartPixelInnerRadius","seriesRadius","invalidateLayout","PercentChartDataItem","PercentChart","__WEBPACK_IMPORTED_MODULE_2__series_PercentSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","feedLegend","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","setLegend","PercentSeriesDataItem","PieTick","__WEBPACK_IMPORTED_MODULE_1__elements_Tick__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_label","_slice","y0","y1","y2","r","attr","PieSeries3DDataItem","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__","depthValue","depth","depthPercent","ChordNode","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__elements_Bullet__","updateRotation","hiddenState","setStateOnChildren","invalidateLinks","sum","total","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","_outgoingSorted","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","ChordLink","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__","middleLine","isTemplate","fromX","fromY","toX","toY","cp","bulletsMask","positionBullets","mAngle1","mAngle2","cpx","cpy","TreeMapSeriesDataItem","TreeMapSeries","__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_6__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__","treeMapDataItem","_dataContext","columns","configField","seriesDataItem","showReal","appear","removeChildren","column","AxisRendererX3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","getWidth","ColumnSeries3DDataItem","ColumnSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__","columnsContainer","_columnsContainer","createColumnTemplate","column3D","Column3D","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Rectangle3D__","CandlestickSeriesDataItem","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__","lowValueX","lowValueY","highValueX","highValueY","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateDataElementReal","validateCandlestick","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC","__WEBPACK_IMPORTED_MODULE_1__Candlestick__","openLine","highLowLine","closeLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","PyramidSeriesDataItem","PyramidSeries","__WEBPACK_IMPORTED_MODULE_1__FunnelSeries__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Utils__","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","_nextWidth","getNextValue","nextValue","slicesContainer","relValue","sliceLink","_pyramidHeight","_pyramidWidth","labelsContainer","ticksContainer","decorateSlice","pyramidWidth","linkWidth","linkHeight","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","sqrt","_nextY","sliceWidth","ConeColumn","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__","coneColumn","CurvedColumn","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","curvedColumn","realWidth","realHeight","realX","realY","tension","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__","__WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__","__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__","__WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__","__WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__","__WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__","__WEBPACK_IMPORTED_MODULE_6__internal_charts_types_SlicedChart__","__WEBPACK_IMPORTED_MODULE_7__internal_charts_types_FlowDiagram__","__WEBPACK_IMPORTED_MODULE_8__internal_charts_types_SankeyDiagram__","__WEBPACK_IMPORTED_MODULE_9__internal_charts_types_ChordDiagram__","__WEBPACK_IMPORTED_MODULE_10__internal_charts_types_TreeMap__","__WEBPACK_IMPORTED_MODULE_11__internal_charts_types_XYChart3D__","__WEBPACK_IMPORTED_MODULE_12__internal_charts_Chart__","__WEBPACK_IMPORTED_MODULE_13__internal_charts_Legend__","__WEBPACK_IMPORTED_MODULE_14__internal_charts_elements_HeatLegend__","__WEBPACK_IMPORTED_MODULE_15__internal_charts_series_Series__","__WEBPACK_IMPORTED_MODULE_16__internal_charts_series_XYSeries__","__WEBPACK_IMPORTED_MODULE_17__internal_charts_series_LineSeries__","__WEBPACK_IMPORTED_MODULE_18__internal_charts_series_LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_19__internal_charts_series_CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_series_OHLCSeries__","__WEBPACK_IMPORTED_MODULE_21__internal_charts_series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_22__internal_charts_series_StepLineSeries__","__WEBPACK_IMPORTED_MODULE_23__internal_charts_series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_24__internal_charts_series_RadarColumnSeries__","__WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries__","__WEBPACK_IMPORTED_MODULE_26__internal_charts_series_FunnelSeries__","__WEBPACK_IMPORTED_MODULE_27__internal_charts_series_PyramidSeries__","__WEBPACK_IMPORTED_MODULE_28__internal_charts_series_PictorialStackedSeries__","__WEBPACK_IMPORTED_MODULE_29__internal_charts_elements_PieTick__","__WEBPACK_IMPORTED_MODULE_30__internal_charts_elements_FunnelSlice__","__WEBPACK_IMPORTED_MODULE_31__internal_charts_series_PieSeries3D__","__WEBPACK_IMPORTED_MODULE_32__internal_charts_series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_33__internal_charts_series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_34__internal_charts_series_ConeSeries__","__WEBPACK_IMPORTED_MODULE_35__internal_charts_series_CurvedColumnSeries__","__WEBPACK_IMPORTED_MODULE_36__internal_charts_axes_Axis__","__WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_Grid__","__WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_AxisTick__","__WEBPACK_IMPORTED_MODULE_39__internal_charts_axes_AxisLabel__","__WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_AxisLine__","__WEBPACK_IMPORTED_MODULE_41__internal_charts_axes_AxisFill__","__WEBPACK_IMPORTED_MODULE_42__internal_charts_axes_AxisRenderer__","__WEBPACK_IMPORTED_MODULE_43__internal_charts_axes_AxisBreak__","__WEBPACK_IMPORTED_MODULE_44__internal_charts_axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_45__internal_charts_axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_46__internal_charts_axes_CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_47__internal_charts_axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_48__internal_charts_axes_DurationAxis__","__WEBPACK_IMPORTED_MODULE_49__internal_charts_axes_DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_50__internal_charts_axes_ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_51__internal_charts_axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_52__internal_charts_axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_53__internal_charts_axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_54__internal_charts_axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_55__internal_charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_56__internal_charts_axes_AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_57__internal_charts_axes_GridCircular__","__WEBPACK_IMPORTED_MODULE_58__internal_charts_axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_59__internal_charts_axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_60__internal_charts_elements_Tick__","__WEBPACK_IMPORTED_MODULE_61__internal_charts_elements_Bullet__","__WEBPACK_IMPORTED_MODULE_62__internal_charts_elements_LabelBullet__","__WEBPACK_IMPORTED_MODULE_63__internal_charts_elements_CircleBullet__","__WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_65__internal_charts_elements_ClockHand__","__WEBPACK_IMPORTED_MODULE_66__internal_charts_elements_FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_67__internal_charts_elements_FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_68__internal_charts_elements_SankeyNode__","__WEBPACK_IMPORTED_MODULE_69__internal_charts_elements_SankeyLink__","__WEBPACK_IMPORTED_MODULE_70__internal_charts_elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_71__internal_charts_elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_elements_NavigationBar__","__WEBPACK_IMPORTED_MODULE_73__internal_charts_elements_Column__","__WEBPACK_IMPORTED_MODULE_74__internal_charts_elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_75__internal_charts_elements_OHLC__","__WEBPACK_IMPORTED_MODULE_76__internal_charts_elements_RadarColumn__","__WEBPACK_IMPORTED_MODULE_77__internal_charts_elements_Column3D__","__WEBPACK_IMPORTED_MODULE_78__internal_charts_elements_ConeColumn__","__WEBPACK_IMPORTED_MODULE_79__internal_charts_elements_CurvedColumn__","__WEBPACK_IMPORTED_MODULE_80__internal_charts_cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_81__internal_charts_cursors_Cursor__","__WEBPACK_IMPORTED_MODULE_82__internal_charts_cursors_RadarCursor__","GaugeChartDataItem","GaugeChart","__WEBPACK_IMPORTED_MODULE_1__RadarChart__","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","hands","processHand","PieChart3DDataItem","PieChart3D","__WEBPACK_IMPORTED_MODULE_1__PieChart__","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__","invalidateDataUsers","SlicedChartDataItem","SlicedChart","ChordDiagramDataItem","ChordDiagram","__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__","__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","nodePadding","chordContainer","nodesContainer","newTotal","_sorted","strNode","node","getNodeValue","minNodeSize","links","createNode","createLink","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_1__Line__","__WEBPACK_IMPORTED_MODULE_2__utils_Color__","__WEBPACK_IMPORTED_MODULE_3__rendering_Path__","__WEBPACK_IMPORTED_MODULE_4__utils_Math__","__WEBPACK_IMPORTED_MODULE_5__utils_Type__","p1","p2","point1","point2","TreeMapDataItem","TreeMap","__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__","rows","hasChildren","level","color","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","axisFills","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","toggleBullets","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","dataUsers","cursorOverStyle","zoomToSeriesDataItem","currentlyZoomed","rangeChangeAnimation","binaryTree","dice","sliceDice","validateLayout","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","i0","i1","row","handleDataItemValueChange","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_5__series_ColumnSeries3D__","fixLayout","fixColumns","clustered","depthIndex","s","i_1","OHLCSeriesDataItem","OHLCSeries","__WEBPACK_IMPORTED_MODULE_1__CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_3__elements_OHLC__","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesDataItem","StepLineSeries","__WEBPACK_IMPORTED_MODULE_2__StepLineSeriesSegment__","noRisers","prevPoint","point0","vertical","StepLineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__LineSeriesSegment__","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","addSprite","setColumnStates","disableUnusedColumns","PictorialStackedSeriesDataItem","PictorialStackedSeries","__WEBPACK_IMPORTED_MODULE_1__PyramidSeries__","resizeMask","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","hs","expandDistance","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__","CurvedColumnSeriesDataItem","CurvedColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_CurvedColumn__","DurationAxisDataItem","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet","__WEBPACK_IMPORTED_MODULE_1__Bullet__","circle","XYChartScrollbar","__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__","__WEBPACK_IMPORTED_MODULE_5__types_XYChart__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__","__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__","scrollbarChart","margin","_scrollbarChart","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","rangeChangeDuration","id","transitionDuration","zoomOutAxes","updateByOrientation","handleDataChanged","updateThumb","NavigationBarDataItem","NavigationBar","__WEBPACK_IMPORTED_MODULE_1__core_Component__","__WEBPACK_IMPORTED_MODULE_2__core_DataItem__","__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__","textLink","paddingTop","paddingBottom","_linksIterator","triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","ColumnSeriesDataItem","ColumnSeries","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_9__elements_Column__","__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Disposer__","_column","setColumn","_rangesColumns","_startLocation","_endLocation","simplifiedProcessing","baseAxisSeries","clusterCount","cellStartLocation","l","t","percentHeight","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","virtualParent","itemWidth","itemHeight","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","isInTransition","itemsFocusable","role","focusable","itemReaderText","ev","populateString","_columns","legendDataItem","fromOpenState_1","fromPreviousState_1"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t// commented, because series does this.\r\n\t\t\t//$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t//$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processXAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processYAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", (event) => {\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.processXAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.processYAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t}\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0, len = topSeriesPoints.length; i < len; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, locationX);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, locationX);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, locationY);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, locationY);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"} mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"}  Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif(this.axisLength <= 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif(!dataItem.isRange || label.text == undefined){\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx:number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy:number = 0;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param {number} value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * returns label radius in pixels\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.fdx = this.dx;\t\t\t\r\n\t\tthis.fdy = this.dy;\t\t\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t})\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\t\tthis.appeared = false;\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.dataChangeUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (!this._xAxis.get()) {\r\n\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.xAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (!this._yAxis.get()) {\r\n\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.yAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem && dataItem.visible) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\t\tbullet.isHover = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tif (!bullet.isDisposed()) {\r\n\t\t\t\t\tbullet.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanimation = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isFinished() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tlet hasMoreThanOne = false;\r\n\r\n\t\tif (this.chart.data.length > 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.data.length > 1) {\r\n\t\t\t\t\thasMoreThanOne = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (!hasMoreThanOne) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._prevSeriesTime = time;\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem) {\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\r\n\t\t\twhile (leftDate.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t\tif (leftCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (rightDate.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t\tif (rightCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif(source[\"_baseInterval\"]){\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentProperties } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\t \r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment:LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<this[\"_segment\"]>}\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif(dataItem && dataItem.segment){\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(this._workingStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/** \r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/** \r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param  {Slice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (Math.abs(this.startAngle - this.endAngle) < 0.01) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\tlet point: IPoint;\r\n\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\r\n\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t// right half\r\n\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering\r\n\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\t// left half\r\n\t\t\t\telse {\r\n\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\tx *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t}\r\n\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPropertyValue(\"radius\", value, true)){\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif(this._pixelRadius != value){\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif(this._pixelInnerRadius != value){\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\t\t\t\t\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif(dataItem){\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getContainerBBox(): IRectangle {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"radius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"innerRadius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.background.fillOpacity = 0.5;\r\n\t\t//this.background.fill = color(\"#dadada\");\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionObjectEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param  {number}  duration  Fade out duration (ms)\r\n\t * @return {Animation}            Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param {IPoint}                    point  Point to place cursor at\r\n\t * @param {\"hard\" | \"soft\" | \"none\"}  stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}  point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = point;\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle)) {\r\n\r\n\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\t\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\r\n\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t}\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t}\r\n\r\n\t\t\tseries.pixelRadius = radius;\r\n\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t});\r\n\r\n\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\tthis.seriesContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPropertyValue(\"radius\", value, true)){\r\n\t\t\tthis.updateRadius();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t * \r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PercentChart}\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPercentChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPercentChartProperties}\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPercentChartEvents}\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PercentSeries}\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return {PercentSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (PercentSeriesDataItem.visible && !PercentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tPercentSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tPercentSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PercentChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar r = label.pixelRadius(slice.radius);\r\n\r\n\t\t\t\tx1 = x0 + r * slice.ix;\r\n\t\t\t\ty1 = y0 + r * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = slice.radius * $math.cos(labelAngle);\r\n\t\t\tlet y = slice.radius * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\treturn dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.getValue(\"value\"), interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.showReal(duration);\r\n\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis.chart.invalidateLayout();\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t\tthis.chart.invalidateLayout();\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", 0, interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.hideReal(duration);\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\tpublic appear(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\t\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t *\r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumn3DEvents}\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]){\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCEvents}\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PyramidSeries}\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @type {\"height\" | \"area\"}\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPyramidSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPyramidSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPyramidSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPyramidSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PyramidSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PyramidSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param  {FunnelSeriesDataItem} dataItem [description]\r\n\t * @return {number}                        [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t * \r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]} dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\t\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"topWidth\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"pyramidHeight\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t * \r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"bottomWidth\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t * @type {Cone}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @type {Orientation}\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\tlet ww = this.width;\r\n\t\tlet pw = 0.8;\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from other element of the same type.\r\n\t * \r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param {number}  value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param {Orientation}  value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {Orientation} Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 317\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { SlicedChart, SlicedChartDataItem, ISlicedChartAdapters, ISlicedChartDataFields, ISlicedChartEvents, ISlicedChartProperties } from \"./.internal/charts/types/SlicedChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentProperties, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { OHLCSeriesDataItem, IOHLCSeriesDataFields, IOHLCSeriesProperties, IOHLCSeriesEvents, IOHLCSeriesAdapters, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { FunnelSeries, FunnelSeriesDataItem, IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties } from \"./.internal/charts/series/FunnelSeries\";\nexport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./.internal/charts/series/PyramidSeries\";\nexport { IPictorialStackedSeriesAdapters, IPictorialStackedSeriesDataFields, IPictorialStackedSeriesEvents, IPictorialStackedSeriesProperties, PictorialStackedSeries, PictorialStackedSeriesDataItem } from \"./.internal/charts/series/PictorialStackedSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/elements/PieTick\";\nexport { FunnelSlice, IFunnelSliceAdapters, IFunnelSliceEvents, IFunnelSliceProperties } from \"./.internal/charts/elements/FunnelSlice\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\nexport { CurvedColumnSeries, CurvedColumnSeriesDataItem, ICurvedColumnSeriesAdapters, ICurvedColumnSeriesDataFields, ICurvedColumnSeriesProperties, ICurvedColumnSeriesEvents } from \"./.internal/charts/series/CurvedColumnSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { DurationAxisDataItem, DurationAxis, IDurationAxisAdapters, IDurationAxisDataFields, IDurationAxisEvents, IDurationAxisProperties } from \"./.internal/charts/axes/DurationAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { OHLC, IOHLCAdapters, IOHLCEvents, IOHLCProperties } from \"./.internal/charts/elements/OHLC\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\nexport { CurvedColumn, ICurvedColumnAdapters, ICurvedColumnEvents, ICurvedColumnProperties } from \"./.internal/charts/elements/CurvedColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"../series/FunnelSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {SlicedChart}\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ISlicedChartDataFields}\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ISlicedChartProperties}\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISlicedChartEvents}\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {FunnelSeries}\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * A list of Chord links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<ChordLink>}\r\n\t */\r\n\tpublic links: ListTemplate<ChordLink>;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"none\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.invalidate();\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @type {TreeMapDataItem}\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed:TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.invalidateLayout, this);\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\t\t\t\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to `1` to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(){\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\t\t\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\t\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?:this[\"_dataItem\"]): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif(series.level == 1){\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t * @type {OHLC}\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {OHLCSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {OHLCSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IOHLCSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCSeriesEvents}\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {OHLCSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"noRisers\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem:RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column:RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\t// @todo use getPoint() instead of these\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\t\tif(arc > 0){\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PictorialStackedSeries}\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\tpicture?: Sprite;\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PictorialStackedSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.resizeMask, this);\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.resizeMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic resizeMask(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\tmaskSprite.validate();\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight;\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth;\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.slicesContainer.mask = maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PictorialStackedSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return {Sprite} Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param  {FunnelSlice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * CurvedColumnSeries module.\r\n * \r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CurvedColumnSeries}\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t * \r\n\t * @type {CurvedColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t *\r\n\t * @type {CurvedColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DurationAxis}\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDurationAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDurationAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDurationAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDurationAxisEvents}\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DurationAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t * \r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}      min        [description]\r\n\t * @param  {number}      max        [description]\r\n\t * @param  {number}      difference [description]\r\n\t * @param  {number}      gridCount  [description]\r\n\t * @param  {boolean}     strictMode [description]\r\n\t * @return {IMinMaxStep}            [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\tlet unit = this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param {string}  value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param {TimeUnit} timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {TimeUnit} Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this));\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", ()=>{\r\n\t\t\tseries.data = sourceSeries.data;\r\n\t\t}));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif(this.chart.data != this.scrollbarChart.data){\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <ColumnSeriesDataItem>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.index < this.startIndex || dataItem.index >= this.endIndex) {\r\n\t\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t}\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts"],"sourceRoot":""}