{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/series/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts"],"names":["__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__webpack_require__","CategoryAxisDataItem","_super","_this","call","this","className","text","locations","category","startCategory","endCategory","applyTheme","__extends","Object","defineProperty","prototype","properties","value","setProperty","__WEBPACK_IMPORTED_MODULE_0__Axis__","CategoryAxis","dataItemsByCategory","__WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__","_preBuildCount","axisFieldName","adapter","add","replace","_prebuildDisposer","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","events","on","prebuildDataItem","_lastDataItem","createDataItem","component","dataItems","length","getIndex","dataItem","__disabled","appendDataItem","validateDataElement","dispose","createAxisBreak","__WEBPACK_IMPORTED_MODULE_3__CategoryAxisBreak__","validateDataRange","dataCount","startIndex","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","Math","floor","start","endIndex","ceil","end","renderer","invalid","validate","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","iterator","series","xAxis","yAxis","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","i","isInBreak","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","b","index","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","position","indexToPosition","endPosition","isRange","axisFill","location","point","positionToPoint","tick","updateTickElement","grid","updateGridElement","label","updateLabelElement","fill","updateFillElement","fillRule","mask","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","difference","adjustDifference","cellStartLocation","cellEndLocation","breakStartIndex","breakEndIndex","max","min","categoryToPosition","categoryToPoint","angle","positionToAngle","x","y","anyToPoint","anyToPosition","zoomToCategories","zoomToIndexes","getAnyRangePath","startLocation","endLocation","startPos","endPos","getPositionRangePath","roundPosition","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","round","getPositionLabel","initRenderer","baseGrid","disabled","registeredClasses","__WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__","XYSeriesDataItem","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","fields","working","stackValue","__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Array__","field","getWorkingValue","getValue","getMax","__WEBPACK_IMPORTED_MODULE_0__Series__","XYSeries","_xAxis","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","_yAxis","isMeasured","mainContainer","__WEBPACK_IMPORTED_MODULE_1__core_Sprite__","element","paper","stacked","newStack","tooltip","pointerOrientation","applyInternalDefaults","readerTitle","language","translate","validateData","defineFields","dataFields","_xField","_yField","Error","name","uid","disable","processSeriesDataItem","enable","e","_chart","raiseCriticalError","xAxisFieldName","xField","xOpenField","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","__WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__","_xValueFields","_yValueFields","addValueField","axis","__WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__","indexOf","push","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","axisRanges","range","fillPath","attr","d","width","height","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","updateLegendValue","_showBullets","minBulletDistance","get","chart","xAxes","oldAxis","dataItemsByAxis","removeKey","removeValue","set","registerSeries","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","invalidateData","yAxes","_baseAxis","__WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","processSeriesDataItems","xAxisId","yAxisId","_smin","_smax","appeared","dispatchImmediately","_tmin","_tmax","showTooltipAtPosition","xPosition","yPosition","visible","isHiding","toAxisPosition","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_prevTooltipDataItem","type","target","showTooltip","hideTooltip","positionBullet","bullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","locationX","locationY","moveTo","bulletLocation","workingLocations","getBulletLocationY","getPropertyValue","setPropertyValue","show","duration","animation","a","delay","sequencedInterpolation","sequencedInterpolationDelay","hide","minZoomed","maxZoomed","realDuration","handleDataItemWorkingValueChange","event","axisSeries","invalidateProcessedData","field_1","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","setCalculatedValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","hasKey","len","xKey","yKey","stackKeyX","stackKeyY","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","AxisLabelCircular","padding","radius","fixPoint","axisRadius","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","atan2","sign","inside","relativeRotation","dy","measuredHeight","dx","measuredWidth","labelRadius","rotation","pixelWidth","_bbox","pixelHeight","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","__WEBPACK_IMPORTED_MODULE_0__AxisLabel__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","DateAxisDataItem","endDate","dates","getTime","endValue","__WEBPACK_IMPORTED_MODULE_0__ValueAxis__","DateAxis","gridIntervals","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","dateFormats","periodChangeDateFormats","_markUnitChange","_boldUnitChange","_baseIntervalReal","timeUnit","count","_startLocation","_endLocation","_prevSeriesTime","_minSeriesDifference","Number","MAX_VALUE","gridInterval","_gridInterval","gridDuration","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","pushAll","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","periodCount","baseDuration","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","__assign","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","dataChangeUpdate","data","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","clear","startTime","startTimeStr","this_1","undefined","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","valueToPosition","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","sameItemTime","prevSeriesTime","time","abs","differece","_baseInterval","timeInterval","invalidate","breakTemplate","template","startLine","endLine","fillShape","_tooltipDateFormat","tooltipDateFormat","getCurrentLabelFormat","ticks","__WEBPACK_IMPORTED_MODULE_1__Axis__","Start","labels","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__","XYCursor","_lineX","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_lineY","behavior","maxPanOut","interfaceColors","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","selection","createChild","shouldClone","fillOpacity","getFor","_disposers","lineX","stroke","__WEBPACK_IMPORTED_MODULE_4__core_utils_Color__","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","pixelY","w","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","_positionPrecision","h","validatePosition","handleCursorMove","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","handleCursorDown","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","pointer","fitsToBounds","updateDownPoint","selectionX","selectionY","handleCursorUp","upPoint","getRanges","startX","startY","deltaX","deltaY","xRange","yRange","endX","endY","handleXTooltipPosition","handleCursorPositionChange","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","parent","reset","_selection","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_0__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__","LineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_0__XYSeries__","LineSeries","minDistance","segments","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__LineSeriesSegment__","_segmentsIterator","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","createNewItems","connect","tensionX","tensionY","segmentsContainer","__WEBPACK_IMPORTED_MODULE_2__core_Container__","bulletsContainer","toFront","setInitialWorkingValues","previousDataItem","__WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","openSegment","_workingStartIndex","segment","sliceData","_workingEndIndex","openIndex","axisRange","closeIndex","points","propertiesChanged","getFirst","contents","__WEBPACK_IMPORTED_MODULE_12__core_utils_Object__","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","changed","propertyName","createLegendMarker","marker","disposeChildren","line","__WEBPACK_IMPORTED_MODULE_8__core_elements_Line__","copyFrom","x2","__WEBPACK_IMPORTED_MODULE_10__core_elements_Rectangle__","bullets","copyToLegendMarker","hasLabels_1","children","child","__WEBPACK_IMPORTED_MODULE_9__core_elements_Label__","clone","tooltipText","PieSeriesDataItem","radiusValue","uidAttr","slice","toValue","color","_legendDataItem","valueLabel","_tick","addSprite","_label","_slice","slices","hiddenInLegend","PieSeries","alignLabels","startAngle","endAngle","colors","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","slicesContainer","__WEBPACK_IMPORTED_MODULE_5__core_Container__","layout","ticksContainer","labelsContainer","initSlice","__WEBPACK_IMPORTED_MODULE_1__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__PieTick__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","renderingFrequency","skipFocusThreshold","defaultState","easing","__WEBPACK_IMPORTED_MODULE_10__core_utils_Ease__","states","scale","itemReaderText","sliceType","observe","handleSliceScale","handleSliceMove","shiftRadius","togglable","hiddenState","opacity","_leftItems","_rightItems","_currentStartAngle","_arcRect","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","_maxRadiusPercent","radiusValuePercent","percent","reverse","arrangeLabels","slice_1","innerRadius","arc","normalizedMiddleAngle","middleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","itemsFocusable","role","focusable","once","ev","populateString","hoverable","nextLabel","getNextLabel","bottom","nextDataItem","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","bind","source","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","AxisRendererCircular","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","pixelPerfect","tooltipLocation","setAxis","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","pixelRadius","cos","sin","PI","coordinate","positionToCoordinate","inversed","updateAxisLine","__WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__","gridInnerRadius","zIndex","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","path","pixelInnerRadius","createGrid","__WEBPACK_IMPORTED_MODULE_2__GridCircular__","createFill","__WEBPACK_IMPORTED_MODULE_1__AxisFillCircular__","createLabel","__WEBPACK_IMPORTED_MODULE_3__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__","draw","__WEBPACK_IMPORTED_MODULE_0__AxisFill__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","GridCircular","__WEBPACK_IMPORTED_MODULE_0__Grid__","RadarChartDataItem","__WEBPACK_IMPORTED_MODULE_0__XYChart__","RadarChart","_axisRendererX","__WEBPACK_IMPORTED_MODULE_7__axes_AxisRendererCircular__","_axisRendererY","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererRadial__","innerRadiusModifyer","radarContainer","plotContainer","__WEBPACK_IMPORTED_MODULE_3__core_Container__","seriesContainer","_cursorContainer","_bulletMask","__WEBPACK_IMPORTED_MODULE_4__core_elements_Circle__","processAxis","gridContainer","breakContainer","toBack","handleXAxisRangeChange","__WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__","handleYAxisRangeChange","createCursor","__WEBPACK_IMPORTED_MODULE_6__cursors_RadarCursor__","cursor","beforeDraw","radarCont","rect","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","innerRect","wr","hr","mr","maxRadius","diameter","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","_pixelInnerRadius","x0","y0","x1","y1","maxWidth","maxHeight","createSeries","__WEBPACK_IMPORTED_MODULE_2__series_RadarSeries__","updateXAxis","updateYAxis","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_0__AxisBreak__","DateAxisBreak","startValue","__WEBPACK_IMPORTED_MODULE_0__ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","Cursor","__WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__","trackable","clickable","mouseEnabled","interaction","__WEBPACK_IMPORTED_MODULE_1__core_interaction_Interaction__","body","local","getPositions","setGlobalStyle","__WEBPACK_IMPORTED_MODULE_4__core_interaction_Mouse__","grabbing","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","default","__WEBPACK_IMPORTED_MODULE_0__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","RadarSeriesDataItem","__WEBPACK_IMPORTED_MODULE_0__LineSeries__","RadarSeries","connectEnds","unshift","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","LineSeriesSegment","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","__WEBPACK_IMPORTED_MODULE_4__core_utils_Object__","fillElement","RadarCursor","truePixelRadius","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","cursorTooltipEnabled","updateLineX","updateLineY","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_0__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","gridType","axisAngle","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","title","valign","opposite","__WEBPACK_IMPORTED_MODULE_1__CategoryAxis__","gridLocation","count_1","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","__WEBPACK_IMPORTED_MODULE_2__core_elements_WavedCircle__","updateTooltip","tooltipOrientation","bigNum","axisFullLength","__WEBPACK_IMPORTED_MODULE_0__AxisRendererY__","ClockHand","_axis","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","pin","__WEBPACK_IMPORTED_MODULE_1__core_elements_Circle__","startWidth","endWidth","hand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Trapezoid__","leftSide","rightSide","_pin","removeDispose","_hand","showValue","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","__WEBPACK_IMPORTED_MODULE_0__SerialChart__","PieChart","align","updateRadius","feedLegend","chartCont","chartContainer","seriesRadius","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","legend","legendData_1","itemContainers","propertyFields","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries__","setLegend","valueLabels","pieSeriesDataItem","isHover","PieTick","__WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__","y2","__WEBPACK_IMPORTED_MODULE_0__elements_Tick__","PieSeries3DDataItem","depthValue","__WEBPACK_IMPORTED_MODULE_0__series_PieSeries__","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Slice3D__","depth","depthPercent","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__","TreeMapSeries","columns","configField","__WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__","seriesDataItem","showReal","hideReal","AxisRendererX3D","dx3D","dy3D","handle3DChanged","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__","AxisRendererY3D","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererY__","ColumnSeries3DDataItem","__WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__","ColumnSeries3D","columnsContainer","_columnsContainer","createColumnTemplate","__WEBPACK_IMPORTED_MODULE_1__elements_Column3D__","column3D","Column3D","createAssets","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Rectangle3D__","column","__WEBPACK_IMPORTED_MODULE_0__Column__","Candlestick","lowLine","__WEBPACK_IMPORTED_MODULE_1__core_elements_Line__","highLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","ConeColumn","coneColumn","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Cone__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_66__internal_charts_cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","GaugeChartDataItem","__WEBPACK_IMPORTED_MODULE_0__RadarChart__","GaugeChart","hands","__WEBPACK_IMPORTED_MODULE_1__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__elements_ClockHand__","processHand","newValue","PieChart3DDataItem","__WEBPACK_IMPORTED_MODULE_0__PieChart__","PieChart3D","invalidateDataUsers","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries3D__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Array__","TreeMapDataItem","rows","hasChildren","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","level","TreeMap","layoutAlgorithm","squarify","seriesTemplates","__WEBPACK_IMPORTED_MODULE_4__series_TreeMapSeries__","zoomable","maxLevels","currentLevel","homeText","__WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__","sorting","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","strictMinMax","xRenderer","axisFills","yRenderer","zoomOutButton","zoomToChartDataItem","_homeDataItem","isTemplate","_navigationBar","navigationBar","links","createTreeSeries","homeDataItem","_homeText","layoutItems","toggleBullets","sort","node","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","seriesAppeared","dataUsers","cursorOverStyle","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Mouse__","zoomToSeriesDataItem","rangeChangeAnimation","binaryTree","dice","sliceDice","handleDataItemValueChange","invalidateDataItems","validateRawData","sum","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_2__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_1__core_Container__","fixLayout","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","marginTop","paddingRight","scrollbarX","scrollbarY","fixColumns","__WEBPACK_IMPORTED_MODULE_4__series_ColumnSeries3D__","clustered","depthIndex","s","i_1","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateDataElementReal","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","removeChildren","cw","ch","__WEBPACK_IMPORTED_MODULE_2__elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Object__","StepLineSeriesDataItem","StepLineSeries","prevPoint","point0","point1","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","percentWidth","offset","temp","setColumnStates","sprites","disableUnusedColumns","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_1__elements_ConeColumn__","orientation","CircleBullet","circle","__WEBPACK_IMPORTED_MODULE_0__Bullet__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","XYChartScrollbar","scrollbarChart","__WEBPACK_IMPORTED_MODULE_4__types_XYChart__","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","_unselectedOverlay","background","thumbBackground","thumb","hoverState","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","rangeChangeDuration","id","interpolationDuration","transitionDuration","zoomOutAxes","__WEBPACK_IMPORTED_MODULE_7__core_rendering_filters_DesaturateFilter__","updateByOrientation","oldValue","off","handleDataChanged","dataProvider","updateThumb","__WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__","NavigationBarDataItem","__WEBPACK_IMPORTED_MODULE_1__core_DataItem__","NavigationBar","textLink","__WEBPACK_IMPORTED_MODULE_3__core_elements_TextLink__","paddingTop","paddingBottom","_linksIterator","triangle","__WEBPACK_IMPORTED_MODULE_4__core_elements_Triangle__","direction","marginLeft","marginRight","separators","activeLink","fontWeight","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","validateDataElements","getLast","separator","__WEBPACK_IMPORTED_MODULE_0__core_Component__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__","ColumnSeriesDataItem","_column","setColumn","__WEBPACK_IMPORTED_MODULE_14__core_utils_Array__","_rangesColumns","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","ColumnSeries","simplifiedProcessing","__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__","tooltipColorSource","baseAxisSeries","clusterCount","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","l","r","t","percentHeight","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Math__","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","paddingLeft","itemWidth","itemHeight","sprite","change","droppedFromOpen","setState","_dropFromOpenState","_riseFromOpenState","droppedFromPrevious","isInTransition","_columns","__WEBPACK_IMPORTED_MODULE_8__elements_Column__","_dropFromPreviousState","_riseFromPreviousState","legendDataItem","fromOpenState_1","fromPreviousState_1","__WEBPACK_IMPORTED_MODULE_9__core_elements_RoundedRectangle__","Column","applyOnClones","__WEBPACK_IMPORTED_MODULE_1__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY__","maskBullets","topAxesCont","__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","rightAxesCont","rightAxesContainer","__WEBPACK_IMPORTED_MODULE_8__core_elements_ZoomOutButton__","MAX_SAFE_INTEGER","updatePlotElements","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","_parseDataFrom","leftAxesWidth","rightAxesWidth","handleXAxisChange","handleYAxisChange","processXAxis","axisLetter","processXAxisRemoval","processYAxis","processYAxisRemoval","getCommonAxisRange","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","_dataUsers","_xAxes","_yAxes","processSeries","next","_cursor","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleHideCursor","__WEBPACK_IMPORTED_MODULE_7__cursors_XYCursor__","showAxisTooltip","showSeriesTooltip","hideObjectTooltip","updateSeriesLegend","topLeft","bottomRight","seriesPoints","tooltipHTML","setBounds","top_1","topSeriesPoints","botSeriesPoints","nextY","pointY","pixelMarginBottom","nextHeight","pixelMarginTop","getUpdatedRange","priority","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","panStartRange","newStart","newEnd","newRange","_scrollbarX","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","realRange","dataInvalid","diff","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","__WEBPACK_IMPORTED_MODULE_6__series_XYSeries__","_zoomOutButton","button","__WEBPACK_IMPORTED_MODULE_10__core_Registry__"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.startCategory = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category.\r\n\t *\r\n\t * @param {string} value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category.\r\n\t *\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * An alias to `category`.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * An alias to `category`.\r\n\t *\r\n\t * @param {string} Category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets end category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set end category.\r\n\t *\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<CategoryAxis, ICategoryAxisEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<CategoryAxis, ICategoryAxisEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * [_preBuildCount description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _preBuildCount: number = 0;\r\n\r\n\t/**\r\n\t * [_prebuildDisposer description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IDisposer}\r\n\t */\r\n\tprotected _prebuildDisposer: IDisposer;\r\n\r\n\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\t// Add adapter to strip down `#id=xxx` from categories\r\n\t\tthis.adapter.add(\"label\", (value) => {\r\n\t\t\tvalue = value.replace(/\\#id=.*$/, \"\");\r\n\t\t\treturn value;\r\n\t\t});\r\n\r\n\t\tthis._prebuildDisposer = registry.events.on(\"enterframe\", this.prebuildDataItem, this);\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [prebuildDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic prebuildDataItem(): void {\r\n\t\tif (this.dataItems.length > 0) {\r\n\t\t\tthis.dataItems.getIndex(this._preBuildCount);\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(this._preBuildCount);\r\n\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis._preBuildCount++;\r\n\r\n\t\t\tif (this._preBuildCount >= this.dataItems.length - 1) {\r\n\t\t\t\tthis._prebuildDisposer.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.ceil((endIndex - startIndex) / maxCount);\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif(this.dataItems.length <= 0){\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\t\t\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t});\r\n\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\t\tfor (let i: number = startIndex; i < endIndex; i = i + this._frequency) {\r\n\t\t\tif (i <= this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t}\r\n\t\t\t\titemIndex++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.__disabled = false;\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\tdataItem.text = dataItem.text; //@todo if this is left, kills custom data item text. this.adapter.apply(\"label\", dataItem.category);\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet cellStartLocation = this.renderer.cellStartLocation;\r\n\t\tlet cellEndLocation = this.renderer.cellEndLocation;\r\n\r\n\t\tdifference -= cellStartLocation;\r\n\t\tdifference -= (1 - cellEndLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - cellStartLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory));\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should this series start a new stack?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnewStack?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<XYSeries, IXYSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<XYSeries, IXYSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * A maske used for series.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tprotected _rectangleMask: Rectangle;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.newStack = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object, index?: number): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext, index);\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem);\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem);\r\n\r\n\t\t\tdataItem.events.enable();\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif(this.mainContainer.mask){\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tthis.updateLegendValue();\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (!this._xAxis.get()) {\r\n\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.xAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (!this._yAxis.get()) {\r\n\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.yAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecen.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationX(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series start a new stack?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Start new stack?\r\n\t */\r\n\tpublic set newStack(value: boolean) {\r\n\t\tthis.setPropertyValue(\"newStack\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Start new stack?\r\n\t */\r\n\tpublic get newStack(): boolean {\r\n\t\treturn this.getPropertyValue(\"newStack\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (!$type.isNumber(duration) && animation) {\r\n\t\t\tduration = animation.duration;\r\n\t\t}\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\r\n\t\t\t/*let realDuration: number = duration;\r\n\t\t\t// to avoid animation of non visible items\r\n\t\t\tif (i < startIndex || i > endIndex) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t}*/\r\n\r\n\t\t\tanimation = dataItem.show(duration, delay, fields);\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tif (!$type.isNumber(duration) && animation) {\r\n\t\t\tduration = animation.duration;\r\n\t\t}\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tlet realDuration: number = duration;\r\n\t\t\t// to avoid animation of non visible items\r\n\t\t\tif (i < startIndex || i > endIndex) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.hide(realDuration, delay, value, fields);\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates series appearance when working value changes.\r\n\t */\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<SeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\t\tif (!this.stacked || this.newStack) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (prevSeries.newStack || !prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n * \r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisLabelCircular, IAxisLabelCircularEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisLabelCircular, IAxisLabelCircularEvents>>;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t * \r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative rotation.\r\n\t * \r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets distance from axis circle to label in pixels.\r\n\t * \r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current setting for label distance.\r\n\t * \r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this.measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this.measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\t\t\tlet pixelWidth = this._bbox.width;\r\n\t\t\tlet pixelHeight = this._bbox.height;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t * \r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Start date.\r\n\t *\r\n\t * Used for items that span several dates, like [[DateAxisBreak]].\r\n\t * \r\n\t * @param {Date} date Start date\r\n\t */\r\n\tpublic set startDate(date: Date) {\r\n\t\tthis.date = date;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t * \r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @todo string?\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n * \r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<DateAxis, IDateAxisEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<DateAxis, IDateAxisEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * [gridIntervals description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t * \r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t * \r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDateFormat: string;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _markUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _boldUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t * \r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _startLocation: AxisItemLocation = 0;\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t * \r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _endLocation: AxisItemLocation = 1;\r\n\r\n\t/**\r\n\t * A collection of timestamps of previously processed data items. Used\r\n\t * internally to track distance between data items when processing data.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _prevSeriesTime: Dictionary<string, number> = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to alternating cells.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {function} \r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\t// @todo: will this be visible in docs?\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t * \r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tif (this.chart.data.length <= 1) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t//let dataItem = dataItemsIterator.getFirst();\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t//dataItem.visible = true;\r\n\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\t//label.invalidate();\r\n\t\t\t\t// when count == 1 this means label represents all the period between grid lines. so we center label because of that.\r\n\t\t\t\t// we don't do that through label.location because it would reset the setting\r\n\t\t\t\t/// and we do not do that to axis ranges\r\n\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\tposition = position + (endPosition - position) / 2;\r\n\t\t\t\t\tendPosition = position;\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t * \r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t * \r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t * \r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t * \r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t * \r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// this is used to automatically define baseInterval\r\n\t\tlet sameItemTime: number;\r\n\t\t// actually here we should only get dates of this axis. But it's not likely that the chart will have more than one date axis with different baseInterval.\r\n\t\t// So using this approach would mean we'll have the same baseInterval for all date axes. In case user wants different timeIntervals for different date axes, he can manually set baseInterval\r\n\t\t$object.each(dataItem.dates, (key, date) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\t//let date: Date = dataItem.dates[key];\r\n\t\t\tlet prevSeriesTime: number = this._prevSeriesTime.getKey(key);\r\n\t\t\tlet time: number = date.getTime();\r\n\t\t\t// need to check time difference betweend dates of the same data item (for example open/close. they also influence minSeriesDifference)\r\n\t\t\tif ($type.isNumber(sameItemTime)) {\r\n\t\t\t\tlet difference: number = Math.abs(time - sameItemTime);\r\n\t\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsameItemTime = time;\r\n\r\n\t\t\tlet differece: number = time - prevSeriesTime;\r\n\t\t\tif (differece > 0) {\r\n\t\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._prevSeriesTime.setKey(key, time);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t * \r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t * \r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this._startLocation != value) {\r\n\t\t\tthis._startLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this._startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t * \r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this._endLocation != value) {\r\n\t\t\tthis._endLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this._endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t * \r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t * \r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tif (this._tooltipDateFormat != value) {\r\n\t\t\tthis._tooltipDateFormat = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this._tooltipDateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this._markUnitChange != value) {\r\n\t\t\tthis._markUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this._markUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use bold for period beginning?\r\n\t */\r\n\tpublic set boldUnitChange(value: boolean) {\r\n\t\tif (this._boldUnitChange != value) {\r\n\t\t\tthis._boldUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use bold for period beginning?\r\n\t */\r\n\tpublic get boldUnitChange(): boolean {\r\n\t\treturn this._boldUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(this.positionToDate(position), this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttext = this.getPositionLabel(position);\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within base interval (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number): number {\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (period),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (period),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\tposition = this.roundPosition(position);\r\n\t\tlet date: Date = $time.add(this.positionToDate(position), this.baseInterval.timeUnit, this.baseInterval.count)\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t * \r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t * \r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.grid.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.labels.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t * \r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t * \r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n * \r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Cursor's event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher}\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<XYCursor, IXYCursorEvents>>;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t * \r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t * \r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t * \r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t * \r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t * \r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t * \r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight }) });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 }) });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.element.attr({ \"d\": $path.rectangle(w, h) });\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates position of Cursor's line(s) as pointer moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"track\"]} event Original event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionEvents[\"track\"]): IPoint {\r\n\t\tlet point = super.handleCursorMove(event);\r\n\t\tthis.updateLinePositions(point);\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn point;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Starts pointer down action, according to `behavior`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\t\t\tthis.downPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\tthis.updateLinePositions(this.downPoint); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\tif (this.fitsToBounds(this.downPoint)) {\r\n\t\t\t\tthis.updateDownPoint();\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.element.attr({ \"d\": \"\" });\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.handleCursorDown(event);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updateDownPoint() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.downPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.downPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Ends pointer down action, according to `behavior`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.handleCursorUp(event);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t * \r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = startY - currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t * \r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t * \r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t * \r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse over plot area and dragging\r\n\t * it will start zooming the chart.\r\n\t * \r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t * \r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t * \r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t * \r\n\t * @param {number} value \r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t * \r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t * \r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t * \r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t * \r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": $path.rectangle(width, this.innerHeight, -width / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": $path.rectangle(this.innerWidth, height, 0, -height / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineY.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentPropertiess } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component: LineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n * \r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<LineSeries, ILineSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<LineSeries, ILineSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t * \r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t * \r\n\t * @type {ListTemplate<LineSeriesSegment>}\r\n\t */\r\n\tpublic segments: ListTemplate<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t * \r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t * \r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(new LineSeriesSegment());\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t * \r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"], index?: number): void {\r\n\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.visible) {\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = <XYSeriesDataItem>this.dataItems.getIndex(index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(0, range);\r\n\t\t});\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tpoints.push(this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]));\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex) {\r\n\t\t\tthis.openSegment(closeIndex + 1, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t * \r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment?: LineSeriesSegment): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t//for (let propertyName in itemProperties) {\r\n\t\t\t//let value: any = itemProperties[propertyName];\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tif (segment) {\r\n\t\t\t\t\tif (segment.properties[<keyof ILineSeriesSegmentPropertiess>propertyName] != value) {\r\n\t\t\t\t\t\tsegment.setPropertyValue(<keyof ILineSeriesSegmentPropertiess>propertyName, value);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\tline.copyFrom(<any>this);\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\tfill.copyFrom(<any>this);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif(!$type.hasValue(clone.fill)){\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(!$type.hasValue(clone.stroke)){\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"./PieTick\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, ILegendItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color, iRGB, color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends SeriesDataItem implements ILegendItem<DataItem, IDataItemEvents> {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tprotected _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tprotected _tick: PieTick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t * \r\n\t * @type {LegendDataItem<DataItem, IDataItemEvents>}\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem<DataItem, IDataItemEvents>;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * \r\n\t * @type {LegendSettings}\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t * \r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t * \r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Color of the slice.\r\n\t *\r\n\t * @todo why not Color?\r\n\t * @param {string}  value  Color\r\n\t */\r\n\tpublic set color(value: string) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Color\r\n\t */\r\n\tpublic get color(): string {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t * \r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t * \r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param {LegendDataItem<DataItem, IDataItemEvents>}  value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem<DataItem, IDataItemEvents>) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tvalue.label.dataItem = this;\r\n\t\tvalue.valueLabel.dataItem = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {LegendDataItem<DataItem, IDataItemEvents>} Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem<DataItem, IDataItemEvents> {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Pie Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {PieTick} Tick element\r\n\t */\r\n\tpublic get tick(): PieTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tthis._tick = this.component.ticks.create();\r\n\t\t\tthis.addSprite(this._tick);\r\n\t\t\tthis._tick.slice = this.slice;\r\n\t\t\tthis._tick.label = this.label;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\tif (!this._label) {\r\n\t\t\tthis._label = this.component.labels.create();\r\n\t\t\tthis.addSprite(this._label);\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * A Slice element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {Slice} Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\t\t\tthis._slice = this.component.slices.create();\r\n\t\t\tthis.addSprite(this._slice);\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t * \r\n\t * @param {boolean} value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\thiddenInLegend?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t * @type {number}\r\n\t */\r\n\talignLabels?: number;\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t * \r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t * \r\n\t * @type {ColorSet}\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends ISeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n * \r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<PieSeries, IPieSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<PieSeries, IPieSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t * \r\n\t * @type {ListTemplate<Slice>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t * \r\n\t * @type {ListTemplate<PieTick>}\r\n\t */\r\n\tpublic ticks: ListTemplate<PieTick>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t * \r\n\t * @type {ListTemplate<AxisLabelCircular>}\r\n\t */\r\n\tpublic labels: ListTemplate<AxisLabelCircular>;\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tslicesContainer.layout = \"none\";\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.initSlice(Slice);\r\n\r\n\t\t// Create tick list\r\n\t\tlet tick = new PieTick();\r\n\t\ttick.isMeasured = false;\r\n\t\tthis.ticks = new ListTemplate<PieTick>(tick);\r\n\r\n\t\t// Create labels list\r\n\t\t// @todo create a labelText/labelHTML properties just like\r\n\t\t// tooltipText/tooltipHTML\r\n\t\tlet label = new AxisLabelCircular();\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.radius = 25;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t\tlabel.renderingFrequency = 2;\r\n\t\tthis.labels = new ListTemplate<AxisLabelCircular>(label);\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\t//let hiddenState = this.hiddenState;\r\n\t\t//hiddenState.properties.opacity = 1;\r\n\t\t//hiddenState.properties.endAngle = -90;\r\n\t\t//hiddenState.properties.startAngle = -90;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.easing = $ease.sinOut;\r\n\r\n\t\tlet hoverState = this.slices.template.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice}                    Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice): Slice {\r\n\t\t// Create a slice template\r\n\t\tlet slice = new sliceType();\r\n\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\t// Create slice hover state\r\n\t\tslice.states.create(\"hover\");\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\r\n\t\tlet hiddenState = slice.hiddenState;\r\n\t\thiddenState.properties.visible = true;\r\n\t\thiddenState.properties.opacity = 1;\r\n\r\n\t\t// Create slices list\r\n\t\tthis.slices = new ListTemplate<Slice>(slice);\r\n\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (Math.abs(this.startAngle - this.endAngle) < 0.01) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.radius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\tif (percent > 0) {\r\n\r\n\t\t\t\tdataItem.__disabled = false;\r\n\r\n\t\t\t\t// SLICE\r\n\t\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t\tslice.parent = this.slicesContainer;\r\n\t\t\t\tslice.radius = this.radius;\r\n\r\n\t\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.innerRadius = this.innerRadius;\r\n\t\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\t\tslice.fill = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\t\tslice.stroke = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t\t// LABEL\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tlabel.parent = this.labelsContainer;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.parent = this.ticksContainer;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet x: number = tick.length + label.radius;\r\n\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = this.radius + tick.length + label.radius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t\t// Apply accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t\tslice.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t\tslice.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply screen reader label\r\n\t\t\t\tif (slice.focusable) {\r\n\t\t\t\t\tslice.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.hoverable) {\r\n\t\t\t\t\tslice.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"][]}  dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i: number = 0; i < dataItems.length; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label: AxisLabelCircular = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (i < dataItems.length - 1) {\r\n\t\t\t\t\tlet nextLabel: AxisLabelCircular = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet bottom: number = label.pixelY + label.measuredHeight;\r\n\r\n\t\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t * \r\n\t * @param  {number}              index      Current index\r\n\t * @param  {PieSerisDataItem[]}  dataItems  Data items\r\n\t * @return {AxisLabelCircular}              Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): AxisLabelCircular {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t * \r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t * \r\n\t * @param {ColorSet}  value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ColorSet} Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}          marker    Container\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t// todo: make an easy possibility to bind visual properties\r\n\t\t\tchild.bind(\"fill\", slice);\r\n\t\t\tchild.bind(\"stroke\", slice);\r\n\t\t\tchild.bind(\"fillOpacity\", slice);\r\n\t\t\tchild.bind(\"strokeOpacity\", slice);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet location = 1;\r\n\t\tif ($type.isNumber(bullet.locationX)) {\r\n\t\t\tlocation = bullet.locationX;\r\n\t\t}\r\n\t\tif ($type.isNumber(bullet.locationY)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo({ x: slice.ix * slice.radius * slice.scale * location, y: slice.iy * slice.radius * slice.scale * location });\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: Slice = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\tlet value = a[1];\r\n\t\t\tthis.positionBullet(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tlet slice: Slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tdataItem.label.dx = slice.dx + slice.pixelX;\r\n\t\t\tdataItem.label.dy = slice.dy + slice.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PieSeries]].\r\n\t * \r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRenderer, IAxisRendererEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisRendererCircular, IAxisRendererCircularEvents>>;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.isMeasured = true;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis:Axis){\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set outer radius.\r\n\t * \r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t * \r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Sets inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set inner radius.\r\n\t * \r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t * \r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2)) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet element = this.line.element;\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.chart;\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\telement.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius) });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.isNumber(grid.radius) ? grid.radius : this.radius, this.pixelRadius);\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) }) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set start angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets end angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set end angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t * \r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t * \r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t * \r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {[type]}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n * \r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {AxisFillEventDispatcher<AMEvent<AxisFillCircular, IAxisFillCircularEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisFillCircular, IAxisFillCircularEvents>>;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.isNumber(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.element.attr({ \"d\": this.fillPath });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t * \r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current inner radius.\r\n\t * \r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t * \r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current outer radius.\r\n\t * \r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets corner radius for the fill. In pixels.\r\n\t * \r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current corner radius.\r\n\t * \r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n * \r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {GridEventDispatcher<AMEvent<GridCircular, IGridCircularEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<GridCircular, IGridCircularEvents>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t * \r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t * \r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t * \r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n * \r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<RadarChart, IRadarChartEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<RadarChart, IRadarChartEvents>>;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t * \r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t * \r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t * \r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.width = percent(100);\r\n\t\tradarContainer.height = percent(100);\r\n\t\tradarContainer.layout = \"none\";\r\n\r\n\t\tradarContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t * \r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t * \r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t * \r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t * \r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = radarCont.innerWidth / rect.width;\r\n\t\tlet hr = radarCont.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(radarCont.innerHeight, radarCont.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(radarCont.innerWidth / rect.width, radarCont.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, diameter / 2);\r\n\r\n\t\tthis._bulletMask.element.attr({ \"d\": $path.arc(startAngle, endAngle - startAngle, diameter / 2, this._pixelInnerRadius) });\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\taxis.renderer.width = diameter;\r\n\t\t\taxis.renderer.height = diameter;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\taxis.renderer.width = diameter;\r\n\t\t\taxis.renderer.height = diameter;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tlet x0 = rect.x;\r\n\t\tlet y0 = rect.y;\r\n\t\tlet x1 = rect.x + rect.width;\r\n\t\tlet y1 = rect.y + rect.height;\r\n\r\n\t\tlet point: IPoint = { x: this.seriesContainer.maxWidth / 2 - diameter / 2 * (x0 + (x1 - x0) / 2), y: this.seriesContainer.maxHeight / 2 - diameter / 2 * (y0 + (y1 - y0) / 2) };\r\n\r\n\t\tthis.radarContainer.moveTo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t * \r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t * \r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t * \r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Event disptacher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<CategoryAxisBreak, ICategoryAxisBreakEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<CategoryAxisBreak, ICategoryAxisBreakEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t * \r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t * \r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t * \r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t * \r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category or a start value.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t * \r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t * \r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n * \r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<DateAxisBreak, IDateAxisBreakEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<DateAxisBreak, IDateAxisBreakEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t * \r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t * \r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t *\r\n\t * @todo Description (check)\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t *\r\n\t * @todo Description (check)\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t *\r\n\t * @todo Description (check)\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t *\r\n\t * @todo Description (check)\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t *\r\n\t * @todo Description (check)\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Cursor's event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher}\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<Cursor, ICursorEvents>>;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.background.fillOpacity = 0.5;\r\n\t\t//this.background.fill = color(\"#dadada\");\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.mouseEnabled = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tinteraction.body.events.on(\"down\", this.handleCursorDown, this);\r\n\t\tinteraction.body.events.on(\"up\", this.handleCursorUp, this);\r\n\t\tinteraction.body.events.on(\"track\", this.handleCursorMove, this);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionEvents[\"track\"]): IPoint {\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// hide cursor if it's out of bounds\r\n\t\tif (this.fitsToBounds(local)) {\r\n\t\t\tthis.show(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\tif (!this.downPoint) {\r\n\t\t\t\tthis.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.point = local;\r\n\r\n\t\tthis.getPositions();\r\n\r\n\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tthis.upPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > 5) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n * \r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<RadarSeries, IRadarSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<RadarSeries, IRadarSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t * \r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentPropertiess extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentPropertiess { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n * \r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties: ILineSeriesSegmentPropertiess;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<LineSeriesSegment, ILineSeriesSegmentEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<LineSeriesSegment, ILineSeriesSegmentEvents>>;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.mouseEnabled = false;\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.element = this.paper.add(\"path\");\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.element = this.paper.add(\"path\");\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\tlet path: string = $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t//if(this.strokeOpacity > 0 || this.strokeSprite.strokeOpacity > 0){ // not good, range stroke is not drawn then\r\n\t\t\tthis.strokeSprite.element.attr({ \"d\": path });\r\n\t\t\t//}\r\n\r\n\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\tthis.fillSprite.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t * \r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.horizontalCenter = \"none\";\r\n\t\tlineElement.verticalCenter = \"none\";\r\n\t\tlineElement.visible = true;\r\n\t\tlineElement.fillOpacity = 0;\r\n\t\tlineElement.tooltipText = undefined;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.horizontalCenter = \"none\";\r\n\t\tfillElement.verticalCenter = \"none\";\r\n\t\tfillElement.visible = true;\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t\tfillElement.tooltipText = undefined;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n * \r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Cursor's event dispatcher\r\n\t * @type {SpriteEventDispatcher}\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<RadarCursor, IRadarCursorEvents>>;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t * \r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t * \r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor's positions when the tracked coordinates change.\r\n\t * \r\n\t * @param {ISpriteEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionEvents[\"track\"]): IPoint {\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tsuper.handleCursorMove(event);\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t * \r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle)) {\r\n\r\n\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\t\t\t\t\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\t\t\t\t\t\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t * \r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateDownPoint() { }\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t * \r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t * \r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t * \r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * Axis angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRenderer, AxisRendererEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisRendererRadial, IAxisRendererRadialEvents>>;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set outer radius.\r\n\t * \r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t * \r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Sets inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set inner radius.\r\n\t * \r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t * \r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2)) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set associated chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.element.attr({ \"d\": $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) }) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.element.attr({ \"d\": path });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set start angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets end angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set end angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set axis angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Sets the grid type for radia axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t * \r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set grid type.\r\n\t *\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n * \r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ClockHand, IClockHandEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ClockHand, IClockHandEvents>>;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t * \r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t * \r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t * \r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t * \r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t * \r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t * \r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t * \r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t * \r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t * \r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend, ILegendItem } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends ISerialChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n * \r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n * \r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n * \r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n * \r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n * \r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n * \r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n * \r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n * \r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n * \r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class PieChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<PieChart, IPieChartEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<PieChart, IPieChartEvents>>;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (radius - pixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\t\t\t// todo: set this on default state instead?\r\n\t\t\tseries.radius = pixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\tseries.innerRadius = pixelInnerRadius + seriesRadius * i;\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t});\r\n\r\n\t\tlet x0 = rect.x;\r\n\t\tlet y0 = rect.y;\r\n\t\tlet x1 = rect.x + rect.width;\r\n\t\tlet y1 = rect.y + rect.height;\r\n\r\n\r\n\t\tlet point: IPoint = { x: this.seriesContainer.maxWidth / 2 - radius * (x0 + (x1 - x0) / 2), y: this.seriesContainer.maxHeight / 2 - radius * (y0 + (y1 - y0) / 2) };\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.moveTo(point);\r\n\t\t});\r\n\r\n\t\tthis.bulletsContainer.moveTo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: ILegendItem<DataItem, IDataItemEvents>[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PieSeriesDataItem>dataItem);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t * \r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t * \r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t * \r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t * \r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t * \r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (pieSeriesDataItem.visible && !pieSeriesDataItem.isHiding) {\r\n\t\t\t\t\tpieSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tpieSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"./PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n * \r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<PieTick, IPieTickEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<PieTick, IPieTickEvents>>;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t * \r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t * \r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tx1 = x0 + label.radius * slice.ix;\r\n\t\t\t\ty1 = y0 + label.radius * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t * \r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t * \r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t * \r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n * \r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<PieSeries3D, IPieSeries3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<PieSeries3D, IPieSeries3DEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t * \r\n\t * @type {ListTemplate<Slice3D>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice3D>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice3D}                  Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice3D): Slice3D {\r\n\t\tlet slice: Slice3D = <Slice3D>super.initSlice(Slice3D);\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t * \r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t * \r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/*\r\n\t\tset startAngle(value: number) {\r\n\t\t\t// 3d pie series can start at 90 angle increments, otherwise big slices might overlap incorrectly\r\n\t\t\tvalue = $math.normalizeAngle(value);\r\n\t\t\tvalue = $math.round(value / 90) * 90;\r\n\t\r\n\t\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t\t}\r\n\t\r\n\t\tget startAngle(): number {\r\n\t\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t\t}\t\r\n\t*/\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t * \r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t * \r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n * \r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<TreeMapSeries, ITreeMapSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<TreeMapSeries, ITreeMapSeriesEvents>>;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t * \r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object, index?: number): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext, index);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t * \r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\treturn this.showReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t * \r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\treturn this.hideReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n * \r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRendererX3D, IAxisRendererX3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisRendererX3D, IAxisRendererX3DEvents>>;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.gridContainer.pixelHeight;\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.gridContainer.pixelHeight;\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set associated chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t * \r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n * \r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRendererY3D, IAxisRendererY3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisRendererY3D, IAxisRendererY3DEvents>>;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.gridContainer.pixelWidth;\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.gridContainer.pixelWidth;\r\n\t\tthis.baseGrid.element.attr({\r\n\t\t\t\"d\": $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D })\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set associated chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t * \r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n * \r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ColumnSeries3D, IColumnSeries3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ColumnSeries3D, IColumnSeries3DEvents>>;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t * \r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n * \r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<Column3D, IColumn3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<Column3D, IColumn3DEvents>>;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n * \r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<Candlestick, ICandlestickEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<Candlestick, ICandlestickEvents>>;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n * \r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<RadarColumn, IRadarColumnEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<RadarColumn, IRadarColumnEvents>>;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t * \r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t * \r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n * \r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ConeColumn, IConeColumnEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ConeColumn, IConeColumnEvents>>;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 301\n// module chunks = 4","/**\r\n * Module: gauge\r\n */\r\n\r\n/**\r\n * Elements: types\r\n */\r\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\r\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\r\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\r\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\r\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\r\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\r\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\r\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\r\n\r\n/**\r\n * Elements: charts\r\n */\r\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\r\n\r\n/**\r\n * Elements: series\r\n */\r\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\r\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\r\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\r\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\r\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\r\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\r\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\r\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\r\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\r\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\r\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\r\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\r\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\r\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\r\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\r\n\r\n/**\r\n * Elements: axes\r\n */\r\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\r\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\r\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\r\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\r\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\r\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\r\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\r\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\r\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\r\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\r\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\r\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\r\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\r\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\r\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\r\n\r\n/**\r\n * Elements: elements\r\n */\r\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\r\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\r\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\r\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\r\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\r\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\r\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\r\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\r\n\r\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\r\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\r\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\r\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\r\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\r\n\r\n\r\n/**\r\n * Elements: cursors\r\n */\r\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\r\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\r\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n * \r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<GaugeChart, IGaugeChartEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<GaugeChart, IGaugeChartEvents>>;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t * \r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"insert\", this.processHand, this);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t * \r\n\t * @param {IListEvents<ClockHand>[\"insert\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"insert\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n * \r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n * \r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n * \r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n * \r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n * \r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n * \r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n * \r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n * \r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n * \r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<PieChart3D, IPieChart3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<PieChart3D, IPieChart3DEvents>>;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t * \r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<TreeMap, ITreeMapEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<TreeMap, ITreeMapEvents>>;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * [TreeMapSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} [description]\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]> = new DictionaryTemplate<string, this[\"_seriesType\"]>(new TreeMapSeries());\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.homeText = this.language.translate(\"Home\");\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = maxX * this.pixelHeight / this.pixelWidth;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\r\n\t\tthis._tempSeries = [];\r\n\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\tseries.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.show();\r\n\r\n\t\t\t\tif (series.level > this.currentLevel + this.maxLevels - 1) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.bulletsContainer.show(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to 0 to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleDataItemValueChange(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n * \r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<XYChart3D, IXYChart3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<XYChart3D, IXYChart3DEvents>>;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t * \r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t * \r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t * \r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset. (px)\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset. (px)\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n * \r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<CandlestickSeries, ICandlestickSeriesEvents>>} Event dispatcher instance\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public events: SpriteEventDispatcher<AMEvent<CandlestickSeries, CandlestickSeriesEvents>>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * List of \"low\" line elements.\r\n\t * \r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _lowLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * List of \"high\" line elements.\r\n\t * \r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _highLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n * \r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<StepLineSeries, IStepLineSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<StepLineSeries, IStepLineSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, 0);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, 0);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, 1);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, 1);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n * \r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem:RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column:RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<RadarColumnSeries, IRadarColumnSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<RadarColumnSeries, IRadarColumnSeriesEvents>>;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t * \r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\t// @todo use getPoint() instead of these\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\t\tif(arc > 0){\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returnsan SVG path that is used as mask for the series.\r\n\t * \r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n * \r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ConeSeries, IConeSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ConeSeries, IConeSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t * \r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: -dx,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n * \r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<CircleBullet, ICircleBulletEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<CircleBullet, ICircleBulletEvents>>;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t * \r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tthis.circle = this.createChild(Circle);\r\n\t\tthis.circle.shouldClone = false;\r\n\t\tthis.circle.radius = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t * \r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n * \r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<XYChartScrollbar, IXYChartScrollbarEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<XYChartScrollbar, IXYChartScrollbarEvents>>;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t * \r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t * \r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.mouseEnabled = false;\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.element = this.paper.add(\"path\");\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.mouseEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._series.events.on(\"insert\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"remove\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list. \r\n\t * \r\n\t * @param {IListEvents<XYSeries>[\"insert\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"insert\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.events.on(\"validated\", this.zoomOutAxes, this);\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\r\n\t\tscrollbarChart.series.push(series);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t * \r\n\t * @param {IListEvents<XYSeries>[\"remove\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"remove\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t * \r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t * \r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX;\r\n\t\t\tlet y: number = thumb.pixelY;\r\n\t\t\tlet w: number = thumb.pixelWidth;\r\n\t\t\tlet h: number = thumb.pixelHeight;\r\n\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: this.pixelWidth - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: this.pixelHeight - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t * \r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n * \r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<NavigationBar, INavigationBarEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<NavigationBar, INavigationBarEvents>>;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t * \r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t * \r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t * \r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @ignore\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t * \r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <ColumnSeriesDataItem>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t * \r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n * \r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ColumnSeries, IColumnSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ColumnSeries, IColumnSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t * \r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t * \r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation. \r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || series.newStack || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this.columns.iterator(), (column) => {\r\n\t\t\tcolumn.__disabled = true;\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t * \r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<ColumnSeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(event.target);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t * \r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\t\t\t\t\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\t\t\t\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\t\t\t\t\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t}\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t * \r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t * \r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t * \r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\t\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\t\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n * \r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnProperties}\r\n\t */\r\n\tpublic _properties: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnAdapters}\r\n\t */\r\n\tpublic _adapter: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<Column, IColumnEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<Column, IColumnEvents>>;\r\n\r\n\t/**\r\n\t * column element\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", ()=>{\r\n\t\t\tif(this.layout == \"none\"){\r\n\t\t\t\tthis.layout = \"absolute\";\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tthis.column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source:this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif(this.column){\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<XYChart, IXYChartEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<XYChart, IXYChartEvents>>;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds series (graphs/plots).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartCont = this.chartContainer;\r\n\t\tchartCont.layout = \"vertical\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartCont.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartCont.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartCont.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this.cursor) {\r\n\t\t\tif (this.data.length > 0) {\r\n\t\t\t\tthis.cursor.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// reset minimums\r\n\t\tthis.leftAxesContainer.minWidth = undefined;\r\n\t\tthis.rightAxesContainer.minWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.pixelWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.pixelWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"insert\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"insert\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"remove\"]}  event  Event\r\n\t */\r\n\tpublic processXAxisRemoval(event: IListEvents<Axis>[\"remove\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"insert\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"insert\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"remove\"]}  event  Event\r\n\t */\r\n\tpublic processYAxisRemoval(event: IListEvents<Axis>[\"remove\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\taxis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\taxis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"insert\", this.processXAxis, this);\r\n\t\t\tthis._xAxes.events.on(\"remove\", this.processXAxisRemoval, this);\r\n\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"insert\", this.processYAxis, this);\r\n\t\t\tthis._yAxes.events.on(\"remove\", this.processYAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"insert\"]}  event  Event\r\n\t */\r\n\tpublic processSeries(event: IListEvents<XYSeries>[\"insert\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.processSeries(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER;\r\n\r\n\t\t\t\tif (this.data.length == 0) {\r\n\t\t\t\t\tcursor.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.tooltip.hide(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position: IPoint): void {\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: 0, y: 0 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth, y: this.plotContainer.pixelHeight }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.tooltip.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0; i < seriesPoints.length; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0; i < topSeriesPoints.length; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.pixelHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tprotected getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\txRange.priority = \"start\";\r\n\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\tyRange.priority = \"start\";\r\n\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif(yAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < yAxes.length; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(xAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < xAxes.length; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts"],"sourceRoot":""}