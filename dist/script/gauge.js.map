{"version":3,"sources":["webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/elements/ClockHand.ts","webpack:///./gauge.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/gauge.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/types/GaugeChart.ts"],"names":["__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","__webpack_require__","ClockHand","_super","_this","call","this","_axis","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","className","interfaceColors","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","fill","getFor","stroke","pin","__WEBPACK_IMPORTED_MODULE_1__core_elements_Circle__","radius","isMeasured","startWidth","endWidth","width","Object","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","height","innerRadius","hand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Trapezoid__","applyTheme","__extends","prototype","validate","pixelWidth","h","Math","max","leftSide","rightSide","axis","renderer","x0","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","pixelRadius","x1","x","y","defineProperty","_pin","removeDispose","parent","_disposers","push","_hand","getPropertyValue","value","setPropertyValue","showValue","duration","easing","_value","undefined","newAngle","positionToAngle","anyToPosition","currentAngle","rotation","rotationDirection","animate","property","to","get","set","events","on","updateValue","invalidate","chart","startAngle","zIndex","processConfig","config","map","hasKey","getKey","__WEBPACK_IMPORTED_MODULE_0__core_Container__","__WEBPACK_IMPORTED_MODULE_5__core_System__","registeredClasses","window","amcharts4","gauge","__WEBPACK_IMPORTED_MODULE_0__src_gauge__","d","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_45__internal_charts_cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","GaugeChartDataItem","__WEBPACK_IMPORTED_MODULE_0__RadarChart__","GaugeChart","endAngle","hands","__WEBPACK_IMPORTED_MODULE_1__core_utils_List__","processHand","applyInternalDefaults","readerTitle","language","translate","event","newValue","xAxes","getIndex","__WEBPACK_IMPORTED_MODULE_2__core_System__"],"mappings":";;;;;;;;;;;;;;;;;;;uJAAAA,EAAAC,EAAA,+SAgHAC,EAAA,SAAAC,GAyDC,SAAAD,IAAA,IAAAE,EAGCD,EAAAE,KAAAC,OAAOA,KAhBEF,EAAAG,MAAoC,IAAIC,EAAA,EAiBjDJ,EAAKK,UAAY,YAEjB,IAAIC,EAAkB,IAAIC,EAAA,EAE1BP,EAAKQ,KAAOF,EAAgBG,OAAO,yBACnCT,EAAKU,OAASV,EAAKQ,KAEnB,IAAIG,EAAc,IAAIC,EAAA,EACtBD,EAAIE,OAAS,EACbb,EAAKW,IAAMA,EACXX,EAAKc,YAAa,EAElBd,EAAKe,WAAa,EAClBf,EAAKgB,SAAW,EAEhBhB,EAAKiB,MAAQC,OAAAC,EAAA,EAAAD,CAAQ,KACrBlB,EAAKoB,OAASF,OAAAC,EAAA,EAAAD,CAAQ,KAEtBlB,EAAKa,OAASK,OAAAC,EAAA,EAAAD,CAAQ,KACtBlB,EAAKqB,YAAcH,OAAAC,EAAA,EAAAD,CAAQ,GAE3B,IAAII,EAAkB,IAAIC,EAAA,SAC1BvB,EAAKsB,KAAOA,EAGZtB,EAAKwB,eAkSP,OAxX+BC,EAAA3B,EAAAC,GA8FvBD,EAAA4B,UAAAC,SAAP,WACC5B,EAAA2B,UAAMC,SAAQ1B,KAAAC,MACd,IAAIoB,EAAOpB,KAAKoB,KAChBA,EAAKL,MAAQf,KAAK0B,WAClB,IAAIC,EAAYC,KAAKC,IAAI7B,KAAKa,WAAYb,KAAKc,UAK/C,GAJAM,EAAKF,OAASS,EACdP,EAAKU,SAAWd,OAAAC,EAAA,EAAAD,CAAQhB,KAAKa,WAAac,EAAI,KAC9CP,EAAKW,UAAYf,OAAAC,EAAA,EAAAD,CAAQhB,KAAKc,SAAWa,EAAI,KAEzC3B,KAAKgC,KAAM,CACd,IAAIC,EAAuDjC,KAAKgC,KAAKC,SAEjEC,EAAaC,EAAA,sBAA6BnC,KAAKmB,YAAac,EAASG,aACrEC,EAAaF,EAAA,sBAA6BnC,KAAKW,OAAQsB,EAASG,aAEpEhB,EAAKkB,EAAIJ,EACTd,EAAKmB,GAAMZ,EAAI,EAEfP,EAAKL,MAAQsB,EAAKH,IASpBlB,OAAAwB,eAAW5C,EAAA4B,UAAA,WAcX,WACC,OAAOxB,KAAKyC,UAfb,SAAehC,GACVT,KAAKyC,MACRzC,KAAK0C,cAAc1C,KAAKyC,MAErBhC,IACHT,KAAKyC,KAAOhC,EACZA,EAAIkC,OAAS3C,KACbA,KAAK4C,WAAWC,KAAKpC,qCAqBvBO,OAAAwB,eAAW5C,EAAA4B,UAAA,YAcX,WACC,OAAOxB,KAAK8C,WAfb,SAAgB1B,GACXpB,KAAK8C,OACR9C,KAAK0C,cAAc1C,KAAK8C,OAErB1B,IACHpB,KAAK8C,MAAQ1B,EACbA,EAAKuB,OAAS3C,KACdA,KAAK4C,WAAWC,KAAKzB,qCAmBvBJ,OAAAwB,eAAW5C,EAAA4B,UAAA,cAOX,WACC,OAAOxB,KAAK+C,iBAAiB,eAR9B,SAAkBC,GACjBhD,KAAKiD,iBAAiB,SAAUD,GAAO,oCAkBxChC,OAAAwB,eAAW5C,EAAA4B,UAAA,mBAOX,WACC,OAAOxB,KAAK+C,iBAAiB,oBAR9B,SAAuBC,GACtBhD,KAAKiD,iBAAiB,cAAeD,GAAO,oCAgB7ChC,OAAAwB,eAAW5C,EAAA4B,UAAA,kBAOX,WACC,OAAOxB,KAAK+C,iBAAiB,mBAR9B,SAAsBC,GACrBhD,KAAKiD,iBAAiB,aAAcD,GAAO,oCAgB5ChC,OAAAwB,eAAW5C,EAAA4B,UAAA,gBAOX,WACC,OAAOxB,KAAK+C,iBAAiB,iBAR9B,SAAoBC,GACnBhD,KAAKiD,iBAAiB,WAAYD,GAAO,oCAiB1ChC,OAAAwB,eAAW5C,EAAA4B,UAAA,yBAOX,WACC,OAAOxB,KAAK+C,iBAAiB,0BAR9B,SAA6BC,GAC5BhD,KAAKiD,iBAAiB,oBAAqBD,oCAsBrCpD,EAAA4B,UAAA0B,UAAP,SAAiBF,EAAYG,EAAmBC,GAE/C,GADApD,KAAKqD,OAASL,OACDM,GAATN,IACEtD,EAAA,SAAeyD,KACnBA,EAAW,GAGRnD,KAAKgC,MAAM,CACd,IACIuB,EADiCvD,KAAKgC,KAAKC,SACvBuB,gBAAgBxD,KAAKgC,KAAKyB,cAAcT,IAC5DU,EAAe1D,KAAK2D,SAEM,aAA1B3D,KAAK4D,mBACJL,EAAWG,IACd1D,KAAK2D,SAAWD,EAAe,KAGH,oBAA1B1D,KAAK4D,mBACJL,EAAWG,IACd1D,KAAK2D,SAAWD,EAAe,KAIjC1D,KAAK6D,SAAUC,SAAU,WAAYC,GAAIR,GAAYJ,EAAUC,KAUlEpC,OAAAwB,eAAW5C,EAAA4B,UAAA,aAOX,WACC,OAAOxB,KAAKqD,YARb,SAAiBL,GAChBhD,KAAKkD,UAAUF,oCAiBhBhC,OAAAwB,eAAW5C,EAAA4B,UAAA,YAsBX,WACC,OAAOxB,KAAKC,MAAM+D,WAvBnB,SAAgBhC,GAAhB,IAAAlC,EAAAE,KASC,GARIA,KAAKgC,MAAQA,GAChBhC,KAAKC,MAAMgE,IAAIjC,EAAM,IAAI9B,EAAA,GACxB8B,EAAKkC,OAAOC,GAAG,gBAAiB,WAAM,OAAArE,EAAKsE,gBAC3CpC,EAAKkC,OAAOC,GAAG,mBAAoB,WAAM,OAAArE,EAAKsE,gBAC9CpC,EAAKkC,OAAOC,GAAG,gBAAiB,WAAM,OAAArE,EAAKsE,gBAC3CpC,EAAKkC,OAAOC,GAAG,kBAAmB,WAAM,OAAArE,EAAKuE,kBAG3CrC,EAAM,CACT,IAAIsC,EAAgCtC,EAAKsC,MACrCA,IACHtE,KAAK2D,SAAWW,EAAMC,YAGxBvE,KAAK2C,OAASX,EAAKC,SACnBjC,KAAKwE,OAAS,mCAgBL5E,EAAA4B,UAAA4C,YAAV,WACCpE,KAAKgD,MAAQhD,KAAKgD,OASZpD,EAAA4B,UAAAiD,cAAP,SAAqBC,GAEhBA,GAGChF,EAAA,SAAegF,EAAO1C,OAAStC,EAAA,SAAegF,EAAO1C,OAAShC,KAAK2E,IAAIC,OAAOF,EAAO1C,QACxF0C,EAAO1C,KAAOhC,KAAK2E,IAAIE,OAAOH,EAAO1C,OAKvCnC,EAAA2B,UAAMiD,cAAa1E,KAAAC,KAAC0E,IAGtB9E,EAxXA,CAA+BkF,EAAA,GAgY/BC,EAAA,EAAOC,kBAA6B,UAAIpF,wIC/evCqF,OAAeC,UAAUC,MAAQC,6sdCDlCzF,EAAA0F,EAAAC,EAAA,gCAAAC,EAAA,mICAAC,EAAA7F,EAAA,iTA6CA8F,EAAA,SAAA5F,GAYC,SAAA4F,IAAA,IAAA3F,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKK,UAAY,qBACjBL,EAAKwB,eAGP,OAlBwCC,EAAAkE,EAAA5F,GAkBxC4F,EAlBA,CAAwCC,EAAA,GAkExCC,EAAA,SAAA9F,GA2CC,SAAA8F,IAAA,IAAA7F,EAGCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKK,UAAY,aAEjBL,EAAKyE,WAAa,IAClBzE,EAAK8F,SAAW,IAEhB9F,EAAK+F,MAAQ,IAAIC,EAAA,EAAwB,IAAIN,EAAA,GAC7C1F,EAAK+F,MAAM3B,OAAOC,GAAG,SAAUrE,EAAKiG,YAAajG,GAGjDA,EAAKwB,eA6BP,OArFgCC,EAAAoE,EAAA9F,GA+DrB8F,EAAAnE,UAAAwE,sBAAV,WAECnG,EAAA2B,UAAMwE,sBAAqBjG,KAAAC,MAI3BA,KAAKiG,YAAcjG,KAAKkG,SAASC,UAAU,gBASlCR,EAAAnE,UAAAuE,YAAV,SAAsBK,GACrB,IAAIhF,EAAkBgF,EAAMC,SACvBjF,EAAKY,OACTZ,EAAKY,KAAOhC,KAAKsG,MAAMC,SAAS,KAInCZ,EArFA,CAAgCD,EAAA,GA6FhCc,EAAA,EAAOxB,kBAA8B,WAAIW","file":"gauge.js","sourcesContent":["/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { system } from \"../../core/System\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n * \r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ClockHand, IClockHandEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ClockHand, IClockHandEvents>>;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t * \r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t * \r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t * \r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t * \r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t * \r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t * \r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t * \r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t * \r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t * \r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"ClockHand\"] = ClockHand;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/elements/ClockHand.ts","import * as m from \"../../src/gauge\";\n(window as any).amcharts4.gauge = m;\n\n\n// WEBPACK FOOTER //\n// ./gauge.ts","/**\r\n * Module: gauge \r\n */\r\n\r\n/**\r\n * Elements: types \r\n */\r\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\r\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\r\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\r\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\n\r\n/**\r\n * Elements: charts \r\n */\r\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\n\r\n/**\r\n * Elements: series \r\n */\r\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\r\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\r\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\r\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\r\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\r\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\r\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\r\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\r\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\r\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\r\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\r\n\r\n/**\r\n * Elements: axes \r\n */\r\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\r\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\r\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\r\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\r\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\r\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\r\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\r\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\r\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\r\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\r\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\r\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\r\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\r\n\r\n/**\r\n * Elements: elements \r\n */\r\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\r\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\r\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\r\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\r\n\r\n/**\r\n * Elements: cursors \r\n */\r\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\r\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\r\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/gauge.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IPieSeriesDataFields } from \"../series/PieSeries\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { system } from \"../../core/System\";\r\n\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n * \r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<GaugeChart, IGaugeChartEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<GaugeChart, IGaugeChartEvents>>;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t * \r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"insert\", this.processHand, this);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t * \r\n\t * @param {IListEvents<ClockHand>[\"insert\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"insert\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"GaugeChart\"] = GaugeChart;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/types/GaugeChart.ts"],"sourceRoot":""}