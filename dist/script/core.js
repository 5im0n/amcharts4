/**
 * @license
 * Copyright (c) 2018 amCharts (Antanas Marcelionis, Martynas Majeris)
 *
 * This sofware is provided under multiple licenses. Please see below for
 * links to appropriate usage.
 *
 * Free amCharts linkware license. Details and conditions:
 * https://github.com/amcharts/amcharts4/blob/master/LICENSE
 *
 * One of the amCharts commercial licenses. Details and pricing:
 * https://www.amcharts.com/online-store/
 * https://www.amcharts.com/online-store/licenses-explained/
 *
 * If in doubt, contact amCharts at contact@amcharts.com
 *
 * PLEASE DO NOT REMOVE THIS COPYRIGHT NOTICE.
 * @hidden
 */
 
/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/ 		if(executeModules) {
/******/ 			for(i=0; i < executeModules.length; i++) {
/******/ 				result = __webpack_require__(__webpack_require__.s = executeModules[i]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		20: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + ({"0":"pdfmake","1":"xlsx","2":"fabric","3":"responsivedefaults"}[chunkId]||chunkId) + ".js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 316);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(13);
var core = __webpack_require__(52);
var hide = __webpack_require__(31);
var redefine = __webpack_require__(32);
var ctx = __webpack_require__(41);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Registry */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return registry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__ = __webpack_require__(26);

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Registry is used to store miscellaneous system-wide information, like ids,
 * maps, themes, and registered classes.
 */
var Registry = /** @class */ (function () {
    function Registry() {
        /**
         * All currently applied themes. All new chart instances created will
         * automatically inherit and retain System's themes.
         *
         * @type {ITheme}
         */
        this.themes = [];
        /**
         * List of all loaded available themes.
         *
         * Whenever a theme loads, it registers itself in System's `loadedThemes`
         * collection.
         */
        this.loadedThemes = {};
        /**
         * An indeternal counter used to generate unique IDs.
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        this._uidCount = 0;
        /**
         * Keeps register of class references so that they can be instnatiated using
         * string key.
         *
         * @ignore Exclude from docs
         */
        this.registeredClasses = {};
    }
    /**
     * Generates a unique chart system-wide ID.
     *
     * @return {string} Generated ID
     */
    Registry.prototype.getUniqueId = function () {
        var uid = this._uidCount;
        this._uidCount += 1;
        return "id-" + uid;
    };
    Object.defineProperty(Registry.prototype, "map", {
        /**
         * Returns a universal collection for mapping ids with objects.
         *
         * @ignore Exclude from docs
         * @return {Dictionary<string, any>} Map collection
         */
        get: function () {
            if (!this._map) {
                this._map = new __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._map;
        },
        enumerable: true,
        configurable: true
    });
    return Registry;
}());

/**
 * A singleton global instance of [[Registry]].
 */
var registry = new Registry();
//# sourceMappingURL=Registry.js.map

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["isNaN"] = isNaN;
/* harmony export (immutable) */ __webpack_exports__["getType"] = getType;
/* harmony export (immutable) */ __webpack_exports__["getDefault"] = getDefault;
/* harmony export (immutable) */ __webpack_exports__["checkString"] = checkString;
/* harmony export (immutable) */ __webpack_exports__["checkBoolean"] = checkBoolean;
/* harmony export (immutable) */ __webpack_exports__["checkNumber"] = checkNumber;
/* harmony export (immutable) */ __webpack_exports__["checkObject"] = checkObject;
/* harmony export (immutable) */ __webpack_exports__["checkArray"] = checkArray;
/* harmony export (immutable) */ __webpack_exports__["checkDate"] = checkDate;
/* harmony export (immutable) */ __webpack_exports__["castString"] = castString;
/* harmony export (immutable) */ __webpack_exports__["castNumber"] = castNumber;
/* harmony export (immutable) */ __webpack_exports__["toBoolean"] = toBoolean;
/* harmony export (immutable) */ __webpack_exports__["toNumber"] = toNumber;
/* harmony export (immutable) */ __webpack_exports__["toText"] = toText;
/* harmony export (immutable) */ __webpack_exports__["toNumberOrPercent"] = toNumberOrPercent;
/* harmony export (immutable) */ __webpack_exports__["percent"] = percent;
/* harmony export (immutable) */ __webpack_exports__["isPercent"] = isPercent;
/* harmony export (immutable) */ __webpack_exports__["hasValue"] = hasValue;
/* harmony export (immutable) */ __webpack_exports__["getValue"] = getValue;
/* harmony export (immutable) */ __webpack_exports__["isDate"] = isDate;
/* harmony export (immutable) */ __webpack_exports__["isString"] = isString;
/* harmony export (immutable) */ __webpack_exports__["isNumber"] = isNumber;
/* harmony export (immutable) */ __webpack_exports__["isObject"] = isObject;
/* harmony export (immutable) */ __webpack_exports__["isArray"] = isArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Percent__ = __webpack_require__(11);
/**
 * A collection of utility functions for various type checks and conversion
 * @todo Review unused functions for removal
 * @hidden
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * TYPE CHECK
 * ============================================================================
 * @hidden
 */
/**
 * Returns `true` if value is not a number (NaN).
 *
 * @param  {number}  value Input value
 * @return {boolean}       Is NaN?
 * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere
 */
function isNaN(value) {
    return Number(value) !== value;
    //return value !== value;
}
/**
 * Returns a type of the value.
 *
 * @param  {any}   value  Input value
 * @return {Type}         Type of the value
 */
function getType(value) {
    return ({}).toString.call(value);
}
/**
 * Returns a default value if the passed in value is empty.
 *
 * @param  {any}   value     Input value
 * @param  {any}   optional  Default value
 * @return {any}             Value or default value whichever is available
 * @deprecated Not used anywhere
 */
function getDefault(value, optional) {
    return value || optional;
}
/**
 * Checks if the passed in value is a string.
 *
 * @param  {any}   value  Value
 * @return {value}        Is string?
 * @throws {Error}
 * @deprecated Not used anywhere
 */
function checkString(value) {
    if (typeof value === "string") {
        return true;
    }
    else {
        throw new Error("Expected a string but got " + getType(value));
    }
}
/**
 * Checks if the passed in value is a boolean.
 *
 * @param  {any}   value  Value
 * @return {value}        Is boolean?
 * @throws {Error}
 * @deprecated Not used anywhere
 */
function checkBoolean(value) {
    if (typeof value === "boolean") {
        return true;
    }
    else {
        throw new Error("Expected a boolean but got " + getType(value));
    }
}
/**
 * Checks if the passed in value is a number.
 *
 * @param  {any}   value  Value
 * @return {value}        Is number?
 * @throws {Error}
 */
function checkNumber(value) {
    if (typeof value === "number") {
        if (isNaN(value)) {
            throw new Error("Expected a number but got NaN");
        }
    }
    else {
        throw new Error("Expected a number but got " + getType(value));
    }
    return true;
}
/**
 * Checks if the passed in value is an object.
 *
 * @param  {any}   value  Value
 * @return {value}        Is object?
 * @throws {Error}
 * @todo Is the input type correct?
 * @deprecated Not used anywhere
 */
function checkObject(value) {
    var t = getType(value);
    if (t === "[object Object]") {
        return true;
    }
    else {
        throw new Error("Expected an object but got " + t);
    }
}
/**
 * Checks if the passed in value is an array.
 *
 * @param  {any}   value  Value
 * @return {value}        Is array?
 * @throws {Error}
 * @deprecated Not used anywhere
 */
function checkArray(value) {
    if (Array.isArray(value)) {
        return true;
    }
    else {
        throw new Error("Expected an array but got " + getType(value));
    }
}
/**
 * Checks if the passed in value is a Date object.
 *
 * @param  {any}   value  Value
 * @return {value}        Is Date object?
 * @throws {Error}
 * @deprecated Not used anywhere
 */
function checkDate(value) {
    var t = getType(value);
    if (t === "[object Date]") {
        return true;
    }
    else {
        throw new Error("Expected a date but got " + t);
    }
}
/**
 * ============================================================================
 * TYPE CASTING
 * ============================================================================
 * @hidden
 */
/**
 * Casts string or a number into string.
 *
 * @param  {string | number}  value  Input
 * @return {string}                  String value
 * @deprecated Not used anywhere
 */
function castString(value) {
    if (typeof value === "string") {
        return value;
    }
    else if (typeof value === "number") {
        return "" + value;
    }
    else {
        throw new Error("Expected a string or number but got " + getType(value));
    }
}
/**
 * Casts string or a number into a number.
 *
 * @param  {string | number | Date}  value   Input value
 * @return {number}                  Number  value
 * @throws {Error}
 */
function castNumber(value) {
    if (typeof value === "string") {
        var number = +value;
        if (isNaN(number)) {
            throw new Error("Cannot cast string " + JSON.stringify(value) + " to a number");
        }
        else {
            return number;
        }
    }
    else if (typeof value === "number") {
        if (isNaN(value)) {
            throw new Error("Expected a number but got NaN");
        }
        else {
            return value;
        }
    }
    else {
        var t = getType(value);
        if (t === "[object Date]") {
            return value.getTime();
        }
        else {
            throw new Error("Expected a string, number, or date but got " + t);
        }
    }
}
/**
 * Casts number, string or Date into a Date object.
 *
 * @param  {string | number | Date}   value  Input value
 * @return {Date}                            Date object
 * @deprecated Not used anywhere
 * @throws {Error}
 * @hidden
 * @deprecated
 */
/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {
    if (typeof value === "string") {
        if (formatter) {
            return formatter.parse(value);
        }
        return new Date(value);

    } else if (typeof value === "number") {
        return new Date(value);

    } else {
        const t = getType(value);

        if (t === "[object Date]") {
            return value;

        } else {
            throw new Error("Expected a string, number, or date but got " + t);
        }
    }
}*/
/**
 * ============================================================================
 * QUICK CONVERSION
 * ============================================================================
 * @hidden
 */
/**
 * Converts any value into `boolean`.
 *
 * @param  {any}      value  Source value
 * @return {boolean}         `true` or `false`
 */
function toBoolean(value) {
    return value ? true : false;
}
/**
 * Converts any value into a `number`.
 *
 * @param  {any}     value  Source value
 * @return {number}         Number representation of value
 */
function toNumber(value) {
    if (hasValue(value) && !isNumber(value)) {
        var converted = Number(value);
        if (isNaN(converted) && isString(value) && value != "") {
            return toNumber(value.replace(/[^0-9.\-]+/g, ''));
        }
        return converted;
    }
    return value;
}
/**
 * Converts any value into a string (text).
 *
 * @param  {any}     value  Source value
 * @return {string}         String representation of the input
 */
function toText(value) {
    if (hasValue(value) && !isString(value)) {
        return castString(value);
    }
    return value;
}
/**
 * Converts any value to a number or [[Percent]].
 *
 * If the parameter is a string and contains "%", it will
 * convert it into a [[Percent]].
 *
 * Otherwise, it will convert into a number.
 *
 * @param {number | Percent}   value  Number or percent
 * @return {number | Percent}         Percent object
 */
function toNumberOrPercent(value) {
    if (!hasValue(value) || isNumber(value) || isPercent(value)) {
        return value;
    }
    if (isString(value) && value.indexOf("%") != -1) {
        return percent(toNumber(value));
    }
    return toNumber(value);
}
/**
 * Converts numeric percent value to a proper [[Percent]] object.
 *
 * ```TypeScript
 * pieSeries.radius = amcharts4.percent(80);
 * ```
 * ```JavaScript
 * pieSeries.radius = amcharts4.percent(80);
 * ```
 *
 * @param  {number}   value  Percent
 * @return {Percent}         Percent object
 */
function percent(value) {
    return new __WEBPACK_IMPORTED_MODULE_0__Percent__["a" /* Percent */](value);
}
/**
 * Checks if value is a [[Percent]] object.
 *
 * @ignore Exclude from docs
 * @param  {any}      value  Input value
 * @return {boolean}         Is percent?
 */
function isPercent(value) {
    return value instanceof __WEBPACK_IMPORTED_MODULE_0__Percent__["a" /* Percent */];
}
/**
 * Checks if a variable has a value.
 *
 * @param {any}  a  Input value
 * @returns         Has value?
 */
function hasValue(a) {
    return a != null;
}
/**
 * Returns a value or throws an {Error} exception if the variable has not
 * value.
 *
 * @param {any}  a  Input value
 * @returns         Value
 */
function getValue(a) {
    if (hasValue(a)) {
        return a;
    }
    else {
        throw new Error("Value doesn't exist");
    }
}
/**
 * ============================================================================
 * TYPE CHECK
 * ============================================================================
 * @hidden
 */
/**
 * Checks if parameter is `Date`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is Date?
 */
function isDate(value) {
    return getType(value) === "[object Date]";
}
/**
 * Checks if parameter is `string`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is string?
 */
function isString(value) {
    return typeof value === "string";
}
/**
 * Checks if parameter is `number`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is number?
 */
function isNumber(value) {
    return typeof value === "number" && !isNaN(value);
}
/**
 * Checks if parameter is `object`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is object?
 */
function isObject(value) {
    return typeof value === "object";
}
/**
 * Checks if parameter is `Array`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is Array?
 */
function isArray(value) {
    return Array.isArray(value);
}
//# sourceMappingURL=Type.js.map

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PI", function() { return PI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HALFPI", function() { return HALFPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RADIANS", function() { return RADIANS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEGREES", function() { return DEGREES; });
/* harmony export (immutable) */ __webpack_exports__["toNumberRange"] = toNumberRange;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["stretch"] = stretch;
/* harmony export (immutable) */ __webpack_exports__["fitToRange"] = fitToRange;
/* harmony export (immutable) */ __webpack_exports__["sin"] = sin;
/* harmony export (immutable) */ __webpack_exports__["tan"] = tan;
/* harmony export (immutable) */ __webpack_exports__["cos"] = cos;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["closest"] = closest;
/* harmony export (immutable) */ __webpack_exports__["intersect"] = intersect;
/* harmony export (immutable) */ __webpack_exports__["invertRange"] = invertRange;
/* harmony export (immutable) */ __webpack_exports__["intersection"] = intersection;
/* harmony export (immutable) */ __webpack_exports__["getDistance"] = getDistance;
/* harmony export (immutable) */ __webpack_exports__["getScale"] = getScale;
/* harmony export (immutable) */ __webpack_exports__["getMidPoint"] = getMidPoint;
/* harmony export (immutable) */ __webpack_exports__["getRotation"] = getRotation;
/* harmony export (immutable) */ __webpack_exports__["getAngle"] = getAngle;
/* harmony export (immutable) */ __webpack_exports__["getCenterShift"] = getCenterShift;
/* harmony export (immutable) */ __webpack_exports__["getBBox"] = getBBox;
/* harmony export (immutable) */ __webpack_exports__["getCommonRectangle"] = getCommonRectangle;
/* harmony export (immutable) */ __webpack_exports__["getPointOnQuadraticCurve"] = getPointOnQuadraticCurve;
/* harmony export (immutable) */ __webpack_exports__["getPointOnCubicCurve"] = getPointOnCubicCurve;
/* harmony export (immutable) */ __webpack_exports__["getCubicControlPointA"] = getCubicControlPointA;
/* harmony export (immutable) */ __webpack_exports__["getCubicControlPointB"] = getCubicControlPointB;
/* harmony export (immutable) */ __webpack_exports__["adjustTension"] = adjustTension;
/* harmony export (immutable) */ __webpack_exports__["normalizeAngle"] = normalizeAngle;
/* harmony export (immutable) */ __webpack_exports__["fitAngleToRange"] = fitAngleToRange;
/* harmony export (immutable) */ __webpack_exports__["getArcRect"] = getArcRect;
/* harmony export (immutable) */ __webpack_exports__["isInRectangle"] = isInRectangle;
/* harmony export (immutable) */ __webpack_exports__["getLineIntersection"] = getLineIntersection;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Type__ = __webpack_require__(2);
/**
 * A collection of Math-related functions
 *
 * @todo Comment trigonometric functions?
 */

/**
 * ============================================================================
 * CONSTANTS
 * ============================================================================
 * @hidden
 */
var PI = Math.PI;
var HALFPI = PI / 2;
var RADIANS = PI / 180;
var DEGREES = 180 / PI;
/**
 * Converts any value and fits it into a specific value range.
 *
 * @param  {any}     value  Source value
 * @param  {number}  min    Minimum allowable value
 * @param  {number}  max    Maximum allowable value
 * @return {number}         Number
 */
function toNumberRange(value, min, max) {
    if (__WEBPACK_IMPORTED_MODULE_0__Type__["hasValue"](value)) {
        value = __WEBPACK_IMPORTED_MODULE_0__Type__["toNumber"](value);
        return fitToRange(value, min, max);
    }
    return value;
}
/**
 * Rounds the numeric value to whole number or specific precision of set.
 *
 * @param  {number} value      Value
 * @param  {number} precision  Precision (number of decimal points)
 * @return {number}            Rounded value
 */
function round(value, precision) {
    if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](precision) || precision <= 0) {
        return Math.round(value);
    }
    else {
        var d = Math.pow(10, precision);
        return Math.round(value * d) / d;
    }
}
/**
 * Stretches `t` so that it will always be between `from` and `to`.
 *
 * @param  {number} t     Number from 0 to 1
 * @param  {number} from  Lowest possible value
 * @param  {number} to    Highest possible value
 * @return {number}       Adjusted value
 */
function stretch(t, from, to) {
    return (t * (to - from)) + from;
}
/**
 * Adjust numeric value so it fits to specific value range.
 *
 * @param  {number} value     Value
 * @param  {number} minValue  Lowest possible value
 * @param  {number} maxValue  Highest possible value
 * @return {number}           Adjusted value
 */
function fitToRange(value, minValue, maxValue) {
    if (maxValue < minValue) {
        var temp = maxValue;
        maxValue = minValue;
        minValue = temp;
    }
    if (value < minValue) {
        value = minValue;
    }
    if (value > maxValue) {
        value = maxValue;
    }
    return value;
}
/**
 * Returns sine of a number.
 *
 * @param  {number} value  Value
 * @return {number}        Sine
 */
function sin(value) {
    return round(Math.sin(RADIANS * value), 10);
}
/**
 * Returns tan of a number.
 *
 * @param  {number} value  Value
 * @return {number}        Sine
 */
function tan(value) {
    return round(Math.tan(RADIANS * value), 10);
}
/**
 * Returns cosine of a number.
 *
 * @param  {number} value  Value
 * @return {number}        Cosine
 */
function cos(value) {
    return round(Math.cos(RADIANS * value), 10);
}
function max(left, right) {
    if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](left)) {
        if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right)) {
            if (right > left) {
                return right;
            }
            else {
                return left;
            }
        }
        else {
            return left;
        }
    }
    else if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right)) {
        return right;
    }
    else {
        return null;
    }
}
function min(left, right) {
    if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](left)) {
        if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right)) {
            if (right < left) {
                return right;
            }
            else {
                return left;
            }
        }
        else {
            return left;
        }
    }
    else if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right)) {
        return right;
    }
    else {
        return null;
    }
}
/**
 * Returns the closest value from the array of values to the reference value.
 *
 * @param  {number[]}  values  Array of values
 * @param  {number}    value   Reference value
 * @return {number}            Closes value from the array
 */
function closest(values, referenceValue) {
    return values.reduce(function (prev, curr) {
        return (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);
    });
}
/**
 * Checks whether two ranges of values intersect.
 *
 * @param {IRange}    range1  Range 1
 * @param {IRange}    range2  Range 2
 * @return {boolean}          Any intersecting numbers?
 */
function intersect(range1, range2) {
    var start1 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range1.start);
    var start2 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range2.start);
    var end1 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range1.end);
    var end2 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range2.end);
    return Math.max(start1, start2) <= Math.min(end1, end2);
}
/**
 * Inverts the range of values.
 *
 * @param {IRange}  range  Range
 */
function invertRange(range) {
    var start = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range.start);
    var end = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range.end);
    return { start: 1 - end, end: 1 - start };
}
/**
 * Returns an intersection range between two ranges of values.
 *
 * @param  {IRange}  range1  Range 1
 * @param  {IRange}  range2  Range 2
 * @return {IRange}          Intersecting value range
 */
function intersection(range1, range2) {
    var start1 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range1.start);
    var start2 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range2.start);
    var end1 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range1.end);
    var end2 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range2.end);
    var startMax = Math.max(start1, start2);
    var endMin = Math.min(end1, end2);
    if (endMin < startMax) {
        return undefined;
    }
    else {
        return { start: startMax, end: endMin };
    }
}
/**
 * Returns pixel "distance" between two points.
 *
 * If second point is not specified, distance from {x:0, y:0} point is
 * calculated.
 *
 * @param  {IPoint}  point1  Point 1
 * @param  {IPoint}  point2  Point 2
 * @return {number}          Distance in relative pixels
 */
function getDistance(point1, point2) {
    if (!point2) {
        point2 = { x: 0, y: 0 };
    }
    return Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));
}
/**
 * Returns scale based on original and end position of the two points.
 *
 * @param  {IPoint}  point1       Current position of point 1
 * @param  {IPoint}  startPoint1  Start position of point 1
 * @param  {IPoint}  point2       Current position of point 1
 * @param  {IPoint}  startPoint2  Start position of point 2
 * @return {number}  Scale        Calculated scale
 */
function getScale(point1, startPoint1, point2, startPoint2) {
    var initialDistance = getDistance(startPoint1, startPoint2);
    var currentDistance = getDistance(point1, point2);
    return Math.abs(currentDistance / initialDistance);
}
/**
 * Returns an exact mid point between two points.
 *
 * @param  {IPoint}  point1     Position of point 1
 * @param  {IPoint}  point2     Position of point 2
 * @return {IPoint}  Mid point  Position of mid-point
 */
function getMidPoint(point1, point2, position) {
    if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](position)) {
        position = 0.5;
    }
    return {
        "x": (point1.x + (point2.x - point1.x) * position),
        "y": (point1.y + (point2.y - point1.y) * position)
    };
}
/**
 * Returns difference in angles between starting and ending position of two
 * vectors.
 *
 * @param  {IPoint}  point1       Current position of point 1
 * @param  {IPoint}  startPoint1  Start position of point 1
 * @param  {IPoint}  point2       Current position of point 1
 * @param  {IPoint}  startPoint2  Start position of point 2
 * @return {number}               Angle difference in degrees
 */
function getRotation(point1, startPoint1, point2, startPoint2) {
    // Get start and end angles
    var startAngle = getAngle(startPoint1, startPoint2);
    var angle = getAngle(point1, point2);
    // Calculate angle
    var diff = startAngle - angle;
    if (diff < 0) {
        diff += 360;
    }
    return diff;
}
/**
 * Calculates angle of the vector based on two or one point.
 *
 * @param  {IPoint}  point1  Point 1
 * @param  {IPoint}  point2  Point 2
 * @return {number}          Angle in degrees
 */
function getAngle(point1, point2) {
    if (!point2) {
        point2 = { x: point1.x * 2, y: point1.y * 2 };
    }
    var diffX = point2.x - point1.x;
    var diffY = point2.y - point1.y;
    var angle = Math.atan2(diffY, diffX) * DEGREES;
    if (angle < 0) {
        angle += 360;
    }
    return normalizeAngle(angle);
}
/**
 * Returns the shift in coordinates of the center when item is rotated, moved
 * and scaled at the same time.
 *
 * @param  {IPoint}  center       Current center
 * @param  {IPoint}  point1       Frst reference point
 * @param  {IPoint}  startPoint1  Original position of the first reference point
 * @param  {IPoint}  point2       Second reference point
 * @param  {IPoint}  startPoint2  Original position of the first reference point
 * @return {IPoint}               Shift in center point coordinates
 */
function getCenterShift(center, point1, startPoint1, point2, startPoint2) {
    // Get angle
    var angle = getRotation(point1, startPoint1, point2, startPoint2) - 90;
    if (angle < 0) {
        angle += 360;
    }
    // Get distance between new position
    var distance = getDistance(point1, point2);
    // Calculate new X
    var x = Math.cos(angle) / distance + point1.x;
    var y = Math.cos(angle) / distance + point1.y;
    var shift = {
        "x": x - center.x,
        "y": y - center.y
    };
    return shift;
}
/**
 * Converts an array of points into a bounding box rectangle.
 *
 * Array can contain any number of points.
 *
 * @param  {IPoint[]}              points  Points
 * @return {Optional<IRectangle>}          Bounding box rectangle
 */
function getBBox(points) {
    if (points) {
        var length_1 = points.length;
        if (length_1 !== 0) {
            var left = void 0;
            var right = void 0;
            var top_1;
            var bottom = void 0;
            for (var i = 0; i < length_1; i++) {
                var point = points[i];
                if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right) || (point.x > right)) {
                    right = point.x;
                }
                if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](left) || (point.x < left)) {
                    left = point.x;
                }
                if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](top_1) || (point.y < top_1)) {
                    top_1 = point.y;
                }
                if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](bottom) || (point.y > bottom)) {
                    bottom = point.y;
                }
            }
            return { x: left, y: top_1, width: right - left, height: bottom - top_1 };
        }
    }
    return { x: 0, y: 0, width: 0, height: 0 };
}
/**
 * Returns a [[IRectangle]] object representing a common rectangle that fits
 * all passed in rectangles in it.
 *
 * @param {IRectangle[]}           rectangles  An array of rectangles
 * @return {Optional<IRectangle>}              Common rectangle
 */
function getCommonRectangle(rectangles) {
    var length = rectangles.length;
    if (length !== 0) {
        var minX = void 0;
        var minY = void 0;
        var maxX = void 0;
        var maxY = void 0;
        for (var i = 0; i < length; i++) {
            var rectangle = rectangles[i];
            minX = min(rectangle.x, minX);
            minY = min(rectangle.y, minY);
            maxX = max(rectangle.x + rectangle.width, maxX);
            maxY = max(rectangle.y + rectangle.height, maxY);
        }
        return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };
    }
}
/**
 * [getPointOnQuadraticCurve description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  pointA        [description]
 * @param  {IPoint}  pointB        [description]
 * @param  {IPoint}  controlPoint  [description]
 * @param  {number}  position      [description]
 * @return {IPoint}                [description]
 */
function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {
    var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;
    var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;
    return { x: x, y: y };
}
/**
 * [getPointOnCubicCurve description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  pointA         [description]
 * @param  {IPoint}  pointB         [description]
 * @param  {IPoint}  controlPointA  [description]
 * @param  {IPoint}  controlPointB  [description]
 * @param  {number}  position       [description]
 * @return {IPoint}                 [description]
 */
function getPointOnCubicCurve(pointA, pointB, controlPointA, controlPointB, position) {
    var point = { x: 0, y: 0 };
    var mt1 = 1 - position;
    var mt2 = mt1 * mt1;
    var mt3 = mt2 * mt1;
    point.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;
    point.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;
    return point;
}
/**
 * [getCubicControlPointA description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  p0        [description]
 * @param  {IPoint}  p1        [description]
 * @param  {IPoint}  p2        [description]
 * @param  {IPoint}  p3        [description]
 * @param  {number}  tensionX  [description]
 * @param  {number}  tensionY  [description]
 * @return {IPoint}            [description]
 */
function getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY) {
    tensionX = adjustTension(tensionX);
    tensionY = adjustTension(tensionY);
    return { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };
}
/**
 * [getCubicControlPointB description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  p0        [description]
 * @param  {IPoint}  p1        [description]
 * @param  {IPoint}  p2        [description]
 * @param  {IPoint}  p3        [description]
 * @param  {number}  tensionX  [description]
 * @param  {number}  tensionY  [description]
 * @return {IPoint}            [description]
 */
function getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY) {
    tensionX = adjustTension(tensionX);
    tensionY = adjustTension(tensionY);
    return { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };
}
/**
 * [adjustTension description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number}  tension  [description]
 * @return {number}           [description]
 */
function adjustTension(tension) {
    return 1 - tension + 0.00001;
}
/**
 * [normalizeAngle description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number}  value  [description]
 * @return {number}         [description]
 */
function normalizeAngle(value) {
    if (value == 360) {
        return 360;
    }
    return value % 360;
}
/**
 * [normalizeAngleToRange description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @todo review this with various angles, can be tested on radar chart with custom start/end angles
 * @param {number}   value       [description]
 * @param {number}   startAngle  [description]
 * @param {number}   endAngle    [description]
 * @return {number}              [description]
 */
function fitAngleToRange(value, startAngle, endAngle) {
    if (startAngle > endAngle) {
        var temp = startAngle;
        startAngle = endAngle;
        endAngle = temp;
    }
    value = normalizeAngle(value);
    var count = (startAngle - normalizeAngle(startAngle)) / 360;
    if (value < startAngle) {
        value += 360 * (count + 1);
    }
    var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;
    var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;
    if (value > endAngle) {
        if (value - 360 > startAngle) {
            value -= 360;
        }
        else {
            if (value < maxEnd) {
                value = endAngle;
            }
            else {
                value = startAngle;
            }
        }
    }
    if (value < startAngle) {
        if (value > maxStart) {
            value = startAngle;
        }
        else {
            value = endAngle;
        }
    }
    return value;
}
/**
 * Returns [[IRectangle]] of an arc in relative values, assuming that the
 * center is at the circle center.
 *
 * Used to find out max radius of an arc.
 *
 * @ignore Exclude from docs
 * @param  {number}      startAngle  Start angle
 * @param  {number}      endAngle    End angle
 * @param  {number}      radius    	 Relative radius
 * @return {IRectangle}              Rectangle
 */
function getArcRect(startAngle, endAngle, radius) {
    // do not normalize here!
    //startAngle = normalizeAngle(startAngle);
    //endAngle = normalizeAngle(endAngle);
    if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](radius)) {
        radius = 1;
    }
    if (startAngle == endAngle) {
        endAngle += 360;
    }
    if (startAngle > endAngle) {
        var temp = endAngle;
        endAngle = startAngle;
        startAngle = temp;
    }
    var minX;
    var maxX;
    var minY;
    var maxY;
    for (var angle = startAngle; angle < endAngle; angle += 0.1) {
        minX = min(cos(angle) * radius, minX);
        maxX = max(cos(angle) * radius, maxX);
        minY = min(sin(angle) * radius, minY);
        maxY = max(sin(angle) * radius, maxY);
    }
    return { x: minX, y: minY, width: (maxX - minX), height: (maxY - minY) };
}
/**
 * Returns true if a point is within rectangle
 *
 * @param  {IPoint}      point
 * @param  {IRectangle}  rectangle
 * @return {boolean}
 */
function isInRectangle(point, rectangle) {
    if (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y > rectangle.y && point.y < rectangle.y + rectangle.height) {
        return true;
    }
    return false;
}
function getLineIntersection(pointA1, pointA2, pointB1, pointB2) {
    var x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));
    var y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));
    return { x: x, y: y };
}
//# sourceMappingURL=Math.js.map

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["fromArray"] = fromArray;
/* harmony export (immutable) */ __webpack_exports__["length"] = length;
/* harmony export (immutable) */ __webpack_exports__["toArray"] = toArray;
/* harmony export (immutable) */ __webpack_exports__["eachContinue"] = eachContinue;
/* harmony export (immutable) */ __webpack_exports__["each"] = each;
/* harmony export (immutable) */ __webpack_exports__["sort"] = sort;
/* harmony export (immutable) */ __webpack_exports__["map"] = map;
/* harmony export (immutable) */ __webpack_exports__["filter"] = filter;
/* harmony export (immutable) */ __webpack_exports__["concat"] = concat;
/* harmony export (immutable) */ __webpack_exports__["flatten"] = flatten;
/* harmony export (immutable) */ __webpack_exports__["indexed"] = indexed;
/* harmony export (immutable) */ __webpack_exports__["findIndex"] = findIndex;
/* harmony export (immutable) */ __webpack_exports__["find"] = find;
/* harmony export (immutable) */ __webpack_exports__["findMap"] = findMap;
/* harmony export (immutable) */ __webpack_exports__["contains"] = contains;
/* harmony export (immutable) */ __webpack_exports__["foldl"] = foldl;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["join"] = join;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListIterator", function() { return ListIterator; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Array__ = __webpack_require__(15);

/**
 * @ignore Exclude from docs
 * @todo Description
 */
function fromArray(array) {
    return function (push) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            if (!push(array[i])) {
                break;
            }
        }
    };
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
function length(iter) {
    var sum = 0;
    iter(function (_) {
        ++sum;
        return true;
    });
    return sum;
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
function toArray(iter) {
    var output = [];
    iter(function (value) {
        output.push(value);
        return true;
    });
    return output;
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function eachContinue(iter, fn) {
    return iter(fn);
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function each(iter, fn) {
    return iter(function (value) {
        fn(value);
        return true;
    });
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function sort(iter, fn) {
    return fromArray(toArray(iter).sort(fn));
}
/**
 * [A description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
function map(iter, fn) {
    return function (push) { return iter(function (value) { return push(fn(value)); }); };
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function filter(iter, fn) {
    return function (push) { return iter(function (value) {
        if (fn(value)) {
            return push(value);
        }
        else {
            return true;
        }
    }); };
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return function (push) {
        var go = true;
        var push2 = function (value) { return (go = push(value)); };
        var length = args.length;
        for (var i = 0; i < length; ++i) {
            args[i](push2);
            if (!go) {
                break;
            }
        }
    };
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
function flatten(iter) {
    return function (push) {
        var go = true;
        var push2 = function (value) { return (go = push(value)); };
        return iter(function (value) {
            value(push2);
            return go;
        });
    };
}
/**
 * [number description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
function indexed(iter) {
    return function (push) {
        var index = 0;
        return iter(function (value) { return push([index++, value]); });
    };
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function findIndex(iter, matches) {
    var found = false;
    var i = 0;
    iter(function (value) {
        if (matches(value)) {
            found = true;
            return false;
        }
        else {
            ++i;
            return true;
        }
    });
    return (found ? i : -1);
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function find(iter, matches) {
    var output;
    iter(function (value) {
        if (matches(value)) {
            output = value;
            return false;
        }
        else {
            return true;
        }
    });
    return output;
}
/**
 * [A description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
function findMap(iter, matches) {
    var output;
    iter(function (value) {
        var v = matches(value);
        if (v !== null) {
            output = v;
            return false;
        }
        else {
            return true;
        }
    });
    return output;
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function contains(iter, matches) {
    var output = false;
    iter(function (value) {
        if (matches(value)) {
            output = true;
            return false;
        }
        else {
            return true;
        }
    });
    return output;
}
/**
 * [A description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
function foldl(iter, init, fn) {
    iter(function (value) {
        init = fn(init, value);
        return true;
    });
    return init;
}
/**
 * [min2 description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number |     null}        left [description]
 * @param  {number}    right [description]
 * @return {number}          [description]
 */
function min2(left, right) {
    if (left == null || right < left) {
        return right;
    }
    else {
        return left;
    }
}
/**
 * [min description]
 *
 * @ignore Exclude from docs
 * @todo Verify that this works correctly
 * @todo Description
 * @param  {Iterator<number>} a [description]
 * @return {number}             [description]
 */
function min(a) {
    return foldl(a, null, min2);
}
/**
 * [max2 description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number |     null}        left [description]
 * @param  {number}    right [description]
 * @return {number}          [description]
 */
function max2(left, right) {
    if (left == null || right > left) {
        return right;
    }
    else {
        return left;
    }
}
/**
 * [max description]
 *
 * @ignore Exclude from docs
 * @todo Verify that this works correctly
 * @todo Description
 * @param  {Iterator<number>} a [description]
 * @return {number}             [description]
 */
function max(a) {
    return foldl(a, null, max2);
}
/**
 * [join description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {Iterator<string>} iter [description]
 * @param  {string        =    ""}          separator [description]
 * @return {string}                [description]
 */
function join(iter, separator) {
    if (separator === void 0) { separator = ""; }
    var first = true;
    var init = "";
    iter(function (value) {
        if (first) {
            first = false;
        }
        else {
            init += separator;
        }
        init += value;
        return true;
    });
    return init;
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
var ListIterator = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param {Iterable<T>} list [description]
     * @param {()       =>   T}           create [description]
     */
    function ListIterator(list, create) {
        // flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list
        this.createNewItems = false;
        this.list = list;
        this._create = create;
        this.reset();
    }
    ListIterator.prototype.reset = function () {
        this._listCopy = toArray(this.list.iterator());
    };
    ListIterator.prototype.clear = function () {
        this._listCopy.length = 0;
    };
    ListIterator.prototype.getFirst = function () {
        return this.returnItem(0);
    };
    ListIterator.prototype.getLast = function () {
        return this.returnItem(this._listCopy.length - 1);
    };
    ListIterator.prototype.find = function (fn) {
        var index = __WEBPACK_IMPORTED_MODULE_0__Array__["e" /* findIndex */](this._listCopy, fn);
        if (index !== -1) {
            var item = this._listCopy[index];
            // TODO use removeIndex instead ?
            __WEBPACK_IMPORTED_MODULE_0__Array__["k" /* remove */](this._listCopy, item);
            return item;
        }
        else {
            return this.getLast();
        }
    };
    ListIterator.prototype.removeItem = function (item) {
        return __WEBPACK_IMPORTED_MODULE_0__Array__["k" /* remove */](this._listCopy, item);
    };
    ListIterator.prototype.returnItem = function (index) {
        if (index >= 0 && index < this._listCopy.length) {
            var item = this._listCopy[index];
            // TODO use removeIndex instead ?
            __WEBPACK_IMPORTED_MODULE_0__Array__["k" /* remove */](this._listCopy, item);
            return item;
        }
        else if (this.createNewItems) {
            return this._create();
        }
    };
    ListIterator.prototype.iterator = function () {
        return fromArray(this._listCopy);
    };
    return ListIterator;
}());

//# sourceMappingURL=Iterator.js.map

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["copyProperties"] = copyProperties;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["empty"] = empty;
/* harmony export (immutable) */ __webpack_exports__["relativeToValue"] = relativeToValue;
/* harmony export (immutable) */ __webpack_exports__["relativeRadiusToValue"] = relativeRadiusToValue;
/* harmony export (immutable) */ __webpack_exports__["valueToRelative"] = valueToRelative;
/* harmony export (immutable) */ __webpack_exports__["camelToDashed"] = camelToDashed;
/* harmony export (immutable) */ __webpack_exports__["capitalize"] = capitalize;
/* harmony export (immutable) */ __webpack_exports__["stringify"] = stringify;
/* harmony export (immutable) */ __webpack_exports__["splitTextByCharCount"] = splitTextByCharCount;
/* harmony export (immutable) */ __webpack_exports__["truncateWithEllipsis"] = truncateWithEllipsis;
/* harmony export (immutable) */ __webpack_exports__["trim"] = trim;
/* harmony export (immutable) */ __webpack_exports__["rtrim"] = rtrim;
/* harmony export (immutable) */ __webpack_exports__["ltrim"] = ltrim;
/* harmony export (immutable) */ __webpack_exports__["reverseString"] = reverseString;
/* harmony export (immutable) */ __webpack_exports__["unquote"] = unquote;
/* harmony export (immutable) */ __webpack_exports__["padString"] = padString;
/* harmony export (immutable) */ __webpack_exports__["getFormat"] = getFormat;
/* harmony export (immutable) */ __webpack_exports__["cleanFormat"] = cleanFormat;
/* harmony export (immutable) */ __webpack_exports__["stripTags"] = stripTags;
/* harmony export (immutable) */ __webpack_exports__["plainText"] = plainText;
/* harmony export (immutable) */ __webpack_exports__["numberToString"] = numberToString;
/* harmony export (immutable) */ __webpack_exports__["anyToDate"] = anyToDate;
/* harmony export (immutable) */ __webpack_exports__["anyToNumber"] = anyToNumber;
/* harmony export (immutable) */ __webpack_exports__["getYearDay"] = getYearDay;
/* harmony export (immutable) */ __webpack_exports__["getWeek"] = getWeek;
/* harmony export (immutable) */ __webpack_exports__["getMonthWeek"] = getMonthWeek;
/* harmony export (immutable) */ __webpack_exports__["getDayFromWeek"] = getDayFromWeek;
/* harmony export (immutable) */ __webpack_exports__["get12Hours"] = get12Hours;
/* harmony export (immutable) */ __webpack_exports__["getTimeZone"] = getTimeZone;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["fitNumber"] = fitNumber;
/* harmony export (immutable) */ __webpack_exports__["fitNumberRelative"] = fitNumberRelative;
/* harmony export (immutable) */ __webpack_exports__["svgPointToSprite"] = svgPointToSprite;
/* harmony export (immutable) */ __webpack_exports__["spritePointToSvg"] = spritePointToSvg;
/* harmony export (immutable) */ __webpack_exports__["spritePointToSprite"] = spritePointToSprite;
/* harmony export (immutable) */ __webpack_exports__["svgRectToSprite"] = svgRectToSprite;
/* harmony export (immutable) */ __webpack_exports__["spriteRectToSvg"] = spriteRectToSvg;
/* harmony export (immutable) */ __webpack_exports__["documentPointToSvg"] = documentPointToSvg;
/* harmony export (immutable) */ __webpack_exports__["svgPointToDocument"] = svgPointToDocument;
/* harmony export (immutable) */ __webpack_exports__["documentPointToSprite"] = documentPointToSprite;
/* harmony export (immutable) */ __webpack_exports__["spritePointToDocument"] = spritePointToDocument;
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["createFromConfig"] = createFromConfig;
/* harmony export (immutable) */ __webpack_exports__["useTheme"] = useTheme;
/* harmony export (immutable) */ __webpack_exports__["unuseTheme"] = unuseTheme;
/* harmony export (immutable) */ __webpack_exports__["width"] = width;
/* harmony export (immutable) */ __webpack_exports__["height"] = height;
/* harmony export (immutable) */ __webpack_exports__["decimalPlaces"] = decimalPlaces;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__String__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Strings__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Object__ = __webpack_require__(20);
/**
 * A collection of universal utility functions.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










/**
 * ============================================================================
 * MISC FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Copies all properties of one object to the other, omitting undefined.
 *
 * @param  {Object}   fromObject  Source object
 * @param  {Object}   toObject    Target object
 * @return {Object}               Updated target object
 * @todo Maybe consolidate with utils.copy?
 */
function copyProperties(source, target) {
    __WEBPACK_IMPORTED_MODULE_9__Object__["each"](source, function (key, value) {
        // only if value is set		
        if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](value)) {
            target[key] = value;
        }
    });
    return target;
}
/**
 * Copies all properties of one object to the other.
 *
 * @param  {Object}  source     Source object
 * @param  {Object}  recipient  Target object
 * @return {Object}             Updated target object
 */
function copy(source, target) {
    __WEBPACK_IMPORTED_MODULE_9__Object__["each"](source, function (key, value) {
        target[key] = value;
    });
    return target;
}
/**
 * Checks if value is not empty (undefined or zero-length string).
 *
 * @param  {any}      value  Value to check
 * @return {boolean}         `true` if value is "empty"
 */
function empty(value) {
    return !__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](value) || (value.toString() === "");
}
/**
 * [relativeToValue description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {$type.Optional<number | Percent>}  percent  [description]
 * @param  {number}                            full     [description]
 * @return {number}                                     [description]
 */
function relativeToValue(percent, full) {
    if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](percent)) {
        return percent;
    }
    else if (percent != null && __WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](percent.value)) {
        return full * percent.value;
    }
    else {
        return 0;
    }
}
/**
 * [relativeRadiusToValue description]
 *
 * Differs from relativeToValue so that if a value is negative, it subtracts
 * it from full value.
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {$type.Optional<number | Percent>}  percent             [description]
 * @param  {number}                            full                [description]
 * @param  {boolean}                           subtractIfNegative  [description]
 * @return {number}                                                [description]
 */
function relativeRadiusToValue(percent, full, subtractIfNegative) {
    var value;
    if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](percent)) {
        value = percent;
        if (value < 0) {
            if (subtractIfNegative) {
                value = full + value;
            }
            else {
                value = full - value;
            }
        }
    }
    else if (percent != null && __WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](percent.value)) {
        value = full * percent.value;
    }
    return value;
}
/**
 * [valueToRelative description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number | Percent}  value  [description]
 * @param  {number}            full   [description]
 * @return {number}                   [description]
 */
function valueToRelative(value, full) {
    if (value instanceof __WEBPACK_IMPORTED_MODULE_2__Percent__["a" /* Percent */]) {
        return value.value;
    }
    else {
        return value / full;
    }
}
/**
 * ============================================================================
 * STRING FORMATTING FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Converts camelCased text to dashed version:
 * ("thisIsString" > "this-is-string")
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function camelToDashed(str) {
    return str.replace(/\W+/g, '-').replace(/([a-z\d])([A-Z])/g, '$1-$2').toLowerCase();
}
/**
 * Converts tring to uppercase.
 *
 * @param  {string}  str  String to convert
 * @return {string}       uppercased string
 * @todo Maybe make it better
 */
function capitalize(str) {
    var arr = str.split("");
    arr[0] = arr[0].toUpperCase();
    return arr.join("");
}
/**
 * Converts any value into its string representation.
 *
 * @param  {any}     value  Value
 * @return {string}         String represantation of the value
 */
function stringify(value) {
    return JSON.stringify(value);
}
/**
 * Splits the text into multiple lines, respecting maximum character count.
 * Prioretizes splitting on spaces and punctuation. Falls back on splitting
 * mid-word if there's no other option.
 *
 * @param  {string}    text      Text
 * @param  {number}    maxChars  Maximum number of characters per line
 * @return {string[]}            An array of split text
 */
function splitTextByCharCount(text, maxChars, fullWords, rtl) {
    // Maybe the text fits?
    if (text.length <= maxChars) {
        return [text];
    }
    // Init result
    var res = [];
    // Split by spacing
    var currentIndex = -1;
    var words = text.split(/[\s]+/);
    //let prefix: string = "";
    /*if (rtl) {
        words.reverse();
    }*/
    //console.log(words);
    // Process each word
    for (var i = 0; i < words.length; i++) {
        // Get word and symbol count
        var word = words[i];
        var wordLength = word.length;
        // Ignore empty words
        if (wordLength === 0) {
            continue;
        }
        // Append space
        if (i < (words.length - 1)) {
            if (rtl) {
                word = " " + word;
            }
            else {
                word += " ";
            }
        }
        // Check word length
        if ((wordLength > maxChars) && fullWords !== true) {
            // A single word is longer than allowed symbol count
            // Break it up
            if (rtl) {
                word = reverseString(word);
            }
            var parts = word.match(new RegExp(".{1," + maxChars + "}", "g"));
            // TODO is this correct ?
            if (parts) {
                if (rtl) {
                    for (var x = 0; x < parts.length; x++) {
                        parts[x] = reverseString(parts[x]);
                    }
                    //parts.reverse();
                }
                res = res.concat(parts);
            }
        }
        else {
            // Init current line
            if (currentIndex === -1) {
                res.push("");
                currentIndex = 0;
            }
            // Check if we need to break into another line
            if (((res[currentIndex].length + wordLength + 1) > maxChars) && res[currentIndex] !== "") {
                res.push("");
                currentIndex++;
            }
            // Add word
            res[currentIndex] += word;
        }
        // Update index
        currentIndex = res.length - 1;
    }
    //console.log(res);
    /*if (rtl) {
        res.reverse();
    }*/
    // Do we have only one word that does not fit?
    // Since fullWords is set and we can't split the word, we end up with empty
    // set.
    if (res.length == 1 && fullWords && (res[0].length > maxChars)) {
        res = [];
    }
    return res;
}
/**
 * Truncates the text to certain character count.
 *
 * Will add ellipsis if the string is truncated. Optionally, can truncate on full words only.
 *
 * For RTL support, pass in the fifth parameter as `true`.
 *
 * @param  {string}   text       Input text
 * @param  {number}   maxChars   Maximum character count of output
 * @param  {string}   ellipsis   Ellipsis string, i.e. "..."
 * @param  {boolean}  fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`
 * @param  {boolean}  rtl        Is this an RTL text?
 * @return {string}              Truncated text
 */
function truncateWithEllipsis(text, maxChars, ellipsis, fullWords, rtl) {
    if (text.length <= maxChars) {
        return text;
    }
    // Calc max chars
    maxChars -= ellipsis.length;
    if (maxChars < 1) {
        maxChars = 1;
        //ellipsis = "";
    }
    // Get lines
    var lines = splitTextByCharCount(text, maxChars, fullWords, rtl);
    // Use first line
    return lines[0] + ellipsis;
}
/**
 * Removes whitespace from beginning and end of the string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function trim(str) {
    return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
}
;
/**
 * Removes whitespace from end of the string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function rtrim(str) {
    return str.replace(/[\s\uFEFF\xA0]+$/g, "");
}
;
/**
 * Removes whitespace from beginning of the string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function ltrim(str) {
    return str.replace(/^[\s\uFEFF\xA0]+/g, "");
}
;
/**
 * Reverses string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function reverseString(str) {
    return str.split("").reverse().join("");
}
/**
 * Removes quotes from the string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function unquote(str) {
    var res = str.trim();
    res = str.replace(/^'(.*)'$/, "$1");
    if (res == str) {
        res = str.replace(/^"(.*)"$/, "$1");
    }
    return res;
}
/**
 * Pads a string with additional characters to certain length.
 *
 * @param  {any}            value  A numeric value
 * @param  {number = 0}     len    Result string length in characters
 * @param  {string = "0"}   char   A character to use for padding
 * @return {string}                Padded value as string
 */
function padString(value, len, char) {
    if (len === void 0) { len = 0; }
    if (char === void 0) { char = "0"; }
    if (typeof value !== "string")
        value = value.toString();
    return len > value.length ? Array(len - value.length + 1).join(char) + value : value;
}
/**
 * Tries to determine format type.
 *
 * @ignore Exclude from docs
 * @param {string}   format  Format string
 * @return {string}          Format type ("string" | "number" | "date" | "duration")
 */
function getFormat(format) {
    // Undefined?
    if (typeof format === "undefined")
        return __WEBPACK_IMPORTED_MODULE_8__Strings__["m" /* STRING */];
    // Cleanup and lowercase format
    format = format.toLowerCase().replace(/^\[[^\]]*\]/, "");
    // Remove style tags
    format = format.replace(/\[[^\]]+\]/, "");
    // Trim
    format = format.trim();
    // Check for any explicit format hints (i.e. /Date)
    var hints = format.match(/\/(date|number|duration)$/);
    if (hints) {
        return hints[1];
    }
    // Check for explicit hints
    if (format === __WEBPACK_IMPORTED_MODULE_8__Strings__["c" /* NUMBER */]) {
        return __WEBPACK_IMPORTED_MODULE_8__Strings__["c" /* NUMBER */];
    }
    if (format === __WEBPACK_IMPORTED_MODULE_8__Strings__["a" /* DATE */]) {
        return __WEBPACK_IMPORTED_MODULE_8__Strings__["a" /* DATE */];
    }
    if (format === __WEBPACK_IMPORTED_MODULE_8__Strings__["b" /* DURATION */]) {
        return __WEBPACK_IMPORTED_MODULE_8__Strings__["b" /* DURATION */];
    }
    // Detect number formatting symbols
    if (format.match(/[#0]/)) {
        return __WEBPACK_IMPORTED_MODULE_8__Strings__["c" /* NUMBER */];
    }
    // Detect date formatting symbols
    if (format.match(/[ymwdhnsqaxkzgtei]/)) {
        return __WEBPACK_IMPORTED_MODULE_8__Strings__["a" /* DATE */];
    }
    // Nothing? Let's display as string
    return __WEBPACK_IMPORTED_MODULE_8__Strings__["m" /* STRING */];
}
/**
 * Cleans up format:
 * * Strips out formatter hints
 *
 * @ignore Exclude from docs
 * @param  {string}  format  Format
 * @return {string}          Cleaned format
 */
function cleanFormat(format) {
    return format.replace(/\/(date|number|duration)$/i, "");
}
/**
 * Strips all tags from the string.
 *
 * @param  {string}  text  Source string
 * @return {string}        String without tags
 */
function stripTags(text) {
    return text ? text.replace(/<[^>]*>/g, "") : text;
}
/**
 * Removes new lines and tags from a string.
 *
 * @param  {string}  text  String to conver
 * @return {string}        Converted string
 */
function plainText(text) {
    return text ? stripTags(text.replace(/[\n\r]+/g, ". ")) : text;
}
/**
 * ============================================================================
 * TYPE CONVERSION FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Converts numeric value into string. Deals with large or small numbers that
 * would otherwise use exponents.
 *
 * @param  {number}  value  Numeric value
 * @return {string}         Numeric value as string
 */
function numberToString(value) {
    // TODO handle Infinity and -Infinity
    if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNaN"](value)) {
        return "NaN";
    }
    if (value === Infinity) {
        return "Infinity";
    }
    if (value === -Infinity) {
        return "-Infinity";
    }
    // Negative 0
    if ((value === 0) && (1 / value === -Infinity)) {
        return "-0";
    }
    // Preserve negative and deal with absoute values
    var negative = value < 0;
    value = Math.abs(value);
    // TODO test this
    var parsed = __WEBPACK_IMPORTED_MODULE_6__utils_Type__["getValue"](/^([0-9]+)(?:\.([0-9]+))?(?:e[\+\-]([0-9]+))?$/.exec("" + value));
    var digits = parsed[1];
    var decimals = parsed[2] || "";
    var res;
    // Leave the nummber as it is if it does not use exponents
    if (parsed[3] == null) {
        res = (decimals === "" ? digits : digits + "." + decimals);
    }
    else {
        var exponent = +parsed[3];
        // Deal with decimals
        if (value < 1) {
            var zeros = exponent - 1;
            res = "0." + __WEBPACK_IMPORTED_MODULE_7__String__["repeat"]("0", zeros) + digits + decimals;
            // Deal with integers
        }
        else {
            var zeros = exponent - decimals.length;
            if (zeros === 0) {
                res = digits + decimals;
            }
            else if (zeros < 0) {
                res = digits + decimals.slice(0, zeros) + "." + decimals.slice(zeros);
            }
            else {
                res = digits + decimals + __WEBPACK_IMPORTED_MODULE_7__String__["repeat"]("0", zeros);
            }
        }
    }
    return negative ? "-" + res : res;
}
/**
 * Converts anything to Date object.
 *
 * @param  {Date | number | string}  value  A value of any type
 * @return {Date}                           Date object representing a value
 */
function anyToDate(value) {
    if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isDate"](value)) {
        // TODO maybe don't create a new Date ?
        return new Date(value);
    }
    else if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](value)) {
        return new Date(value);
    }
    else {
        // Try converting to number (assuming timestamp)
        var num = Number(value);
        if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](num)) {
            return new Date(value);
        }
        else {
            return new Date(num);
        }
    }
}
/**
 * Tries converting any value to a number.
 *
 * @param  {any}     value  Source value
 * @return {number}         Number
 */
function anyToNumber(value) {
    if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isDate"](value)) {
        return value.getTime();
    }
    else if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](value)) {
        return value;
    }
    else if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isString"](value)) {
        // Try converting to number (assuming timestamp)
        var num = Number(value);
        if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](num)) {
            // Failing
            return undefined;
        }
        else {
            return num;
        }
    }
}
/**
 * ============================================================================
 * DATE-RELATED FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Returns a year day.
 *
 * @param  {Date}     date  Date
 * @param  {boolean}  utc   Assume UTC dates?
 * @return {number}         Year day
 * @todo Account for UTC
 */
function getYearDay(date, utc) {
    if (utc === void 0) { utc = false; }
    var first = new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);
    return Math.floor((date.getTime() - first.getTime()) / 86400000) + 1;
}
/**
 * Returns week number for a given date.
 *
 * @param  {Date}     date  Date
 * @param  {boolean}  utc   Assume UTC dates?
 * @return {number}         Week number
 * @todo Account for UTC
 */
function getWeek(date, utc) {
    if (utc === void 0) { utc = false; }
    var day = getYearDay(date, utc) - 1;
    var week = Math.floor((day - (date.getDay() || 7) + 10) / 7);
    if (week === 0) {
        week = 53;
    }
    else if (week === 53) {
        week = 1;
    }
    return week;
}
/**
 * Returns a week number in the month.
 *
 * @param  {Date}     date  Source Date
 * @param  {boolean}  utc   Assume UTC dates?
 * @return {number}         Week number in month
 */
function getMonthWeek(date, utc) {
    if (utc === void 0) { utc = false; }
    var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);
    var currentWeek = getWeek(date, utc);
    if (currentWeek == 1) {
        currentWeek = 53;
    }
    return currentWeek - firstWeek + 1;
}
/**
 * Returns a year day out of the given week number.
 *
 * @param  {number}   week     Week
 * @param  {number}   year     Year
 * @param  {number}   weekday  Weekday
 * @param  {boolean}  utc      Assume UTC dates
 * @return {number}            Day in a year
 */
function getDayFromWeek(week, year, weekday, utc) {
    if (weekday === void 0) { weekday = 1; }
    if (utc === void 0) { utc = false; }
    var date = new Date(year, 0, 4, 0, 0, 0, 0);
    if (utc) {
        date.setUTCFullYear(year);
    }
    var day = week * 7 + weekday - ((date.getDay() || 7) + 3);
    return day;
}
/**
 * Returns 12-hour representation out of the 24-hour hours.
 *
 * @param  {number}  hours  24-hour number
 * @return {number}         12-hour number
 */
function get12Hours(hours, base) {
    if (hours > 12) {
        hours -= 12;
    }
    else if (hours === 0) {
        hours = 12;
    }
    return __WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](base) ? hours + (base - 1) : hours;
}
/**
 * Returns a string name of the tome zone.
 *
 * @param  {Date}     date     Date object
 * @param  {boolean}  long     Should return long ("Pacific Standard Time") or short abbreviation ("PST")
 * @param  {boolean}  savings  Include information if it's in daylight savings mode
 * @return {string}            Time zone name
 */
function getTimeZone(date, long, savings) {
    if (long === void 0) { long = false; }
    if (savings === void 0) { savings = false; }
    var wotz = date.toLocaleString("UTC");
    var wtz = date.toLocaleString("UTC", { timeZoneName: long ? "long" : "short" }).substr(wotz.length);
    //wtz = wtz.replace(/[+-]+[0-9]+$/, "");
    if (savings === false) {
        wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, " ");
    }
    return wtz;
}
/**
 * ============================================================================
 * NUMBER-RELATED FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Returns a random number between `from` and `to`.
 *
 * @param  {number}  from  From number
 * @param  {number}  to    To number
 * @return {number}        Random number
 */
function random(from, to) {
    return Math.floor(Math.random() * to) + from;
}
/**
 * Fits the number into specific `min` and `max` bounds.
 *
 * @param  {number}  value  Input value
 * @param  {number}  min    Minimum value
 * @param  {number}  max    Maximum value
 * @return {number}         Possibly adjusted value
 */
function fitNumber(value, min, max) {
    if (value > max) {
        return max;
    }
    else if (value < min) {
        return min;
    }
    return value;
}
/**
 * Fits the number into specific `min` and `max` bounds.
 *
 * If the value is does not fit withing specified range, it "wraps" around the
 * values.
 *
 * For example, if we have input value 10 with min set at 1 and max set at 8,
 * the value will not fit. The remainder that does not fit (2) will be added
 * to `min`, resulting in 3.
 *
 * The output of regular `fitNumber()` would return 8 instead.
 *
 * @param  {number}  value  Input value
 * @param  {number}  min    Minimum value
 * @param  {number}  max    Maximum value
 * @return {number}         Possibly adjusted value
 */
function fitNumberRelative(value, min, max) {
    var gap = max - min;
    if (value > max) {
        value = min + (value - gap * Math.floor(value / gap));
    }
    else if (value < min) {
        value = min + (value - gap * Math.floor(value / gap));
    }
    return value;
}
/**
 * ============================================================================
 * SPRITE-RELATED FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Converts SVG element coordinates to coordinates within specific [[Sprite]].
 *
 * @param  {IPoint}  point   SVG coordinates
 * @param  {Sprite}  sprite  Sprite
 * @return {IPoint}         Sprite coordinates
 */
function svgPointToSprite(point, sprite) {
    var x = point.x;
    var y = point.y;
    var sprites = [];
    while (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](sprite.parent)) {
        sprites.push(sprite);
        sprite = sprite.parent;
    }
    sprites.reverse();
    for (var i = 0; i < sprites.length; i++) {
        var sprite_1 = sprites[i];
        var angle = sprite_1.rotation;
        var relativeX = x - sprite_1.pixelX;
        var relativeY = y - sprite_1.pixelY;
        if (sprite_1.dx) {
            x -= sprite_1.dx;
        }
        if (sprite_1.dy) {
            y -= sprite_1.dy;
        }
        x = (__WEBPACK_IMPORTED_MODULE_5__utils_Math__["cos"](-angle) * relativeX - __WEBPACK_IMPORTED_MODULE_5__utils_Math__["sin"](-angle) * relativeY) / sprite_1.scale - sprite_1.pixelPaddingLeft;
        y = (__WEBPACK_IMPORTED_MODULE_5__utils_Math__["cos"](-angle) * relativeY + __WEBPACK_IMPORTED_MODULE_5__utils_Math__["sin"](-angle) * relativeX) / sprite_1.scale - sprite_1.pixelPaddingTop;
    }
    return { x: x, y: y };
}
/**
 * Converts coordinates within [[Sprite]] to coordinates relative to the whole
 * SVG element.
 *
 * @param  {IPoint}  point   Sprite coordinates
 * @param  {Sprite}  sprite  Sprite
 * @return {IPoint}          SVG coordinates
 */
function spritePointToSvg(point, sprite) {
    var x = point.x;
    var y = point.y;
    while (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](sprite.parent)) {
        var angle = sprite.rotation;
        x += sprite.pixelPaddingLeft;
        y += sprite.pixelPaddingTop;
        if (sprite.dx) {
            x += sprite.dx;
        }
        if (sprite.dy) {
            y += sprite.dy;
        }
        var relativeX = sprite.pixelX + ((x * __WEBPACK_IMPORTED_MODULE_5__utils_Math__["cos"](angle) - y * __WEBPACK_IMPORTED_MODULE_5__utils_Math__["sin"](angle))) * sprite.scale;
        var relativeY = sprite.pixelY + ((x * __WEBPACK_IMPORTED_MODULE_5__utils_Math__["sin"](angle) + y * __WEBPACK_IMPORTED_MODULE_5__utils_Math__["cos"](angle))) * sprite.scale;
        x = relativeX;
        y = relativeY;
        sprite = sprite.parent;
    }
    return { x: x, y: y };
}
/**
 * Converts coordinates of one sprite to another.
 *
 * @param  {IPoint}  point   Sprite coordinates
 * @param  {Sprite}  sprite  Sprite
 * @param  {Sprite}  toSprite  Sprite
 * @return {IPoint}  converted coordinates
 */
function spritePointToSprite(point, sprite, toSprite) {
    return svgPointToSprite(spritePointToSvg(point, sprite), toSprite);
}
/**
 * Converts a rectangle expressed in SVG element coordinates to coordinates
 * within specific [[Sprite]].
 *
 * @param  {IRectangle}  rect    SVG rectangle
 * @param  {Sprite}      sprite  Sprite
 * @return {IRectangle}          Sprite rectangle
 */
function svgRectToSprite(rect, sprite) {
    var p1 = svgPointToSprite(rect, sprite);
    var p2 = svgPointToSprite({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);
    return { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };
}
/**
 * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.
 *
 * @param  {IRectangle}  rect    Sprite rectangle
 * @param  {Sprite}      sprite  Sprite
 * @return {IRectangle}          SVG rectangle
 */
function spriteRectToSvg(rect, sprite) {
    var p1 = spritePointToSvg(rect, sprite);
    var p2 = spritePointToSvg({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);
    return { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };
}
/**
 * Converts global document-wide coordinates to coordinates within SVG element.
 *
 * @param  {IPoint}       point         Global coordinates
 * @param  {HTMLElement}  svgContainer  SVG element
 * @return {IPoint}                     SVG coordinates
 */
function documentPointToSvg(point, svgContainer) {
    var bbox = svgContainer.getBoundingClientRect();
    return {
        "x": point.x - bbox.left,
        "y": point.y - bbox.top
    };
}
/**
 * Converts SVG coordinates to global document-wide coordinates.
 *
 * @param  {IPoint}       point         SVG coordinates
 * @param  {HTMLElement}  svgContainer  SVG element
 * @return {IPoint}                     Global coordinates
 */
function svgPointToDocument(point, svgContainer) {
    var bbox = svgContainer.getBoundingClientRect();
    return {
        "x": point.x + bbox.left,
        "y": point.y + bbox.top
    };
}
/**
 * Converts document-wide global coordinates to coordinates within specific
 * [[Sprite]].
 *
 * @param  {IPoint}  point   Global coordinates
 * @param  {Sprite}  sprite  Sprite
 * @return {IPoint}          Sprite coordinates
 */
function documentPointToSprite(point, sprite) {
    var svgPoint = documentPointToSvg(point, sprite.htmlContainer);
    return svgPointToSprite(svgPoint, sprite);
}
/**
 * Converts coordinates within [[Sprite]] to global document coordinates.
 *
 * @param  {IPoint}  point   Sprite coordinates
 * @param  {Sprite}  sprite  Sprite
 * @return {IPoint}          Global coordinates
 */
function spritePointToDocument(point, sprite) {
    var svgPoint = spritePointToSvg(point, sprite);
    return svgPointToDocument(svgPoint, sprite.htmlContainer);
}
/**
 * ============================================================================
 * INSTANTIATION FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * A shortcut to creating a chart instance.
 *
 * The first argument is either a reference to or an id of a DOM element to be
 * used as a container for the chart.
 *
 * The second argument is the type reference of the chart type. (for plain
 * JavaScript users this can also be a string indicating chart type)
 *
 * ```TypeScript
 * let chart = amcharts4.create("chartdiv", charts.PieChart);
 * ```
 * ```JavaScript
 * // Can pass in chart type reference like this:
 * var chart = amcharts4.create("chartdiv", amcharts4.charts.PieChart);
 *
 * // ... or chart class type as a string:
 * var chart = amcharts4.create("chartdiv", "PieChart");
 * ```
 *
 * @param  {HTMLElement | string}  htmlElement  Reference or id of the target container element
 * @param  {T}                     classType    Class type of the target chart type
 * @return {T}                                  Chart instance
 */
function create(htmlElement, classType) {
    // This is a nasty hack for the benefit of vanilla JS users, who do not
    // enjoy benefits of type-check anyway.
    // We're allowing passing in a name of the class rather than type reference
    // itself.
    var classError;
    if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isString"](classType)) {
        if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](__WEBPACK_IMPORTED_MODULE_1__Registry__["a" /* registry */].registeredClasses[classType])) {
            classType = __WEBPACK_IMPORTED_MODULE_1__Registry__["a" /* registry */].registeredClasses[classType];
        }
        else {
            classType = __WEBPACK_IMPORTED_MODULE_1__Registry__["a" /* registry */].registeredClasses["Container"];
            classError = new Error("Class [" + classType + "] is not loaded.");
            return;
        }
    }
    // Create the chart
    var chart = __WEBPACK_IMPORTED_MODULE_0__System__["b" /* system */].createChild(htmlElement, classType);
    // Error?
    if (classError) {
        chart.raiseCriticalError(classError);
    }
    return chart;
}
/**
 * A shortcut to creating a chart from a config object.
 *
 * Example:
 *
 * ```TypeScript
 * let chart amcharts4.createFromConfig({ ... }, "chartdiv", charts.XYChart );
 * ```
 * ```JavaScript
 * var chart amcharts4.createFromConfig({ ... }, "chartdiv", "XYChart" );
 * ```
 *
 * If `chartType` parameter is not supplied it must be set in a config object,
 * via reference to chart type, e.g.:
 *
 * ```TypeScript
 * {
 *   "type": charts.XYChart,
 *   // ...
 * }
 * ```
 * ```JavaScript
 * {
 *   "type": amcharts4.charts.XYChart,
 *   // ...
 * }
 * ```
 *
 * Or via string: (if you are using JavaScript)
 *
 * ```TypeScript
 * {
 *   "type": "XYChart",
 *   // ...
 * }
 * ```
 * ```JavaScript
 * {
 *   "type": "XYChart",
 *   // ...
 * }
 * ```
 *
 * A `container` can either be a reference to an HTML container to put chart
 * in, or it's unique id.
 *
 * If `container` is not specified, it must be included in the config object:
 *
 * ```TypeScript
 * {
 *   "type": "XYChart",
 *   "container": "chartdiv",
 *   // ...
 * }
 * ```
 * ```JavaScript
 * {
 *   "type": "XYChart",
 *   "container": "chartdiv",
 *   // ...
 * }
 * ```
 *
 * @param  {any}                   config       Config object in property/value pairs
 * @param  {string | HTMLElement}  htmlElement  Container reference or ID
 * @param  {typeof Chart}          objectType   Chart type
 * @return {Chart}                              A newly created chart instance
 * @todo Throw exception if type is not correct
 */
function createFromConfig(config, htmlElement, classType) {
    // Extract chart type from config if necessary
    if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](classType)) {
        classType = config.type;
        delete config.type;
    }
    // Extract element from config if necessary
    if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](htmlElement)) {
        htmlElement = config.container;
        delete config.container;
    }
    // Check if we need to extract actual type reference
    var finalType;
    var classError;
    if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isString"](classType) && __WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](__WEBPACK_IMPORTED_MODULE_1__Registry__["a" /* registry */].registeredClasses[classType])) {
        finalType = __WEBPACK_IMPORTED_MODULE_1__Registry__["a" /* registry */].registeredClasses[classType];
    }
    else {
        finalType = __WEBPACK_IMPORTED_MODULE_3__Container__["a" /* Container */];
        classError = new Error("Class [" + classType + "] is not loaded.");
    }
    // Create the chart
    var chart = __WEBPACK_IMPORTED_MODULE_0__System__["b" /* system */].createChild(htmlElement, finalType);
    // Set config
    if (classError) {
        chart.raiseCriticalError(classError);
    }
    else {
        chart.config = config;
    }
    return chart;
}
/**
 * Applies a theme to System, and subsequently all chart instances created
 * from that point forward.
 *
 * amCharts supports multiple themes. Calling `useTheme` multiple times will
 * make the System apply multiple themes, rather than overwrite previously
 * set one.
 *
 * This enables combining features from multiple themes on the same chart.
 * E.g.:
 *
 * ```TypeScript
 * amcharts4.useTheme(amcharts4.themes.material);
 * amcharts4.useTheme(amcharts4.themes.animated);
 * ```
 * ```JavaScript
 * amcharts4.useTheme(amcharts4.themes.material);
 * amcharts4.useTheme(amcharts4.themes.animated);
 * ```
 *
 * The above will apply both the Material color and animation options to all
 * charts created.
 *
 * @param {ITheme}  value  A reference to a theme
 */
function useTheme(value) {
    __WEBPACK_IMPORTED_MODULE_1__Registry__["a" /* registry */].themes.push(value);
}
/**
 * Removes a theme from "active themes" list, so it won't get applied to any
 * charts created subsequently.
 *
 * @param {ITheme}  value  A reference to a theme
 */
function unuseTheme(value) {
    __WEBPACK_IMPORTED_MODULE_4__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_1__Registry__["a" /* registry */].themes, value);
}
/**
 * ============================================================================
 * DEPRECATED FUNCTIONS
 * @todo Review and remove
 * ============================================================================
 * @hidden
 */
/**
 * Returns element's width.
 *
 * @ignore Exclude from docs
 * @param  {HTMLElement}  element  Element
 * @return {number}                Width (px)
 * @deprecated Not used anywhere
 */
function width(element) {
    return element.clientWidth;
}
/**
 * Returns element's height.
 *
 * @ignore Exclude from docs
 * @param  {HTMLElement}  element  Element
 * @return {number}                Height (px)
 * @deprecated Not used anywhere
 */
function height(element) {
    return element.clientHeight;
}
/**
 * Returns number of decimals
 *
 * @ignore Exclude from docs
 * @param  {number}  number  Input number
 * @return {number}          Number of decimals
 */
function decimalPlaces(number) {
    var match = ('' + number).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!match) {
        return 0;
    }
    return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
}
//# sourceMappingURL=Utils.js.map

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Container; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SpriteState__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__elements_Rectangle__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Type__ = __webpack_require__(2);
/**
 * Container module
 * @todo Needs description
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Container can contain multiple sprites and arrange them in various layouts.
 *
 * @see {@link IContainerEvents} for a list of available events
 * @see {@link IContainerAdapters} for a list of available Adapters
 * @important
 */
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    /**
     * Constructor
     */
    function Container() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Indicates if this container contains any focused elements, including
         * itself.
         *
         * @type {boolean}
         */
        _this.hasFocused = false;
        /**
         * Specifies if, when state is applied on this container, the same state should be applied to container's children
         * @type {boolean}
         */
        _this.setStateOnChildren = false;
        /*
         * @ignore
         */
        _this._containerOverflowX = 0;
        /*
         * @ignore
         */
        _this._containerOverflowY = 0;
        _this.className = "Container";
        _this.element = _this.paper.addGroup("g");
        _this.pixelPerfect = false;
        _this._positionPrecision = 4;
        _this.group.add(_this.element);
        _this.layout = "absolute";
        _this._fixedWidthGrid = false;
        _this.ignoreOverflow = false;
        _this.verticalCenter = "top";
        _this.horizontalCenter = "left";
        _this.children.events.on("insert", _this.handleChildAdded, _this);
        _this.children.events.on("remove", _this.handleChildRemoved, _this);
        _this.applyTheme();
        return _this;
    }
    /**
     * Handles adding of a new child into `children`. Adding new children might
     * affect the whole layout so it needs to be revalidated.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Sprite>["insert"]} event Event object
     * @todo Throw an exception on adding a disposed object. Of course it's better NOT TO add disposed objects, so that what we should focus on.
     */
    Container.prototype.handleChildAdded = function (event) {
        var child = event.newValue;
        // Do not add disposed objects
        if (child.isDisposed()) {
            console.log("Added to children a disposed object!");
            return;
        }
        //if (this.element) {
        //	let group = <Group>this.element;
        //	group.add(child.group);
        //}
        this.addChildren();
        // TODO this is hacky
        if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["hasValue"](child._childAddedDisposer)) {
            // it's not enough to listen to POSITION_CHANGED only, as some extra redrawals will happen.
            child._childAddedDisposer = child.events.on("transformed", this.handleChildTransform, this);
            //@todo: temporary commenting this because of error it causes when I add contents Container in AxisRange constructor. this._disposers.push((<any>child)._childAddedDisposer);
        }
        this.invalidateLayout();
    };
    /**
     * Handles child removal. Changing size of the child may change the
     * whole layout of the Container, hence layout needs to be invalidated.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Sprite>["remove"]} event Event object
     */
    Container.prototype.handleChildRemoved = function (event) {
        var child = event.oldValue;
        // TODO figure out why this is sometimes undefined
        // TODO this is hacky
        if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["hasValue"](child._childAddedDisposer)) {
            this.removeDispose(child._childAddedDisposer);
            //(<any>child)._childAddedDisposer.dispose();
            delete child._childAddedDisposer;
        }
        if (this.element) {
            var group = this.element;
            group.removeElement(child.group);
        }
        if (child.isMeasured) {
            this.invalidateLayout();
        }
    };
    /**
     * Handles child transformation. Changing size of the child may change the
     * whole layout of the Container, hence layout needs to be invalidated.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["transformed"]} event Event object
     */
    Container.prototype.handleChildTransform = function (event) {
        var child = event.target;
        if (child.isMeasured) {
            this.invalidateLayout();
        }
    };
    /**
     * Invalidates Container's layout, causing it to be re-evaluated again.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.invalidateLayout = function () {
        if (this.disabled || this.isTemplate || this.layout == "none") {
            return;
        }
        //this.validateLayout();
        __WEBPACK_IMPORTED_MODULE_7__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_4__System__["b" /* system */].invalidLayouts, this);
    };
    /**
     * Invalidates the whole element, including layout.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.invalidate = function () {
        _super.prototype.invalidate.call(this);
        this.sortChildren();
        __WEBPACK_IMPORTED_MODULE_7__utils_Array__["b" /* each */](this._childrenByLayout, function (child) {
            if (child.invalid) {
                child.invalidate(); // this sorts invalid components in correct order
            }
        });
        this.invalidateLayout();
    };
    /**
     * Invalidates the whole element, including layout AND all its child
     * elements.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.deepInvalidate = function () {
        _super.prototype.invalidate.call(this);
        this.sortChildren();
        __WEBPACK_IMPORTED_MODULE_7__utils_Array__["b" /* each */](this._childrenByLayout, function (child) {
            if (child instanceof Container) {
                child.deepInvalidate();
            }
            else {
                child.invalidate();
            }
        });
        this.invalidateLayout();
    };
    /**
     * Appends `<defs>` section to the element. This section holds all the SVG
     * definitions for the element, such as filters.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.appendDefs = function () {
        _super.prototype.appendDefs.call(this);
        __WEBPACK_IMPORTED_MODULE_7__utils_Array__["b" /* each */](this._childrenByLayout, function (child) {
            if (child instanceof Container) {
                child.appendDefs();
            }
            else {
                child.appendDefs();
            }
        });
    };
    Object.defineProperty(Container.prototype, "children", {
        /**
         * Returns a list of the child [[Sprite]] elements contained in this
         * Container.
         *
         * @return {List<Sprite>} List of child elements (Sprites)
         */
        get: function () {
            var _this = this;
            // @todo Review if we can add all children to disposers
            if (!this._children) {
                this._children = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
                this._children.events.on("insert", function (event) {
                    _this.dispatchImmediately("childadded", { type: "childadded", newValue: event.newValue });
                });
                this._children.events.on("insert", function (event) {
                    _this.dispatchImmediately("childremoved", { type: "childremoved", newValue: event.newValue });
                });
                //this._disposers.push(new ListDisposer(this._children));
            }
            return this._children;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "minWidth", {
        /**
         * Retruns current minimum width. (px)
         *
         * @return {Optional<number>} Width (px)
         */
        get: function () {
            return this.getPropertyValue("minWidth");
        },
        /**
         * Sets minimum width (px) for the Container. A container will not
         * auto-shrink beyond this value, even if child elements are smaller.
         *
         * @param {Optional<number>} value Width (px)
         */
        set: function (value) {
            if (this.setPropertyValue("minWidth", value)) {
                this.invalidateLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "minHeight", {
        /**
         * Retruns current minimum height. (px)
         *
         * @return {Optional<number>} Height (px)
         */
        get: function () {
            return this.getPropertyValue("minHeight");
        },
        /**
         * Sets minimum height (px) for the Container. A container will not
         * auto-shrink beyond this value, even if child elements are smaller.
         * @param {Optional<number>} value Height (px)
         */
        set: function (value) {
            if (this.setPropertyValue("minHeight", value)) {
                this.invalidateLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "maxWidth", {
        /**
         * Retruns current maximum width. (px)
         *
         * @return {Optional<number>} Width (px)
         */
        get: function () {
            var maxWidth = this.getPropertyValue("maxWidth");
            if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](maxWidth)) {
                if (this.parent) {
                    return this.parent.maxWidth; // used to be pixelWidth, but this causes problems
                }
            }
            return maxWidth;
        },
        /**
         * Sets maximum width (px) for the Container. A container will not
         * grow beyond this value, even if child elements do not fit.
         *
         * @param {Optional<number>} value Width (px)
         */
        set: function (value) {
            if (this.setPropertyValue("maxWidth", value)) {
                if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](this.relativeWidth)) {
                    this.invalidateLayout();
                }
                this.dispatchImmediately("maxsizechanged");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "maxHeight", {
        /**
         * Retruns current maximum height. (px)
         *
         * @return {Optional<number>} Height (px)
         */
        get: function () {
            var maxHeight = this.getPropertyValue("maxHeight");
            if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](maxHeight)) {
                if (this.parent) {
                    return this.parent.maxHeight; // used to be pixelHeight, but this causes problems
                }
            }
            return maxHeight;
        },
        /**
         * Sets maximum height (px) for the Container. A container will not
         * grow beyond this value, even if child elements do not fit.
         *
         * @param {Optional<number>} value Height (px)
         */
        set: function (value) {
            if (this.setPropertyValue("maxHeight", value)) {
                if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](this.relativeHeight)) {
                    this.invalidateLayout();
                }
                this.dispatchImmediately("maxsizechanged");
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initiates drawing of this element.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.draw = function () {
        //this.validateLayout();
        this.addChildren();
        _super.prototype.draw.call(this);
    };
    /**
     * Overrides the original `removeElement` so that Container's actual element
     * is not removed. We do not need to remove element of a Container.
     *
     * We do this because remove element each time will fail the `getBBox`.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.removeElement = function () {
    };
    /**
     * Sorts Container's children: the ones with variable width and height are
     * put at the end of the list (depending on layout type), so that fixed-width
     * ones can be drawn first.
     *
     * @ignore Exclude from docs
     * @param {Sprite[]}  children  Container's children (elements)
     */
    Container.prototype.sortChildren = function (children) {
        var _this = this;
        if (children) {
            var length_1 = children.length;
            for (var i = 0; i < length_1; ++i) {
                var child = children[i];
                // TODO don't do anything if the indexes are the same ?
                if (this.children.indexOf(child) != -1) {
                    this.children.moveValue(child, i);
                }
            }
        }
        this._childrenByLayout = [];
        if (this.layout == "absolute") {
            __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](this.children.iterator(), function (child) {
                _this._childrenByLayout.push(child);
            });
        }
        else {
            // Assemble fixed-size and relative lists
            var fixed_1 = [];
            var relative_1 = [];
            __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](this.children.iterator(), function (child) {
                if (_this.layout == "horizontal" || _this.layout == "grid") {
                    if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentWidth)) {
                        fixed_1.push(child);
                    }
                    else {
                        relative_1.push(child);
                    }
                }
                else if (_this.layout == "vertical") {
                    if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentHeight)) {
                        fixed_1.push(child);
                    }
                    else {
                        relative_1.push(child);
                    }
                }
                else {
                    fixed_1.push(child);
                }
            });
            // Concat everything into list
            this._childrenByLayout = fixed_1.concat(relative_1);
        }
        this.calculateRelativeSize();
    };
    /**
     * Calculates relative sizes for all Container's children.
     *
     * @ignore Exclude from docs
     * @todo Make it protected?
     */
    Container.prototype.calculateRelativeSize = function () {
        var _this = this;
        var totalRelativeWidth = 0;
        var totalRelativeHeight = 0;
        __WEBPACK_IMPORTED_MODULE_7__utils_Array__["b" /* each */](this._childrenByLayout, function (child) {
            // if child is not measured, we do not care about it at all.
            if (child.isMeasured) {
                if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentWidth)) {
                    totalRelativeWidth += child.percentWidth;
                }
                if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentHeight)) {
                    totalRelativeHeight += child.percentHeight;
                }
            }
        });
        __WEBPACK_IMPORTED_MODULE_7__utils_Array__["b" /* each */](this._childrenByLayout, function (child) {
            if (child.isMeasured) {
                if (_this.layout == "horizontal") {
                    if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentWidth)) {
                        child.relativeWidth = child.percentWidth / totalRelativeWidth;
                    }
                    if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentHeight)) {
                        // consider adding a property which would make the container of 100% when it's height is set to % value but there is only one object with percent width set in the parent container
                        child.relativeHeight = child.percentHeight / 100;
                    }
                }
                if (_this.layout == "vertical") {
                    if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentHeight)) {
                        child.relativeHeight = child.percentHeight / totalRelativeHeight;
                    }
                    if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentWidth)) {
                        // consider adding a property which would make the container of 100% when it's height is set to % value but there is only one object with percent width set in the parent container
                        child.relativeWidth = child.percentWidth / 100;
                    }
                }
            }
            if (_this.layout == "absolute" || !child.isMeasured) {
                if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentWidth)) {
                    // consider adding a property which would make the container of 100% when it's height is set to % value but there is only one object with percent width set in the parent container
                    child.relativeWidth = child.percentWidth / 100;
                }
                if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentHeight)) {
                    // consider adding a property which would make the container of 100% when it's height is set to % value but there is only one object with percent width set in the parent container
                    child.relativeHeight = child.percentHeight / 100;
                }
            }
        });
    };
    /**
     * Adds all children to Container's SVG element.
     *
     * @ignore Exclude from docs
     * @todo Make it protected?
     */
    Container.prototype.addChildren = function () {
        var _this = this;
        this.sortChildren();
        // add it to parent
        if (this.element) {
            //$iter.each(this.zIndexGroups.iterator(), (child) => {
            var zindexed = __WEBPACK_IMPORTED_MODULE_7__utils_Array__["a" /* copy */](this._childrenByLayout);
            zindexed.sort(function (a, b) {
                return (a.zIndex || 0) - (b.zIndex || 0);
            });
            __WEBPACK_IMPORTED_MODULE_7__utils_Array__["b" /* each */](zindexed, function (child) {
                if (child.group) {
                    var group = _this.element;
                    group.add(child.group);
                }
            });
        }
    };
    /**
     * Creates a new element of specific type and assigns as a child to the
     * Container.
     *
     * @param  {T extends Sprite}  Class type for the new element
     * @return {T}                 New element
     */
    Container.prototype.createChild = function (classType) {
        var sprite = new classType();
        sprite.parent = this;
        return sprite;
    };
    /**
     * Removes all Container's children without actually destroying them.
     *
     * To destroy children use `disposeChildren()` instead.
     */
    Container.prototype.removeChildren = function () {
        // remove all children
        // TODO use iteration instead
        while (this.children.length > 0) {
            var child = this.children.getIndex(0);
            child.parent = undefined;
            this.children.removeValue(child);
        }
    };
    /**
     * Removes and destroys all Container's children.
     *
     * To remove children from Container without destroying them, use
     * `removeChildren()`.
     */
    Container.prototype.disposeChildren = function () {
        // TODO use iteration instead
        while (this.children.length > 0) {
            var child = this.children.getIndex(0);
            child.dispose();
            this.children.removeValue(child);
        }
    };
    Object.defineProperty(Container.prototype, "background", {
        /**
         * @return {Sprite} Background element
         */
        get: function () {
            if (!this._background) {
                this._background = this.createBackground();
                this.processBackground();
            }
            return this._background;
        },
        /**
         * An element to use as container background.
         *
         * @param {Sprite}  background  Background element
         */
        set: function (background) {
            if (this._background && this.background != background) {
                this.removeDispose(this._background);
            }
            if (background) {
                this._background = background;
                this._disposers.push(background);
                this.processBackground();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and returns a [[Rectangle]] to use as a background for Container.
     *
     * @ignore Exclude from docs
     * @return {this} Background Rectangle element
     */
    Container.prototype.createBackground = function () {
        return new __WEBPACK_IMPORTED_MODULE_3__elements_Rectangle__["a" /* Rectangle */]();
    };
    /**
     * Decorates background element with required properties.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.processBackground = function () {
        var background = this._background;
        if (background) {
            background.isMeasured = false;
            this._background.fill = new __WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("background");
            background.parent = this;
            background.isMeasured = false;
            this.children.removeValue(background);
            this._disposers.push(background);
        }
    };
    /**
     * Measures the size of container and informs its children of how much size
     * they can occupy, by setting their relative `maxWidth` and `maxHeight`
     * properties.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.validateLayout = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_7__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_4__System__["b" /* system */].invalidLayouts, this);
        this._availableWidth = this.innerWidth;
        this._availableHeight = this.innerHeight;
        var measuredWidth = 0;
        var measuredHeight = 0;
        var allValid = true;
        if (this.children) {
            this.sortChildren();
            // we itterate through list of children, sorted by layout priority. sprites which width non-relative width/height will go first, so we will reduce available width before proceeding to sprites with relative width/height
            __WEBPACK_IMPORTED_MODULE_7__utils_Array__["b" /* each */](this._childrenByLayout, function (child) {
                var maxWidth;
                var maxHeight;
                if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeWidth)) {
                    maxWidth = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["round"](_this._availableWidth * child.relativeWidth);
                    if (_this.layout == "horizontal") { // || this.layout == "absolute") { // not sure about absolute, but works well in cases like small map
                        maxWidth -= child.pixelMarginRight + child.pixelMarginLeft;
                    }
                }
                else {
                    if (_this.layout == "horizontal") {
                        if (child.invalid) {
                            child.validate();
                        }
                    }
                }
                if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeHeight)) {
                    maxHeight = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["round"](_this._availableHeight * child.relativeHeight);
                    if (_this.layout == "vertical") { //  || this.layout == "absolute") { // not sure about absolute, but works well in cases like small map
                        maxHeight -= child.pixelMarginTop + child.pixelMarginBottom;
                    }
                }
                else {
                    if (_this.layout == "vertical") {
                        if (child.invalid) {
                            child.validate();
                        }
                    }
                }
                // if child is valid
                if (child.invalid == false) {
                    if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeWidth)) {
                        child.maxWidth = maxWidth;
                    }
                    if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeHeight)) {
                        child.maxHeight = maxHeight;
                    }
                    if (child.isMeasured) {
                        // reduce available width if this is horizontal layout
                        if (_this.layout == "horizontal") {
                            if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentWidth)) {
                                if (child.measuredWidth > 0) {
                                    _this._availableWidth -= child.measuredWidth + child.pixelMarginLeft + child.pixelMarginRight;
                                    if (child.ignoreOverflow) {
                                        _this._availableWidth -= child.overflowX;
                                    }
                                }
                            }
                        }
                        // reduce available height if this is vertical layout
                        if (_this.layout == "vertical") {
                            if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.percentHeight)) {
                                if (child.measuredHeight > 0) {
                                    _this._availableHeight -= child.measuredHeight + child.pixelMarginTop + child.pixelMarginBottom;
                                    if (child.ignoreOverflow) {
                                        _this._availableHeight -= child.overflowY;
                                    }
                                }
                            }
                        }
                        measuredWidth = Math.max(measuredWidth, child.measuredWidth);
                        measuredHeight = Math.max(measuredHeight, child.measuredHeight);
                    }
                }
                // if child is not valid
                else {
                    // tell child what maximum width/ height it can occupy
                    if (child.isMeasured) {
                        if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeWidth)) {
                            if (child.maxWidth != maxWidth) { // need to check this because of allValid
                                child.maxWidth = maxWidth;
                                allValid = false;
                            }
                        }
                        if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeHeight)) {
                            if (child.maxHeight != maxHeight) { // need to check this because of allValid
                                child.maxHeight = maxHeight;
                                allValid = false;
                            }
                        }
                    }
                }
            });
        }
        // this is needed in case we have some children which we have to valign to, for example, center
        this._measuredWidth = measuredWidth + this.pixelPaddingLeft + this.pixelPaddingRight;
        this._measuredHeight = measuredHeight + this.pixelPaddingTop + this.pixelPaddingBottom;
        // arrange after measuring, only if all children are valid already
        if (allValid) {
            this.arrange();
        }
    };
    /**
     * Arranges children according to layout specs and available space / child
     * sizes.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.arrange = function () {
        var _this = this;
        if (this.children) {
            /*
               in this method we not only arrange children but also find out the size of the container
               it might seem it would be easier to get container size using sprite's measure method,
               however it would return only actual size of the bbox. However as each child meight have
               margins set, we need to check each child - we do it here.

               This method doesn't do anything with DOM, so it's not expensive
            */
            var measuredWidth = 0;
            var measuredHeight = 0;
            var left = void 0;
            var right = void 0;
            var top_1;
            var bottom = void 0;
            var nextX = 0;
            var nextY = 0;
            var row = 0;
            var column = 0;
            var columnWidth = [];
            var rowHeight = [];
            var maxCellWidth = void 0;
            var minCellWidth = void 0;
            var columnCount = void 0;
            var paddingLeft = this.pixelPaddingLeft;
            var paddingRight = this.pixelPaddingRight;
            var paddingTop = this.pixelPaddingTop;
            var paddingBottom = this.pixelPaddingBottom;
            // GRID PRECALCULATIONS
            if (this.layout == "grid") {
                minCellWidth = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["min"](__WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["map"](this.children.iterator(), function (x) { return x.measuredWidth; })), 1, this.maxWidth);
                maxCellWidth = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["max"](__WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["map"](this.children.iterator(), function (x) { return x.measuredWidth; })), 1, this.maxWidth);
                if (this.fixedWidthGrid) {
                    columnCount = this.maxWidth / maxCellWidth;
                }
                else {
                    columnCount = this.maxWidth / minCellWidth; // predicted number of columns, yes it is usually much more than real number, but we fix that later
                }
                columnCount = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](1, Math.floor(columnCount));
                columnWidth = this.getColumnWidth(columnCount, maxCellWidth);
            }
            var innerWidth_1 = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](this.innerWidth, this._measuredWidth - paddingLeft - paddingRight);
            var innerHeight_1 = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](this.innerHeight, this._measuredHeight - paddingTop - paddingBottom);
            var containerOverflowX = void 0;
            var containerOverflowY = void 0;
            // we itterate through array of children
            // TODO use iterator instead
            for (var i = 0, len = this.children.length; i < len; i++) {
                var child = this.children.getIndex(i);
                var x = undefined; // must reset
                var y = undefined; // must reset
                var childOverflowX = child.overflowX;
                var childOverflowY = child.overflowY;
                var childMarginLeft = child.pixelMarginLeft;
                var childMarginRight = child.pixelMarginRight;
                var childMarginTop = child.pixelMarginTop;
                var childMarginBottom = child.pixelMarginBottom;
                // this is not good, as if we rotate sprite, it gets incorrect
                //	let childWidth: number = Math.min(child.pixelWidth, child.measuredWidth);
                //	let childHeight: number = Math.min(child.pixelHeight, child.measuredHeight);
                var childWidth = child.measuredWidth;
                var childHeight = child.measuredHeight;
                if (child.isMeasured) {
                    switch (this.layout) {
                        // absolute layout
                        case "absolute":
                            // horizontal alignment
                            switch (child.align) {
                                case "left":
                                    x = child.pixelMarginLeft - childOverflowX;
                                    break;
                                case "center":
                                    x = (innerWidth_1 - childWidth) / 2 - childOverflowX;
                                    break;
                                case "right":
                                    x = innerWidth_1 - childWidth - childMarginRight - childOverflowX;
                                    break;
                            }
                            // vertical alignment
                            switch (child.valign) {
                                case "top":
                                    y = childMarginTop - childOverflowY;
                                    break;
                                case "middle":
                                    y = (innerHeight_1 - childHeight) / 2 - childOverflowY;
                                    break;
                                case "bottom":
                                    y = innerHeight_1 - childHeight - childMarginBottom - childOverflowY;
                                    break;
                            }
                            break;
                        // vertical layout
                        case "vertical":
                            if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeHeight)) {
                                childHeight = child.maxHeight;
                            }
                            if (child.ignoreOverflow) {
                                if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeHeight)) {
                                    childHeight += childOverflowY;
                                }
                                childOverflowX = 0;
                                childOverflowY = 0;
                            }
                            switch (child.align) {
                                case "left":
                                    x = childMarginLeft - childOverflowX;
                                    break;
                                case "center":
                                    x = (innerWidth_1 - childWidth) / 2 - childOverflowX;
                                    break;
                                case "right":
                                    x = innerWidth_1 - childWidth - childMarginRight - childOverflowX;
                                    break;
                            }
                            y = nextY - childOverflowY + childMarginTop;
                            nextY = childHeight + y + childOverflowY + childMarginBottom;
                            break;
                        // horizontal layout
                        case "horizontal":
                            if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeHeight)) {
                                childHeight = child.maxHeight;
                            }
                            if (child.ignoreOverflow) {
                                if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](child.relativeWidth)) {
                                    childWidth += childOverflowX;
                                }
                                childOverflowX = 0;
                                childOverflowY = 0;
                            }
                            switch (child.valign) {
                                case "top":
                                    y = child.pixelMarginTop - childOverflowY;
                                    break;
                                case "middle":
                                    y = (innerHeight_1 - childHeight) / 2 - childOverflowY;
                                    break;
                                case "bottom":
                                    y = innerHeight_1 - childHeight - childMarginBottom - childOverflowY;
                                    break;
                            }
                            x = nextX - childOverflowX + childMarginLeft;
                            nextX = x + childWidth + childOverflowX + childMarginRight;
                            break;
                        case "grid":
                            x = nextX - childOverflowX + childMarginLeft;
                            y = nextY - childOverflowY + childMarginTop;
                            switch (child.valign) {
                                case "top":
                                    y = nextY + child.pixelMarginTop - childOverflowY;
                                    break;
                                case "middle":
                                    y = nextY + (innerHeight_1 - childHeight) / 2 - childOverflowY;
                                    break;
                                case "bottom":
                                    y = nextY + innerHeight_1 - childHeight - childMarginBottom - childOverflowY;
                                    break;
                            }
                            nextX += columnWidth[column];
                            rowHeight[row] = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](rowHeight[row], childHeight);
                            column++;
                            var nextColumnWidth = columnWidth[column];
                            if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](nextColumnWidth)) {
                                nextColumnWidth = maxCellWidth;
                            }
                            // here we reduce number of columns
                            if (nextX > this.maxWidth - nextColumnWidth && column < columnCount) {
                                columnCount = column - 1; // cause we added one and we need current item to go to next row
                                nextX = 0;
                                nextY = 0;
                                row = 0;
                                column = 0;
                                columnWidth = this.getColumnWidth(columnCount, maxCellWidth);
                                rowHeight = [];
                                i = -1;
                                continue;
                            }
                            if (column >= columnCount) {
                                column = 0;
                                nextY += rowHeight[row];
                                row++;
                                nextX = 0;
                            }
                            break;
                    }
                    // NaN is handled by setter
                    child.moveTo({ x: x, y: y });
                    var childLeft = child.pixelX + childOverflowX;
                    var childRight = child.pixelX + childWidth + childOverflowX;
                    var childTop = child.pixelY + childOverflowY;
                    var childBottom = child.pixelY + childHeight + childOverflowY;
                    childLeft -= child.pixelMarginLeft;
                    childRight += child.pixelMarginRight;
                    childTop -= child.pixelMarginTop;
                    childBottom += child.pixelMarginBottom;
                    if (childRight > right || !__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](right)) {
                        right = childRight;
                    }
                    if (childLeft < left || !__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](left)) {
                        left = childLeft;
                    }
                    if (childTop < top_1 || !__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](top_1)) {
                        top_1 = childTop;
                    }
                    if (childBottom > bottom || !__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](bottom)) {
                        bottom = childBottom;
                    }
                    measuredWidth = right - left;
                    measuredHeight = bottom - top_1;
                    containerOverflowX = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["min"](containerOverflowX, childLeft);
                    containerOverflowY = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["min"](containerOverflowY, childTop);
                }
            }
            this._containerOverflowX = containerOverflowX;
            this._containerOverflowY = containerOverflowY;
            innerWidth_1 = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](innerWidth_1, measuredWidth);
            innerHeight_1 = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](innerHeight_1, measuredHeight);
            /// handle content alignment
            var dx_1;
            var dy_1;
            if (this.contentAlign == "left") {
                dx_1 = 0;
            }
            if (this.contentAlign == "center") {
                dx_1 = (innerWidth_1 - measuredWidth) / 2;
            }
            if (this.contentAlign == "right") {
                dx_1 = innerWidth_1 - measuredWidth;
            }
            if (this.contentValign == "top") {
                dy_1 = 0;
            }
            if (this.contentValign == "middle") {
                dy_1 = (innerHeight_1 - measuredHeight) / 2;
            }
            if (this.contentValign == "bottom") {
                dy_1 = innerHeight_1 - measuredHeight;
            }
            if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](dx_1)) {
                __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](this.children.iterator(), function (child) {
                    var childOverflowX = child.overflowX;
                    var ddx = dx_1;
                    if (child.ignoreOverflow) {
                        childOverflowX = 0;
                    }
                    if (_this.layout == "horizontal") {
                        child.x = child.pixelX + ddx;
                    }
                    // individual grid elements can not be aligned vertically, that's why it's different from horizontal
                    if (_this.layout == "grid") {
                        child.x = child.pixelX + ddx;
                    }
                    if (_this.layout == "vertical") {
                        ddx += child.pixelMarginLeft;
                        if (child.align == "none") {
                            child.x = ddx - childOverflowX;
                        }
                    }
                    if (_this.layout == "absolute") {
                        ddx += child.pixelMarginLeft;
                        if (child.align == "none") {
                            child.x = ddx - childOverflowX;
                        }
                    }
                });
            }
            if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](dy_1)) {
                __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](this.children.iterator(), function (child) {
                    var childOverflowY = child.overflowY;
                    var ddy = dy_1;
                    if (child.ignoreOverflow) {
                        childOverflowY = 0;
                    }
                    if (_this.layout == "horizontal") {
                        ddy += child.pixelMarginTop;
                        if (child.valign == "none") {
                            child.y = ddy - childOverflowY;
                        }
                    }
                    // individual grid elements can not be aligned vertically, that's why it's different from horizontal
                    if (_this.layout == "grid") {
                        ddy += child.pixelMarginTop;
                        child.y = ddy - childOverflowY;
                    }
                    if (_this.layout == "vertical") {
                        child.y = child.pixelY + ddy;
                    }
                    if (_this.layout == "absolute") {
                        ddy += child.pixelMarginTop;
                        if (child.valign == "none") {
                            child.y = ddy - childOverflowY;
                        }
                    }
                });
            }
            var oldBBox = this._bbox;
            measuredWidth = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](measuredWidth, this.innerWidth), 1);
            measuredHeight = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](measuredHeight, this.innerHeight), 1);
            // experimental
            // this prevents invalidating layout in such cases as scrolling category axis, when labels go outside bounds and results transformed event
            // todo: need to check if this doesn't cause other problems.
            if (this.maxWidth > 0) {
                measuredWidth = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["min"](measuredWidth, this.maxWidth);
                measuredWidth = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](measuredWidth, this.minWidth);
            }
            if (this.maxHeight > 0) {
                measuredHeight = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["min"](measuredHeight, this.maxHeight);
                measuredHeight = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](measuredHeight, this.minHeight);
            }
            this._bbox = { x: 0, y: 0, width: measuredWidth, height: measuredHeight };
            this.updateBackground(measuredWidth, measuredHeight);
            this.measure();
            if (!oldBBox || (oldBBox.width != measuredWidth || oldBBox.height != measuredHeight)) {
                // temp
                if (this.events.isEnabled("transformed")) {
                    var event_1 = {
                        type: "transformed",
                        target: this
                    };
                    if (oldBBox) {
                        event_1.dummyData = oldBBox.width + " " + measuredWidth + "  " + oldBBox.height + " " + measuredHeight;
                    }
                    this.events.dispatchImmediately("transformed", event_1);
                }
            }
        }
    };
    /**
     * Update the background to fit into specific dimensions.
     *
     * @ignore Exclude from docs
     * @todo Make it protected?
     * @param {number} measuredWidth  Wdith (px)
     * @param {number} measuredHeight Height (px)
     */
    Container.prototype.updateBackground = function (measuredWidth, measuredHeight) {
        var background = this._background; // accessing protected, as getter creates instance if it doesn't exist
        if (background) {
            if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](this.relativeWidth)) {
                background.width = this.maxWidth;
            }
            else {
                background.width = measuredWidth + this.pixelPaddingLeft + this.pixelPaddingRight;
            }
            if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isNumber"](this.relativeHeight)) {
                background.height = this.maxHeight;
            }
            else {
                background.height = measuredHeight + this.pixelPaddingTop + this.pixelPaddingBottom;
            }
            background.x = this.overflowX;
            background.y = this.overflowY;
            this.group.addToBack(background.group);
        }
    };
    /**
     * Returns widths of all columns in a horizontal Container layout.
     *
     * @ignore Exclude from docs
     * @param  {number}    columnCount   Number of columns
     * @param  {number}    maxCellWidth  Maximum width of one grid cell
     * @return {number[]}                An array of column widths
     */
    Container.prototype.getColumnWidth = function (columnCount, maxCellWidth) {
        var _this = this;
        var columnWidth = [];
        var column = 0;
        __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](this.children.iterator(), function (child) {
            if (child.isMeasured) {
                if (_this.fixedWidthGrid) {
                    columnWidth[column] = maxCellWidth;
                }
                else {
                    columnWidth[column] = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["max"](columnWidth[column], child.measuredWidth + child.pixelMarginRight + child.pixelMarginLeft);
                }
                column++;
                if (column == columnCount) {
                    column = 0;
                }
            }
        });
        return columnWidth;
    };
    Object.defineProperty(Container.prototype, "layout", {
        /**
         * @return {ContainerLayout} Layout
         */
        get: function () {
            return this.getPropertyValue("layout");
        },
        /**
         * Container layout.
         *
         * Options: "absolute" (default), "vertical", "horizontal", "grid", "none". "none" is quite the same as "absolute" - the objects will
         * be positioned at their x, y coordinates, the difference is that with "absolute" you can still use align/valign for children and with "none" you can not.
         * Use "none" as much as you can as it's most cpu-saving layout.
         *
         * @default "absolute"
         * @param {ContainerLayout} value Layout
         */
        set: function (value) {
            if (this.setPropertyValue("layout", value)) {
                this.invalidateLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "contentValign", {
        /**
         * @return {VerticalAlign} Vertical alignement
         */
        get: function () {
            return this._contentValign;
        },
        /**
         * Vertical alignement of the elements for the vertical Container.
         *
         * This is used when Container is larger than the height of all its children.
         *
         * @param {VerticalAlign} value vertical alignement
         */
        set: function (value) {
            this._contentValign = value;
            this.invalidateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "contentAlign", {
        /**
         * @return {Align} Horizontal alignement
         */
        get: function () {
            return this._contentAlign;
        },
        /**
         * Horizontal alignement of the elements for the horizontal Container.
         *
         * This is used when Container is larger than the height of all its children.
         *
         * @param {Align}  value  Horizontal alignement
         */
        set: function (value) {
            this._contentAlign = value;
            this.invalidateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "fixedWidthGrid", {
        /**
         * @return {boolean} Should use fixed width grid?
         */
        get: function () {
            return this._fixedWidthGrid;
        },
        /**
         * Controls if the grid of the Container should use fixed width. Fixed width
         * grid will divide available space to all its columns/rows equally, without
         * adapting to actual child sizes or size requirements.
         *
         * @default false
         * @param {boolean}  value  Should use fixed width grid?
         */
        set: function (value) {
            if (this._fixedWidthGrid != value) {
                this._fixedWidthGrid = value;
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if point is within bounds of a container.
     *
     * @param  {IPoint}   point  A coordinate to check
     * @return {boolean}         `true` if it fits within container
     */
    Container.prototype.fitsToBounds = function (point) {
        var x = point.x;
        var y = point.y;
        var deviation = 0.5; // sometimes coordinates are rounded to numbers like .999 so we add deviation here
        if (x >= -deviation && x <= this.pixelWidth + deviation && y >= -deviation && y <= this.pixelHeight + deviation) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Copies all properties from different Container, including background
     * clone.
     *
     * @param {this}  source  Source Container to copy from
     */
    Container.prototype.copyFrom = function (source) {
        var _this = this;
        _super.prototype.copyFrom.call(this, source);
        this.layout = source.layout;
        this.setStateOnChildren = source.setStateOnChildren;
        if (source._background) {
            this.background = source._background.clone();
        }
        __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](source.children.iterator(), function (child) {
            if (child.shouldClone) {
                var clonedChild = child.clone();
                clonedChild.parent = _this;
            }
        });
    };
    Object.defineProperty(Container.prototype, "preloader", {
        /**
         * Creates (if necessary) and returns an instance of the [[Preloader]] to
         * show when Container is busy loading.
         *
         * @return {Preloader} Preloader instance
         */
        get: function () {
            if (this._preloader) {
                return this._preloader;
            }
            else {
                if (this.parent) {
                    return this.parent.preloader;
                }
            }
        },
        /**
         * Sets a [[Preloader]] instance to be used when Container is busy.
         *
         * @param {Preloader} preloader Preloader instance
         */
        set: function (preloader) {
            if (this._preloader) {
                this.removeDispose(this._preloader);
            }
            this._preloader = preloader;
            if (preloader) {
                preloader.parent = this.tooltipContainer;
                this._disposers.push(preloader);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Removes Container from the system-wide list of invalid Containers.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.removeFromInvalids = function () {
        _super.prototype.removeFromInvalids.call(this);
        __WEBPACK_IMPORTED_MODULE_7__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_4__System__["b" /* system */].invalidLayouts, this);
    };
    /**
     * Sets a [[DataItem]] to be used as data for the Container.
     *
     * @todo Description
     * @param {DataItem} dataItem DataItem
     */
    Container.prototype.setDataItem = function (dataItem) {
        // this place is potentially dangerous, as if we set datItem for some dummy container, all children dataItems will be overriden
        // the main reason for doing this is that we need a setDataItem code to be called for each sprite, otherwise property fields won't be
        // applied. Also, getting dataItem from parent all the time is more expensive than saving value.
        if (this._dataItem != dataItem) {
            __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](this.children.iterator(), function (child) {
                child.dataItem = dataItem;
            });
        }
        _super.prototype.setDataItem.call(this, dataItem);
    };
    /**
     * Measures the element.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.measureElement = function () {
    };
    /**
     * Returns Tooltip X coordinate if it's set, or middle of the element.
     *
     * @ignore Exclude from docs
     * @return {number} X (px)
     */
    Container.prototype.getTooltipX = function () {
        return _super.prototype.getTooltipX.call(this) + this._containerOverflowX;
    };
    /**
     * Returns Tooltip Y coordinate if it's set, or middle of the element.
     *
     * @ignore Exclude from docs
     * @return {number} Y (px)
     */
    Container.prototype.getTooltipY = function () {
        return _super.prototype.getTooltipY.call(this) + this._containerOverflowY;
    };
    Object.defineProperty(Container.prototype, "fontSize", {
        /**
         * Returns current font size for text element.
         *
         * @return {any} Font size
         */
        get: function () {
            return this.getPropertyValue("fontSize");
        },
        /**
         * Sets font size to be used for the text. The size can either be numeric, in
         * pxels, or other measurements.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param {any} value Font size value
         */
        set: function (value) {
            this.setPropertyValue("fontSize", value, true);
            this.setSVGAttribute({ "font-size": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "fontWeigth", {
        /**
         * Returns currently set font weight.
         *
         * @return {FontWeight} Font weight
         */
        get: function () {
            return this.getPropertyValue("fontWeigth");
        },
        /**
         * Sets font weight to use for text.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param {FontWeight} value Font weight
         */
        set: function (value) {
            this.setPropertyValue("fontWeigth", value);
            this.setSVGAttribute({ "font-weight": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "textDecoration", {
        /**
         * Returns current text decoration setting.
         *
         * @return {TextDecoration} Decoration
         */
        get: function () {
            return this.getPropertyValue("textDecoration");
        },
        /**
         * Sets a text decoration to use for text.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param {TextDecoration} value Decoration
         */
        set: function (value) {
            this.setPropertyValue("textDecoration", value);
            this.setSVGAttribute({ "text-decoration": value });
        },
        enumerable: true,
        configurable: true
    });
    Container.prototype.dispose = function () {
        this.disposeChildren();
        _super.prototype.dispose.call(this);
    };
    /**
     * Applies a [[SpriteState]] on this element.
     *
     * The first parameter can either be a name state or a [[SpriteState]]
     * instance.
     *
     * When run, this method will apply SVG properties defined in a
     * [[SpriteState]], but only those that are relevant to this particular
     * element, i.e. are in the `properties` array.
     *
     * @see {@link SpriteState}
     * @param {string | SpriteState} value               A state - name key or instance
     * @param {number}               transitionDuration  Duration of the transition between current and new state
     * @param {number) => number}    easing              An easing function
     */
    Container.prototype.setState = function (value, transitionDuration, easing) {
        var stateName = value;
        if (value instanceof __WEBPACK_IMPORTED_MODULE_1__SpriteState__["a" /* SpriteState */]) {
            stateName = value.name;
        }
        if (this.setStateOnChildren) {
            __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](this.children.iterator(), function (child) {
                child.setState(stateName, transitionDuration, easing);
            });
        }
        return _super.prototype.setState.call(this, value, transitionDuration, easing);
    };
    return Container;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Container.js.map

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IndexedIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return ListGrouper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return ListDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return List; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return ListTemplate; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Iterator__ = __webpack_require__(4);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




/**
 * @todo Description
 */
var IndexedIterable = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {Array<A>}  array  List items
     * @param {number}    start  Start index
     * @param {number}    end    End index
     */
    function IndexedIterable(array, start, end) {
        this._array = array;
        this._start = start;
        this._end = end;
    }
    /**
     * Returns a list item iterator.
     *
     * @return {Iterator} Iterator
     */
    IndexedIterable.prototype.iterator = function () {
        var _this = this;
        return function (push) {
            if (_this._start !== _this._end) {
                if (_this._start < _this._end) {
                    for (var i = _this._start; i < _this._end; ++i) {
                        if (!push(_this._array[i])) {
                            break;
                        }
                    }
                }
                else {
                    for (var i = _this._start - 1; i >= _this._end; --i) {
                        if (!push(_this._array[i])) {
                            break;
                        }
                    }
                }
            }
        };
    };
    /**
     * Returns an interable list sorted backwards than current list.
     *
     * @return {IndexedIterable<A>} List
     */
    IndexedIterable.prototype.backwards = function () {
        return new IndexedIterable(this._array, this._end, this._start);
    };
    /**
     * Returns a new list consisting only of specific range of items between
     * `start` and `end` indexes.
     *
     * @param  {number}              start  Start index
     * @param  {number}              end    End index
     * @return {IndexedIterable<A>}         List
     */
    IndexedIterable.prototype.range = function (start, end) {
        if (start <= end) {
            if (this._start === this._end) {
                return this;
            }
            else if (this._start < this._end) {
                var diff = end - start;
                start = Math.max(this._start + start, this._start);
                end = Math.min(start + diff, this._end);
                return new IndexedIterable(this._array, start, end);
            }
            else {
                var diff = end - start;
                start = Math.max(this._start - start, this._end);
                end = Math.max(start - diff, this._end);
                return new IndexedIterable(this._array, start, end);
            }
        }
        else {
            throw new Error("Start index must be lower than end index");
        }
    };
    return IndexedIterable;
}());

/**
 * ListGrouper organizes [[List]] items into groups.
 *
 * @ignore Exclude from docs
 */
var ListGrouper = /** @class */ (function (_super) {
    __extends(ListGrouper, _super);
    /**
     * Constructor.
     */
    function ListGrouper(list, getKey, sort) {
        var _this = _super.call(this, [
            list.events.on("insert", function (x) {
                var value = x.newValue;
                var key = _this._getKey(value);
                var index = 0;
                __WEBPACK_IMPORTED_MODULE_3__Iterator__["eachContinue"](list.iterator(), function (x) {
                    if (x === value) {
                        return false;
                    }
                    else if (_this._getKey(x) === key) {
                        ++index;
                    }
                    return true;
                });
                _this._insert(value, key, index);
            }),
            list.events.on("remove", function (x) {
                _this._remove(x.oldValue);
            })
        ]) || this;
        /**
         * Grouping keys.
         *
         * @type {Array<number>}
         */
        _this._keys = [];
        /**
         * List item groups.
         */
        _this._groups = {};
        _this._getKey = getKey;
        _this._sort = sort;
        __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](list.iterator(), function (x) {
            _this._insert(x, getKey(x));
        });
        return _this;
    }
    /**
     * Inserts an item (`x`) to a specific group (`key`) and specific `index`.
     *
     * @param {A}       x      Item
     * @param {number}  key    Group name
     * @param {number}  index  Index
     */
    ListGrouper.prototype._insert = function (x, key, index) {
        if (this._groups[key] == null) {
            this._groups[key] = [];
            // TODO code duplication with SortedList
            var _a = __WEBPACK_IMPORTED_MODULE_2__Array__["f" /* getSortedIndex */](this._keys, this._sort, key), found = _a.found, index_1 = _a.index;
            if (found) {
                throw new Error("Key already exists: " + key);
            }
            else {
                __WEBPACK_IMPORTED_MODULE_2__Array__["h" /* insertIndex */](this._keys, index_1, key);
            }
        }
        if (index == null) {
            this._groups[key].push(x);
        }
        else {
            __WEBPACK_IMPORTED_MODULE_2__Array__["h" /* insertIndex */](this._groups[key], index, x);
        }
    };
    /**
     * Removes an item from the list.
     *
     * @param {A} x Item to remove
     */
    ListGrouper.prototype._remove = function (x) {
        var key = this._getKey(x);
        var values = this._groups[key];
        if (values != null) {
            __WEBPACK_IMPORTED_MODULE_2__Array__["k" /* remove */](values, x);
            if (values.length === 0) {
                delete this._groups[key];
                var _a = __WEBPACK_IMPORTED_MODULE_2__Array__["f" /* getSortedIndex */](this._keys, this._sort, key), found = _a.found, index = _a.index;
                if (found) {
                    __WEBPACK_IMPORTED_MODULE_2__Array__["l" /* removeIndex */](this._keys, index);
                }
                else {
                    throw new Error("Key doesn't exist: " + key);
                }
            }
        }
    };
    /**
     * Returns an iterator for the list.
     *
     * The iterator will iterate through all items in all groups.
     *
     * @return {.Iterator<A>} Iterator
     */
    ListGrouper.prototype.iterator = function () {
        var _this = this;
        return __WEBPACK_IMPORTED_MODULE_3__Iterator__["flatten"](__WEBPACK_IMPORTED_MODULE_3__Iterator__["map"](__WEBPACK_IMPORTED_MODULE_3__Iterator__["fromArray"](this._keys), function (key) {
            return __WEBPACK_IMPORTED_MODULE_3__Iterator__["fromArray"](_this._groups[key]);
        }));
    };
    return ListGrouper;
}(__WEBPACK_IMPORTED_MODULE_0__Disposer__["c" /* MultiDisposer */]));

/**
 * A disposable list, which when disposed itself will call `dispose()` method
 * on all its items.
 */
var ListDisposer = /** @class */ (function (_super) {
    __extends(ListDisposer, _super);
    function ListDisposer(list) {
        var _this = this;
        var disposer = list.events.on("remove", function (x) {
            x.oldValue.dispose();
        });
        _this = _super.call(this, function () {
            disposer.dispose();
            // TODO clear the list ?
            __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](list.iterator(), function (x) {
                x.dispose();
            });
        }) || this;
        return _this;
    }
    return ListDisposer;
}(__WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */]));

/**
 * Checks if specific index fits into length.
 *
 * @param {number}  index  Index
 * @param {number}  len    Length
 */
function checkBounds(index, len) {
    if (!(index >= 0 && index < len)) {
        throw new Error("Index out of bounds: " + index);
    }
}
/**
 * A List class is used to hold a number of indexed items of the same type.
 */
var List = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param {Array<T>}  initial  Inital list of values to add to list
     */
    function List(initial) {
        if (initial === void 0) { initial = []; }
        this.events = new __WEBPACK_IMPORTED_MODULE_1__EventDispatcher__["a" /* EventDispatcher */]();
        this._values = initial;
    }
    Object.defineProperty(List.prototype, "values", {
        /**
         * An array of values in the list.
         *
         * Do not use this property to add values. Rather use dedicated methods, like
         * `push()`, `removeIndex()`, etc.
         *
         * @readonly
         * @return {Array<T>} List values
         */
        get: function () {
            return this._values;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if list contains specific item reference.
     *
     * @param  {T}        item  Item to search for
     * @return {boolean}        `true` if found, `false` if not found
     */
    List.prototype.contains = function (value) {
        return this._values.indexOf(value) !== -1;
    };
    /**
     * Removes specific item from the list.
     *
     * @param {T} item An item to remove
     */
    List.prototype.removeValue = function (value) {
        var index;
        while ((index = this.indexOf(value)) !== -1) {
            this.removeIndex(index);
        }
    };
    /**
     * Searches the list for specific item and returns its index.
     *
     * @param  {T}       item  An item to search for
     * @return {number}        Index or -1 if not found
     */
    List.prototype.indexOf = function (value) {
        return __WEBPACK_IMPORTED_MODULE_2__Array__["g" /* indexOf */](this._values, value);
    };
    Object.defineProperty(List.prototype, "length", {
        /**
         * Number of items in list.
         *
         * @readonly
         * @return {number} Number of items
         */
        get: function () {
            return this._values.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if there's a value at specific index.
     *
     * @param  {number}   index  Index
     * @return {boolean}         Value exists?
     */
    List.prototype.hasIndex = function (index) {
        return index >= 0 && index < this._values.length;
    };
    /**
     * Returns an item at specified index.
     *
     * @param  {number}  index  Index
     * @return {T}              List item
     */
    List.prototype.getIndex = function (index) {
        return this._values[index];
    };
    /**
     * Sets value at specific index.
     *
     * If there's already a value at the index, it is overwritten.
     *
     * @param  {number}  index  Index
     * @param  {T}       value  New value
     * @return {T}              New value
     */
    List.prototype.setIndex = function (index, value) {
        checkBounds(index, this._values.length);
        var oldValue = this._values[index];
        // Do nothing if the old value and the new value are the same
        if (oldValue !== value) {
            this._values[index] = value;
            if (this.events.isEnabled("setIndex")) {
                this.events.dispatchImmediately("setIndex", {
                    type: "setIndex",
                    target: this,
                    index: index,
                    oldValue: oldValue,
                    newValue: value
                });
            }
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
            if (this.events.isEnabled("insert")) {
                this.events.dispatchImmediately("insert", {
                    type: "insert",
                    target: this,
                    newValue: value
                });
            }
        }
        return oldValue;
    };
    /**
     * Adds an item to the list at a specific index, which pushes all the other
     * items further down the list.
     *
     * @param  {number} index Index
     * @param  {T}      item  An item to add
     */
    List.prototype.insertIndex = function (index, value) {
        checkBounds(index, this._values.length + 1);
        __WEBPACK_IMPORTED_MODULE_2__Array__["h" /* insertIndex */](this._values, index, value);
        if (this.events.isEnabled("insertIndex")) {
            this.events.dispatchImmediately("insertIndex", {
                type: "insertIndex",
                target: this,
                index: index,
                newValue: value
            });
        }
        if (this.events.isEnabled("insert")) {
            this.events.dispatchImmediately("insert", {
                type: "insert",
                target: this,
                newValue: value
            });
        }
    };
    /**
     * [_sortQuicksort description]
     *
     * @todo Description
     * @param {number}    low    [description]
     * @param {number}    high   [description]
     * @param {function}  order  [description]
     */
    List.prototype._sortQuicksort = function (low, high, order) {
        if (low < high) {
            var p = this._sortPartition(low, high, order);
            this._sortQuicksort(low, p, order);
            this._sortQuicksort(p + 1, high, order);
        }
    };
    /**
     * [_sortPartition description]
     *
     * @todo Description
     * @param  {number}    low    [description]
     * @param  {number}    high   [description]
     * @param  {function}  order  [description]
     * @return {number}           [description]
     */
    List.prototype._sortPartition = function (low, high, order) {
        var values = this._values;
        var pivot = values[low];
        var i = low - 1;
        var j = high + 1;
        for (;;) {
            do {
                ++i;
            } while (order(values[i], pivot) < 0);
            do {
                --j;
            } while (order(values[j], pivot) > 0);
            if (i >= j) {
                return j;
            }
            else {
                this.swap(i, j);
            }
        }
    };
    /**
     * Reorders list items according to specific ordering function.
     *
     * @param {T) => Ordering}  order  Ordering function
     */
    List.prototype.sort = function (order) {
        // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme
        // @todo faster implementation of this
        // @todo test this
        this._sortQuicksort(0, this._values.length - 1, order);
    };
    /**
     * Swaps indexes of two items in the list.
     *
     * @param {number}  a  Item 1
     * @param {number}  b  Item 2
     */
    List.prototype.swap = function (a, b) {
        var len = this._values.length;
        checkBounds(a, len);
        checkBounds(b, len);
        if (a !== b) {
            var value_a = this._values[a];
            var value_b = this._values[b];
            this._values[a] = value_b;
            if (this.events.isEnabled("setIndex")) {
                this.events.dispatchImmediately("setIndex", {
                    type: "setIndex",
                    target: this,
                    index: a,
                    oldValue: value_a,
                    newValue: value_b
                });
            }
            this._values[b] = value_a;
            if (this.events.isEnabled("setIndex")) {
                this.events.dispatchImmediately("setIndex", {
                    type: "setIndex",
                    target: this,
                    index: b,
                    oldValue: value_b,
                    newValue: value_a
                });
            }
        }
    };
    /**
     * Removes a value at specific index.
     *
     * @param  {number}  index  Index of value to remove
     * @return {T}              Removed value
     */
    List.prototype.removeIndex = function (index) {
        checkBounds(index, this._values.length);
        var oldValue = this._values[index];
        __WEBPACK_IMPORTED_MODULE_2__Array__["l" /* removeIndex */](this._values, index);
        if (this.events.isEnabled("removeIndex")) {
            this.events.dispatchImmediately("removeIndex", {
                type: "removeIndex",
                target: this,
                index: index,
                oldValue: oldValue
            });
        }
        if (this.events.isEnabled("remove")) {
            this.events.dispatchImmediately("remove", {
                type: "remove",
                target: this,
                oldValue: oldValue
            });
        }
        return oldValue;
    };
    /**
     * Moves an item to a specific index within the list
     *
     * If the index is not specified it will move the item to the end of the
     * list.
     *
     * @param {T}       value  Item to move
     * @param {number}  index  Index to place item at
     */
    List.prototype.moveValue = function (value, toIndex) {
        // TODO don't do anything if the desired index is the same as the current index
        var index = this.indexOf(value);
        // TODO remove all old values rather than only the first ?
        if (index !== -1) {
            var oldValue = this._values[index];
            __WEBPACK_IMPORTED_MODULE_2__Array__["l" /* removeIndex */](this._values, index);
            if (this.events.isEnabled("removeIndex")) {
                this.events.dispatchImmediately("removeIndex", {
                    type: "removeIndex",
                    target: this,
                    index: index,
                    oldValue: oldValue
                });
            }
        }
        if (toIndex == null) {
            toIndex = this._values.length;
            this._values.push(value);
        }
        else {
            __WEBPACK_IMPORTED_MODULE_2__Array__["h" /* insertIndex */](this._values, toIndex, value);
        }
        if (this.events.isEnabled("insertIndex")) {
            this.events.dispatchImmediately("insertIndex", {
                type: "insertIndex",
                target: this,
                index: toIndex,
                newValue: value
            });
        }
        if (index === -1) {
            if (this.events.isEnabled("insert")) {
                this.events.dispatchImmediately("insert", {
                    type: "insert",
                    target: this,
                    newValue: value
                });
            }
        }
    };
    /**
     * Adds an item to the end of the list.
     *
     * @param  {T}  item  An item to add
     */
    List.prototype.push = function (value) {
        var index = this._values.push(value) - 1;
        if (this.events.isEnabled("insertIndex")) {
            this.events.dispatchImmediately("insertIndex", {
                type: "insertIndex",
                target: this,
                index: index,
                newValue: value
            });
        }
        if (this.events.isEnabled("insert")) {
            this.events.dispatchImmediately("insert", {
                type: "insert",
                target: this,
                newValue: value
            });
        }
        return value;
    };
    /**
     * Adds an item as a first item in the list.
     *
     * @param  {T}  item  An item to add
     */
    List.prototype.unshift = function (value) {
        return this.insertIndex(0, value);
    };
    /**
     * Adds multiple items to the list.
     *
     * @param {Array<T>}  items  An Array of items to add
     */
    List.prototype.pushAll = function (values) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_2__Array__["b" /* each */](values, function (value) {
            _this.push(value);
        });
    };
    /**
     * Copies and adds items from abother list.
     *
     * @param {List<T>}  source  A list top copy items from
     */
    List.prototype.copyFrom = function (source) {
        this.pushAll(source._values);
    };
    /**
     * Returns the last item from the list, and removes it.
     *
     * @return {T} Item
     */
    List.prototype.pop = function () {
        var index = this._values.length - 1;
        return index < 0 ? undefined : this.removeIndex(this._values.length - 1);
    };
    /**
     * Returns the first item from the list, and removes it.
     *
     * @return {T} Item
     */
    List.prototype.shift = function () {
        return this._values.length ? this.removeIndex(0) : undefined;
    };
    /**
     * Sets multiple items to the list.
     *
     * All current items are removed.
     *
     * @param {Array<T>}  newArray  New items
     */
    List.prototype.setAll = function (newArray) {
        var _this = this;
        // @tod if a value exists in both the new and old arrays, don't send remove/insert events
        var oldArray = __WEBPACK_IMPORTED_MODULE_2__Array__["a" /* copy */](this._values);
        this._values.length = 0;
        __WEBPACK_IMPORTED_MODULE_2__Array__["b" /* each */](newArray, function (value) {
            _this._values.push(value);
        });
        if (this.events.isEnabled("setAll")) {
            this.events.dispatchImmediately("setAll", {
                type: "setAll",
                target: this,
                oldArray: oldArray,
                newArray: this._values // TODO make a copy ?
            });
        }
        if (this.events.isEnabled("remove")) {
            __WEBPACK_IMPORTED_MODULE_2__Array__["b" /* each */](oldArray, function (x) {
                _this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: _this,
                    oldValue: x
                });
            });
        }
        if (this.events.isEnabled("insert")) {
            __WEBPACK_IMPORTED_MODULE_2__Array__["b" /* each */](this._values, function (x) {
                _this.events.dispatchImmediately("insert", {
                    type: "insert",
                    target: _this,
                    newValue: x
                });
            });
        }
    };
    /**
     * Removes all items from the list.
     */
    List.prototype.clear = function () {
        this.setAll([]);
    };
    /**
     * Returns a list iterator.
     *
     * @return {Iterator} Iterator
     */
    List.prototype.iterator = function () {
        return __WEBPACK_IMPORTED_MODULE_3__Iterator__["fromArray"](this._values);
    };
    /**
     * Returns a specific range of list items, which can be iterated.
     *
     * @ignore Exclude from docs
     * @todo Code duplication with IndexedIterable
     * @param  {number}              start  Start index
     * @param  {number}              end    End index
     * @return {IndexedIterable<T>}         Range
     */
    List.prototype.range = function (start, end) {
        if (start <= end) {
            var diff = end - start;
            start = Math.max(start, 0);
            end = Math.min(start + diff, this._values.length);
            return new IndexedIterable(this._values, start, end);
        }
        else {
            throw new Error("Start index must be lower than end index");
        }
    };
    /**
     * Returns an iterator that has list items sorted backwards.
     *
     * @ignore Exclude from docs
     * @return {IndexedIterable<T>} List
     */
    List.prototype.backwards = function () {
        return new IndexedIterable(this._values, this._values.length, 0);
    };
    return List;
}());

/**
 * A version of a [[List]] that has a "template".
 *
 * A template is an instance of an object, that can be used to create new
 * elements in the list without actually needing to create instances for those.
 *
 * When new element is created in the list, e.g. by calling its `create()`
 * method, an exact copy of the element is created (including properties and
 * other attributes), inserted into the list and returned.
 */
var ListTemplate = /** @class */ (function (_super) {
    __extends(ListTemplate, _super);
    /**
     * Constructor
     *
     * @param {T} t Template object
     */
    function ListTemplate(t) {
        var _this = _super.call(this) || this;
        _this.template = t;
        return _this;
    }
    Object.defineProperty(ListTemplate.prototype, "template", {
        /**
         * @return {T} Template object
         */
        get: function () {
            return this._template;
        },
        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param {T}  v  Template object
         */
        set: function (v) {
            v.isTemplate = true;
            this._template = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all elements from other list.
     *
     * @param {ListTemplate}  source  Source list
     */
    ListTemplate.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](source.iterator(), function (value) {
            _this.push(value.clone());
        });
    };
    ListTemplate.prototype.create = function (make) {
        var clone = (make != null
            ? new make()
            : this.template.clone());
        this.push(clone);
        return clone;
    };
    /**
     * Creates an exact clone of the list, including its items and template.
     *
     * @return {ListTemplate<T>} New list
     */
    ListTemplate.prototype.clone = function () {
        var out = new ListTemplate(this.template);
        var values = this.values;
        var length = values.length;
        for (var i = 0; i < length; ++i) {
            out.push(values[i].clone());
        }
        return out;
    };
    return ListTemplate;
}(List));

//# sourceMappingURL=List.js.map

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InterfaceColorSet; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(18);
/**
 * This module contains a version of ColorSet that can (and should) be used for
 * coloring UI elements.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This module contains a version of ColorSet that can (and should) be used for
 * coloring UI elements.
 *
 * The main difference from the basic [[ColorSet]] is that instead of sequenced
 * colors, it uses a concept of named colors.
 *
 * This way, every element in the UI can extract an exact color theme author
 * meant for the specific purpose, like strokes, backgrounds, etc.
 */
var InterfaceColorSet = /** @class */ (function (_super) {
    __extends(InterfaceColorSet, _super);
    /**
     * Constructor
     */
    function InterfaceColorSet() {
        var _this = _super.call(this) || this;
        /**
         * Maps the list of purposes (like "stroke") to an index of color of the
         * color set.
         */
        _this._purposes = {
            stroke: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#e5e5e5"),
            fill: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#f3f3f3"),
            primaryButton: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#6794dc"),
            primaryButtonHover: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#6771dc"),
            primaryButtonDown: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#68dc75"),
            primaryButtonActive: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#68dc75"),
            primaryButtonText: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#FFFFFF"),
            primaryButtonStroke: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#FFFFFF"),
            secondaryButton: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#d9d9d9"),
            secondaryButtonHover: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#d9d9d9").brighten(-0.25),
            secondaryButtonDown: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#d9d9d9").brighten(-0.35),
            secondaryButtonActive: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#d9d9d9").brighten(0.35),
            secondaryButtonText: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#000000"),
            secondaryButtonStroke: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#FFFFFF"),
            grid: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#000000"),
            background: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#ffffff"),
            alternativeBackground: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#000000"),
            text: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#000000"),
            alternativeText: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#FFFFFF"),
            disabledBackground: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#999999"),
            positive: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#67dc75"),
            negative: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#dc6788")
        };
        _this.className = "InterfaceColorSet";
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a color to be used for the specific purpose.
     *
     * ```TypeScript
     * let uicolors = new amcharts4.InterfaceColorSet();
     * console.log(uicolors.getFor("stroke"));
     * ```
     * ```JavaScript
     * var uicolors = new amcharts4.InterfaceColorSet();
     * console.log(uicolors.getFor("stroke"));
     * ```
     *
     * @param  {keyof ColorPurpose}  purpose  Color use purpuse
     * @return {Color}                        Color
     */
    InterfaceColorSet.prototype.getFor = function (purpose) {
        return this._purposes[purpose];
    };
    /**
     * Sets color to be used for the specific purpose.
     *
     * @param {keyof ColorPurpose}  purpose  Color use purpose
     * @param {Color}               color    Color
     */
    InterfaceColorSet.prototype.setFor = function (purpose, color) {
        this._purposes[purpose] = color;
    };
    return InterfaceColorSet;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=InterfaceColorSet.js.map

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(17);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Disposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return MultiDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return MutableValueDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CounterDisposer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(2);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * A base class for disposable objects.
 *
 * @ignore Exclude from docs
 */
var Disposer = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {function}  dispose  Function that disposes object
     */
    function Disposer(dispose) {
        this._disposed = false;
        this._dispose = dispose;
    }
    /**
     * Checks if object is disposed.
     *
     * @return {boolean} Disposed?
     */
    Disposer.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Disposes the object.
     */
    Disposer.prototype.dispose = function () {
        if (!this._disposed) {
            this._disposed = true;
            this._dispose();
        }
    };
    return Disposer;
}());

/**
 * A collection of related disposers that can be disposed in one go.
 *
 * @ignore Exclude from docs
 */
var MultiDisposer = /** @class */ (function (_super) {
    __extends(MultiDisposer, _super);
    function MultiDisposer(disposers) {
        return _super.call(this, function () {
            __WEBPACK_IMPORTED_MODULE_0__Array__["b" /* each */](disposers, function (x) {
                x.dispose();
            });
        }) || this;
    }
    return MultiDisposer;
}(Disposer));

/**
 * A special kind of Disposer that has attached value set.
 *
 * If a new value is set using `set()` method, the old disposer value is
 * disposed.
 *
 * @ignore Exclude from docs
 * @todo Description
 */
var MutableValueDisposer = /** @class */ (function (_super) {
    __extends(MutableValueDisposer, _super);
    /**
     * Constructor.
     */
    function MutableValueDisposer() {
        var _this = _super.call(this, function () {
            if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](_this._disposer)) {
                _this._disposer.dispose();
                _this._disposer = undefined;
            }
        }) || this;
        _this._disposer = undefined;
        return _this;
    }
    /**
     * Returns current value.
     *
     * @return {Optional<T>} Value
     */
    MutableValueDisposer.prototype.get = function () {
        return this._value;
    };
    /**
     * Sets value and disposes previous value if it was set.
     *
     * @param {Optional<T>}          value     New value
     * @param {Optional<IDisposer>}  disposer  Disposer
     */
    MutableValueDisposer.prototype.set = function (value, disposer) {
        if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](this._disposer)) {
            this._disposer.dispose();
        }
        this._disposer = disposer;
        this._value = value;
    };
    /**
     * Resets the disposer value.
     */
    MutableValueDisposer.prototype.reset = function () {
        this.set(undefined, undefined);
    };
    return MutableValueDisposer;
}(Disposer));

/**
 * @ignore Exclude from docs
 * @todo Description
 */
var CounterDisposer = /** @class */ (function (_super) {
    __extends(CounterDisposer, _super);
    function CounterDisposer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * [_counter description]
         *
         * @todo Description
         * @type {number}
         */
        _this._counter = 0;
        return _this;
    }
    /**
     * [increment description]
     *
     * @todo Description
     */
    CounterDisposer.prototype.increment = function () {
        var _this = this;
        // TODO throw an error if it is disposed
        ++this._counter;
        // TODO make this more efficient
        return new Disposer(function () {
            --_this._counter;
            if (_this._counter === 0) {
                _this.dispose();
            }
        });
    };
    return CounterDisposer;
}(Disposer));

//# sourceMappingURL=Disposer.js.map

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Percent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Type__ = __webpack_require__(2);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__Type__["percent"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__Type__["isPercent"]; });
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents a relative value. (percent)
 */
var Percent = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {number}  percent  Percent value
     */
    function Percent(percent) {
        this._value = percent;
    }
    Object.defineProperty(Percent.prototype, "value", {
        /**
         * Relative value.
         *
         * E.g. 100% is 1, 50% is 0.5, etc.
         *
         * This is useful to apply transformations to other values. E.g.:
         *
         * ```TypeScript
         * let value = 256;
         * let percent = new amcharts4.Percent(50);
         * console.log(value * percent.value); // outputs 128
         * ```
         * ```JavaScript
         * var value = 256;
         * var percent = new amcharts4.Percent(50);
         * console.log(value * percent.value); // outputs 128
         * ```
         *
         * @readonly
         * @return {number} Relative value
         */
        get: function () {
            return this._value / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Percent.prototype, "percent", {
        /**
         * Value in percent.
         *
         * @return {number} Percent
         */
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    return Percent;
}());

//# sourceMappingURL=Percent.js.map

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["polyline"] = polyline;
/* harmony export (immutable) */ __webpack_exports__["wavedLine"] = wavedLine;
/* harmony export (immutable) */ __webpack_exports__["moveTo"] = moveTo;
/* harmony export (immutable) */ __webpack_exports__["lineTo"] = lineTo;
/* harmony export (immutable) */ __webpack_exports__["quadraticCurveTo"] = quadraticCurveTo;
/* harmony export (immutable) */ __webpack_exports__["cubicCurveTo"] = cubicCurveTo;
/* harmony export (immutable) */ __webpack_exports__["closePath"] = closePath;
/* harmony export (immutable) */ __webpack_exports__["arcTo"] = arcTo;
/* harmony export (immutable) */ __webpack_exports__["arc"] = arc;
/* harmony export (immutable) */ __webpack_exports__["arcToPoint"] = arcToPoint;
/* harmony export (immutable) */ __webpack_exports__["rectangle"] = rectangle;
/* harmony export (immutable) */ __webpack_exports__["rectToPath"] = rectToPath;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Smoothing__ = __webpack_require__(94);
/**
 * A collection of functions that deals with path calculations.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * PATH FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Returns an SVG path from a number of points.
 *
 * @ignore Exclude from docs
 * @param  {IPoint[]}  points  An array of line elbow points
 * @return {string}            SVG path
 */
function polyline(points) {
    var path = lineTo(points[0]);
    for (var i = 0; i < points.length; i++) {
        path += lineTo(points[i]);
    }
    return path;
}
/**
 * Returns a waved line SVG path between two points.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}   point1            Starting point
 * @param  {IPoint}   point2            Ending point
 * @param  {number}   waveLength        Wave length
 * @param  {number}   waveHeight        Wave height
 * @param  {boolean}  adjustWaveLength  Adjust wave length based on the actual line length
 * @return {string}                     SVG path
 */
function wavedLine(point1, point2, waveLength, waveHeight, tension, adjustWaveLength) {
    var x1 = point1.x;
    var y1 = point1.y;
    var x2 = point2.x;
    var y2 = point2.y;
    var distance = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["getDistance"](point1, point2);
    if (adjustWaveLength) {
        waveLength = distance / Math.round(distance / waveLength);
    }
    var d = __WEBPACK_IMPORTED_MODULE_0__System__["b" /* system */].getCache(__WEBPACK_IMPORTED_MODULE_2__utils_Utils__["stringify"](["wavedLine", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]));
    if (!d) {
        if (distance > 0) {
            var angle = Math.atan2(y2 - y1, x2 - x1);
            var cos = Math.cos(angle);
            var sin = Math.sin(angle);
            var waveLengthX = waveLength * cos;
            var waveLengthY = waveLength * sin;
            if (waveLength <= 1 || waveHeight <= 1) {
                d = lineTo(point2);
            }
            else {
                var halfWaveCount = Math.round(2 * distance / waveLength);
                var points = [];
                var sign = 1;
                if (x2 < x1) {
                    sign *= -1;
                }
                if (y2 < y1) {
                    sign *= -1;
                }
                for (var i = 0; i <= halfWaveCount; i++) {
                    sign *= -1;
                    var x = x1 + i * waveLengthX / 2 + sign * waveHeight / 2 * sin;
                    var y = y1 + i * waveLengthY / 2 - sign * waveHeight / 2 * cos;
                    points.push({ x: x, y: y });
                }
                d = new __WEBPACK_IMPORTED_MODULE_4__Smoothing__["f" /* Tension */](tension, tension).smooth(points);
            }
        }
        else {
            d = "";
        }
        __WEBPACK_IMPORTED_MODULE_0__System__["b" /* system */].setCache(__WEBPACK_IMPORTED_MODULE_2__utils_Utils__["stringify"](["wavedLine", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]), d);
    }
    return d;
}
/**
 * Returns a starting point of an SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}  point  Starting point
 * @return {string}         SVG path
 */
function moveTo(point) {
    return " M" + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.x, 4) + "," + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.y, 4) + " ";
}
/**
 * Returns a line part of SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}  point  SVG path
 * @return {string}         SVG path
 */
function lineTo(point) {
    return " L" + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.x, 4) + "," + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.y, 4) + " ";
}
/**
 * Returns a quadratic curve part of an SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}  point         End point of the curve
 * @param  {IPoint}  controlPoint  Control point
 * @return {string}                SVG path
 */
function quadraticCurveTo(point, controlPoint) {
    return " Q" + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](controlPoint.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](controlPoint.y, 4) + " " + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.y, 4);
}
/**
 * Returns a cubic curve part of an SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}  point          End point of the curve
 * @param  {IPoint}  controlPointA  Control point A
 * @param  {IPoint}  controlPointB  Control point B
 * @return {string}                 SVG path
 */
function cubicCurveTo(point, controlPointA, controlPointB) {
    return " C" + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](controlPointA.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](controlPointA.y, 4) + " " + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](controlPointB.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](controlPointB.y, 4) + " " + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.y, 4);
}
/**
 * Returns a terminator for an SVG path.
 *
 * @ignore Exclude from docs
 * @return {string} SVG path
 */
function closePath() {
    return " Z";
}
/**
 * Returns an arc part of an SVG path.
 *
 * @ignore Exclude from docs
 * @todo Better parameter descriptions
 * @param  {number}  startAngle  Starting angle
 * @param  {number}  arc         Arc
 * @param  {number}  radius      Radius
 * @param  {number}  radiusY     Vertical radius
 * @return {string}              SVG path
 */
function arcTo(startAngle, arc, radius, radiusY) {
    if (arc == 0) {
        return "";
    }
    if (!__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](radiusY)) {
        radiusY = radius;
    }
    var path = "";
    var c = ",";
    var segments = Math.ceil(Math.abs(arc) / 180);
    var l = 1;
    if (arc < 0) {
        l = 0;
    }
    // center
    var cx = -__WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](startAngle) * radius;
    var cy = -__WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](startAngle) * radiusY;
    // previous, as we use a not A
    var pax = 0;
    var pay = 0;
    for (var i = 0; i < segments; i++) {
        var endAngle = startAngle + arc / segments * (i + 1);
        var ax = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](endAngle) * radius + cx - pax, 4);
        var ay = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](endAngle) * radiusY + cy - pay, 4);
        path += " a" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;
        pax = ax;
        pay = ay;
    }
    return path;
}
/**
 * Creates an arc path.
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number}  startAngle         [description]
 * @param  {number}  arc                [description]
 * @param  {number}  radius             [description]
 * @param  {number}  innerRadius        [description]
 * @param  {number}  radiusY            [description]
 * @param  {number}  cornerRadius       [description]
 * @param  {number}  innerCornerRadius  [description]
 * @return {string}                     SVG path
 */
function arc(startAngle, arc, radius, innerRadius, radiusY, cornerRadius, innerCornerRadius) {
    if (arc == 0 || radius <= 0) {
        return "";
    }
    arc = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["min"](arc, 360);
    if (arc == 360) {
        cornerRadius = 0;
        innerCornerRadius = 0;
    }
    var endAngle = startAngle + arc;
    var crSin = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](__WEBPACK_IMPORTED_MODULE_1__utils_Math__["min"](arc, 45) / 2);
    innerRadius = innerRadius || 0;
    radiusY = __WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](radiusY) ? radiusY : radius;
    cornerRadius = cornerRadius || 0;
    innerCornerRadius = __WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](innerCornerRadius) ? innerCornerRadius : cornerRadius;
    var innerRadiusY = (radiusY / radius) * innerRadius;
    var cornerRadiusY = (radiusY / radius) * cornerRadius;
    var innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;
    cornerRadius = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cornerRadius, 0, (radius - innerRadius) / 2);
    cornerRadiusY = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
    innerCornerRadius = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](innerCornerRadius, 0, (radius - innerRadius) / 2);
    innerCornerRadiusY = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
    cornerRadius = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cornerRadius, 0, radius * crSin), 4);
    cornerRadiusY = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cornerRadiusY, 0, radiusY * crSin), 4);
    innerCornerRadius = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](innerCornerRadius, 0, innerRadius * crSin), 4);
    innerCornerRadiusY = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](innerCornerRadiusY, 0, innerRadiusY * crSin), 4);
    var crAngle = Math.asin(cornerRadius / radius / 2) * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["DEGREES"] * 2;
    var crAngleY = Math.asin(cornerRadiusY / radiusY / 2) * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["DEGREES"] * 2;
    if (innerRadius < innerCornerRadius) {
        innerRadius = innerCornerRadius;
    }
    if (innerRadiusY < innerCornerRadiusY) {
        innerRadiusY = innerCornerRadiusY;
    }
    var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["DEGREES"] * 2;
    var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["DEGREES"] * 2;
    if (!__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](crInnerAngle)) {
        crInnerAngle = 0;
    }
    if (!__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](crInnerAngleY)) {
        crInnerAngleY = 0;
    }
    var middleAngle = startAngle + arc / 2;
    var mPoint = { x: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](middleAngle) * innerRadius, 4), y: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](middleAngle) * innerRadiusY };
    var a0 = { x: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](startAngle) * (innerRadius + innerCornerRadius), y: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](startAngle) * (innerRadiusY + innerCornerRadiusY) };
    var b0 = { x: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](startAngle) * (radius - cornerRadius), y: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](startAngle) * (radiusY - cornerRadiusY) };
    var c0 = { x: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](endAngle) * (radius - cornerRadius), y: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](endAngle) * (radiusY - cornerRadiusY) };
    var d0 = { x: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](endAngle) * (innerRadius + innerCornerRadius), y: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](endAngle) * (innerRadiusY + innerCornerRadiusY) };
    var b1 = { x: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](startAngle + crAngle) * radius, y: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](startAngle + crAngleY) * radiusY };
    var d1 = { x: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](endAngle - crInnerAngle) * innerRadius, y: __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](endAngle - crInnerAngleY) * innerRadiusY };
    // some magic math
    innerCornerRadius += innerCornerRadius * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](crInnerAngle / 2);
    innerCornerRadiusY += innerCornerRadiusY * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](crInnerAngleY / 2);
    if (crInnerAngle > (endAngle - startAngle) / 2) {
        d1 = mPoint;
    }
    var path = "";
    // start from b if this is full circle
    if (arc == 360) {
        path = moveTo(b0);
    }
    // otherwise start from a
    else {
        path = moveTo(a0);
        path += lineTo(b0);
        path += arcToPoint(b1, cornerRadius, cornerRadiusY, true);
    }
    // draw arc
    path += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY);
    // draw inner arc
    if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](innerRadius) && innerRadius != 0) {
        // move to B if this is full circle
        if (arc == 360 && cornerRadius == 0) {
            path += moveTo(d0);
        }
        // draw line otherwise
        else {
            path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);
            path += lineTo(d0);
            path += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);
        }
        path += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);
        if (arc < 360 || cornerRadius > 0) {
            path += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);
        }
        path += lineTo(a0);
    }
    else {
        path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);
        if (arc < 360) {
            path += lineTo(a0);
        }
    }
    return path;
}
/**
 * Creates a path for an arc to specific coordinate.
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  point         Reference point
 * @param  {number}  radius        Radius
 * @param  {number}  radiusY       Vertical radius (for skewed arcs)
 * @param  {boolean} sweepFlag     [description]
 * @param  {boolean} largeArcFlag  [description]
 * @param  {number}  xAxisRotation [description]
 * @return {string}                Arc path
 */
function arcToPoint(point, radius, radiusY, sweepFlag, largeArcFlag, xAxisRotation) {
    if (radius == 0) {
        return "";
    }
    xAxisRotation = xAxisRotation || 0;
    largeArcFlag = Boolean(largeArcFlag);
    sweepFlag = Boolean(sweepFlag);
    var c = ",";
    var sweepFlagValue = +sweepFlag; // converts to 1 or 0
    var largeArcFlagValue = +largeArcFlag; // converts to 1 or 0
    return " A" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.x, 4) + c + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](point.y, 4);
}
/**
 * Creates a new rectangle.
 *
 * @ignore Exclude from docs
 * @param  {number}  width   Width (px)
 * @param  {number}  height  Height (px)
 * @param  {number}  x       X position
 * @param  {number}  y       Y position
 * @return {string}          Rectangle
 */
function rectangle(width, height, x, y) {
    if (!__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](x)) {
        x = 0;
    }
    if (!__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](y)) {
        y = 0;
    }
    return moveTo({ x: x, y: y }) + lineTo({ x: x + width, y: y }) + lineTo({ x: x + width, y: y + height }) + lineTo({ x: x, y: y + height }) + closePath();
}
/**
 * Converts a rectangle to an SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IRectangle}  rect  Rectangle
 * @param  {boolean}     ccw   Counter-clockwise?
 * @return {string}            SVG path
 */
function rectToPath(rect, ccw) {
    var c = ",";
    var L = " L";
    if (ccw) {
        return "M" + rect.x
            + c + rect.y + L + rect.x
            + c + (rect.y + rect.height) + L + (rect.x + rect.width)
            + c + (rect.y + rect.height) + L + (rect.x + rect.width)
            + c + rect.y + L + rect.x
            + c + rect.y;
    }
    else {
        return "M" + rect.x
            + c + rect.y + L + (rect.x + rect.width)
            + c + rect.y + L + (rect.x + rect.width)
            + c + (rect.y + rect.height) + L + rect.x
            + c + (rect.y + rect.height) + L + rect.x
            + c + rect.y;
    }
}
//# sourceMappingURL=Path.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return visualProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Sprite; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SpriteState__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SpriteEvents__ = __webpack_require__(209);
/* unused harmony reexport SpriteEventDispatcher */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Animation__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__rendering_fills_Pattern__ = __webpack_require__(116);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__rendering_fills_LinearGradient__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__rendering_fills_RadialGradient__ = __webpack_require__(210);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__elements_Modal__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__rendering_filters_Filter__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__interaction_Interaction__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__interaction_Mouse__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__formatters_NumberFormatter__ = __webpack_require__(215);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__formatters_DateFormatter__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__formatters_DurationFormatter__ = __webpack_require__(216);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__utils_Language__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__export_Export__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__utils_Strings__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__utils_Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__utils_Percent__ = __webpack_require__(11);
/**
 * This is the main class that encapsulates every object on the chart.
 *
 * If it's an element that is to be displayed on the screen at some point, its
 * class must extend [[Sprite]] class.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

































/**
 * Defines list ofvisual properties
 */
var visualProperties = ["fill", "fillOpacity", "stroke", "strokeOpacity", "strokeWidth", "strokeDasharray"]; // do not add opacity here, as it is used for showing/hiding
;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Sprite represents any displayable element.
 *
 * This is the main class that encapsulates every object on the chart.
 *
 * If it's an element that is to be displayed on the screen at some point, its
 * class must extend [[Sprite]] class.
 *
 * [[Sprite]] class represents the a hierarchical structure. Every object that
 * extends [[Sprite]] can have children, that would inherit their properties,
 * such as language, formatters, etc.
 *
 * @see {@link SpriteState}
 * @see {@link ISpriteEvents} for a list of available events
 * @see {@link ISpriteAdapters} for a list of available Adapters
 *
 * @todo Review child elements that need to go into `_disposers`
 * @important
 */
var Sprite = /** @class */ (function (_super) {
    __extends(Sprite, _super);
    /**
     * Constructor:
     * * Creates initial node
     * * Sets default properties
     * * Creates required default states
     * * Inits accessibility
     */
    function Sprite() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds values for Sprite's properties.
         */
        _this.properties = {};
        /**
         * Event dispacther..
         *
         * @type {SpriteEventDispatcher<AMEvent<Sprite, ISpriteEvents>>} Event dispatcher instance
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_1__SpriteEvents__["a" /* SpriteEventDispatcher */](_this);
        /**
         * Holds Adapter.
         *
         * @type {Adapter<Sprite, ISpriteAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_3__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * @ignore Exclude from docs
         * @todo Description
         */
        _this._bindings = {};
        /**
         * Holds indicator whether this sprite was already initialized.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._inited = false;
        /**
         * If `sprite.hide()` is called and we have "hidden" state and
         * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to
         * avoid restarting animations in case `hide()` method is called multiple
         * times.
         *
         * @type {boolean}
         */
        _this.isHiding = false;
        /**
         * This property indicates if Sprite is currently being revealed from hidden
         * state. This is used to prevent multiple calls to `sprite.show()` to
         * restart reveal animation. (if enabled)
         *
         * @type {boolean}
         */
        _this.isShowing = false;
        /**
         * Indicates if togglable Sprite is currently active (toggled on).
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._isActive = false;
        /**
         * @todo Description
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._ignoreOverflow = false;
        /**
         * A Sprite element to use as a mask for this Sprite.
         *
         * @ignore Exclude from docs
         * @type {MutableValueDisposer}
         */
        _this._mask = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * @ignore Exclude from docs
         * @todo Description
         * @type {number}
         */
        _this._positionPrecision = 3;
        /**
         * An instance of [[Language]].
         *
         * @ignore Exclude from docs
         * @type {Language}
         */
        _this._language = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * An URL to go to when user clicks on a this Sprite.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._url = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * URL target to use.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._urlTarget = "_self";
        /**
         * Indicates if the chart should follow righ-to-left rules.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._rtl = false;
        /**
         * Holds [[Export]] object.
         *
         * @ignore Exclude from docs
         * @type {Export}
         */
        _this._exporting = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * Holds [[Modal]] object.
         *
         * @ignore Exclude from docs
         * @type {MutableValueDisposer}
         */
        _this._modal = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * Parent container.
         *
         * @ignore Exclude from docs
         * @type {MutableValueDisposer}
         */
        _this._parent = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * Defines bounding box (square) for this element.
         *
         * @ignore Exclude from docs
         * @type {IRectangle}
         */
        _this._bbox = { x: 0, y: 0, width: 0, height: 0 };
        /**
         * A collection of key/value pairs that can be used to bind specific Sprite
         * properties to [[DataItem]].
         *
         * For example: `fill` property can be bound to `myCustomColor` field in
         * DataItem. The Sprite will automatically get the value for `fill` from its
         * DataItem.
         *
         * Can be set for each [[SpriteState]] individually to override default
         * bindings.
         *
         * @see {@link SpriteState}
         * @type {Object}
         */
        _this.propertyFields = {};
        /**
         * @todo: review description
         * Specifies if a property changed on this sprite should also affect all the clones cloned from it. This is only important if you want to change properties of clones after the cloning was done. When cloning Sprite initially, all the properties are copied anyway.
         * @default false
         */
        _this.applyOnClones = false;
        _this._overflowX = 0;
        _this._overflowY = 0;
        _this._isDragged = false;
        /**
         * @deprecated Moved to [[SpriteProperties]]
         * @type {boolean}
         */
        _this._disabled = false;
        _this._internalDisabled = false;
        _this._internalDefaultsApplied = false;
        /**
         * Sets frequency at which this element should be rendered. Used to save CPU,
         * mostly for text elements.
         *
         * Higher number means this element will render more sluggishly by skipping
         * frames, but in doing so will use less resources.
         *
         * E.g. setting to 2 will make this element's renderer skip one frame, so any
         * changes to the element will be rendered 1/60 second later than it would
         * at default setting of 1.
         *
         * @type {number}
         */
        _this.renderingFrequency = 1;
        /**
         * Used to track frame number when `renderingFrequency` is > 2.
         * When `renderingFrame == 1`, Sprite renders.
         *
         * @ignore Exclude from docs
         */
        _this.renderingFrame = 1;
        /**
         * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.
         * @type {number}
         */
        _this.rollOutDelay = 0;
        /**
         * @ignore
         * this flag is set to true for the initial sprite you create and place to the div so that we could clear all additional sprites/containers when this sprite is disposed
         */
        _this.isBaseSprite = false;
        /**
         * Whether this sprite should be cloned when clonning it's parent container. We set this to falsse in those cases when a sprite is created by the class, so that when clonning
         * a duplicate sprite would not appear.
         *
         * @type {boolean}
         */
        _this.shouldClone = true;
        _this.className = "Sprite";
        // Generate a unique ID
        _this.uid;
        // Create SVG group to hold everything in
        _this.group = _this.paper.addGroup("g");
        // Set defaults
        _this.scale = 1;
        _this.rotation = 0;
        _this.align = "none";
        _this.valign = "none";
        _this.pixelPerfect = false;
        _this.marginTop = 0;
        _this.marginBottom = 0;
        _this.marginLeft = 0;
        _this.marginRight = 0;
        _this.paddingTop = 0;
        _this.paddingBottom = 0;
        _this.paddingRight = 0;
        _this.paddingLeft = 0;
        _this._prevMeasuredWidth = 0;
        _this._prevMeasuredHeight = 0;
        _this._measuredWidth = 0;
        _this._measuredHeight = 0;
        _this.verticalCenter = "none";
        _this.horizontalCenter = "none";
        _this._overflowX = 0;
        _this._overflowY = 0;
        _this.isMeasured = true;
        // Invalidate the Sprite so that renderer knows it needs to be drawn
        _this.invalidate();
        // Create default and hidden states as they are two states that are used
        // extensively
        var hiddenState = _this.states.create("hidden");
        hiddenState.properties.opacity = 0;
        hiddenState.properties.visible = false;
        _this.states.create("default").properties.opacity = 1;
        // Apply the theme
        _this.applyTheme();
        //this._disposers.push(this._clickable);
        //this._disposers.push(this._parent);
        // Decorate adapter with events so that we can apply its settings whenever
        // it is modified
        // @todo Think what to do here. We can't just apply the adapter value to
        // property since not all of those are for properties. Commented out for
        // now.
        /*this.adapter.events.on("insert", (ev: any) => {
            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];
        });
        this.adapter.events.on("remove", (ev: any) => {
            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];
        });*/
        // Add disposable dependencies to `_disposers` so they are automatically
        // disposed of when this object is disposed
        _this._disposers.push(_this.events);
        _this._disposers.push(_this.group);
        _this._disposers.push(_this._url);
        _this._disposers.push(_this._mask);
        _this._disposers.push(_this._exporting);
        _this._disposers.push(_this._modal);
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["b" /* Disposer */](function () {
            __WEBPACK_IMPORTED_MODULE_28__utils_Object__["each"](_this._bindings, function (key, value) {
                value.dispose();
            });
        }));
        return _this;
    }
    /**
     * ==========================================================================
     * ELEMENT VALIDATION, INIT, AND DRAWING STUFF
     * ==========================================================================
     * @hidden
     */
    /**
     * Returns theme(s) used by this object either set explicitly on this
     * element, inherited from parent, or inherited from [[System]].
     *
     * @return {Optional<ITheme>} An array of theme references
     */
    Sprite.prototype.getCurrentThemes = function () {
        if (this._themes) {
            return this._themes;
        }
        else if (this.parent) {
            return this.parent.getCurrentThemes();
        }
        else {
            return __WEBPACK_IMPORTED_MODULE_18__Registry__["a" /* registry */].themes;
        }
    };
    /**
     * Called just before element's validation, this function allows setting
     * defaults.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.applyInternalDefaults = function () {
        // Nothing here, but extending classes might override this function
        // so that they can set their defaults
        this._internalDefaultsApplied = true;
    };
    /**
     * Invalidates element.
     *
     * Object will be redrawn during the next update cycle.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.invalidate = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        this._internalDefaultsApplied = false;
        this.invalid = true;
        // you could think it would be faster to check if sprite is already invalid and not to add it to array,
        // but in fact when we call invalidate() we move the sprite to the end of invalidSprites list and this is important to have optimized order of invalid sprites.
        __WEBPACK_IMPORTED_MODULE_27__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_17__System__["b" /* system */].invalidSprites, this);
    };
    /**
     * Validates element:
     * * Triggers events
     * * Redraws the element
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.validate = function () {
        this.dispatchImmediately("prevalidate");
        this.renderingFrame = this.renderingFrequency;
        // Set internal defaults
        if (!this._internalDefaultsApplied) {
            this.applyInternalDefaults();
        }
        this.beforeDraw();
        this.draw();
        this.invalid = false;
        __WEBPACK_IMPORTED_MODULE_27__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_17__System__["b" /* system */].invalidSprites, this);
        this.afterDraw();
    };
    /**
     * Invalidates element's position.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.invalidatePosition = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        __WEBPACK_IMPORTED_MODULE_27__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_17__System__["b" /* system */].invalidPositions, this);
    };
    /**
     * Positions element according its center settings.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    Sprite.prototype.updateCenter = function () {
        if (this.element) {
            var bbox = this._bbox;
            var ex = 0;
            var ey = 0;
            var elementX = bbox.x;
            var elementY = bbox.y;
            var elementWidth = bbox.width;
            var elementHeigth = bbox.height;
            var overflowX = 0;
            var overflowY = 0;
            var pixelPaddingLeft = this.pixelPaddingLeft;
            var pixelPaddingRight = this.pixelPaddingRight;
            var pixelPaddingTop = this.pixelPaddingTop;
            var pixelPaddingBottom = this.pixelPaddingBottom;
            switch (this.horizontalCenter) {
                case "none":
                    ex = this.pixelPaddingLeft + elementX;
                    overflowX = elementX;
                    break;
                case "left":
                    ex = this.pixelPaddingLeft;
                    break;
                case "middle":
                    ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;
                    overflowX = ex - pixelPaddingLeft;
                    break;
                case "right":
                    ex = -elementWidth - pixelPaddingRight;
                    overflowX = ex - pixelPaddingLeft;
                    break;
            }
            switch (this.verticalCenter) {
                case "none":
                    ey = this.pixelPaddingTop + elementY;
                    overflowY = elementY;
                    break;
                case "top":
                    ey = this.pixelPaddingTop;
                    break;
                case "middle":
                    ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;
                    overflowY = ey - pixelPaddingTop;
                    break;
                case "bottom":
                    ey = -elementHeigth - pixelPaddingBottom;
                    overflowY = ey - pixelPaddingTop;
                    break;
            }
            this._overflowX = overflowX;
            this._overflowY = overflowY;
            var x = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](ex - elementX, this._positionPrecision);
            var y = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](ey - elementY, this._positionPrecision);
            if (this.pixelPerfect) {
                x -= 0.5;
                y -= 0.5;
            }
            this.element.moveTo({ x: x, y: y });
        }
    };
    /**
     * Transforms the element.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    Sprite.prototype.validatePosition = function () {
        var x = this.pixelX + this.dx;
        var y = this.pixelY + this.dy;
        if (!this.invalid) {
            var elementTransformChanged = false;
            if (this.element) {
                var prevElementTransform = this.element.transformString;
                this.updateCenter();
                if (prevElementTransform != this.element.transformString) {
                    elementTransformChanged = true;
                }
            }
            var prevGroupTransform = this.group.transformString;
            this.group.moveTo({ x: x, y: y });
            this.group.rotation = this.rotation;
            if (this.nonScaling) {
                this.group.scale = this.scale / this.globalScale;
            }
            else {
                this.group.scale = this.scale;
            }
            var sizeChanged = this.measure();
            if (prevGroupTransform != this.group.transformString || elementTransformChanged || sizeChanged) {
                this.dispatchImmediately("transformed");
                // TODO clear existing positionchanged dispatches ?
                this.dispatch("positionchanged");
            }
        }
        else {
            this.updateCenter();
        }
        // it might happen that x and y changed again, so we only remove if they didn't
        if (this.pixelX + this.dx == x && this.pixelY + this.dy == y) {
            __WEBPACK_IMPORTED_MODULE_27__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_17__System__["b" /* system */].invalidPositions, this);
        }
        var maskRectangle = this._maskRectangle;
        // todo: verify this
        if (maskRectangle) {
            this._clipElement.moveTo({ x: maskRectangle.x - this.pixelX, y: maskRectangle.y - this.pixelY });
        }
    };
    /**
     * A placeholder method that is called **before** element begins to be drawn.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.beforeDraw = function () {
    };
    /**
     * A placeholder method that draws the element.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.draw = function () {
    };
    /**
     * A placeholder method that is called **after** element finishes drawing
     * itself.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.afterDraw = function () {
        if (this.isMeasured || this.horizontalCenter !== "none" || this.verticalCenter !== "none") {
            this.measureElement();
        }
        this.setSVGAttributes();
        this.dispatchImmediately("validated");
        if (!this._inited) {
            this.applyFilters();
            this.visible = this.visible;
            this.mouseEnabled = this.mouseEnabled;
            this._inited = true;
            this.dispatchImmediately("inited");
        }
        this.validatePosition();
    };
    /**
     * Triggers a re-initialization of this element.
     *
     * Will result in complete redrawing of the element.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.reinit = function () {
        this._inited = false;
        this.setState(this.defaultState);
        this.invalidate();
    };
    /**
     * Handles the situation where parent element is resized.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.handleGlobalScale = function () {
        this.dispatch("globalscalechanged");
        if (this.nonScalingStroke) {
            this.strokeWidth = this.strokeWidth;
        }
        if (this.nonScaling) {
            this.invalidatePosition();
        }
        this.updateFilterScale();
    };
    /**
     * Updates filter properties which might depend on scale
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.updateFilterScale = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_30__utils_Iterator__["each"](this.filters.iterator(), function (filter) {
            filter.scale = _this.globalScale;
        });
    };
    /**
     * Removes itself from system's invalid lists.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.removeFromInvalids = function () {
        __WEBPACK_IMPORTED_MODULE_27__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_17__System__["b" /* system */].invalidSprites, this);
        __WEBPACK_IMPORTED_MODULE_27__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_17__System__["b" /* system */].invalidPositions, this);
    };
    /**
     * Copies all parameters from another [[Sprite]].
     *
     * @param {Sprite} source Source Sprite
     */
    Sprite.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.events.copyFrom(source.events);
        this.isMeasured = source.isMeasured;
        this.states.copyFrom(source.states);
        this.filters.copyFrom(source.filters);
        this.adapter.copyFrom(source.adapter);
        this.interactions.copyFrom(source.interactions);
        this.configField = source.configField;
        this.applyOnClones = source.applyOnClones;
        this.renderingFrequency = source.renderingFrequency;
        // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.
        //this.mask = source.mask; need to think about this, generally this causes a lot of problems
        this.disabled = source.disabled;
        //@todo: create tooltip if it's on source but not on this?
        if (this._tooltip) {
            this._tooltip.copyFrom(source.tooltip);
        }
        this._showSystemTooltip = source.showSystemTooltip;
        __WEBPACK_IMPORTED_MODULE_24__utils_Utils__["copyProperties"](source.propertyFields, this.propertyFields);
        __WEBPACK_IMPORTED_MODULE_24__utils_Utils__["copyProperties"](source.properties, this);
        if (source.fillModifier) {
            this.fillModifier = source.fillModifier.clone();
        }
        if (source.strokeModifier) {
            this.strokeModifier = source.strokeModifier.clone();
        }
    };
    Sprite.prototype.dispose = function () {
        if (this.isBaseSprite) {
            this.isBaseSprite = false;
            this.parent.parent.dispose();
            while (this.htmlContainer.children.length > 0) {
                this.htmlContainer.removeChild(this.htmlContainer.children[0]);
            }
        }
        _super.prototype.dispose.call(this);
        this.removeFromInvalids();
        if (this.element) {
            this.element.dispose();
        }
        if (this.group) {
            this.group.dispose();
        }
        while (this.filters.length > 0) {
            var filter = this.filters.getIndex(0);
            filter.dispose();
            this.filters.removeValue(filter);
        }
        // remove from map
        if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](this.id)) {
            this.map.removeKey(this.id);
        }
    };
    Object.defineProperty(Sprite.prototype, "isTemplate", {
        /**
         * Returns if the the Sprite is template.
         *
         * @ignore Exclude from docs
         * @return {boolean} Is template?
         */
        get: function () {
            return this._isTemplate;
        },
        /**
         * Sets if this element is a "template".
         *
         * Template Sprites act only as a holders for config for other "real"
         * elements to be cloned from.
         *
         * Templates are treated differently, as they are not validated, redrawn, or
         * otherwise are processed.
         *
         * @param {boolean} value Is template?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (this._isTemplate != value) {
                this._isTemplate = value;
                if (this instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */]) {
                    __WEBPACK_IMPORTED_MODULE_30__utils_Iterator__["each"](this.children.iterator(), function (child) {
                        child.isTemplate = true;
                    });
                }
                if (value) {
                    this.parent = this.parent;
                    this.removeFromInvalids();
                }
                else {
                    this.invalidate();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "showSystemTooltip", {
        /**
         * Returns whether the element should attempt to construct itself in a way so
         * that system tooltip is shown if its `readerTitle` is set.
         *
         * @return {boolean} Show system tooltip?
         */
        get: function () {
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](this._showSystemTooltip)) {
                if (this.parent) {
                    return this.parent.showSystemTooltip;
                }
                else {
                    return false;
                }
            }
            return this._showSystemTooltip;
        },
        /**
         * Sets whether the element should attempt to construct itself in a way so
         * that system tooltip is shown if its `readerTitle` is set.
         *
         * @param {boolean} value Show system tooltip?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            this._showSystemTooltip = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "topParent", {
        /**
         * ==========================================================================
         * HIERARCHY AND STRUCTURE RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns elements's top-level [[Container]].
         *
         * In most cases that will be a Chart.
         *
         * @return {Optional<Container>} Top-level ascendant
         */
        get: function () {
            if (this.parent) {
                if (this.parent.parent) {
                    return this.parent.topParent;
                }
                else {
                    return this.parent;
                }
            }
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "parent", {
        /**
         * @return {Container} Parent container
         */
        get: function () {
            return this._parent ? this._parent.get() : undefined;
        },
        /**
         * Elements' parent [[Container]].
         *
         * @param {Container}  parent  Parent container
         */
        set: function (parent) {
            if (this.disabled || this.isTemplate) {
                return;
            }
            var currentPaper = this.paper;
            var oldParent = this._parent.get();
            if (oldParent != parent) {
                if (oldParent) {
                    oldParent.children.removeValue(this);
                }
                if (parent) {
                    this.paper = parent.paper;
                    parent.children.moveValue(this);
                    if (this._tooltip && !this._tooltipContainer) {
                        this._tooltip.parent = parent.tooltipContainer;
                    }
                    var parentEvent = parent.events.on("globalscalechanged", this.handleGlobalScale, this);
                    this._disposers.push(parentEvent);
                    this._parent.set(parent, parentEvent);
                    if (!this._dataItem) {
                        this.dataItem = parent.dataItem;
                    }
                }
                else {
                    this._parent.reset();
                }
            }
            // appends defs if previous paper was different, goes deep through all children
            if (parent) {
                if (currentPaper != parent.paper) {
                    this.appendDefs();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Moves `<defs>` to correct place in DOM.
     *
     * Some elements are initially created in "ghost" container. When moving
     * those into proper place in DOM, their respective `<defs>` need to be moved
     * as well.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.appendDefs = function () {
        if (this.filterElement) {
            this.paper.appendDef(this.filterElement);
        }
        var fill = this.fill;
        if (fill && fill.element) {
            this.paper.appendDef(fill.element);
        }
        var stroke = this.stroke;
        if (stroke && stroke.element) {
            this.paper.appendDef(stroke.element);
        }
        if (this.fillModifier && this.fill instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */]) {
            var fill_1 = this.fillModifier.modify(this.fill);
            if (fill_1 && fill_1.element) {
                this.paper.appendDef(fill_1.element);
            }
        }
        if (this.strokeModifier && this.stroke instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */]) {
            var stroke_1 = this.fillModifier.modify(this.stroke);
            if (stroke_1 && stroke_1.element) {
                this.paper.appendDef(stroke_1.element);
            }
        }
        if (this._clipPath) {
            this.paper.appendDef(this._clipPath);
        }
    };
    Object.defineProperty(Sprite.prototype, "map", {
        /**
         * Returns a [[Dictionary]] which maps object ids with their respective
         * objects.
         *
         * Can be used to retrieve any object by id, e.g.:
         *
         * ```TypeScript
         * console.log(mySprite.map.getKey("myid"));
         * ```
         * ```JavaScript
         * console.log(mySprite.map.getKey("myid"));
         * ```
         *
         * @ignore Exclude from docs
         * @return {Dictionary<string, any>} Map collection
         */
        get: function () {
            if (this.parent) {
                return this.topParent.map;
            }
            else if (!this._map) {
                this._map = new __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._map;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "id", {
        /**
         * @return {string} ID
         */
        get: function () {
            return this._id;
        },
        /**
         * Element's user-defined ID.
         *
         * Will trow an Error if there alread is an object with the same ID.
         *
         * Please note that above check will be performed withing the scope of the
         * current chart instance. It will not do checks across other chart instances
         * or in globally in DOM.
         *
         * Make sure the IDs are unique.
         *
         * @param {string} value ID
         */
        set: function (value) {
            if (this._id != value) {
                this._id = value;
                if (this.map.hasKey(value)) {
                    throw Error("Duplicate id (" + value + ") used on multiple objects.");
                }
                else {
                    this.map.setKey(value, this);
                }
                this.setClassName();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "dom", {
        /**
         * ==========================================================================
         * ELEMENT AND DOM TREE MANIPULATION AND MEASURING
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns DOM element reference associated with this element.
         *
         * @readonly
         * @return {SVGSVGElement} DOM element
         */
        get: function () {
            return this.group.node;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            else {
                if (this.parent) {
                    return this.parent.paper;
                }
            }
            return __WEBPACK_IMPORTED_MODULE_17__System__["b" /* system */].ghostPaper;
        },
        /**
         * A [[Paper]] instance to place elements on.
         *
         * If there's no Paper set for this element, it goes up the ascendant tree
         * until it finds one.
         *
         * This method is used by important `addChild()` method, so it's essential
         * to have a [[Paper]] instance.
         *
         * If this element has a separate `htmlContainer` set, it will have a
         * [[Paper]] instance itself.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            var oldPaper = this.paper;
            if (oldPaper != paper) {
                this._paper = paper;
                paper.append(this.group);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "htmlContainer", {
        /**
         * @return {HTMLElement} HTML element
         */
        get: function () {
            if (this._htmlContainer) {
                return this._htmlContainer;
            }
            else {
                if (this.parent) {
                    return this.parent.htmlContainer;
                }
            }
        },
        /**
         * An HTML element to be used when placing wrapper element (`<div>`)
         * for the whole chart.
         *
         * This is the same for **all** elements within the same chart.
         *
         * @param {HTMLElement} htmlContainer HTML element
         */
        set: function (htmlContainer) {
            this._htmlContainer = htmlContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "svgContainer", {
        /**
         * HTML container (`<div>`) which is used to place chart's `<svg>` element
         * in.
         *
         * @return {HTMLElement} Container for chart elements
         */
        get: function () {
            if (this._svgContainer) {
                return this._svgContainer;
            }
            else {
                if (this.parent) {
                    return this.parent.svgContainer;
                }
            }
        },
        /**
         * Sets HTML container to add SVG and other chart elements to.
         *
         * @param {HTMLElement} svgContainer Container for chart elements
         */
        set: function (svgContainer) {
            this._svgContainer = svgContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "titleElement", {
        /**
         * Creates (if not yet created) and returns element's `<title>` element.
         *
         * @ignore Exclude from docs
         * @return {AMElement} Title element
         */
        get: function () {
            if (!this._titleElement) {
                this._titleElement = this.paper.add("title");
                this.group.add(this._titleElement);
            }
            return this._titleElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "descriptionElement", {
        /**
         * Creates (if not yet created) and returns element's `<desc>` element.
         *
         * @ignore Exclude from docs
         * @return {AMElement} Desc element
         */
        get: function () {
            if (!this._descriptionElement) {
                this._descriptionElement = this.paper.add("desc");
                this.group.add(this._descriptionElement);
            }
            return this._descriptionElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "filters", {
        /**
         * Returns list of SVG filters (effects) applied to element. If the filter
         * list is not yet initilized, creates and returns an empty one.
         * Note, not all filters combine well with one another. We recommend using one filter per sprite.
         *
         * @return {ListTemplate<Filter>} List of filters
         */
        get: function () {
            if (!this._filters) {
                this._filters = new __WEBPACK_IMPORTED_MODULE_5__utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_14__rendering_filters_Filter__["a" /* Filter */]());
                // TODO only add certain events ?
                this._disposers.push(this._filters.events.onAll(this.applyFilters, this));
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_5__utils_List__["c" /* ListDisposer */](this._filters));
            }
            return this._filters;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets required SVG attributes. Must be called every time an element is
     * redrawn so that attributes are (re)applied.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.setSVGAttributes = function () {
        this.fill = this.fill;
        this.opacity = this.opacity;
        this.fillOpacity = this.fillOpacity;
        this.stroke = this.stroke;
        this.strokeOpacity = this.strokeOpacity;
        this.shapeRendering = this.shapeRendering;
        this.strokeDasharray = this.strokeDasharray;
        this.focusable = this.focusable;
        this.tabindex = this.tabindex;
        this.role = this.role;
    };
    /**
     * Sets an attribute directly on an SVG element.
     *
     * @ignore Exclude from docs
     * @param {ISVGAttribute} attribute Attribute object
     */
    Sprite.prototype.setSVGAttribute = function (attribute) {
        this.group.attr(attribute);
    };
    /**
     * Removes an attribute directly from SVG element.
     *
     * @param {string} attribute Attribute key to remove
     */
    Sprite.prototype.removeSVGAttribute = function (attribute) {
        this.group.removeAttr(attribute);
    };
    Object.defineProperty(Sprite.prototype, "classNamePrefix", {
        /**
         * @return {string} Class name prefix
         */
        get: function () {
            if (this._classNamePrefix) {
                return this._classNamePrefix;
            }
            else if (this.parent) {
                return this.parent.classNamePrefix;
            }
            return __WEBPACK_IMPORTED_MODULE_17__System__["b" /* system */].classNamePrefix;
        },
        /**
         * When the element is creating its SVG elements, it may attach special
         * `class` properties to them, indicating type of element, so that they can
         * be styled and referenced using CSS.
         *
         * This accessor sets/returns class name prefix, which will be prepended to
         * all class names.
         *
         * @param {string}  prefix  Class name prefix
         */
        set: function (prefix) {
            prefix = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](prefix);
            this._classNamePrefix = prefix;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets `class` attribute of the elements SVG node.
     *
     * @ignore Exclude from docs
     * Uses `classNamePrefix`.
     */
    Sprite.prototype.setClassName = function () {
        var className = this.className.toLowerCase();
        var classNamePrefix = this.classNamePrefix;
        if (this.element) {
            this.element.addClass(classNamePrefix + className);
        }
        this.group.addClass(classNamePrefix + className + "-group");
        if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](this.id)) {
            this.group.addClass(classNamePrefix + this.id);
        }
    };
    /**
     * Adds an `id` attribute the the element and returns the id.
     *
     * @ignore Exclude from docs
     * @return {string} Element's ID
     */
    Sprite.prototype.uidAttr = function () {
        this.element.attr({ "id": this.uid });
        return this.uid;
    };
    /**
     * [updateClipPath description]
     *
     * @todo Description
     */
    Sprite.prototype.updateClipPath = function () {
        if (this._clipElement) {
            this._clipElement.moveTo({ x: this.mask.pixelX, y: this.mask.pixelY });
        }
    };
    /**
     * Applies the mask Sprite.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.applyMask = function () {
        this.removeClipPath();
        var mask = this.mask;
        var maskRectangle = this._maskRectangle;
        if (mask || maskRectangle) {
            if (!this._clipPath) {
                this._clipPath = this.paper.addGroup("clipPath");
                this._disposers.push(this._clipPath);
            }
            if (this._maskRectangle) {
                this._clipElement = this.paper.add("rect");
                this._clipElement.attr({ "width": maskRectangle.width, "height": maskRectangle.height });
            }
            if (mask) {
                // Container
                if (mask instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */]) {
                    // create clip path
                    this._clipElement = this.paper.add("rect");
                    this._clipElement.attr({ "width": mask.pixelWidth, "height": mask.pixelHeight });
                }
                // Sprite
                else {
                    if (mask.element) {
                        this._clipElement = mask.element;
                    }
                }
            }
            if (this._clipElement) {
                this._clipPath.add(this._clipElement);
            }
            var id = __WEBPACK_IMPORTED_MODULE_18__Registry__["a" /* registry */].getUniqueId();
            this._clipPath.attr({ "id": id });
            this.group.attr({ "clip-path": "url(#" + id + ")" });
            this.paper.appendDef(this._clipPath);
        }
    };
    /**
     * Applies filters to the element.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.applyFilters = function () {
        var _this = this;
        // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.
        // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.
        if (this.filters.length > 0) {
            var width_1 = 100;
            var height_1 = 100;
            if (!this.filterElement) {
                this.filterElement = this.paper.addGroup("filter");
                this._disposers.push(this.filterElement);
            }
            else {
                this.filterElement.removeChildNodes();
            }
            this.paper.appendDef(this.filterElement);
            var id = "filter-" + this.uid;
            this.filterElement.attr({ "id": id });
            __WEBPACK_IMPORTED_MODULE_30__utils_Iterator__["each"](this.filters.iterator(), function (filter) {
                filter.sprite = _this;
                filter.paper = _this.paper;
                filter.appendPrimitives(_this.filterElement);
                if (filter.width > width_1) {
                    width_1 = filter.width;
                }
                if (filter.height > height_1) {
                    height_1 = filter.height;
                }
                filter.scale = _this.globalScale;
            });
            this.filterElement.attr({ "width": width_1 + "%", "height": height_1 + "%", "x": -(width_1 - 100) / 2 + "%", "y": -(height_1 - 100) / 2 + "%" });
            this.group.attr({ "filter": "url(#" + id + ")" });
        }
        else if (this.filterElement) {
            this.group.removeAttr("filter");
            this.filterElement.removeChildNodes();
        }
    };
    /**
     * [removeClipPath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Sprite.prototype.removeClipPath = function () {
        if (this._clipPath) {
            //this._clipPath.dispose();
            this.removeDispose(this._clipPath);
            this._clipPath = undefined;
        }
    };
    Object.defineProperty(Sprite.prototype, "element", {
        /**
         * @return {AMElement} Element
         */
        get: function () {
            return this._element;
        },
        /**
         * The main element for this Sprite, usually an SVG `<g>`.
         *
         * All other sub-elements are created in it.
         *
         * @param {Optional<AMElement>}  element  Element
         */
        set: function (element) {
            // Destroy previous element if there was one before
            this.removeElement();
            // Set new element
            this._element = element;
            // Add element to group
            // Since we are adding Element to group, which is already in the
            // `.disposers` it will be removed automatically when Sprite is disposed
            // of
            this.group.add(element);
            // This is needed if someone is setting element not in draw method but
            // from outside
            if (!this.invalid) {
                this.validate();
            }
            this.setClassName();
            this.setSVGAttributes();
            this.applyAccessibility();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Measures main element.
     *
     * Saves measurements into private `_bbox` property.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.measureElement = function () {
        if (this.element) {
            var svgBBox = this.element.getBBox();
            this._bbox = { x: svgBBox.x, y: svgBBox.y, width: svgBBox.width, height: svgBBox.height };
        }
    };
    /**
     * Measures the whole element.
     *
     * Returns `true` if the size has changed from the last measurement.
     *
     * @ignore Exclude from docs
     * @return {boolean} Did the size chance from the last measurement?
     */
    Sprite.prototype.measure = function () {
        var bbox = this._bbox;
        if (bbox) {
            var overflowX = this._overflowX;
            var overflowY = this._overflowY;
            var measuredWidth = bbox.width + this.pixelPaddingLeft + this.pixelPaddingRight;
            var measuredHeight = bbox.height + this.pixelPaddingTop + this.pixelPaddingBottom;
            // find overflow
            if (this.rotation !== 0 || this.scale !== 1) {
                var svg = this.paper.svg;
                var matrix = svg.createSVGMatrix();
                var rotation = this.rotation;
                matrix.a = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["cos"](rotation) * this.scale;
                matrix.c = -__WEBPACK_IMPORTED_MODULE_25__utils_Math__["sin"](rotation) * this.scale;
                matrix.e = 0;
                matrix.b = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["sin"](rotation) * this.scale;
                matrix.d = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["cos"](rotation) * this.scale;
                matrix.f = 0;
                var p1 = svg.createSVGPoint();
                p1.x = overflowX;
                p1.y = overflowY;
                var p2 = svg.createSVGPoint();
                p2.x = overflowX + measuredWidth;
                p2.y = overflowY;
                var p3 = svg.createSVGPoint();
                p3.x = overflowX + measuredWidth;
                p3.y = overflowY + measuredHeight;
                var p4 = svg.createSVGPoint();
                p4.x = overflowX;
                p4.y = overflowY + measuredHeight;
                var pt1 = p1.matrixTransform(matrix);
                var pt2 = p2.matrixTransform(matrix);
                var pt3 = p3.matrixTransform(matrix);
                var pt4 = p4.matrixTransform(matrix);
                var minX = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);
                var maxX = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);
                var minY = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);
                var maxY = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);
                measuredWidth = maxX - minX;
                measuredHeight = maxY - minY;
                overflowX = minX;
                overflowY = minY;
            }
            this._measuredWidth = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](measuredWidth, this._positionPrecision);
            this._measuredHeight = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](measuredHeight, this._positionPrecision);
            this._overflowX = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](overflowX, this._positionPrecision);
            this._overflowY = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](overflowY, this._positionPrecision);
        }
        // dispatch event
        if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {
            this._prevMeasuredHeight = this._measuredHeight;
            this._prevMeasuredWidth = this._measuredWidth;
            // TODO clear existing sizechanged dispatches ?
            this.dispatch("sizechanged");
            return true;
        }
        return false;
    };
    /**
     * Insert this element before sibling element.
     *
     * @param  {Sprite}  sprite  Target element
     * @return {Sprite}          This element
     */
    Sprite.prototype.insertBefore = function (sprite) {
        var parent = this._parent.get();
        if (parent) {
            var index = parent.children.indexOf(sprite);
            if (index !== -1) {
                parent.children.moveValue(this, index);
                parent.sortChildren();
            }
        }
        return this;
    };
    /**
     * Insert this element after sibling element.
     *
     * @param  {Sprite}  sprite  Target element
     * @return {Sprite}          This element
     */
    Sprite.prototype.insertAfter = function (sprite) {
        var parent = this._parent.get();
        if (parent) {
            var index = parent.children.indexOf(sprite);
            if (index !== -1) {
                parent.children.moveValue(this, index + 1);
                parent.sortChildren();
            }
        }
        return this;
    };
    /**
     * Removes the main SVG element.
     *
     * This does not destroy the whole Sprite element. To do that use
     * `dispose()` instead.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.removeElement = function () {
        // remove visual element
        if (this._element) {
            this.removeDispose(this._element);
            this._element = undefined;
        }
    };
    /**
     * Returns relative (percent) value of the X coorindate within this element.
     *
     * A relative value is a hundrieth of a percent. So 100% would result in a 1
     * as relative value.
     *
     * @param  {number | Percent}  value  Absolute or relative X coordinate
     * @return {number}                   Relative value
     */
    Sprite.prototype.getRelativeX = function (value) {
        if (value instanceof __WEBPACK_IMPORTED_MODULE_31__utils_Percent__["a" /* Percent */]) {
            return value.value;
        }
        else if (this.parent) {
            return value / this.parent.innerWidth;
        }
        return 0;
    };
    /**
     * Returns relative (percent) value of the Y coorindate within this element.
     *
     * A relative value is a hundrieth of a percent. So 100% would result in a 1
     * as relative value.
     *
     * @param  {number | Percent}  value  Absolute or relative Y coordinate
     * @return {number}                   Relative value
     */
    Sprite.prototype.getRelativeY = function (value) {
        if (value instanceof __WEBPACK_IMPORTED_MODULE_31__utils_Percent__["a" /* Percent */]) {
            return value.value;
        }
        else if (this.parent) {
            return value / this.parent.innerHeight;
        }
        return 0;
    };
    /**
     * Returns an X coordinate in pixel within the element.
     *
     * If number is passed in as parameter, the same number will be returned
     * back.
     *
     * If [[Percent]] is passed in, it will be recalculated to pixels.
     *
     * @param  {number | Percent}  value  Absolute or relative X coordinate
     * @return {number}                   X coordinate in pixels
     */
    Sprite.prototype.getPixelX = function (value) {
        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth
        // all the time and this would result chain of the same actions and will slow down the system a lot
        var pixel = 0;
        if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
            pixel = value;
        }
        else if (value instanceof __WEBPACK_IMPORTED_MODULE_31__utils_Percent__["a" /* Percent */]) {
            var relative = value.value;
            if (this.parent) {
                pixel = this.parent.innerWidth * relative;
            }
        }
        return __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](pixel, this._positionPrecision);
    };
    /**
     * Returns an Y coordinate in pixel within the element.
     *
     * If number is passed in as parameter, the same number will be returned
     * back.
     *
     * If [[Percent]] is passed in, it will be recalculated to pixels.
     *
     * @param  {number | Percent}  value  Absolute or relative Y coordinate
     * @return {number}                   Y coordinate in pixels
     */
    Sprite.prototype.getPixelY = function (value) {
        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth
        // all the time and this would result chain of the same actions and will slow down the system a lot
        var pixel = 0;
        if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
            pixel = value;
        }
        else if (value instanceof __WEBPACK_IMPORTED_MODULE_31__utils_Percent__["a" /* Percent */]) {
            var relative = value.value;
            if (this.parent) {
                pixel = this.parent.innerHeight * relative;
            }
        }
        return __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](pixel, this._positionPrecision);
    };
    /**
     * Moves the element to a specified coordinates.
     *
     * Using this method is preferred method of moving element, as it saves some
     * CPU processing power over setting `x` and `y` properties separately.
     *
     * The method respects element's center settings. The element will be
     * positioned so that `point` coordinates come in whatever "center" of the
     * element is, as set in `horizontalCenter` and `verticalCenter`.
     *
     * Besides moving the element, you can also at the same time scale and
     * rotate the element.
     *
     * @param {IPoint}  point     New coordinates
     * @param {number}  rotation  New rotation
     * @param {number}  scale     New Scale
     */
    Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {
        if (this.isDragged && !isDragged) {
            return;
        }
        if (point) {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](point.x)) {
                this.setPropertyValue("x", point.x);
            }
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](point.y)) {
                this.setPropertyValue("y", point.y);
            }
        }
        if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](rotation)) {
            this.setPropertyValue("rotation", rotation);
        }
        if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](scale)) {
            this.setPropertyValue("scale", scale);
        }
        this.invalidatePosition();
    };
    Object.defineProperty(Sprite.prototype, "ignoreOverflow", {
        get: function () {
            return this._ignoreOverflow;
        },
        /**
         * Specifies, how this element's parent `Container`, when arranging layout,
         * should treat this elements overflow.
         *
         * Setting this to `true` will make layout mechanism ignore everything that
         * does not fit right into this element. In this case Conatiner will use
         * elsements 0,0 coordinate.
         *
         * While setting to `false` will take into actual size of the element. In
         * this case, container will use actual element coordinates.
         *
         * @ignore Exclude from docs
         * @param {boolean} value Ignore overflow?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (this._ignoreOverflow != value) {
                this._ignoreOverflow = value;
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "mask", {
        /**
         * Returns [[Sprite]] element currently used as mask for this element.
         *
         * @ignore Exclude from docs
         * @return {Optional<Sprite>} A [[Sprite]] to use as mask
         */
        get: function () {
            return this._mask.get();
        },
        /**
         * Sets another [[Sprite]] element as this elements mask.
         *
         * @ignore Exclude from docs
         * @param {Optional<Sprite>} mask A [[Sprite]] to use as mask
         */
        set: function (mask) {
            if (this._mask.get() !== mask) {
                // this is good
                if (mask) {
                    if (!(mask instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */])) {
                        mask.isMeasured = false;
                    }
                    this._mask.set(mask, new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                        //mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);
                        mask.events.on("maxsizechanged", this.applyMask, this),
                        mask.events.on("validated", this.applyMask, this)
                    ]));
                    this.applyMask();
                }
                else {
                    this._mask.reset();
                    this.group.removeAttr("clip-path");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maskRectangle", {
        /**
         * Returns [[Rectangle]] element currently used as elements mask.
         *
         * @ignore Exclude from docs
         * @return {IRectangle} Mask Rectangle
         */
        get: function () {
            return this._maskRectangle;
        },
        // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored
        /**
         * Instead of creating a [[Sprite]] for mask, you can just use a
         * [[Rectangle]] by setting this accessor.
         *
         * Please note that the element will not monitor any changes to the mask
         * rectangle.
         *
         * @ignore Exclude from docs
         * @param {IRectangle} rect Mask Rectangle
         */
        set: function (rect) {
            this._maskRectangle = rect;
            this.applyMask();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isMeasured", {
        /**
         * Returns if element was already measured.
         *
         * @ignore Exclude from docs
         * @return {boolean} Was element already measured?
         */
        get: function () {
            return this._isMeasured;
        },
        /**
         * Sets if this element was already measured.
         *
         * @ignore Exclude from docs
         * @param {boolean} value Was element already measured?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (!value) {
                this._measuredWidth = 0;
                this._measuredHeight = 0;
                //this._pixelHeight = 0;
                //this._pixelWidth = 0;
            }
            if (this._isMeasured != value) {
                this._isMeasured = value;
                this.invalidatePosition();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if the this elemen has any of its parts overlapping with another
     * element.
     *
     * @todo Description (review)
     * @param  {Sprite}   sprite  Second element to test again
     * @return {boolean}          Overlapping?
     */
    Sprite.prototype.hitTest = function (sprite) {
        // validate, otherwise we will not know measuredWidth and measuredHeight
        if (this.invalid) {
            this.validate();
        }
        if (sprite.invalid) {
            sprite.validate();
        }
        var ax1 = this.pixelX;
        var ay1 = this.pixelY;
        var ax2 = ax1 + this.measuredWidth;
        var ay2 = ay1 + this.measuredHeight;
        var bx1 = sprite.pixelX;
        var by1 = sprite.pixelY;
        var bx2 = bx1 + sprite.measuredWidth;
        var by2 = by1 + sprite.measuredHeight;
        return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);
    };
    Object.defineProperty(Sprite.prototype, "overflowX", {
        /**
         * Returns horizontal overflow.
         *
         * @return {number} Horizontal overflow (px)
         */
        get: function () {
            return this._overflowX;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "overflowY", {
        /**
         * Returns vertical overflow.
         *
         * @return {number} Vertical overflow (px)
         */
        get: function () {
            return this._overflowY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "inited", {
        /**
         * ==========================================================================
         * STATE-RELATED
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns `true` if Sprite has already finished initializing.
         *
         * @return {boolean} Initialized?
         */
        get: function () {
            return this._inited;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "states", {
        /**
         * Returns a collection of element's available [[SpriteState]] entries.
         *
         * @see {@link SpriteState}
         * @return {DictionaryTemplate<string, SpriteState>} States
         */
        get: function () {
            if (!this._states) {
                // works
                this._states = new __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__["c" /* DictionaryTemplate */](new __WEBPACK_IMPORTED_MODULE_0__SpriteState__["a" /* SpriteState */]());
                // TODO what about removeKey ?
                this._disposers.push(this._states.events.on("insertKey", this.processState, this));
                this._disposers.push(this._states.events.on("setKey", this.processState, this));
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__["b" /* DictionaryDisposer */](this._states));
            }
            return this._states;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "hiddenState", {
        /**
         * Returns a [[SpriteState]] object for "hidden" state.
         *
         * This is a shortcut to `this.states.getKey("hidden")`.
         *
         * @return {SpriteState} Hidden state
         */
        get: function () {
            return this.states.getKey("hidden");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "defaultState", {
        /**
         * Returns a [[SpriteState]] object for "default" state.
         *
         * This is a shortcut to `this.states.getKey("default")`.
         *
         * @return {SpriteState} Hidden state
         */
        get: function () {
            return this.states.getKey("default");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if some key states are defined and updates Sprite properties
     * accordingly.
     *
     * For example if there's a state "down" defined for Sprite, we automatically
     * make it "clickable".
     *
     * @ignore Exclude from docs
     * @param {IDictionaryEvents<string, SpriteState>["insertKey" | "setKey"]} event An event which caused state list update
     */
    Sprite.prototype.processState = function (event) {
        var state = event.newValue;
        state.sprite = this;
        state.name = event.key;
        if (this.states.hasKey("hover") || __WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](this.tooltipHTML) || __WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](this.tooltipText)) {
            this.hoverable = true;
        }
        if (this.states.hasKey("down")) {
            this.clickable = true;
        }
        if (this.states.hasKey("focus")) {
            this.focusable = true;
        }
    };
    Object.defineProperty(Sprite.prototype, "animations", {
        /**
         * Returns a list elements's animations currently being played.
         *
         * If the list has not been initialized it is created.
         *
         * @return {Array<Animation>} List of animations
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts element's local coordinates to the coordinates within the main
     * chart container.
     *
     * @param  {IPoint}  point  Local point
     * @return {IPoint}         Global point
     */
    Sprite.prototype.getSvgPoint = function (point) {
        // Calculate SVG point
        var bbox = this.htmlContainer.getBoundingClientRect();
        return {
            "x": point.x - bbox.left,
            "y": point.y - bbox.top
        };
    };
    /**
     * Creates and starts an [[Animation]] with given `animationOptions`.
     *
     * @see {@link Animation} for additional information about available options
     * @param  {ISpriteAnimationOptions[] | ISpriteAnimationOptions}  animationOptions  Animation options
     * @param  {number}                                               duration          Duration in milliseconds
     * @param  {(number) => number}                                   easing            Easing function
     * @return {Animation}                                                              Animation instance
     */
    Sprite.prototype.animate = function (animationOptions, duration, easing) {
        return new __WEBPACK_IMPORTED_MODULE_7__utils_Animation__["a" /* Animation */](this, animationOptions, duration, easing).start();
    };
    /**
     * Applies a [[SpriteState]] on this element.
     *
     * The first parameter can either be a name state or a [[SpriteState]]
     * instance.
     *
     * When run, this method will apply SVG properties defined in a
     * [[SpriteState]], but only those that are relevant to this particular
     * element, i.e. are in the `properties` array.
     *
     * @see {@link SpriteState}
     * @param {string | SpriteState} value               A state - name key or instance
     * @param {number}               transitionDuration  Duration of the transition between current and new state
     * @param {number) => number}    easing              An easing function
     */
    Sprite.prototype.setState = function (value, transitionDuration, easing) {
        var state;
        if (value instanceof __WEBPACK_IMPORTED_MODULE_0__SpriteState__["a" /* SpriteState */]) {
            this.states.setKey(value.name, value);
            state = value;
        }
        else {
            state = this.states.getKey(value);
            if (!state) {
                return;
                //throw Error("no such state");
            }
        }
        // stop previous transition
        // not good - foe expample, we are animating to some "active" state and in them middle "hover" state happens. then "active" stat won't be applied
        //if (this._transition) {
        //this._transition.stop();
        //}
        if (state.name == "hover") {
            this.isHover = true;
        }
        if (state.name == "hidden") {
            this.isHiding = true;
        }
        if (state.name == "active") {
            this.isActive = true;
        }
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](transitionDuration)) {
            transitionDuration = state.transitionDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](easing)) {
            easing = state.easing;
        }
        return this.transitTo(state, transitionDuration, easing);
    };
    /**
     * Applies proper state based on the condition of the element. A condition is
     * deducted in this order:
     * * "hover" if Sprite has currently any pointers over it
     * * "down" if Sprite has any pointers (touch or mouse) currently pressed over it
     * * "focus" if Sprite has currently got focus (accessibility)
     * * "hidden" if Sprite is currently hidden
     *
     * Returns an [[Animation]] object, which is handling gradual transition from
     * current values of properties, to the new target state(s).
     *
     * @param  {number}     duration  Duration for the animation (ms)
     * @return {Animation}            [[Animation]] object which is handling the transition
     */
    Sprite.prototype.applyCurrentState = function (duration) {
        var animation = this.setState(this.defaultState, duration);
        if (this.isHover) {
            animation = this.setState("hover", duration);
        }
        if (this.isDown && this.interactions.downPointers.length) {
            animation = this.setState("down", duration);
        }
        this.isFocused = this.isFocused;
        if (this.isActive) {
            animation = this.setState("active", duration);
        }
        return animation;
    };
    /**
     * Starts an [[Animation]] of the properties to specific values as they are
     * set in `state`.
     *
     * @ignore Exclude from docs
     * @param  {SpriteState}         state     Target State
     * @param  {number}              duration  Duration in milliseconds
     * @param  {(number) => number}  easing    Easing function
     * @return {Animation}                     Transition Animation
     */
    Sprite.prototype.transitTo = function (state, duration, easing) {
        var _this = this;
        // Init
        var options = [], propValues = state.allValues, transiton;
        // todo: do this for numeric/color properties only?
        // @todo use state.getPropertyValue instead
        __WEBPACK_IMPORTED_MODULE_28__utils_Object__["each"](propValues, function (propertyName, finalValue) {
            var currentValue = _this[propertyName];
            // save current value to default state. this solves a big problem where values must be set both on sprite and default state
            if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {
                _this.defaultState.properties[propertyName] = currentValue;
            }
            //if (finalValue != currentValue && $type.hasValue(finalValue)) {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](finalValue)) {
                var option = { from: currentValue, to: finalValue, property: propertyName };
                options.push(option);
            }
        });
        if (options.length > 0) {
            transiton = this.animate(options, duration, easing);
            // TODO should this use events.once ?
            // TODO push onto _disposers array ?
            this._disposers.push(transiton.events.on("animationend", function () {
                _this.dispatchImmediately("transitionend");
            }));
        }
        // apply filters if set
        if (state.filters.length > 0) {
            var newFilters_1 = [];
            // check for the same filters
            __WEBPACK_IMPORTED_MODULE_30__utils_Iterator__["each"](state.filters.iterator(), function (stateFilter) {
                var newFilter = stateFilter.clone();
                newFilters_1.push(newFilter);
                var animationOptions = [];
                __WEBPACK_IMPORTED_MODULE_30__utils_Iterator__["each"](_this.filters.iterator(), function (currentFilter) {
                    // if we have the same filters
                    if (currentFilter.className == newFilter.className) {
                        if (!__WEBPACK_IMPORTED_MODULE_30__utils_Iterator__["contains"](_this.defaultState.filters.iterator(), function (x) { return x.className === newFilter.className; })) {
                            _this.defaultState.filters.push(currentFilter);
                        }
                        __WEBPACK_IMPORTED_MODULE_28__utils_Object__["each"](newFilter.properties, function (propertyName, newValue) {
                            var currentValue = currentFilter.properties[propertyName];
                            // if values are not the same, push to animation options array
                            if (currentValue != newValue) {
                                animationOptions.push({ property: propertyName, from: currentValue, to: newValue });
                            }
                        });
                    }
                });
                // animate to new value
                newFilter.animate(animationOptions, duration, easing);
            });
            this.filters.clear();
            this.filters.pushAll(newFilters_1);
        }
        return transiton;
    };
    /**
     * Returns `true` if Sprite is currently transiting from one state/value to
     * another.
     *
     * @return {boolean} Is in transition?
     */
    Sprite.prototype.isInTransition = function () {
        return this.animations.length > 0;
    };
    Object.defineProperty(Sprite.prototype, "isHover", {
        /**
         * Retruns indicator if this element has a mouse pointer currently hovering
         * over it, or if it has any touch pointers pressed on it.
         *
         * @return {boolean} Is hovered?
         */
        get: function () {
            return this.interactions.isHover;
        },
        /**
         * Sets indicator if this element has a mouse pointer currently hovering
         * over it, or if it has any touch pointers pressed on it.
         *
         * @param {boolean} value Is hovered?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.isHover) {
                this.interactions.isHover = value;
                if (value) {
                    this.handleOver();
                }
                else {
                    this.handleOut();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isDragged", {
        /**
         * Returns indicator if this element is being dragged at the moment
         *
         * @return {boolean} Is dragged?
         */
        get: function () {
            return this._isDragged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isDown", {
        /**
         * Returns indicator if this element has any pointers (mouse or touch)
         * pressing down on it.
         *
         * @return {boolean} Is down?
         */
        get: function () {
            return this.interactions.isDown;
        },
        /**
         * Sets indicator if this element has any pointers (mouse or touch) pressing
         * down on it.
         *
         * @param {boolean} value Is down?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (this.isDown != value) {
                this.interactions.isDown = value;
                if (value) {
                    this.handleDown();
                }
                else {
                    this.handleUp();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isFocused", {
        /**
         * Returns if this element is focused.
         *
         * @return {boolean} Is focused?
         */
        get: function () {
            return this.interactions.isFocused;
        },
        /**
         * Sets if this element is focused (possibly by tab navigation).
         *
         * @param {boolean} value Is focused?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (this.focusable && this.isFocused != value) {
                this.interactions.isFocused = value;
                if (value === true) {
                    this.handleFocus();
                }
                else {
                    this.handleBlur();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isActive", {
        /**
         * Returns if this element is currently active.
         *
         * @return {boolean} Is active?
         */
        get: function () {
            return this._isActive;
        },
        /**
         * Sets if this element is currently active (toggled on) or not
         * (toggled off).
         *
         * @param {boolean} value Is active?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (this._isActive !== value) {
                this._isActive = value;
                if (value && this.states.hasKey("active")) {
                    this.setState("active");
                }
                else {
                    this.applyCurrentState();
                }
                this.dispatchImmediately("toggle");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "disabled", {
        /**
         * @return {boolean} Disabled?
         */
        get: function () {
            //if(this._internalDisabled){
            //	return true;
            //}
            var current = this.getPropertyValue("disabled");
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](current)) {
                return current;
            }
            else {
                if (this.parent) {
                    return this.parent.disabled;
                }
            }
            return false;
        },
        /**
         * Controls if element is disabled.
         *
         * A disabled element is hidden, and is removed from any processing, layout
         * calculations, and generally treated like if it does not existed.
         *
         * The element itself is not destroyed, though. Setting this back to `false`,
         * will "resurrect" the element.
         *
         * @param {boolean}  value  Disabled?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            var current = this.getPropertyValue("disabled");
            if (current != value) {
                this.setPropertyValue("disabled", value, true);
                if (value) {
                    this.parent = this.parent;
                    this.removeFromInvalids();
                    this.group.attr({ "display": "none" });
                }
                else {
                    if (this instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */]) {
                        this.deepInvalidate();
                    }
                    else {
                        this.invalidate();
                    }
                    if (!this.__disabled) {
                        this.removeSVGAttribute("display");
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "__disabled", {
        /**
         * Internal disable method.
         *
         * Do not use it for disabling elements. Use `disabled` accessor instead.
         *
         * @ignore Exclude from docs
         * @param {boolean} value Disabled?
         */
        set: function (value) {
            if (this._internalDisabled != value) {
                this._internalDisabled = value;
                if (value) {
                    this.group.attr({ "display": "none" });
                }
                else {
                    if (!this.disabled) {
                        this.removeSVGAttribute("display");
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "numberFormatter", {
        /**
         * @return {NumberFormatter} A [[NumberFormatter]] instance to be used
         */
        get: function () {
            if (this._numberFormatter) {
                return this._numberFormatter;
            }
            else if (this.parent) {
                return this.parent.numberFormatter;
            }
            this._numberFormatter = new __WEBPACK_IMPORTED_MODULE_19__formatters_NumberFormatter__["a" /* NumberFormatter */]();
            this._numberFormatter.language = this.language;
            return this.numberFormatter;
        },
        /**
         * ==========================================================================
         * FORMATTERS AND OTHER EXTERNAL HELPERS
         * ==========================================================================
         * @hidden
         */
        /**
         * A [[NumberFormatter]] instance.
         *
         * This is used to format numbers.
         *
         * ```TypeScript
         * chart.numberFormatter.numberFormat = "#,###.#####";
         * ```
         * ```JavaScript
         * chart.numberFormatter.numberFormat = "#,###.#####";
         * ```
         * ```JSON
         * {
         *   // ...
         *   "numberFormatter": {
         *     "numberFormat": "#,###.#####"
         *   }
         * }
         * ```
         *
         * You can set a separate instance of formatter for each
         * individual element. However that would be unnecessary overhead as
         * all elements would automatically inherit formatter from their parents,
         * all the way up to the chart itself.
         *
         *
         * @see {@link NumberFormatter} for more info on formatting numbers
         * @param {NumberFormatter}  value  An instance of NumberFormatter
         */
        set: function (value) {
            this._numberFormatter = value;
            this._numberFormatter.language = this.language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "dateFormatter", {
        /**
         * @return {DateFormatter} An instance of DateFormatter
         */
        get: function () {
            if (this._dateFormatter) {
                return this._dateFormatter;
            }
            else if (this.parent) {
                return this.parent.dateFormatter;
            }
            this._dateFormatter = new __WEBPACK_IMPORTED_MODULE_20__formatters_DateFormatter__["a" /* DateFormatter */]();
            this._dateFormatter.language = this.language;
            return this.dateFormatter;
        },
        /**
         * A [[DateFormatter]] instance.
         *
         * This is used to format dates, e.g. on a date axes, balloons, etc.
         *
         * ```TypeScript
         * chart.dateFormatter.dateFormat = "yyyy-MM-dd";
         * ```
         * ```JavaScript
         * chart.dateFormatter.dateFormat = "yyyy-MM-dd";
         * ```
         * ```JSON
         * {
         *   // ...
         *   "dateFormatter": {
         *     "dateFormat": "yyyy-MM-dd"
         *   }
         * }
         * ```
         *
         * You can set a separate instance of formatter for each
         * individual element. However that would be unnecessary overhead as
         * all elements would automatically inherit formatter from their parents,
         * all the way up to the chart itself.
         *
         * @see {@link DateFormatter} for more info on dates formatting
         * @param {DateFormatter}  value  An instance of DateFormatter
         */
        set: function (value) {
            this._dateFormatter = value;
            this._dateFormatter.language = this.language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "durationFormatter", {
        /**
         * @return {DurationFormatter} An instance of DurationFormatter
         */
        get: function () {
            if (this._durationFormatter) {
                return this._durationFormatter;
            }
            else if (this.parent) {
                return this.parent.durationFormatter;
            }
            this._durationFormatter = new __WEBPACK_IMPORTED_MODULE_21__formatters_DurationFormatter__["a" /* DurationFormatter */]();
            this._durationFormatter.language = this.language;
            return this.durationFormatter;
        },
        /**
         * A [[DurationFormatter]] instance.
         *
         * This is used to format numbers as durations, e.g. on a value axes.
         *
         * You can set a separate instance of formatter for each
         * individual element. However that would be unnecessary overhead as
         * all elements would automatically inherit formatter from their parents,
         * all the way up to the chart itself.
         *
         * @see {@link DurationFormatter} for more info on durations
         * @param {DurationFormatter}  value  An instance of DurationFormatter
         */
        set: function (value) {
            this._durationFormatter = value;
            this._durationFormatter.language = this.language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "language", {
        /**
         * @return {Language} An instance of Language
         */
        get: function () {
            if (this._language.get()) {
                return this._language.get();
            }
            else if (this.parent) {
                return this.parent.language;
            }
            var language = new __WEBPACK_IMPORTED_MODULE_22__utils_Language__["a" /* Language */]();
            this.language = language;
            return language;
        },
        /**
         * A [[Language]] instance to use for translations.
         *
         * Normally it is enough to set language for the top-most element - chart.
         *
         * All other element child elements will automatically re-use that language
         * object.
         *
         * @param {Language}  value  An instance of Language
         */
        set: function (value) {
            var _this = this;
            if (this._language.get() !== value) {
                this._language.set(value, value.events.on("localeChanged", function (ev) {
                    if (_this instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */]) {
                        _this.deepInvalidate();
                    }
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * ==========================================================================
     * DATA-RELATED STUFF
     * ==========================================================================
     * @hidden
     */
    /**
     * Parses the string for meta tags `{tag}` and replaces them with a real
     * value. Supports straight up tags referring to the field in data, i.e.
     * `{value}` or tags with additional formatting info. E.g.:
     *
     * ```Text
     * {myfield.formatDate("yyyy-MM-dd")}
     * {myfield.formatDate()}
     * {myfield.formatNumber("#,####.00")}
     * {myfield.formatNumber()}
     * {myField.formatDuration("mm:ss")}
     * ```
     *
     * Etc.
     *
     * This method Will automatically detect and use proper formatter for the
     * value.
     *
     * The source value will be looked up in various places: (in order)
     * * Sprite's own `dataItem`
     * * Sprite's properties
     * * Parent's `dataItem`
     * * Parent's properties
     *
     * @ignore Exclude from docs
     * @param  {string}    string            A string to format
     * @param  {DataItem}  dataItem          DataItem
     * @return {string}                      Formatted string
     */
    Sprite.prototype.populateString = function (string, dataItem) {
        if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](string)) {
            string = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["castString"](string);
            var tags = string.match(/\{([^}]+)\}/g);
            var i = void 0;
            if (tags) {
                for (i = 0; i < tags.length; i++) {
                    var tag = tags[i].replace(/\{([^}]+)\}/, "$1");
                    var value = this.getTagValue(tag, "", dataItem);
                    if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value)) {
                        value = "";
                    }
                    string = string.split(tags[i]).join(value);
                }
            }
        }
        else {
            string = "";
        }
        return string;
    };
    /**
     * Gets the value from data item and formats it according to specified format.
     *
     * If `format` is specified, it will use its contents to choose formatter for
     * the value. Otherwise it will select formatter accordingly to actual value
     * type.
     *
     * @ignore Exclude from docs
     * @todo Ability to force certain formatter on known numeric and date values
     * @see {@link NumberFormatter}
     * @see {@link DateFormatter}
     * @see {@link DurationFormatter}
     * @param  {string}    tagName           Tag name to replace
     * @param  {string}    format            Format to use
     * @param  {DataItem}  dataItem          DataItem
     * @return {string}                      Formatted value
     */
    Sprite.prototype.getTagValue = function (tagName, format, dataItem) {
        var value;
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](dataItem)) {
            dataItem = this.dataItem;
        }
        // Parse parts
        var parts = [];
        var reg = /([^.]+)\(([^)]*)\)|([^.]+)/g;
        ;
        var matches;
        while ((matches = reg.exec(tagName)) !== null) {
            if (matches[3]) {
                // Simple property
                parts.push({
                    prop: matches[3]
                });
            }
            else {
                // Method
                // Parse parameters
                var params = [];
                if (__WEBPACK_IMPORTED_MODULE_24__utils_Utils__["trim"](matches[2]) != "") {
                    var reg2 = /'([^']*)'|"([^"]*)"|([0-9\-]+)/g;
                    var matches2 = void 0;
                    while ((matches2 = reg2.exec(matches[2])) !== null) {
                        params.push(matches2[1] || matches2[2] || matches2[3]);
                    }
                }
                parts.push({
                    method: matches[1],
                    params: params
                });
            }
        }
        // Check if we can retrieve the value from data item
        if (dataItem) {
            // Check values
            value = this.getTagValueFromObject(parts, dataItem.values);
            // Check properties
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value) || __WEBPACK_IMPORTED_MODULE_29__utils_Type__["isObject"](value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and wont't get to the dateX date.
                value = this.getTagValueFromObject(parts, dataItem);
            }
            // Check data context
            var dataContext = dataItem.dataContext;
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value) && dataContext) {
                value = this.getTagValueFromObject(parts, dataItem.dataContext);
                // scond data context level sometimes exist (tree map)
                if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value) && dataContext.dataContext) {
                    value = this.getTagValueFromObject(parts, dataContext.dataContext);
                }
            }
            // Check component's data item
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value) && dataItem.component && dataItem.component.dataItem !== dataItem) {
                value = dataItem.component.getTagValue(tagName, format, null);
            }
        }
        // Check sprite's properties
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value)) {
            value = this.getTagValueFromObject(parts, this);
        }
        // Finally, check the parent
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value) && this.parent) {
            value = this.parent.getTagValue(tagName, format, null);
        }
        return value;
    };
    /**
     * Tries to retrieve values from properties of any object, then applies
     * proper formatting to it.
     *
     * @ignore Exclude from docs
     * @todo Description (improve)
     * @param  {any[]}   parts   Properties ant methods to access
     * @param  {any}     object  Source object
     * @param  {string}  format  A specific format to apply
     * @return {any}             Formatted value
     */
    Sprite.prototype.getTagValueFromObject = function (parts, object, format) {
        var current = object;
        var formatApplied = false;
        for (var i = 0, len = parts.length; i < len; i++) {
            var part = parts[i];
            if (part.prop) {
                // Regular property
                current = current[part.prop];
                if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](current)) {
                    // Not set, return undefined
                    return;
                }
            }
            else {
                // Method
                switch (part.method) {
                    case "formatNumber":
                        current = this.numberFormatter.format(__WEBPACK_IMPORTED_MODULE_24__utils_Utils__["anyToNumber"](current), format || part.params[0] || undefined);
                        formatApplied = true;
                        break;
                    case "formatDate":
                        current = this.dateFormatter.format(__WEBPACK_IMPORTED_MODULE_24__utils_Utils__["anyToDate"](current), format || part.params[0] || undefined);
                        formatApplied = true;
                        break;
                    case "formatDuration":
                        current = this.durationFormatter.format(__WEBPACK_IMPORTED_MODULE_24__utils_Utils__["anyToNumber"](current), format || part.params[0] || undefined, part.params[1] || undefined);
                        formatApplied = true;
                        break;
                    default:
                        if (current[part.method]) {
                            current[part.method].apply(this, part.params);
                        }
                        break;
                }
            }
        }
        // Apply default format if it wasn't applied explicitly
        if (!formatApplied) {
            var formatParts = [{
                    method: "",
                    params: format
                }];
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](format)) {
                // Format is not set
                // Determine from the type of the value
                if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](current)) {
                    formatParts[0].method = "formatNumber";
                    formatParts[0].params = "";
                }
                else if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isDate"](current)) {
                    formatParts[0].method = "formatDate";
                    formatParts[0].params = "";
                }
            }
            else {
                // Format set
                // Try to determine formatter based on the format
                var formatterType = __WEBPACK_IMPORTED_MODULE_24__utils_Utils__["getFormat"](format);
                // format
                if (formatterType === __WEBPACK_IMPORTED_MODULE_26__utils_Strings__["c" /* NUMBER */]) {
                    formatParts[0].method = "formatNumber";
                }
                else if (formatterType === __WEBPACK_IMPORTED_MODULE_26__utils_Strings__["a" /* DATE */]) {
                    formatParts[0].method = "formatDate";
                }
                else if (formatterType === __WEBPACK_IMPORTED_MODULE_26__utils_Strings__["b" /* DURATION */]) {
                    formatParts[0].method = "formatDuration";
                }
            }
            // Apply format
            if (formatParts[0].method) {
                current = this.getTagValueFromObject(formatParts, current);
            }
        }
        return current;
    };
    Object.defineProperty(Sprite.prototype, "dataItem", {
        /**
         * @return {this} [[DataItem]]
         */
        get: function () {
            if (!this._dataItem) {
                if (this.parent) {
                    return this.parent.dataItem;
                }
            }
            return this._dataItem;
        },
        /**
         * A [[DataItem]] to use as element's data source.
         *
         * @todo Review type
         * @param {this["_dataItem"]}  dataItem  DataItem
         */
        set: function (dataItem) {
            //an not use this["_dataItem"] here, as we return parent data item if this sprite doesn't have one.
            // @todo:think about it
            this.setDataItem(dataItem);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets currently used [[DataItem]].
     *
     * If the element has also `configField` set, it will also look for any
     * config in DataItem's data context to apply to this element.
     *
     * @param {DataItem} dataItem DataItem
     */
    Sprite.prototype.setDataItem = function (dataItem) {
        if (this._dataItem != dataItem) {
            this._dataItem = dataItem;
            if (this.configField) {
                if (dataItem.dataContext) {
                    this.config = dataItem.dataContext[this.configField];
                }
            }
            var dataContext = dataItem.dataContext;
            if (dataContext) {
                for (var propertyName in this.propertyFields) {
                    var fieldValue = this.propertyFields[propertyName];
                    if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](dataContext[fieldValue])) {
                        var anyThis = this;
                        anyThis[propertyName] = dataContext[fieldValue];
                    }
                }
            }
            this.invalidate();
        }
    };
    /**
     * ==========================================================================
     * PROPERTY UTILITIES
     * ==========================================================================
     * @hidden
     */
    /**
     * Returns element's property value.
     *
     * Will check if there are any bindings with [[DataItem]].
     *
     * Will also apply any adapters bound to `propertyName`.
     *
     * @param  {ISpriteProperties}  propertyName  Property name
     * @return {any}                              Property value
     */
    Sprite.prototype.getPropertyValue = function (propertyName) {
        var propValue = this.properties[propertyName];
        // Apply adapter
        // @todo get rid of <any>
        if (!this.isTemplate) {
            propValue = this.adapter.apply(propertyName, propValue);
        }
        return propValue;
    };
    /**
     * Sets elements's property value. Will also propagate the same property value
     * on all element's clones.
     *
     * @param  {this["_properties"]}  property    Property
     * @param  {any}                  value       Value
     * @param  {boolean}              invalidate  Should the sprite be invalidated, cause it's re-rendering
     * @param  {boolean}              transform   Re-apply positioning of the element
     * @return {boolean}                          Did the value change? It will return `true` if the new value and the old value of the property are not the same
     * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.
     */
    Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {
        if (this.properties[property] !== value) {
            this.properties[property] = value;
            if (this.events.isEnabled("propertychanged")) {
                this.events.dispatchImmediately("propertychanged", {
                    type: "propertychanged",
                    target: this,
                    property: property
                });
            }
            if (invalidate) {
                this.invalidate();
            }
            // else, as both applySVGAttr and transform is done after invalidation.
            else {
                if (transform) {
                    this.invalidatePosition();
                }
            }
            if (this.applyOnClones) {
                var clones = this.clones.values;
                var length_1 = clones.length;
                for (var i = 0; i < length_1; ++i) {
                    var clone = clones[i];
                    if (!clone.isDisposed()) {
                        //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);
                        clone[property] = value;
                    }
                }
            }
            return true;
        }
        return false;
    };
    Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {
        var _this = this;
        if (bindToProperty === void 0) { bindToProperty = property; }
        if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](this._bindings[property])) {
            this._bindings[property].dispose();
        }
        // set current value
        this[property] = source[bindToProperty];
        //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);
        this._bindings[property] = source.events.on("propertychanged", function (event) {
            if (event.property === bindToProperty) {
                var value = source[bindToProperty];
                if (modifier) {
                    value = modifier(value);
                }
                // TODO clonesById
                _this[property] = value;
            }
        });
    };
    /**
     * Sets up and obeserver function to monitor changes in particular property
     * or properties.
     *
     * @ignore Exclude from docs
     * @param   {string | string[]}  property  Element's property name
     * @param   {function}           listener  Handler function
     * @param   {C}                  context   Context for handler function
     * @returns {IDisposer}                    Event Disposer
     */
    Sprite.prototype.observe = function (property, listener, context) {
        var _this = this;
        return new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */](__WEBPACK_IMPORTED_MODULE_27__utils_Array__["i" /* map */](__WEBPACK_IMPORTED_MODULE_27__utils_Array__["n" /* toArray */](property), function (prop) {
            return _this.events.on("propertychanged", function (e) {
                if (e.property === prop) {
                    listener.call(context, e);
                }
            });
        }));
    };
    /**
     * ==========================================================================
     * ACCESSIBILITY-RELATED PROPERTIES
     * ==========================================================================
     * @hidden
     */
    /**
     * Applies accessibility to the SVG element.
     *
     * Adds `<title>` and `<description>` elements as well as `aria-labelledby`
     * and `role` properties.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.applyAccessibility = function () {
        // Check if we need to add label and description
        var title = this.readerTitle, description = this.readerDescription, role = this.role, hidden = this.readerHidden, checked = this.readerChecked, controls = this.readerControls, live = this.readerLive;
        // Init label/describe ids
        var labelledByIds = [], describedByIds = [];
        var labelledBy = this.readerLabelledBy;
        if (labelledBy) {
            labelledByIds.push(labelledBy);
        }
        var describedBy = this.readerDescribedBy;
        if (describedBy) {
            describedByIds.push(describedBy);
        }
        // If we have only label, we use `aria-label` attribute.
        // If there are both label and description, we'll go with separate tags and
        // use `aria-labelledby`
        if (title && !description && !this.showSystemTooltip) {
            // Only label is set, use attribute
            this.setSVGAttribute({
                "aria-label": title
            });
            // Remove previous elements
            this.removeSVGAttribute("aria-description");
            if (this._titleElement) {
                this.group.removeElement(this._titleElement);
                this._titleElement = undefined;
            }
            if (this._descriptionElement) {
                this.group.removeElement(this._descriptionElement);
                this._descriptionElement = undefined;
            }
        }
        else {
            if (title) {
                var titleElement = this.titleElement;
                var titleId = this.uid + "-title";
                if (titleElement.node.textContent != title) {
                    titleElement.node.textContent = title;
                    titleElement.attr({ id: titleId });
                }
                labelledByIds.push(titleId);
            }
            else if (this._titleElement) {
                this.group.removeElement(this._titleElement);
                this._titleElement = undefined;
            }
            if (description) {
                var descriptionElement = this.descriptionElement;
                var descriptionId = this.uid + "-description";
                if (descriptionElement.node.textContent != description) {
                    descriptionElement.node.textContent = description;
                    descriptionElement.attr({ id: descriptionId });
                }
                labelledByIds.push(descriptionId);
            }
            else if (this._descriptionElement) {
                this.group.removeElement(this._descriptionElement);
                this._descriptionElement = undefined;
            }
        }
        // Add label and described properties
        if (labelledByIds.length) {
            this.setSVGAttribute({ "aria-labelledby": labelledByIds.join(" ") });
        }
        if (describedByIds.length) {
            this.setSVGAttribute({ "aria-describedby": describedByIds.join(" ") });
        }
        // Apply role
        if (role) {
            this.setSVGAttribute({ "role": role });
        }
        else {
            this.removeSVGAttribute("role");
        }
        // Apply aria-hidden
        if (hidden) {
            this.setSVGAttribute({ "aria-hidden": "true" });
        }
        else {
            this.removeSVGAttribute("aria-hidden");
        }
        // Apply aria-checked
        if (checked) {
            this.setSVGAttribute({ "aria-checked": "true" });
        }
        else if (checked === false) {
            this.setSVGAttribute({ "aria-checked": "false" });
        }
        else {
            this.removeSVGAttribute("aria-checked");
        }
        // Apply aria-controls
        if (controls) {
            this.setSVGAttribute({ "aria-controls": controls });
        }
        else {
            this.removeSVGAttribute("aria-controls");
        }
        // Apply aria-live
        if (live) {
            this.setSVGAttribute({ "aria-live": live });
        }
        else {
            this.removeSVGAttribute("aria-live");
        }
    };
    Object.defineProperty(Sprite.prototype, "readerTitle", {
        /**
         * @return {string} Title
         */
        get: function () {
            return this.getPropertyValue("readerTitle");
        },
        /**
         * Screen reader title of the element.
         *
         * @param {string} value Title
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerTitle", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerDescription", {
        /**
         * @return {string} Description
         */
        get: function () {
            return this.getPropertyValue("readerDescription");
        },
        /**
         * Screen reader description of the element.
         *
         * @param {string} value Description
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerDescription", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "role", {
        /**
         * @return {Roles} Role
         */
        get: function () {
            return this.getPropertyValue("role");
        },
        /**
         * A WAI-ARIA role for the element.
         *
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles
         * @param {Roles}  value  Role
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (this.setPropertyValue("role", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerHidden", {
        /**
         * @return {boolean} Hidden?
         */
        get: function () {
            return this.getPropertyValue("readerHidden");
        },
        /**
         * Controls if element should be hidden from screen readers.
         *
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information
         * @param {boolean}  value  Hidden?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (this.setPropertyValue("readerHidden", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerChecked", {
        /**
         * @ignore Exclude from docs
         * @return {boolean} Checked?
         */
        get: function () {
            return this.getPropertyValue("readerChecked");
        },
        /**
         * Controls if element is currently marked as "checked".
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information
         * @param {boolean} value Checked?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (this.setPropertyValue("readerChecked", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerControls", {
        /**
         * @ignore Exclude from docs
         * @return {string} Setting value
         */
        get: function () {
            return this.getPropertyValue("readerControls");
        },
        /**
         * A `uid` of an element this element controls.
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information
         * @param {string} value Setting value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerControls", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerLive", {
        /**
         * @ignore Exclude from docs
         * @return {AriaLive} Setting value
         */
        get: function () {
            return this.getPropertyValue("readerLive");
        },
        /**
         * Controls accessibility setting "aria-live" for the element.
         *
         * @ignore Exclude from docs
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information
         * @param {AriaLive} value Setting value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerLive", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerLabelledBy", {
        /**
         * @ignore Exclude from docs
         * @return {Sprite} Target element
         */
        get: function () {
            return this.getPropertyValue("readerLabelledBy");
        },
        /**
         * A `uid` of an element that describes this element.
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information
         * @param {Sprite} value Target element
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerLabelledBy", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerDescribedBy", {
        /**
         * @ignore Exclude from docs
         * @return {Sprite} Target element
         */
        get: function () {
            return this.getPropertyValue("readerDescribedBy");
        },
        /**
         * A `uid` of an element that describes this element.
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information
         * @param {Sprite} value Target element
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerDescribedBy", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "keyboardOptions", {
        /**
         * ==========================================================================
         * USER INTERACTIONS
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns elements keyboard options.
         *
         * @return {IKeyboardOptions} Keyboard options
         */
        get: function () {
            if (!this.interactions.keyboardOptions) {
                if (this.parent) {
                    return this.parent.keyboardOptions;
                }
            }
            return this.interactions.keyboardOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "interactions", {
        /**
         * Returns (creates if necessary) an [[InteractionObject]] associated with
         * this element.
         *
         * [[InteractionObject]] is used to attach all kinds of user-interactions to
         * the element, e.g. click/touch, dragging, hovering, and similar events.
         *
         * @return {InteractionObject} Interaction object
         */
        get: function () {
            if (!this._interaction) {
                this._interaction = __WEBPACK_IMPORTED_MODULE_15__interaction_Interaction__["b" /* interaction */].getInteraction(this.dom);
                this._interaction.clickable = this.clickable;
                this._interaction.hoverable = this.hoverable;
                this._interaction.trackable = this.trackable;
                this._interaction.draggable = this.draggable;
                this._interaction.swipeable = this.swipeable;
                this._interaction.resizable = this.resizable;
                this._interaction.rotatable = this.resizable;
                this._interaction.wheelable = this.wheelable;
                this._interaction.inert = this.inert;
                this._disposers.push(this._interaction);
            }
            return this._interaction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "focusable", {
        /**
         * @return {Optional<boolean>} Can element be focused?
         */
        get: function () {
            return this.getPropertyValue("focusable");
        },
        /**
         * ==========================================================================
         * ELEMENT FOCUS-RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Controls if the element can gain focus.
         *
         * Focusable element will be selectable via TAB key.
         *
         * Please note, clicking it with a mouse or touching will not add focus to
         * it.
         *
         * Focused element will show a system-specific highlight, which might ruin
         * the overal look. This is why we don't focus element on click/touch.
         *
         * A default setting varies for different elements. By default all elements
         * are not focusable, except certain items like buttons, legend items, etc.
         *
         * @default undefined (auto)
         * @param {Optional<boolean>}  value  Can element be focused?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.focusable) {
                this.setPropertyValue("focusable", value);
                if (value) {
                    this.setSVGAttribute({ "focusable": value });
                }
                else {
                    this.removeSVGAttribute("focusable");
                }
                this.interactions.focusable = value;
                // Set focus events that would apply "focus" state
                if (value !== false) {
                    if (!this.interactions.eventDisposers.hasKey("sprite-focusable")) {
                        this.interactions.eventDisposers.setKey("sprite-focusable", new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                            this.events.on("blur", this.handleBlur, this),
                            this.events.on("focus", this.handleFocus, this)
                        ]));
                    }
                }
                else if (this.interactions.eventDisposers.hasKey("sprite-focusable")) {
                    this.interactions.eventDisposers.getKey("sprite-focusable").dispose();
                    this.interactions.eventDisposers.removeKey("sprite-focusable");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Applies filters (if set) when element gains focus.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["focus"]} ev Original event
     */
    Sprite.prototype.handleFocus = function (ev) {
        if (this.focusable) {
            if (this.topParent) {
                this.topParent.hasFocused = true;
            }
            if (this.focusFilter) {
                // Any `filters` manipulation will trigger `applyFilters()` so we don't
                // need to call it here
                this.filters.push(this.focusFilter);
            }
        }
    };
    /**
     * Removes focus filter (if set) when elementloses focus.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["blur"]} ev Original event
     */
    Sprite.prototype.handleBlur = function (ev) {
        if (this.focusable) {
            if (this.topParent) {
                this.topParent.hasFocused = false;
            }
            if (this.focusFilter) {
                // Any `filters` manipulation will trigger `applyFilters()` so we don't
                // need to call it here
                this.filters.removeValue(this.focusFilter);
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "focusFilter", {
        /**
         * A reference to a [[Filter]] to apply to element when it gains focus.
         *
         * Normally, browsers will draw a default ugly square around focused element,
         * which totally makes sense because its purpose is to help identify active
         * element for visually impaired people.
         *
         * However, if you would rather apply a filter, so you can modify how focused
         * element looks like, use `focusFilter`.
         *
         * Simply set it to an anstance of [[FocusFilter]], or any other filter
         * object.
         *
         * ```TypeScript
         * chart.focusFilter = new amcharts4.FocusFilter();
         * ```
         * ```JavaScript
         * chart.focusFilter = new amcharts4.FocusFilter();
         * ```
         * ```JSON
         * {
         *   // ...
         *   "focusFilter": {
         *     "type": "FocusFilter"
         *   },
         *   // ...
         * }
         * ```
         *
         * @see {@link Filter}
         * @ignore Exclude from docs
         * @return {Filter} Focused element filter
         * @todo This is still experimental, use at your own risk.
         */
        get: function () {
            /*if (!this._focusFilter) {
                this._focusFilter = new FocusFilter();
                this._disposers.push(this._focusFilter);
            }*/
            //return this._focusFilter;
            if (this._focusFilter) {
                return this._focusFilter;
            }
            else {
                if (this.parent) {
                    return this.parent.focusFilter;
                }
                //this._focusFilter = new FocusFilter();
                //this._disposers.push(this._focusFilter);
                return this._focusFilter;
            }
        },
        /**
         * @see {@link Filter}
         * @ignore Exclude from docs
         * @todo This is still experimental, don't use it
         */
        set: function (value) {
            this._focusFilter = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tabindex", {
        /**
         * Returns current TAB index for focusable item.
         *
         * @return {number} TAB index
         */
        get: function () {
            if (this._tabindex) {
                return this._tabindex;
            }
            else if (this.parent) {
                return this.parent.tabindex;
            }
        },
        /**
         * Sets TAB index.
         *
         * Tab index maintains the order in which focusable elements gain focus when
         * TAB key is pressed.
         *
         * Please note, tab index is not local to the chart. It affects the whole
         * of the page, including non-SVG elements. Maintain extreme causion when
         * setting tab indexes, as it affects the user experience for the whole
         * web page.
         *
         * @param {number} value TAB index
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumber"](value);
            if (value !== this.tabindex) {
                if (this.setPropertyValue("tabindex", value)) {
                    this.interactions.tabindex = value;
                    this.setSVGAttribute({ "tabindex": value });
                    if (value > -1) {
                        this.focusable = true;
                    }
                    else {
                        this.focusable = undefined;
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "inertiaOptions", {
        /**
         * ==========================================================================
         * DRAGGING AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns element's options to be used for inertia. This setting is
         * inheritable, meaning that if not set directly, it will search in all its
         * ascendants until very top.
         *
         * Inertia is used only if element's `inert` is set to `true`.
         *
         * "Inert" element, when dragged and released, will carry the momentum of the
         * movement, and will continue moving in the same drag direction, gradually
         * reducing in speed until finally stops.
         *
         * Check [[IInertiaOptions]] for how you tweak inertia animations.
         *
         * @return {Dictionary<InertiaTypes, IInertiaOptions>} Inertia options
         */
        get: function () {
            if (!this.interactions.inertiaOptions) {
                if (this.parent) {
                    return this.parent.inertiaOptions;
                }
            }
            return this.interactions.inertiaOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "draggable", {
        /**
         * @return {boolean} `true` if element can be dragged
         */
        get: function () {
            return this.getPropertyValue("draggable");
        },
        /**
         * Controls if the element is draggable.
         *
         * @param {boolean}  value  `true` if element can be dragged
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.draggable) {
                this.setPropertyValue("draggable", value);
                this.applyCursorStyle();
                this.interactions.draggable = value;
                //interaction.processDraggable(this);
                // Add events
                // @todo Maybe attach to InteractionObject's multidisposer so that
                // sprites events get disposed together with them?
                // this.interactions.disposers.getItem("movable")
                if (value) {
                    if (!this.interactions.eventDisposers.hasKey("sprite-draggable")) {
                        this.interactions.eventDisposers.setKey("sprite-draggable", new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                            this.events.on("down", this.handleDown, this),
                            this.events.on("dragstart", this.handleDragStart, this),
                            this.events.on("drag", this.handleDragMove, this),
                            this.events.on("dragstop", this.handleDragStop, this)
                        ]));
                    }
                }
                else if (this.interactions.eventDisposers.hasKey("sprite-draggable")) {
                    this.interactions.eventDisposers.getKey("sprite-draggable").dispose();
                    this.interactions.eventDisposers.removeKey("sprite-draggable");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Executes when dragged element is being started to drag.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.handleDragStart = function () {
        this._isDragged = true;
        this.hideTooltip(0);
    };
    /**
     * Tell this element to start being dragged. This is useful if you want to
     * drag items by interactions performed not directly on the target element.
     *
     * Parameter `pointer` is highly recommended. By passing in the Pointer you
     * will ensure that movement is tracked for the pointer that you want. If not
     * supplied, the system will try to determine the most logical pointer.
     *
     * However this may fail if you have more than one pointer active, which
     * might happen if you have several objects being dragged on a touch device.
     *
     * @ignore Exclude from docs
     * @param {IPointer} pointer Pointer to use for movement
     */
    Sprite.prototype.dragStart = function (pointer) {
        //this.dragStop(pointer);
        //this.draggable = true;
        this._isDragged = true;
        __WEBPACK_IMPORTED_MODULE_15__interaction_Interaction__["b" /* interaction */].dragStart(this.interactions, pointer);
    };
    /**
     * Executes when dragged element is being dropped.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.handleDragStop = function () {
        this._isDragged = false;
        this.showTooltip();
        this.interactions.originalPosition = undefined;
    };
    /**
     * Stops manually initiated dragging of the element.
     *
     * @ignore Exclude from docs
     * @param {IPointer} pointer Pointer to use as a reference
     */
    Sprite.prototype.dragStop = function (pointer) {
        //this.draggable = false;
        this._isDragged = false;
        __WEBPACK_IMPORTED_MODULE_15__interaction_Interaction__["b" /* interaction */].dragStop(this.interactions, pointer);
        //this.handleDragStop();
    };
    /**
     * Executes when {Sprite} is being dragged.
     *
     * @ignore Exclude from docs
     * @param {InteractionEvent} ev Event object
     * @todo Implement parent position offset calculation
     */
    Sprite.prototype.handleDragMove = function (ev) {
        var point = this.interactions.originalPosition;
        if (point) {
            var globalScale = this.parent.globalScale;
            this.moveTo({ x: point.x + ev.shift.x / globalScale, y: point.y + ev.shift.y / globalScale }, undefined, undefined, true);
            //this.dispatchImmediately("drag", ev);
        }
    };
    Object.defineProperty(Sprite.prototype, "inert", {
        /**
         * @return {boolean} `true` if element should use inertia when animated
         */
        get: function () {
            return this.getPropertyValue("inert");
        },
        /**
         * Controls if the element should use inertia when interacted with.
         *
         * "Inert" element, when dragged and released, will carry the momentum of the
         * movement, and will continue moving in the same drag direction, gradually
         * reducing in speed until finally stops.
         *
         * @default false
         * @param {boolean} value `true` if element should use inertia when animated
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.inert) {
                this.setPropertyValue("inert", value);
                this.interactions.inert = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "hoverable", {
        /**
         * @return {boolean} `true` if element is hoverable
         */
        get: function () {
            return this.getPropertyValue("hoverable");
        },
        /**
         * ==========================================================================
         * HOVERING
         * ==========================================================================
         * @hidden
         */
        /**
         * Controls if the element is hoverable (hover events are registered).
         *
         * Use `over` and `out` events, to watch for those respective actions.
         *
         * @default false
         * @param {boolean} value `true` if element can be hovered
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.hoverable) {
                this.setPropertyValue("hoverable", value);
                this.applyCursorStyle();
                this.interactions.hoverable = value;
                //interaction.processHoverable(this);
                var eventDisposers = this.interactions.eventDisposers;
                var key = "sprite-hoverable";
                if (value) {
                    if (!eventDisposers.hasKey(key)) {
                        eventDisposers.setKey(key, new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                            this.events.on("over", this.handleOver, this),
                            this.events.on("out", this.handleOut, this),
                        ]));
                    }
                }
                else if (eventDisposers.hasKey(key)) {
                    eventDisposers.getKey(key).dispose();
                    eventDisposers.removeKey(key);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles tasks when element becomes hovered:
     * * Shows [[Tooltip]] if applicable
     * * Applies "hover" state
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["over"]} ev Event object
     */
    Sprite.prototype.handleOver = function (ev) {
        if (this._outTimeout) {
            this._outTimeout.dispose();
        }
        if (this.isHover) {
            if (this.states.hasKey("hover")) {
                //this.setState("hover");
                // This will check `isHover` and will set "hover" state
                this.applyCurrentState();
            }
            this.showTooltip();
        }
        else {
            this.hideTooltip();
            if (this.states.hasKey("hover")) {
                this.applyCurrentState();
            }
        }
    };
    /**
     * Handles tasks when element loses hover:
     * * Hides [[Tooltip]]
     * * Applys default state
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["out"]} ev [description]
     */
    Sprite.prototype.handleOut = function (ev) {
        this.hideTooltip();
        this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);
    };
    Sprite.prototype.handleOutReal = function () {
        if (this.states.hasKey("hover")) {
            this.applyCurrentState();
        }
    };
    Object.defineProperty(Sprite.prototype, "hitOptions", {
        /**
         * ==========================================================================
         * CLICKING/TAPPING AND TOGGLING STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns Sprite's click (hit) options.
         *
         * Click (hit) options control things like double-click, timeouts, etc.
         *
         * Check [[IHitOptions]] for available options.
         *
         * @return {IHitOptions} Options
         */
        get: function () {
            if (!this.interactions.hitOptions) {
                if (this.parent) {
                    return this.parent.hitOptions;
                }
            }
            return this.interactions.hitOptions;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Prepares element's after `down` event.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["rotate"]} ev Event
     */
    Sprite.prototype.handleDown = function (ev) {
        if (this.interactions.downPointers.length === 1) {
            this.interactions.originalPosition = {
                x: this.pixelX,
                y: this.pixelY
            };
            this.interactions.originalAngle = this.rotation;
            this.interactions.originalScale = this.scale;
            if (this.states.hasKey("down")) {
                this.setState("down");
            }
        }
    };
    /**
     * Prepares element's after `up` event.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["rotate"]} ev Event
     */
    Sprite.prototype.handleUp = function (ev) {
        /*if (!this.isDown) {
            this.interactions.originalPosition = null;
            this.interactions.originalAngle = null;
            this.interactions.originalScale = null;
        }*/
        if (this.states.hasKey("down")) {
            this.applyCurrentState();
        }
    };
    Object.defineProperty(Sprite.prototype, "clickable", {
        /**
         * Returns `true` if the element is currently set as draggable.
         *
         * @return {boolean}
         */
        get: function () {
            return this.getPropertyValue("clickable");
        },
        /**
         * Sets if the element is clickable.
         *
         * Some times of the elements, like buttons are clickable by default.
         *
         * Most of the elements are not clickable by default.
         *
         * Use `hit`, `doublehit`, `up`, `down`, `toggle` events to watch for
         * respective click/touch actions.
         *
         * @param {boolean} value `true` if element can be clicked
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.clickable) {
                this.setPropertyValue("clickable", value);
                this.applyCursorStyle();
                this.interactions.clickable = value;
                //interaction.processClickable(this);
                if (value) {
                    if (!this.interactions.eventDisposers.hasKey("sprite-clickable")) {
                        this.interactions.eventDisposers.setKey("sprite-clickable", new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                            this.events.on("down", this.handleDown, this),
                            this.events.on("up", this.handleUp, this)
                        ]));
                    }
                }
                else if (this.interactions.eventDisposers.hasKey("sprite-clickable")) {
                    this.interactions.eventDisposers.getKey("sprite-clickable").dispose();
                    this.interactions.eventDisposers.removeKey("sprite-clickable");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "togglable", {
        /**
         * Returns if element is currently set as togglable.
         *
         * @return {boolean} Is togglable?
         */
        get: function () {
            return this.getPropertyValue("togglable");
        },
        /**
         * Sets if element can be toggled on and off by subsequent clicks/taps.
         *
         * Togglable element will alternate its `isActive` property between `true`
         * and `false` with each click.
         *
         * @param {boolean} value Is togglable?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.togglable) {
                this.setPropertyValue("togglable", value);
                if (value) {
                    if (!this.interactions.eventDisposers.hasKey("sprite-togglable")) {
                        this.interactions.eventDisposers.setKey("sprite-togglable", this.events.on("hit", this.handleToggle, this));
                    }
                }
                else if (this.interactions.eventDisposers.hasKey("sprite-togglable")) {
                    this.interactions.eventDisposers.getKey("sprite-togglable").dispose();
                    this.interactions.eventDisposers.removeKey("sprite-togglable");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles toggling of the element.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["hit"]} ev Event
     */
    Sprite.prototype.handleToggle = function (ev) {
        this.isActive = !this.isActive;
    };
    Object.defineProperty(Sprite.prototype, "url", {
        /**
         * Returns current setting for URL.
         *
         * @return {string} URL
         */
        get: function () {
            return this._url.get();
        },
        /**
         * Sets click-through URL for this element.
         *
         * If set, clicking/tapping this element will open the new URL in a target
         * window/tab as set by `urlTarget`.
         *
         * @param {string} value URL
         */
        set: function (value) {
            // If URL is not empty, set up events
            if (__WEBPACK_IMPORTED_MODULE_24__utils_Utils__["empty"](value)) {
                // TODO is this correct ? maybe it should set to "" instead
                this._url.set(value, undefined);
            }
            else {
                var urlEvent = this.events.on("hit", this.urlHandler, this);
                this._disposers.push(urlEvent);
                this._url.set(value, urlEvent);
                // Set other required parameters
                this.clickable = true;
                this.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_16__interaction_Mouse__["a" /* MouseCursorStyle */].pointer;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "urlTarget", {
        /**
         * Returns current URL target.
         *
         * @return {string} URL target
         */
        get: function () {
            return this._urlTarget;
        },
        /**
         * Target to use for URL clicks:
         * * _blank
         * * _self (default)
         * * _parent
         * * _top
         * * Name of the window/frame
         *
         * Ignored if `url` is not set.
         *
         * @param {string} value URL target
         */
        set: function (value) {
            this._urlTarget = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles URL transition on element click.
     *
     * @ignore Exclude from docs
     * @param {InteractionEvent} ev An event object
     */
    Sprite.prototype.urlHandler = function (ev) {
        // Is URL set?
        if (__WEBPACK_IMPORTED_MODULE_24__utils_Utils__["empty"](this.url)) {
            return;
        }
        // Proceed to the URL
        if (this.urlTarget === "_self") {
            window.location.href = this.url;
        }
        else {
            window.open(this.urlTarget, this.url);
        }
    };
    Object.defineProperty(Sprite.prototype, "swipeOptions", {
        /**
         * ==========================================================================
         * SWIPING GESTURE TRACKING
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns element's swipe gesture options.
         *
         * @return {ISwipeOptions} Swipe gesture options
         */
        get: function () {
            if (!this.interactions.swipeOptions) {
                if (this.parent) {
                    return this.parent.swipeOptions;
                }
            }
            return this.interactions.swipeOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "swipeable", {
        /**
         * @return {boolean} Element swipable?
         */
        get: function () {
            return this.getPropertyValue("swipeable");
        },
        /**
         * Controls if element is swipeable.
         *
         * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,
         * when quick horizontal drag action is performed with either mouse or touch.
         *
         * Please note that combining swipe and drag is possible, however will incur
         * a slight but noticeable delay in drag start.
         *
         * @param {boolean}  value  Element swipable?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.swipeable) {
                this.setPropertyValue("swipeable", value);
                this.applyCursorStyle();
                this.interactions.swipeable = value;
                //interaction.processSwipeable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "trackable", {
        /**
         * Returns current trackable setting.
         *
         * @return {boolean} Track cursor movement over element?
         */
        get: function () {
            return this.getPropertyValue("trackable");
        },
        /**
         * ==========================================================================
         * POINTER TRACKING
         * ==========================================================================
         * @hidden
         */
        /**
         * Sets if the element is trackable (mouse position over it is reported to
         * event listeners).
         *
         * Will invoke `track` events whenever pointer (cursor) changes position
         * while over element.
         *
         * Please note, touch devices will also invoke `track` events when touch
         * point is moved while holding down on a trackable element.
         *
         * @param {boolean} value Track cursor movement over element?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.trackable) {
                this.setPropertyValue("trackable", value);
                this.applyCursorStyle();
                this.interactions.trackable = value;
                //interaction.processTrackable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "wheelable", {
        /**
         * Returns current setting for mouse wheel.
         *
         * @return {boolean} Mouse wheel events enabled?
         */
        get: function () {
            return this.getPropertyValue("wheelable");
        },
        /**
         * ==========================================================================
         * MOUSE-WHEEL RELATED
         * ==========================================================================
         * @hidden
         */
        /**
         * Sets if the element can be interacted with mouse wheel.
         *
         * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`
         * events when using mouse wheel over the element.
         *
         * @param {boolean} value Mouse wheel events enabled?
         */
        set: function (value) {
            if (value !== this.wheelable) {
                this.setPropertyValue("wheelable", value);
                this.applyCursorStyle();
                this.interactions.wheelable = value;
                //interaction.processWheelable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "resizable", {
        /**
         * Returns current `resizable` value.
         *
         * @return {boolean} Element resizable?
         */
        get: function () {
            return this.getPropertyValue("resizable");
        },
        /**
         * ==========================================================================
         * RESIZE
         * ==========================================================================
         * @hidden
         */
        /**
         * Set if this element is resizable.
         *
         * Enabling resize will turn on various interactions on the element. Their
         * actual functionality will depend on other properties.
         *
         * If the element also `draggable`, resize will only happen with two points
         * of contact on a touch device.
         *
         * If the element is not draggable, resize can be performed with just one
         * point of contact, touch or mouse.
         *
         * Will invoke `resize` event every time the size of the element changes.
         *
         * @param {boolean}  value  Element resizable?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.resizable) {
                this.setPropertyValue("resizable", value);
                this.applyCursorStyle();
                this.interactions.resizable = value;
                //interaction.processResizable(this);
                if (value) {
                    if (!this.interactions.eventDisposers.hasKey("sprite-resizable")) {
                        this.interactions.eventDisposers.setKey("sprite-resizable", new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                            this.events.on("down", this.handleDown, this),
                            this.events.on("resize", this.handleResize, this)
                        ]));
                    }
                }
                else if (this.interactions.eventDisposers.hasKey("sprite-resizable")) {
                    this.interactions.eventDisposers.getKey("sprite-resizable").dispose();
                    this.interactions.eventDisposers.removeKey("sprite-resizable");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles resize intermediate step.
     *
     * By default this method resizes actual element. Each element, can override
     * this method to implement their own resize logic.
     *
     * @ignore Exclude from docs
     * @param {InteractionEvent} ev Event object
     */
    Sprite.prototype.handleResize = function (ev) {
        this.scale = this.interactions.originalScale * ev.scale;
        this.validatePosition();
        /*center: (io.draggable
        ? $math.getMidPoint(point1, point2)
        : {
            "x": io.originalPosition.x,
            "y": io.originalPosition.y
        })*/
        //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);
        if (this.draggable) {
            var svgPoint1 = __WEBPACK_IMPORTED_MODULE_24__utils_Utils__["documentPointToSvg"](ev.point1, this.htmlContainer);
            var svgPoint2 = __WEBPACK_IMPORTED_MODULE_24__utils_Utils__["documentPointToSvg"](ev.point2, this.htmlContainer);
            var svgMidPoint = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["getMidPoint"](svgPoint1, svgPoint2);
            var parentPoint1 = __WEBPACK_IMPORTED_MODULE_24__utils_Utils__["documentPointToSprite"](ev.startPoint1, this.parent);
            var parentPoint2 = __WEBPACK_IMPORTED_MODULE_24__utils_Utils__["documentPointToSprite"](ev.startPoint2, this.parent);
            var originalPosition = this.interactions.originalPosition;
            var originalScale = this.interactions.originalScale;
            if (originalPosition) {
                var spritePoint1 = { x: (parentPoint1.x - originalPosition.x) / originalScale, y: (parentPoint1.y - originalPosition.y) / originalScale };
                var spritePoint2 = { x: (parentPoint2.x - originalPosition.x) / originalScale, y: (parentPoint2.y - originalPosition.y) / originalScale };
                var spriteMidPoint = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["getMidPoint"](spritePoint1, spritePoint2);
                var parentPoint = __WEBPACK_IMPORTED_MODULE_24__utils_Utils__["svgPointToSprite"](svgMidPoint, this.parent);
                this.moveTo({ x: parentPoint.x - spriteMidPoint.x * this.scale, y: parentPoint.y - spriteMidPoint.y * this.scale });
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "rotatable", {
        /**
         * @return {boolean} Can be rotated?
         */
        get: function () {
            return this.getPropertyValue("rotatable");
        },
        /**
         * ==========================================================================
         * ROTATION
         * ==========================================================================
         * @hidden
         */
        /**
         * Controls if the element can be rotated.
         *
         * If enabled, the element can be rotated using various interactions.
         *
         * If the element also `draggable`, rotation can be performed using two
         * points of contact, i.e. on touch devices only.
         *
         * If the element is not `draggable`, rotation can be performed using one
         * point of contact, e.g. mouse or touch.
         *
         * Rotation will happen around configured center of the element, as set in
         * `horizontalCenter` and `verticalCenter`.
         *
         * Invokes `rotate` event when rotation angle changes.
         *
         * @param {boolean}  value  Can be rotated?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value !== this.rotatable) {
                this.setPropertyValue("rotatable", value);
                this.interactions.rotatable = value;
                //interaction.processRotatable(this);
                if (value) {
                    if (!this.interactions.eventDisposers.hasKey("sprite-rotatable")) {
                        this.interactions.eventDisposers.setKey("sprite-rotatable", new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                            this.events.on("down", this.handleDown, this),
                            this.events.on("rotate", this.handleRotate, this)
                        ]));
                    }
                }
                else if (this.interactions.eventDisposers.hasKey("sprite-rotatable")) {
                    this.interactions.eventDisposers.getKey("sprite-rotatable").dispose();
                    this.interactions.eventDisposers.removeKey("sprite-rotatable");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles rotate intermediate step.
     *
     * By default this method will rotate the actual element.
     *
     * Extending classes might override this method to implement their own
     * rotation logic.
     *
     * @ignore Exclude from docs
     * @param {InteractionEvent} ev Event object
     */
    Sprite.prototype.handleRotate = function (ev) {
        this.rotate(ev.angle + this.interactions.originalAngle);
    };
    Object.defineProperty(Sprite.prototype, "cursorOptions", {
        /**
         * ==========================================================================
         * MOUSE-RELATED
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns element's cursor options.
         *
         * Cursor options usually define cursor style for various states of the
         * hovered element.
         *
         * Elements inherit `cursorOptions` from their parents if they don't have
         * them set explicitly.
         *
         * @see {@link ICursorOptions} for a list of available options
         * @return {ICursorOptions} Cursor options
         */
        get: function () {
            if (!this.interactions.cursorOptions) {
                if (this.parent) {
                    return this.parent.cursorOptions;
                }
            }
            return this.interactions.cursorOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "cursorOverStyle", {
        /**
         * A shortcut to setting mouse cursor on hover.
         *
         * @param {Array<IStyleProperty>} style An array of styles to apply onhover
         */
        set: function (style) {
            this.cursorOptions.overStyle = style;
            __WEBPACK_IMPORTED_MODULE_15__interaction_Interaction__["b" /* interaction */].applyCursorOverStyle(this.interactions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "cursorDownStyle", {
        /**
         * A shortcut to setting mouse cursor when button is pressed down.
         *
         * @param {Array<IStyleProperty>} style An array of styles to apply onhover
         */
        set: function (style) {
            this.cursorOptions.downStyle = style;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Applies default cursor styles for interactable elements.
     *
     * @ignore Exclude from docs
     * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default
     */
    Sprite.prototype.applyCursorStyle = function () {
        // Draggable styles
        /*if (this.draggable) {

            if (!$type.hasValue(this.cursorOptions.overStyle)) {
                this.cursorOptions.overStyle = MouseCursorStyle.grab;
            }

            if (!$type.hasValue(this.cursorOptions.downStyle)) {
                this.cursorOptions.downStyle = MouseCursorStyle.grabbing;
            }
        }*/
    };
    Object.defineProperty(Sprite.prototype, "mouseEnabled", {
        /**
         * Returns current value for `mouseEnabled` setting.
         *
         * @return {boolean} Is mouse enabled for this element?
         */
        get: function () {
            var value = this.getPropertyValue("mouseEnabled");
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value)) {
                value = true;
            }
            return value;
        },
        /**
         * Setting this to `false` will efectively disable all interactivity on the
         * element.
         *
         * @param {boolean} value Is mouse enabled for this element?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            this.setMouseEnabled(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets up the element to either ignore all interactivity, or not.
     *
     * @ignore Exclude from docs
     * @param  {boolean}  value  Interactivity enabled?
     * @return {string}          Current event handlers for the element
     */
    Sprite.prototype.setMouseEnabled = function (value) {
        this.setPropertyValue("mouseEnabled", value);
        var pointerEvents = "null";
        if (!value) {
            pointerEvents = "none";
        }
        this.group.node.style.pointerEvents = pointerEvents;
        return pointerEvents;
    };
    Object.defineProperty(Sprite.prototype, "exporting", {
        /**
         * @return {Export} Export instance
         */
        get: function () {
            var _export = this._exporting.get();
            if (_export) {
                return _export;
            }
            else {
                if (this.parent) {
                    return this.parent.exporting;
                }
                else {
                    _export = new __WEBPACK_IMPORTED_MODULE_23__export_Export__["a" /* Export */]();
                    _export.container = this.svgContainer;
                    _export.sprite = this;
                    _export.language = this.language;
                    _export.dateFormatter = this.dateFormatter;
                    this._exporting.set(_export, _export);
                }
            }
            return _export;
        },
        /**
         * ==========================================================================
         * EXPORT-RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * An [[Export]] instance.
         *
         * Used to access API of the chart export functionality.
         *
         * If `exporting` is not set, the element inherits [[Export]] instance from
         * its parents.
         *
         * Upon request, if no parent has such instance, a new one is created, using
         * default settings, what in most cases is just enough.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting
         * @param {Export}  exp  Export
         */
        set: function (exp) {
            this._exporting.set(exp, exp);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "modal", {
        /**
         * ==========================================================================
         * MODAL-RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns a [[Modal]] instance, associated with this element.
         *
         * Modal can be inherited from element's parents.
         *
         * Accessing modal does not make it appear. To make a modal appear, use
         * `showModal()` method.
         *
         * @see {@link Modal} for more information about using Modal windows
         * @return {Modal} Modal instance
         */
        get: function () {
            var _this = this;
            var _modal = this._modal.get();
            if (_modal) {
                return _modal;
            }
            else {
                if (this.parent) {
                    return this.parent.modal;
                }
                else {
                    // Create new Modal
                    _modal = new __WEBPACK_IMPORTED_MODULE_12__elements_Modal__["a" /* Modal */]();
                    _modal.container = this.svgContainer;
                    this._modal.set(_modal, _modal);
                    // Prefix with Sprite's class name
                    _modal.adapter.add("classPrefix", function (value) {
                        value = _this.classNamePrefix + value;
                        return value;
                    });
                }
            }
            return _modal;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens a modal window with specific content (`text` parameter) and,
     * optionally, `title`.
     *
     * The `text` parameter can contain HTML content.
     *
     * @see {@link Modal} for more information about using Modal windows
     * @param {string} text Modal contents
     */
    Sprite.prototype.showModal = function (text, title) {
        // Hide previous modal
        this.hideModal();
        // Create modal
        var modal = this.modal;
        modal.content = text;
        modal.readerTitle = title;
        modal.show();
    };
    /**
     * Hides modal window if there is one currently open.
     */
    Sprite.prototype.hideModal = function () {
        if (this._modal) {
            this.modal.hide();
        }
    };
    Object.defineProperty(Sprite.prototype, "x", {
        /**
         * @return {number | Percent} X coordinate
         */
        get: function () {
            return this.getPropertyValue("x");
        },
        /**
         * ==========================================================================
         * POSITIONAL PROPERTIES AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Element's absolute or relative X coordinate.
         *
         * If setting both X and Y, please consider using `moveTo()` method instead,
         * as it will be faster to set both coordinates at once.
         *
         * @param {number | Percent} value X coordinate
         */
        set: function (value) {
            if (!this.isDragged) {
                value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
                this.setPropertyValue("x", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelX", {
        /**
         * Returns element's current absolute X coordinate in pixels.
         *
         * @readonly
         * @return {number} X coordinate (px)
         */
        get: function () {
            return this.adapter.apply("pixelX", __WEBPACK_IMPORTED_MODULE_25__utils_Math__["fitToRange"](this.getPixelX(this.x), this.minX, this.maxX));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeX", {
        /**
         * Returns element's current relative X coordinate in [[Percent]].
         *
         * @return {number} X coordinate ([[Percent]])
         */
        get: function () {
            return this.adapter.apply("relativeX", this.getRelativeX(this.x));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "minX", {
        /**
         * @ignore Exclude from docs
         * @return {number} Min X (px)
         */
        get: function () {
            return this.getPropertyValue("minX");
        },
        /**
         * The smallest allowable absolute X coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param {number} value Min X (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("minX", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maxX", {
        /**
         * @ignore Exclude from docs
         * @return {number} Max X (px)
         */
        get: function () {
            return this.getPropertyValue("maxX");
        },
        /**
         * The biggest allowable absolute X coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param {number} value Max X (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("maxX", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "y", {
        /**
         * @return {number | Percent} Y coordinate
         */
        get: function () {
            return this.getPropertyValue("y");
        },
        /**
         * Element's absolute or relative Y coordinate.
         *
         * If setting both X and Y, please consider using `moveTo()` method instead,
         * as it will be faster to set both coordinates at once.
         *
         * @param {number | Percent}  value  Y coordinate
         */
        set: function (value) {
            if (!this.isDragged) {
                value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
                this.setPropertyValue("y", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelY", {
        /**
         * Returns element's current absolute Y coordinate in pixels.
         *
         * @readonly
         * @return {number} Y coordinate (px)
         */
        get: function () {
            return this.adapter.apply("pixelY", __WEBPACK_IMPORTED_MODULE_25__utils_Math__["fitToRange"](this.getPixelY(this.y), this.minY, this.maxY));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeY", {
        /**
         * Returns element's current relative Y coordinate in [[Percent]].
         *
         * @readonly
         * @return {number} Y coordinate ([[Percent]])
         */
        get: function () {
            return this.adapter.apply("relativeY", this.getRelativeX(this.y));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "minY", {
        /**
         * @ignore Exclude from docs
         * @return {number} Min Y (px)
         */
        get: function () {
            return this.getPropertyValue("minY");
        },
        /**
         * The smallest allowable absolute Y coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param {number} value Min Y (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("minY", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maxY", {
        /**
         * @ignore Exclude from docs
         * @return {number} Max Y (px)
         */
        get: function () {
            return this.getPropertyValue("maxY");
        },
        /**
         * The biggest allowable absolute Y coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param {number}  value  Max Y (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("maxY", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "dx", {
        /**
         * @return {number} Horizontal offset (px)
         */
        get: function () {
            var value = this.getPropertyValue("dx");
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            return value;
        },
        /**
         * A horizontal offset for the element in pixels.
         *
         * Can be negative value for offset to the left.
         *
         * @param {number}  value  Horizontal offset (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("dx", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "dy", {
        /**
         * @return {number} Vertical offset (px)
         */
        get: function () {
            var value = this.getPropertyValue("dy");
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            return value;
        },
        /**
         * A vertical offset for the element in pixels.
         *
         * Can be negative value for offset upwards.
         *
         * @param {number}  value  Vertical offset (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("dy", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "rotation", {
        /**
         * @return {number} Rotation (0-360)
         */
        get: function () {
            return this.getPropertyValue("rotation");
        },
        /**
         * Rotation of the element in degrees. (0-360)
         *
         * @param {number}  value  Rotation (0-360)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumber"](value);
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("rotation", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Rotates the element to certain `angle`.
     *
     * Set `rotation` property instead.
     *
     * @ignore Exclude from docs
     * @param {number} angle Rotation angle (0-360)
     */
    Sprite.prototype.rotate = function (angle) {
        this.rotation = angle;
    };
    Object.defineProperty(Sprite.prototype, "align", {
        /**
         * @return {Align} Horizontal align
         */
        get: function () {
            return this.getPropertyValue("align");
        },
        /**
         * Controls horizontal alignement of the element.
         *
         * This is used by parent [[Container]] when layouting its children.
         *
         * @param {Align}  value  Horizontal align
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            this.setPropertyValue("align", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "valign", {
        /**
         * @return {VerticalAlign} Vertical align
         */
        get: function () {
            return this.getPropertyValue("valign");
        },
        /**
         * Controls vertical alignement of the element.
         *
         * This is used by parent [[Container]] when layouting its children.
         *
         * @param {VerticalAlign}  value  Vertical align
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            this.setPropertyValue("valign", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "horizontalCenter", {
        /**
         * @return {HorizontalCenter} Horizontal center
         */
        get: function () {
            return this.getPropertyValue("horizontalCenter");
        },
        /**
         * Controls which part of the element to treat as a horizontal center.
         *
         * The setting will be used when positioning, resizing and rotating the
         * element.
         *
         * @param {HorizontalCenter}  value  Horizontal center
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            this.setPropertyValue("horizontalCenter", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "verticalCenter", {
        /**
         * @return {VerticalCenter} Vertical center
         */
        get: function () {
            return this.getPropertyValue("verticalCenter");
        },
        /**
         * Controls which part of the element to treat as a vertical center.
         *
         * The setting will be used when positioning, resizing and rotating the
         * element.
         *
         * @param {VerticalCenter}  value  Vertical center
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            this.setPropertyValue("verticalCenter", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maxWidth", {
        /**
         * @return {number} Maximum width (px)
         */
        get: function () {
            var maxWidth = this.getPropertyValue("maxWidth");
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](maxWidth)) {
                if (this.parent) {
                    return this.parent.maxWidth;
                }
            }
            return maxWidth;
        },
        /**
         * ==========================================================================
         * DIMENSIONAL PROPERTIES AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Maximum allowed width for the element in pixels.
         *
         * @param {number}  value  Maximum width (px)
         */
        set: function (value) {
            if (this.setPropertyValue("maxWidth", value)) {
                if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](this.relativeWidth)) {
                    this.invalidate();
                }
                this.dispatchImmediately("maxsizechanged");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maxHeight", {
        /**
         * @return {number} Maximum height (px)
         */
        get: function () {
            var maxHeight = this.getPropertyValue("maxHeight");
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](maxHeight)) {
                if (this.parent) {
                    return this.parent.maxHeight;
                }
            }
            return maxHeight;
        },
        /**
         * Maximum allowed height for the element in pixels.
         *
         * @param {number}  value  Maximum height (px)
         */
        set: function (value) {
            if (this.setPropertyValue("maxHeight", value)) {
                if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](this.relativeHeight)) {
                    this.invalidate();
                }
                this.dispatchImmediately("maxsizechanged");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "minWidth", {
        /**
         * @return {Optional<number>} Minimum width (px)
         */
        get: function () {
            return this.getPropertyValue("minWidth");
        },
        /**
         * Minimum width of the element in pixels.
         *
         * Set to `undefined` to remove the limit.
         *
         * @param {Optional<number>}  value  Minimum width (px)
         */
        set: function (value) {
            this.setPropertyValue("minWidth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "minHeight", {
        /**
         * @return {Optional<number>} Minimum height (px)
         */
        get: function () {
            return this.getPropertyValue("minHeight");
        },
        /**
         * Minimum height for the element in pixels.
         *
         * Set to `undefined` to remove the limit.
         *
         * @param {Optional<number>}  value  Minimum height (px)
         */
        set: function (value) {
            this.setPropertyValue("minHeight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "width", {
        /**
         * @return {number | Percent} Width (absolute or relative)
         */
        get: function () {
            return this.getPropertyValue("width");
        },
        /**
         * Element's absolute or relative width.
         *
         * The width can either be absolute, set in numer pixels, or relative, set
         * in [[Percent]].
         *
         * Relative width will be calculated using closest measured ancestor
         * [[Container]].
         *
         * @param {number | Percent}  value  Width (numeric in pixels or relative)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            var changed = this.setPropertyValue("width", value, true);
            if (changed) {
                this.percentWidth = undefined;
                this.relativeWidth = undefined;
                if (value instanceof __WEBPACK_IMPORTED_MODULE_31__utils_Percent__["a" /* Percent */]) {
                    this.percentWidth = value.percent;
                    this._pixelWidth = undefined;
                }
                else {
                    this._pixelWidth = Number(value);
                    this.maxWidth = this._pixelWidth;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "height", {
        /**
         * @return {number | Percent} height (absolute or relative)
         */
        get: function () {
            return this.getPropertyValue("height");
        },
        /**
         * Element's absolute or relative height.
         *
         * The height can either be absolute, set in numer pixels, or relative, set
         * in [[Percent]].
         *
         * Relative height will be calculated using closest measured ancestor
         * [[Container]].
         *
         * @param {number | Percent}  value  Height (numeric in pixels or relative)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            var changed = this.setPropertyValue("height", value, true);
            if (changed) {
                this.percentHeight = undefined;
                this._relativeHeight = undefined;
                if (value instanceof __WEBPACK_IMPORTED_MODULE_31__utils_Percent__["a" /* Percent */]) {
                    this.percentHeight = value.percent;
                    this._pixelHeight = undefined;
                }
                else {
                    this._pixelHeight = Number(value);
                    this.maxHeight = this._pixelHeight;
                }
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelWidth", {
        /**
         * Returns element's actual width in pixels.
         *
         * @readonly
         * @return {number} Width (px)
         */
        get: function () {
            var width;
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](this.percentWidth)) {
                width = this.maxWidth;
            }
            else if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](this._pixelWidth)) {
                width = this._pixelWidth;
            }
            else {
                width = this._measuredWidth;
            }
            if (width < this.minWidth) {
                width = this.minWidth;
            }
            return this.adapter.apply("pixelWidth", __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](width, this._positionPrecision));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelHeight", {
        /**
         * Returns element's actual height in pixels.
         *
         * @readonly
         * @return {number} Height (px)
         */
        get: function () {
            var height;
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](this.percentHeight)) {
                height = this.maxHeight;
            }
            else if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](this._pixelHeight)) {
                height = this._pixelHeight;
            }
            else {
                height = this._measuredHeight;
            }
            if (height < this.minHeight) {
                height = this.minHeight;
            }
            return this.adapter.apply("pixelHeight", __WEBPACK_IMPORTED_MODULE_25__utils_Math__["round"](height, this._positionPrecision));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeWidth", {
        /**
         * @return {number} Relative width
         */
        get: function () {
            return this.adapter.apply("relativeWidth", this._relativeWidth);
        },
        /**
         * Element's relative width in [[Percent]].
         *
         * @param {number}  value  Relative width
         */
        set: function (value) {
            if (this._relativeWidth != value) {
                this._relativeWidth = value;
                //			this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeHeight", {
        /**
         * @return {number} Relative height
         */
        get: function () {
            return this.adapter.apply("relativeHeight", this._relativeHeight);
        },
        /**
         * Element's relative height in [[Percent]].
         *
         * @param {number}  value  Relative height
         */
        set: function (value) {
            if (this._relativeHeight != value) {
                this._relativeHeight = value;
                //			this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "measuredWidth", {
        /**
         * Returns element's measured width in pixels.
         *
         * A measured width is actual width of contents plus `paddingRight` and
         * `paddingLeft`.
         *
         * @readonly
         * @return {number} Width (px)
         */
        get: function () {
            return this.adapter.apply("measuredWidth", __WEBPACK_IMPORTED_MODULE_25__utils_Math__["fitToRange"](this._measuredWidth, this.minWidth, this.maxWidth));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "measuredHeight", {
        /**
         * Returns elements's measured height in pixels.
         *
         * A measured height is actual height of contents plus `paddingTop` and
         * `paddingBottom`.
         *
         * @readonly
         * @return {number} Height (px)
         */
        get: function () {
            return this.adapter.apply("measuredWidth", __WEBPACK_IMPORTED_MODULE_25__utils_Math__["fitToRange"](this._measuredHeight, this.minHeight, this.maxHeight));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "outerWidth", {
        /**
         * Returns element's measured width plus its left and right margins in
         * pixels.
         *
         * @readonly
         * @return {number} Outer width (px)
         */
        get: function () {
            return this.adapter.apply("outerWidth", this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "outerHeight", {
        /**
         * Returns element's measured height plus its top and bottom margins in
         * pixels.
         *
         * @readonly
         * @return {number} Outer height (px)
         */
        get: function () {
            return this.adapter.apply("outerHeight", this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "innerWidth", {
        /**
         * Returns element's measured inner width in pixels.
         *
         * Inner width is actual available space for content, e.g. element's width
         * minus horizontal padding.
         *
         * @readonly
         * @return {number} Inner width (px)
         */
        get: function () {
            return this.adapter.apply("innerWidth", Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "innerHeight", {
        /**
         * Returns element's measured inner height in pixels.
         *
         * Inner height is actual available space for content, e.g. element's height
         * minus vertical padding.
         *
         * @readonly
         * @return {number} Inner height (px)
         */
        get: function () {
            return this.adapter.apply("innerHeight", Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "globalScale", {
        /**
         * Returns element's current "global" scale.
         *
         * Scale values accumulate over hierarchy of elements.
         *
         * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,
         * the child's `globalScale` will be 4. (a multitude of `2 x 2`)
         *
         * @readonly
         * @return {number} Global scale
         */
        get: function () {
            var scale = this.scale;
            if (this.parent) {
                scale = scale * this.parent.globalScale;
            }
            return this.adapter.apply("globalScale", scale);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "scale", {
        /**
         * @return {number} Scale (0-1)
         */
        get: function () {
            return this.getPropertyValue("scale");
        },
        /**
         * Scale of the element.
         *
         * The scale is set from 0 (element reduced to nothing) to 1 (default size).
         * * 2 will mean element is increased twice.
         * * 0.5 - reduced by 50%.
         *
         * Etc.
         *
         * @param {number}  value  Scale (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumber"](value);
            if (value < 0) {
                value = 0;
            }
            if (value != this.getPropertyValue("scale")) {
                this.dispatch("globalscalechanged");
            }
            this.setPropertyValue("scale", value, false, true);
            this.strokeWidth = this.strokeWidth; // to handle nonScalingStroke
            this.updateFilterScale();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets all four margins for the element at once.
     *
     * Margins are set in pixels.
     *
     * @param  {number}  top     Top margin
     * @param  {number}  right   Right margin
     * @param  {number}  bottom  Bottom margin
     * @param  {number}  left    Left margin
     * @return {Sprite}          Current element
     */
    Sprite.prototype.margin = function (top, right, bottom, left) {
        this.marginTop = top;
        this.marginRight = right;
        this.marginBottom = bottom;
        this.marginLeft = left;
        return this;
    };
    Object.defineProperty(Sprite.prototype, "marginLeft", {
        /**
         * @return {number | Percent} Margin value
         */
        get: function () {
            return this.getPropertyValue("marginLeft");
        },
        /**
         * Left margin - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Margin value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("marginLeft", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "marginRight", {
        /**
         * @return {number | Percent} Margin value
         */
        get: function () {
            return this.getPropertyValue("marginRight");
        },
        /**
         * Right margin - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Margin value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("marginRight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "marginTop", {
        /**
         * @return {number | Percent} Margin value
         */
        get: function () {
            return this.getPropertyValue("marginTop");
        },
        /**
         * Top margin - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Margin value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("marginTop", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "marginBottom", {
        /**
         * @return {number | Percent} Margin value
         */
        get: function () {
            return this.getPropertyValue("marginBottom");
        },
        /**
         * Bottom margin - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Margin value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("marginBottom", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelMarginRight", {
        /**
         * Returns current right margin in pixels.
         *
         * @readonly
         * @return {number} Right margin (px)
         */
        get: function () {
            return this.adapter.apply("pixelMarginRight", this.getPixelX(this.marginRight));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeMarginRight", {
        /**
         * Returns current relative right margin.
         *
         * @readonly
         * @return {number} Relative right margin
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.adapter.apply("relativeMarginRight", this.getRelativeX(this.marginRight));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelMarginLeft", {
        /**
         * Returns current left margin in pixels.
         *
         * @readonly
         * @return {number} Left margin (px)
         */
        get: function () {
            return this.adapter.apply("pixelMarginLeft", this.getPixelX(this.marginLeft));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeMarginLeft", {
        /**
         * Returns current relative left margin.
         *
         * @readonly
         * @return {number} Relative left margin
         */
        get: function () {
            //@todo Maybe use [[Percent]]?
            return this.adapter.apply("relativeMarginLeft", this.getRelativeX(this.marginLeft));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelMarginTop", {
        /**
         * Returns current top margin in pixels.
         *
         * @readonly
         * @return {number} Top margin (px)
         */
        get: function () {
            return this.adapter.apply("pixelMarginTop", this.getPixelY(this.marginTop));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeMarginTop", {
        /**
         * Returns current relative top margin.
         *
         * @readonly
         * @return {number} Relative top margin
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.adapter.apply("relativeMarginTop", this.getRelativeY(this.marginTop));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelMarginBottom", {
        /**
         * Returns current bottom margin in pixels.
         *
         * @readonly
         * @return {number} Bottom margin (px)
         */
        get: function () {
            return this.adapter.apply("pixelMarginBottom", this.getPixelY(this.marginBottom));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeMarginBottom", {
        /**
         * Returns current relative bottom margin.
         *
         * @readonly
         * @return {number} Relative bottom margin
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.adapter.apply("relativeMarginBottom", this.getRelativeY(this.marginBottom));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets padding for the element in pixels.
     *
     * @param  {number}  top     Top padding (px)
     * @param  {number}  right   Right padding (px)
     * @param  {number}  bottom  Bottom padding (px)
     * @param  {number}  left    Left padding (px)
     * @return {Sprite}          Element
     */
    Sprite.prototype.padding = function (top, right, bottom, left) {
        this.paddingTop = top;
        this.paddingRight = right;
        this.paddingBottom = bottom;
        this.paddingLeft = left;
        return this;
    };
    Object.defineProperty(Sprite.prototype, "paddingLeft", {
        /**
         * @return {number | Percent} Padding value
         */
        get: function () {
            return this.getPropertyValue("paddingLeft");
        },
        /**
         * Left padding - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Padding value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("paddingLeft", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "paddingRight", {
        /**
         * @return {number | Percent} Padding value
         */
        get: function () {
            return this.getPropertyValue("paddingRight");
        },
        /**
         * Right padding - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Padding value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("paddingRight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "paddingTop", {
        /**
         * @return {number | Percent} Padding value
         */
        get: function () {
            return this.getPropertyValue("paddingTop");
        },
        /**
         * Top padding - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Padding value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("paddingTop", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "paddingBottom", {
        /**
         * @return {number | Percent} Padding value
         */
        get: function () {
            return this.getPropertyValue("paddingBottom");
        },
        /**
         * Bottom padding - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Padding value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("paddingBottom", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPaddingRight", {
        /**
         * Returns current right padding in pixels.
         *
         * @readonly
         * @return {number} Right padding (px)
         */
        get: function () {
            return this.getPixelX(this.paddingRight);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativePaddingRight", {
        /**
         * Returns current relative right padding.
         *
         * @readonly
         * @return {number} Relative right padding
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.getRelativeX(this.paddingRight);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPaddingLeft", {
        /**
         * Returns current left padding in pixels.
         *
         * @readonly
         * @return {number} Left padding (px)
         */
        get: function () {
            return this.getPixelX(this.paddingLeft);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativePaddingLeft", {
        /**
         * Returns current relative left padding.
         *
         * @readonly
         * @return {number} Relative left padding
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.getRelativeX(this.paddingLeft);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPaddingTop", {
        /**
         * Returns current top padding in pixels.
         *
         * @readonly
         * @return {number} Top padding (px)
         */
        get: function () {
            return this.getPixelY(this.paddingTop);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativePaddingTop", {
        /**
         * Returns current relative top padding.
         *
         * @readonly
         * @return {number} Relative top padding
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.getRelativeY(this.paddingTop);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPaddingBottom", {
        /**
         * Returns current bottom padding in pixels.
         *
         * @readonly
         * @return {number} Bottom padding (px)
         */
        get: function () {
            return this.getPixelY(this.paddingBottom);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativePaddingBottom", {
        /**
         * Returns current relative bottom padding.
         *
         * @readonly
         * @return {number} Relative bottom padding
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.getRelativeY(this.paddingBottom);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "fillModifier", {
        /**
         * @return {ColorModifier} Fill color modifier
         */
        get: function () {
            return this.getPropertyValue("fillModifier");
        },
        /**
         * ==========================================================================
         * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * [[ColorModifier]] that can be used to modify color and pattern of the
         * element's fill, e.g. create gradients.
         *
         * @param {ColorModifier}  value  Fill color modifiier
         */
        set: function (value) {
            this.setPropertyValue("fillModifier", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "strokeModifier", {
        /**
         * @return {ColorModifier} Stroke color modifier
         */
        get: function () {
            return this.getPropertyValue("strokeModifier");
        },
        /**
         * [[ColorModifier]] that can be used to modify color and pattern of the
         * element's stroke (outline), e.g. create gradients.
         *
         * @param {ColorModifier}  value  Stroke color modifier
         */
        set: function (value) {
            this.setPropertyValue("strokeModifier", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "fillOpacity", {
        /**
         * @return {number} Opacity (0-9)
         */
        get: function () {
            return this.getPropertyValue("fillOpacity");
        },
        /**
         * Element's fill opacity.
         *
         * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["toNumberRange"](value, 0, 1);
            if (this.setPropertyValue("fillOpacity", value)) {
                this.setSVGAttribute({ "fill-opacity": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "fill", {
        /**
         * @return {Color} Fill
         */
        get: function () {
            return this.getPropertyValue("fill");
        },
        /**
         * Element's fill color or pattern.
         *
         * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Fill
         */
        set: function (value) {
            this.setFill(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets actual `fill` property on the SVG element, including applicable color
     * modifiers.
     *
     * @ignore Exclude from docs
     * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Fill
     */
    Sprite.prototype.setFill = function (value) {
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isObject"](value)) {
            value = Object(__WEBPACK_IMPORTED_MODULE_13__utils_Color__["e" /* toColor */])(value);
        }
        if (this.setPropertyValue("fill", value) || this.fillModifier) {
            // this can not go into next if, as value is turned to Gradient
            if (value instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */]) {
                if (this.fillModifier) {
                    value = this.fillModifier.modify(value);
                }
            }
            // todo: review this place when some Color type will be added
            if (value instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */]) {
                this.setSVGAttribute({ "fill": value });
            }
            else if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value)) {
                this.removeSVGAttribute("fill");
            }
            else if (value instanceof __WEBPACK_IMPORTED_MODULE_9__rendering_fills_Pattern__["a" /* Pattern */] || value instanceof __WEBPACK_IMPORTED_MODULE_10__rendering_fills_LinearGradient__["a" /* LinearGradient */] || value instanceof __WEBPACK_IMPORTED_MODULE_11__rendering_fills_RadialGradient__["a" /* RadialGradient */]) {
                var fill = value;
                fill.paper = this.paper;
                this.setSVGAttribute({ "fill": "url(#" + fill.id + ")" });
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "opacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.getPropertyValue("opacity");
        },
        /**
         * Element's opacity.
         *
         * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).
         *
         * ATTENTION: It is highly not recommended to use `opacity` directly on the
         * element. The charts use `opacity` to hide/show elements, so your setting
         * might be lost if element is hidden and then later shown.
         *
         * Instead use methods `hide()` and `show()` to completely toggle off and on
         * the element.
         *
         * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make
         * the element semi-transparent.
         *
         * @param {number} value Opacity (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["toNumberRange"](value, 0, 1);
            if (this.setPropertyValue("opacity", value)) {
                this.setSVGAttribute({ "opacity": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "stroke", {
        /**
         * @return {Color} Stroke setting
         */
        get: function () {
            return this.getPropertyValue("stroke");
        },
        /**
         * Element's stroke (outline) color or pattern.
         *
         * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Stroke setting
         */
        set: function (value) {
            this.setStroke(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets actual `stroke` property on the SVG element, including applicable
     * color modifiers.
     *
     * @ignore Exclude from docs
     * @param {Color | Pattern | LinearGradient | RadialGradient} value Stroke setting
     */
    Sprite.prototype.setStroke = function (value) {
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isObject"](value)) {
            value = Object(__WEBPACK_IMPORTED_MODULE_13__utils_Color__["e" /* toColor */])(value);
        }
        if (this.setPropertyValue("stroke", value) || this.strokeModifier) {
            // this can not go into next if, as value is turned to Gradient
            if (value instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */]) {
                if (this.strokeModifier) {
                    value = this.strokeModifier.modify(value);
                }
            }
            if (value instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */]) {
                if (value.hex == "none") {
                    this.removeSVGAttribute("stroke");
                }
                else {
                    this.setSVGAttribute({ "stroke": value });
                }
            }
            else if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value)) {
                this.removeSVGAttribute("stroke");
            }
            else if (value instanceof __WEBPACK_IMPORTED_MODULE_9__rendering_fills_Pattern__["a" /* Pattern */] || value instanceof __WEBPACK_IMPORTED_MODULE_10__rendering_fills_LinearGradient__["a" /* LinearGradient */] || value instanceof __WEBPACK_IMPORTED_MODULE_11__rendering_fills_RadialGradient__["a" /* RadialGradient */]) {
                var stroke = value;
                stroke.paper = this.paper;
                this.setSVGAttribute({ "stroke": "url(#" + stroke.id + ")" });
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "strokeOpacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.getPropertyValue("strokeOpacity");
        },
        /**
         * Stroke (outline) opacity.
         *
         * The values may range from 0 (fully transparent) to 1 (fully opaque).
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_25__utils_Math__["toNumberRange"](value, 0, 1);
            if (this.setPropertyValue("strokeOpacity", value)) {
                this.setSVGAttribute({ "stroke-opacity": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "nonScalingStroke", {
        /**
         * @return {boolean} Do not scale stroke (outline)
         */
        get: function () {
            return this.getPropertyValue("nonScalingStroke");
        },
        /**
         * Controls if the element's stroke (outline) should remain keep constant
         * thicnkess and do not scale when the whole element is resized.
         *
         * @param {boolean}  value  Do not scale stroke (outline)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            this.setPropertyValue("nonScalingStroke", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "nonScaling", {
        /**
         * @return {boolean} Is element scaleable?
         */
        get: function () {
            return this.getPropertyValue("nonScaling");
        },
        /**
         * Controls if element should keep constant size and not scale even if there is
         * space available, or it does not fit.
         *
         * @param {boolean}  value  Is element scaleable?
         */
        set: function (value) {
            // @todo Description (review)
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            this.setPropertyValue("nonScaling", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "strokeWidth", {
        /**
         * @return {number} Thickness (px)
         */
        get: function () {
            return this.getPropertyValue("strokeWidth");
        },
        /**
         * Stroke (outline) thickness in pixels.
         *
         * @param {number}  value  Thickness (px)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumber"](value);
            this.setPropertyValue("strokeWidth", value, true);
            if (this.nonScalingStroke) {
                if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](value)) {
                    value = 1;
                }
                value = value / this.globalScale;
            }
            this.setSVGAttribute({ "stroke-width": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "strokeDasharray", {
        /**
         * @return {string} `stroke-dasharray`
         */
        get: function () {
            return this.getPropertyValue("strokeDasharray");
        },
        /**
         * A `stroke-dasharray` for the stroke (outline).
         *
         * "Dasharray" allows setting rules to make lines dashed, dotted, etc.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`
         * @param {string}  value  `stroke-dasharray`
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (this.setPropertyValue("strokeDasharray", value)) {
                this.setSVGAttribute({ "stroke-dasharray": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "shapeRendering", {
        /**
         * @return {ShapeRendering} 'shape-rendering' value
         */
        get: function () {
            return this.getPropertyValue("shapeRendering");
        },
        /**
         * An SVG-specific `shape-rendering` value.
         *
         * `shape-rendering` controls how vector graphics are drawn and rendered.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`
         * @default "auto"
         * @param {ShapeRendering}  value  'shape-rendering' value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (this.setPropertyValue("shapeRendering", value)) {
                this.setSVGAttribute({ "shape-rendering": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPerfect", {
        /**
         * @return {boolean} Use pixel perfect?
         */
        get: function () {
            return this.getPropertyValue("pixelPerfect");
        },
        /**
         * Controls if SVG vectors should be drawn with "pixel" precision, producing
         * perfectly crisp lines on retina displays.
         *
         * Setting this to `true` might improve visual quality, but may have a
         * negative effect on performance.
         *
         * Different elements use different default setting for `pixelPerfect`.
         *
         * We recomment leaving this at their default settings, unless there's a
         * specific need.
         *
         * @param {boolean}  value  Use pixel perfect?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            if (value) {
                this._positionPrecision = 0;
            }
            else {
                this._positionPrecision = 8;
            }
            this.setPropertyValue("pixelPerfect", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "rtl", {
        /**
         * @return {boolean} RTL?
         */
        get: function () {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](this._rtl)) {
                return this._rtl;
            }
            else if (this.parent) {
                return this.parent.rtl;
            }
            this.rtl = false;
            return this.rtl;
        },
        /**
         * An RTL (righ-to-left) setting.
         *
         * RTL may affect alignement, text, and other visual properties.
         *
         * @param {DateFormatter}  value  `true` for to use RTL
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            this._rtl = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * ==========================================================================
     * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF
     * ==========================================================================
     * @hidden
     */
    /**
     * Reveals (fades in) hidden element.
     *
     * Has no effect if element is already visible.
     *
     * If `duration` is not specified, it will use default.
     *
     * @param  {number}  duration  Fade in duration (ms)
     * @return {Animation} Animation object if such object was created
     */
    Sprite.prototype.show = function (duration) {
        return this.showReal(duration);
    };
    /**
     * Performs actual operations to reveal this element.
     *
     * @ignore Exclude from docs
     * @param  {number} duration Fade in duration (ms)
     * @return {number}          Fade in duration (ms)
     */
    Sprite.prototype.showReal = function (duration) {
        var _this = this;
        var transition;
        if (!this.disabled && (!this.visible || this.isHiding || (this.opacity < this.defaultState.properties.opacity && !this.isShowing))) {
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](duration)) {
                duration = this.defaultState.transitionDuration;
            }
            this.isHiding = false;
            this.isShowing = true;
            if (this._hideAnimation) {
                this._hideAnimation.stop();
                this._hideAnimation = null;
            }
            // Cancel hide handler just in case it was there
            if (this._showHideDisposer) {
                this.removeDispose(this._showHideDisposer);
            }
            // Apply current state
            transition = this.applyCurrentState(duration);
            if (transition) {
                this._showHideDisposer = transition.events.on("animationend", function () {
                    _this.isShowing = false;
                });
                this._disposers.push(this._showHideDisposer);
            }
            // Make it visible
            var visible = this.defaultState.properties.visible;
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](visible)) {
                visible = true;
            }
            this.visible = visible;
            // Dispatch "show" event
            this.dispatchImmediately("show");
        }
        return transition;
    };
    /**
     * Initiates hiding of Sprite.
     * When called it will fade out the the Sprite to transparency, then make it
     * invisible.
     * @param {number} duration Duration in millisecons
     */
    /**
     * Hides (fades out) the element, and applies `hidden` state.
     *
     * Has no effect if element is already hidden.
     *
     * If `duration` is not specified, it will use default.
     *
     * While element is fading out, its `isHiding` property will resolve to
     * `true`.
     *
     * When element is hidden, its `visible` property will resolve to `false`.
     *
     * @param  {number}  duration  Fade out duration (ms)
     * @return {Animation} hide Animation object if such object was created
     */
    Sprite.prototype.hide = function (duration) {
        return this.hideReal(duration);
    };
    /**
     * Hides actual SVG elements and handles hiding animations.
     *
     * @param  {number}  duration  Fade out duration (ms)
     * @return {Animation}            Fade out duration (ms)
     * @ignore
     */
    Sprite.prototype.hideReal = function (duration) {
        var _this = this;
        var transition;
        if (!this.isHiding && this.visible) {
            this.hideTooltip(0);
            this.isShowing = false;
            if (this._hideAnimation) {
                this._hideAnimation.stop();
                this._hideAnimation = null;
            }
            // Cancel hide handler just in case it was there
            if (this._showHideDisposer) {
                this.removeDispose(this._showHideDisposer);
            }
            // Get state
            var hiddenState = this.states.getKey("hidden");
            // Transition to "hidden" state, provided Sprite has one set
            if (hiddenState) {
                // Yes, we have a "hidden" state
                // `setState` will return an `Animation` object which we can set
                // events on
                transition = this.setState(hiddenState, duration, undefined);
                if (transition) {
                    this._hideAnimation = transition;
                    this._showHideDisposer = transition.events.on("animationend", function () {
                        _this.isHiding = false;
                    }, this);
                    this._disposers.push(this._showHideDisposer);
                }
                // Thrown everything into `_disposers` just in case Sprite gets
                // destroyed in the meantime
                this._disposers.push(transition);
            }
            else {
                // No hidden state, let's just set `visibile` and call it a day
                this.visible = false;
                this.isHiding = false;
            }
            // Dispach "hide" event
            this.dispatchImmediately("hide");
            this.invalidate(); // hide it at once to avoid flickers // validate() causes SO
        }
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](duration)) {
            duration = this.hiddenState.transitionDuration;
        }
        return transition;
    };
    Object.defineProperty(Sprite.prototype, "visible", {
        /**
         * Returns current visibility of the element.
         *
         * @return {boolean} Visible?
         */
        get: function () {
            var value = this.getPropertyValue("visible");
            if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](value)) {
                value = true;
            }
            return value;
        },
        /**
         * Sets visibility of the element.
         *
         * @param {boolean} value Visible?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toBoolean"](value);
            this.setVisibility(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets `visibility` property:
     *
     * * `true` - visible
     * * `false` - hidden
     *
     * @param  {boolean}  value  `true` - visible, `false` - hidden
     * @return {string}          Current visibility
     */
    Sprite.prototype.setVisibility = function (value) {
        if (this.setPropertyValue("visible", value)) {
            if (value) {
                this.group.removeAttr("visibility");
            }
            else {
                this.group.attr({ "visibility": "hidden" });
            }
            this.invalidatePosition();
            this.dispatchImmediately("visibilitychanged");
        }
    };
    Object.defineProperty(Sprite.prototype, "zIndex", {
        /**
         * @return {number} zIndex
         */
        get: function () {
            return this.getPropertyValue("zIndex");
        },
        /**
         * A "zIndex" of the element.
         *
         * "zIndex" determines the order of how elements are placed over each other.
         *
         * Higher "zIndex" will mean the element will be draw on top of elements
         * with lower "zIndexes".
         *
         * @param {number}  value  zIndex
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumber"](value);
            if (this.setPropertyValue("zIndex", value)) {
                var parent_1 = this._parent.get();
                if (parent_1) {
                    parent_1.addChildren();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Moves the element to the very top in element order, so that it appears
     * in front of other elements.
     */
    Sprite.prototype.toFront = function () {
        var parent = this.parent;
        if (parent && parent.children.indexOf(this) != parent.children.length - 1) {
            parent.children.moveValue(this, parent.children.length - 1);
            parent.addChildren();
        }
    };
    /**
     * Moves the element to the very bottom in the element order, so that it
     * appears behind other elements.
     */
    Sprite.prototype.toBack = function () {
        var parent = this.parent;
        if (parent && parent.children.indexOf(this) != 0) {
            parent.children.moveValue(this, 0);
            parent.addChildren();
        }
    };
    Object.defineProperty(Sprite.prototype, "tooltip", {
        /**
         * @return {Tooltip} Tooltip
         */
        get: function () {
            if (this._tooltip) {
                return this._tooltip;
            }
            else {
                if (this.parent) {
                    return this.parent.tooltip;
                }
            }
        },
        /**
         * ==========================================================================
         * TOOLTIP-RELATED PROPERTIES STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * A [[Tooltip]] object to be used when displayed rollover information for
         * the element.
         *
         * @param {Tooltip}  tooltip  Tooltip
         */
        set: function (tooltip) {
            if (this._tooltip) {
                //this._tooltip.dispose();
                this.removeDispose(this._tooltip);
            }
            this._tooltip = tooltip;
            tooltip.parent = this.tooltipContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipDataItem", {
        /**
         * @return {DataItem} Tooltip data item
         */
        get: function () {
            if (this._tooltipDataItem) {
                return this._tooltipDataItem;
            }
            else {
                return this.dataItem;
            }
        },
        /**
         * A [[DataItem]] to use when populating content for the element's
         * [[Tooltip]].
         *
         * @see {@link Tooltip}
         * @see {@link DataItem}
         * @param {DataItem}  value  Tooltip data item
         */
        set: function (value) {
            // important: do not dispose tooltip dataItem, as it is some actual data item from data!
            this._tooltipDataItem = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipColorSource", {
        /**
         * @return {Sprite} Tooltip color source
         */
        get: function () {
            return this._tooltipColorSource;
        },
        /**
         * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,
         * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.
         *
         * @see {@link Tooltip}
         * @see {@link Sprite}
         * @param {Sprite}  sprite Sprite
         */
        set: function (sprite) {
            this._tooltipColorSource = sprite;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows the element's [[Tooltip]].
     *
     * A tooltip will be populated using text templates in either `tooltipHTML`
     * or `tooltipText` as well as data in `tooltipDataItem`.
     *
     * @see {@link Tooltip}
     * @return {boolean} returns true if the tooltip was shown and false if it wasn't (no text was found)
     */
    Sprite.prototype.showTooltip = function () {
        var _this = this;
        if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](this.tooltipText) || __WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](this.tooltipHTML)) {
            var tooltip = this.tooltip;
            var tooltipDataItem = this.tooltipDataItem;
            if (tooltip) {
                var colorSource_1 = this;
                var tooltipColorSource_1 = this.tooltipColorSource;
                if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && this.tooltipColorSource) {
                    if (tooltipColorSource_1.isTemplate) {
                        if (tooltipDataItem) {
                            __WEBPACK_IMPORTED_MODULE_27__utils_Array__["c" /* eachContinue */](tooltipDataItem.sprites, function (sprite) {
                                if (sprite.clonedFrom == tooltipColorSource_1) {
                                    colorSource_1 = sprite;
                                    return false;
                                }
                                return true;
                            });
                        }
                    }
                    else {
                        colorSource_1 = tooltipColorSource_1;
                    }
                }
                if (tooltip.getStrokeFromObject) {
                    var stroke = this.stroke;
                    var source = colorSource_1;
                    while (source.parent != undefined) {
                        stroke = source.stroke;
                        if (stroke == undefined) {
                            source = source.parent;
                        }
                        if (stroke != undefined) {
                            break;
                        }
                    }
                    if (stroke instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */]) {
                        tooltip.background.animate({ property: "stroke", to: stroke }, tooltip.animationDuration);
                    }
                    else {
                        tooltip.background.stroke = stroke;
                    }
                }
                if (tooltip.getFillFromObject) {
                    var fill = this.fill;
                    var source = colorSource_1;
                    while (source.parent != undefined) {
                        fill = source.fill;
                        if (fill == undefined || (fill instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */] && fill.rgb == undefined)) {
                            source = source.parent;
                        }
                        else if (fill != undefined) {
                            break;
                        }
                    }
                    if (fill == undefined) {
                        fill = Object(__WEBPACK_IMPORTED_MODULE_13__utils_Color__["c" /* color */])("#000000");
                    }
                    if (fill instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */]) {
                        tooltip.background.animate({ property: "fill", to: fill }, tooltip.animationDuration);
                    }
                    else {
                        tooltip.background.fill = fill;
                    }
                    if (tooltip.autoTextColor && fill instanceof __WEBPACK_IMPORTED_MODULE_13__utils_Color__["a" /* Color */]) {
                        tooltip.label.fill = fill.alternative;
                    }
                }
                // Apply tooltip text
                if (this.tooltipHTML) {
                    tooltip.html = this.tooltipHTML;
                }
                if (this.tooltipText) {
                    tooltip.text = this.tooltipText;
                }
                tooltip.dataItem = tooltipDataItem;
                if (this.tooltipPosition == "mouse") {
                    this._interactionDisposer = __WEBPACK_IMPORTED_MODULE_15__interaction_Interaction__["b" /* interaction */].body.events.on("track", function (ev) {
                        _this.pointTooltipTo(__WEBPACK_IMPORTED_MODULE_24__utils_Utils__["documentPointToSvg"](ev.point, _this.svgContainer), true);
                    });
                }
                else {
                    // Point to the X/Y of this Sprite
                    var globalPoint = __WEBPACK_IMPORTED_MODULE_24__utils_Utils__["spritePointToSvg"]({
                        "x": this.tooltipX,
                        "y": this.tooltipY
                    }, this);
                    this.pointTooltipTo(globalPoint);
                }
                // Set accessibility option
                tooltip.readerDescribedBy = this.uidAttr();
                if (tooltip.text != undefined && tooltip.text != "") {
                    //@todo: think of how to solve this better
                    if (tooltip && !tooltip.parent) {
                        tooltip.parent = this.tooltipContainer;
                    }
                    // Reveal tooltip
                    tooltip.show();
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * Sets the point the [[Tooltip]] should point to.
     *
     * @param {IPoint}   point      Coordinates to point to
     * @param {boolean}  instantly  Move instantly without animation
     */
    Sprite.prototype.pointTooltipTo = function (point, instantly) {
        var tooltip = this.tooltip;
        if (tooltip) {
            tooltip.pointTo(point, instantly);
        }
    };
    /**
     * Hides element's [[Tooltip]].
     *
     * @see {@link Tooltip}
     */
    Sprite.prototype.hideTooltip = function (duration) {
        var tooltip = this.tooltip;
        if (tooltip) {
            tooltip.hide(duration);
            if (this._interactionDisposer) {
                this._interactionDisposer.dispose();
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "tooltipHTML", {
        /**
         * @return {string} Tooltip HTML content template
         */
        get: function () {
            return this.getPropertyValue("tooltipHTML");
        },
        /**
         * An HTML template to be used to populate [[Tooltip]] contents.
         *
         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed
         * for any data values to be replaced with the values from respective data
         * items.
         *
         * @param {string} value Tooltip HTML content template
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            this.hoverable = true;
            this.setPropertyValue("tooltipHTML", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipText", {
        /**
         * @return {string} Tooltip content template
         */
        get: function () {
            return this.getPropertyValue("tooltipText");
        },
        /**
         * A text template to be used to populate Tooltip's contents.
         *
         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed
         * for any data values to be replaced with the values from respective data
         * items.
         *
         * This template will also be parsed for any special formatting tags.
         *
         * @param {string} value Tooltip content template
         * @see {@link TextFormatter}
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toText"](value);
            if (value) {
                this.hoverable = true;
            }
            this.setPropertyValue("tooltipText", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipContainer", {
        /**
         * @ignore Exclude from docs
         * @return {Container} Container
         */
        get: function () {
            if (this._tooltipContainer) {
                return this._tooltipContainer;
            }
            else {
                if (this.parent) {
                    return this.parent.tooltipContainer;
                }
            }
        },
        /**
         * A container reference that should be used to place element's
         * [[Tooltip]] in.
         *
         * Will use parent's container if does not have one set.
         *
         * @ignore Exclude from docs
         * @param {Container} value Container
         * @todo Dispose of the old _tooltipContainer ?
         */
        set: function (value) {
            this._tooltipContainer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipX", {
        /**
         * @ignore Exclude from docs
         * @return {number} Tooltip X (px)
         */
        get: function () {
            return this.getTooltipX();
        },
        /**
         * X coordinate the [[Tooltip]] should be shown at.
         *
         * @ignore Exclude from docs
         * @param {number}  value  Tooltip X (px)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumber"](value);
            this.setPropertyValue("tooltipX", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipPosition", {
        /**
         * @type {"fixed" | "mouse"} Position
         */
        get: function () {
            return this.getPropertyValue("tooltipPosition");
        },
        /**
         * Specifies if [[Tooltip]] should follow the mouse or be at a fixed
         * position.
         *
         * @param { "fixed" | "mouse" }  value  Position
         */
        set: function (value) {
            this.setPropertyValue("tooltipPosition", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipY", {
        /**
         * @ignore Exclude from docs
         * @return {number} Tooltip Y (px)
         */
        get: function () {
            return this.getTooltipY();
        },
        /**
         * Y coordinate the [[Tooltip]] should be shown at.
         *
         * @ignore Exclude from docs
         * @param {number}  value  Tooltip Y (px)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_29__utils_Type__["toNumber"](value);
            this.setPropertyValue("tooltipY", value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns Tooltip X coordinate if it's set, or middle of the element.
     *
     * @ignore Exclude from docs
     * @return {number} X (px)
     */
    Sprite.prototype.getTooltipX = function () {
        var x = this.getPropertyValue("tooltipX");
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](x)) {
            x = this.overflowX + this.pixelWidth / 2 - this.pixelPaddingLeft; // overflow is know only for measured items, so this is not always good
        }
        return x;
    };
    /**
     * Returns Tooltip Y coordinate if it's set, or middle of the element.
     *
     * @ignore Exclude from docs
     * @return {number} Y (px)
     */
    Sprite.prototype.getTooltipY = function () {
        var y = this.getPropertyValue("tooltipY");
        if (!__WEBPACK_IMPORTED_MODULE_29__utils_Type__["isNumber"](y)) {
            y = this.overflowY + this.pixelHeight / 2 - this.pixelPaddingTop; // overflow is know only for measured items, so this is not always good
        }
        return y;
    };
    /**
     * Displays a modal or console message with error, and halts any further
     * processing of this item.
     *
     * @ignore Exclude from docs
     * @param {Error} e Error
     * @todo Implement from applying further actions to this item
     */
    Sprite.prototype.raiseCriticalError = function (e) {
        this.modal.content = e.message;
        this.modal.closable = false;
        this.modal.show();
        this.disabled = true;
        if (__WEBPACK_IMPORTED_MODULE_17__System__["b" /* system */].verbose) {
            console.log(e);
        }
    };
    /**
 * Processes JSON-based config before it is applied to the object.
 *
 * @ignore Exclude from docs
 * @param {object}  config  Config
 */
    Sprite.prototype.processConfig = function (config) {
        if (config) {
            if (__WEBPACK_IMPORTED_MODULE_29__utils_Type__["hasValue"](config.tooltipColorSource) && __WEBPACK_IMPORTED_MODULE_29__utils_Type__["isString"](config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {
                config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    /**
     * This function is used to sort element's JSON config properties, so that
     * some properties that absolutely need to be processed last, can be put at
     * the end.
     *
     * @ignore Exclude from docs
     * @param  {string}  a  Element 1
     * @param  {string}  b  Element 2
     * @return {Ordering}   Sorting number
     */
    Sprite.prototype.configOrder = function (a, b) {
        if (a == b) {
            return 0;
        }
        // Must come last
        else if (a == "tooltipColorSource") {
            return 1;
        }
        else if (b == "tooltipColorSource") {
            return -1;
        }
        else {
            return _super.prototype.configOrder.call(this, a, b);
        }
    };
    return Sprite;
}(__WEBPACK_IMPORTED_MODULE_2__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Sprite.js.map

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["g"] = indexOf;
/* harmony export (immutable) */ __webpack_exports__["i"] = map;
/* harmony export (immutable) */ __webpack_exports__["b"] = each;
/* harmony export (immutable) */ __webpack_exports__["c"] = eachContinue;
/* harmony export (immutable) */ __webpack_exports__["m"] = shiftLeft;
/* unused harmony export last */
/* unused harmony export first */
/* unused harmony export insert */
/* unused harmony export setIndex */
/* harmony export (immutable) */ __webpack_exports__["k"] = remove;
/* harmony export (immutable) */ __webpack_exports__["j"] = move;
/* unused harmony export add */
/* unused harmony export replace */
/* harmony export (immutable) */ __webpack_exports__["n"] = toArray;
/* unused harmony export has */
/* harmony export (immutable) */ __webpack_exports__["a"] = copy;
/* unused harmony export slice */
/* harmony export (immutable) */ __webpack_exports__["h"] = insertIndex;
/* harmony export (immutable) */ __webpack_exports__["l"] = removeIndex;
/* harmony export (immutable) */ __webpack_exports__["f"] = getSortedIndex;
/* harmony export (immutable) */ __webpack_exports__["e"] = findIndex;
/* harmony export (immutable) */ __webpack_exports__["d"] = find;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(2);


/**
 * ============================================================================
 * UTILITY FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Searches `array` for `value`.
 *
 * Returns -1 if not found.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {A}             value  Value to search
 * @returns {number}               Index
 */
function indexOf(array, value) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        // TODO handle NaN
        if (array[i] === value) {
            return i;
        }
    }
    return -1;
}
/**
 * Calls `fn` function for every member of array and returns a new array out
 * of all outputs.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {function}      fn     Callback function
 * @returns {number}               New array
 */
function map(array, fn) {
    var length = array.length;
    var output = new Array(length);
    for (var i = 0; i < length; ++i) {
        output[i] = fn(array[i], i);
    }
    return output;
}
/**
 * Iterates thorugh all items in array and calls `fn` function for each of
 * them.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {function}      fn     Callback function
 */
function each(array, fn) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        fn(array[i], i);
    }
}
/**
 * Iterates thorugh all items in array and calls `fn` function for each of
 * them.
 *
 * If `fn` call evaluates to `false`, further iteration is cancelled.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {function}      fn     Callback function
 */
function eachContinue(array, fn) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        if (!fn(array[i], i)) {
            break;
        }
    }
}
/**
 * Shifts an item at `index` towards beginning of the array.
 *
 * @param {ArrayLike<A>}  array  Source array
 * @param {number}        index  Target element index
 */
function shiftLeft(array, index) {
    var length = array.length;
    for (var i = index; i < length; ++i) {
        array[i - index] = array[i];
    }
    array.length = length - index;
}
/**
 * Returns the last item of the array.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @returns {A}                    Last item
 */
function last(array) {
    var length = array.length;
    return length ? array[length - 1] : undefined;
}
/**
 * Returns the first item of the array.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @returns {A}                    Last item
 */
function first(array) {
    return array[0];
}
/**
 * Inserts `element` into `array` at `index`.
 *
 * Caps `index` to be between `0` and `array.length`
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to insert
 * @param {ArrayLike<A>}  array    Index to insert item at
 */
function insert(array, element, index) {
    //if (array) {
    index = __WEBPACK_IMPORTED_MODULE_0__Math__["fitToRange"](index, 0, array.length);
    array.splice(index, 0, element);
    //}
}
/**
 * Removes all copies of `element` from `array` (if they exist) and then
 * inserts `element` at `index`.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item
 * @param {ArrayLike<A>}  array    Index to move item to
 */
function setIndex(array, element, index) {
    remove(array, element);
    insert(array, element, index);
}
/**
 * Removes `element` from `array`.
 *
 * If there are multiple copies of `element`, they are all removed.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to remove
 */
function remove(array, element) {
    var found = false;
    if (array) {
        var index = void 0;
        while ((index = array.indexOf(element)) !== -1) {
            array.splice(index, 1);
            found = true;
        }
    }
    return found;
}
/**
 * Adds an `element` to `array`.
 *
 * If array already contains and item like this, it is removed before adding
 * it again.
 *
 * Optionally `toIndex` can be specified to add element at specific index.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to add
 * @param {ArrayLike<A>}  array    Index to move item to
 */
function move(array, element, toIndex) {
    // @todo this implementation must be the same as the List.moveValue method
    // @todo don't do anything if the desired index is the same as the current index
    var index = array.indexOf(element);
    // @todo remove all old values rather than only the first ?
    if (index !== -1) {
        removeIndex(array, index);
    }
    if (toIndex == null) {
        array.push(element);
    }
    else {
        insertIndex(array, toIndex, element);
    }
}
/**
 * Inserts `element` into `array` at `index`.
 *
 * If `index` is not provided, it will insert `element` at the end of `array`.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to add
 * @param {ArrayLike<A>}  array    Index to add item at
 */
function add(array, element, index) {
    // Append to the end if index is not set
    if (!__WEBPACK_IMPORTED_MODULE_1__Type__["isNumber"](index)) {
        array.push(element);
    }
    // Add to the beginning of array if index is 0
    else if (index === 0) {
        array.unshift(element);
    }
    // Add to indicated place if index is set
    else {
        array.splice(index, 0, element);
    }
}
/**
 * Removes `element` from `array` (if it exists) and then inserts `element` at
 * `index`.
 *
 * If `index` is not provided, it will insert `element` at the end of `array`.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to remove
 * @param {ArrayLike<A>}  array    Index to move item to
 */
function replace(array, element, index) {
    // check if exists
    var ind = array.indexOf(element);
    // remove if exists
    if (ind !== -1) {
        array.splice(ind, 1);
    }
    // add to end if index is not set
    if (!__WEBPACK_IMPORTED_MODULE_1__Type__["isNumber"](index)) {
        array.push(element);
    }
    // add to indicated place if index is set
    else {
        array.splice(index, 0, element);
    }
}
/**
 * Wraps `input` in an array, if it isn't already an array.
 *
 * @param {Array<A> | A}  input  Source value
 * @return {Array<A>} An array
 */
function toArray(input) {
    if (Array.isArray(input)) {
        return input;
    }
    else {
        return [input];
    }
}
/**
 * Returns `true` if `element` exists in `array`.
 *
 * @param   {ArrayLike<A>}  array    Source array
 * @param   {ArrayLike<A>}  element  Item to search for
 * @returns {boolean}                Item in array?
 */
function has(array, element) {
    return indexOf(array, element) !== -1;
}
/**
 * Returns a shallow copy of `array`.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @returns {boolean}              Copy of the array
 */
function copy(array) {
    var length = array.length;
    // It's faster to create the array with a pre-defined length
    var output = new Array(length);
    for (var i = 0; i < length; ++i) {
        // Because the array has a pre-defined length, we have to assign rather than push
        // This is also faster than pushing
        output[i] = array[i];
    }
    return output;
}
/**
 * Returns a copy of `array` which contains all the elements between `start`
 * and `end`. (including `start` and excluding `end`)
 *
 * If `end` is not provided, it defaults to `array.length`.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {number}        start  Start index
 * @param   {number}        end    End index
 * @returns {Array<A>}             Part of the array
 */
function slice(array, start, end) {
    if (end === void 0) { end = array.length; }
    var output = new Array(end - start);
    for (var i = start; i < end; ++i) {
        output[i - start] = array[i];
    }
    return output;
}
/**
 * Inserts a value into array at specific index.
 *
 * @param {Array<A>}  array  Source array
 * @param {number}    index  Index
 * @param {A}         value  Value to insert
 */
function insertIndex(array, index, value) {
    array.splice(index, 0, value);
}
/**
 * Removes a value from array at specific index.
 *
 * @param {Array<A>}  array  Source array
 * @param {number}    index  Index
 */
function removeIndex(array, index) {
    array.splice(index, 1);
}
/**
 * Orders an array using specific `ordering` function and returns index of
 * the `value`.
 *
 * @ignore Exclude from docs
 * @param   {ArrayLike<A>}  array     Source array
 * @param   {function}      ordering  An ordering function
 * @param   {ArrayLike<A>}  value     Value to search for
 * @returns {SortResult}              Result of the search
 */
function getSortedIndex(array, ordering, value) {
    var start = 0;
    var end = array.length;
    var found = false;
    while (start < end) {
        // TODO is this faster/slower than using Math.floor ?
        var pivot = (start + end) >> 1;
        var order = ordering(value, array[pivot]);
        // less
        if (order < 0) {
            end = pivot;
            // equal
        }
        else if (order === 0) {
            found = true;
            start = pivot + 1;
            // more
        }
        else {
            start = pivot + 1;
        }
    }
    return {
        found: found,
        index: (found ? start - 1 : start)
    };
}
/**
 * Searches the array using custom function and returns index of the item if
 * found.
 *
 * Will call `matches` function on all items of the array. If return value
 * evaluates to `true`, index is returned.
 *
 * Otherwise returns -1.
 *
 * @param   {ArrayLike<A>}  array    Source array
 * @param   {function}      matches  Search function
 * @returns {number}                 Index of the item if found
 */
function findIndex(array, matches) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        if (matches(array[i], i)) {
            return i;
        }
    }
    return -1;
}
/**
 * Searches the array using custom function and returns item if found.
 *
 * Will call `matches` function on all items of the array. If return value
 * evaluates to `true`, index is returned.
 *
 * Otherwise returns `undefined`.
 *
 * @param   {ArrayLike<A>}  array    Source array
 * @param   {function}      matches  Search function
 * @returns {number}                 Item if found
 */
function find(array, matches) {
    var index = findIndex(array, matches);
    if (index !== -1) {
        return array[index];
    }
}
//# sourceMappingURL=Array.js.map

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Color; });
/* harmony export (immutable) */ __webpack_exports__["c"] = color;
/* harmony export (immutable) */ __webpack_exports__["d"] = isColor;
/* harmony export (immutable) */ __webpack_exports__["b"] = castColor;
/* harmony export (immutable) */ __webpack_exports__["e"] = toColor;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Colors__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(2);
/**
 * This module contains Color object definition
 */


/**
 * Represents a color.
 *
 * `Color` accepts value only in [[iRGB]] object format. To create `Color`
 * object by parsing it from any supported string-based formats, use helper
 * [[color]] function:
 *
 * ```TypeScript
 * amcharts4.color("#ff0000");
 * amcharts4.color("#f00");
 * amcharts4.color("rgb(255, 0, 0)");
 * amcharts4.color("rgba(255, 0, 0, 0.5)");
 * amcharts4.color({ r: 255, g: 0, b: 0 });
 * amcharts4.color("red");
 * ```
 * ```JavaScript
 * amcharts4.color("#ff0000");
 * amcharts4.color("#f00");
 * amcharts4.color("rgb(255, 0, 0)");
 * amcharts4.color("rgba(255, 0, 0, 0.5)");
 * amcharts4.color({ r: 255, g: 0, b: 0 });
 * amcharts4.color("red");
 * ```
 */
var Color = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param {iRGB} color Source color
     */
    function Color(color) {
        this._value = color;
    }
    Object.defineProperty(Color.prototype, "rgb", {
        /**
         * Returns [[iRGB]] representation of the color.
         *
         * @return {iRGB} RGB object
         */
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "hex", {
        /**
         * Returns color hex value string, e.g. "#FF0000".
         *
         * @return {string} Hex color code
         */
        get: function () {
            return this._value ? __WEBPACK_IMPORTED_MODULE_0__Colors__["rgbToHex"](this._value) : "none";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "rgba", {
        /**
         * Returns an `rgba()` representation of the color, e.g.:
         * `rgba(255, 0, 0, 0.5)`.
         *
         * @return {string} rgba color string
         */
        get: function () {
            return this._value ? __WEBPACK_IMPORTED_MODULE_0__Colors__["rgbToRGBA"](this._value) : "none";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "alpha", {
        /**
         * Returns current transparency.
         *
         * @return {number} Alpha (0-1)
         */
        get: function () {
            if (this._value != null && this._value.a != null) {
                return this._value.a;
            }
            else {
                return 1;
            }
        },
        /**
         * Set alpha (transparency) of the color.
         *
         * @param {number} value Alpha (0-1)
         */
        set: function (value) {
            if (this._value) {
                this._value.a = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "lightColor", {
        /**
         * Returns current light color setting.
         *
         * @return {Color} Color
         */
        get: function () {
            if (!this._lightColor) {
                this._lightColor = new Color({ r: 255, g: 255, b: 255 });
            }
            return this._lightColor;
        },
        /**
         * Sets "light" color. Used when determining contrasting color.
         *
         * @param {Color} color Color
         */
        set: function (color) {
            this._lightColor = color;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "darkColor", {
        /**
         * Returns current dark color setting.
         *
         * @return {Color} Color
         */
        get: function () {
            if (!this._darkColor) {
                this._darkColor = new Color({ r: 0, g: 0, b: 0 });
            }
            return this._darkColor;
        },
        /**
         * Sets "dark" color. Used when determining contrasting color.
         *
         * @param {Color} color Color
         */
        set: function (color) {
            this._darkColor = color;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Overrides `toString` method so that [[Color]] object can be used as
     * string.
     *
     * @ignore Exclude from docs
     * @return {string} String represantion of color (usable in CSS)
     */
    Color.prototype.toString = function () {
        return this.alpha < 1 ? this.rgba : this.hex;
    };
    /**
     * Retruns a new [[Color]] which is percent lighter (positivive value),
     * or darker (negative value).
     *
     * Parameter is in the scale of -1 to 1.
     *
     * @param  {number}  percent  Increase/decrease lightness by X
     * @return {Color}            New Color
     */
    Color.prototype.lighten = function (percent) {
        return new Color(__WEBPACK_IMPORTED_MODULE_0__Colors__["lighten"](this.rgb, percent));
    };
    /**
     * Retruns a new [[Color]] which is percent brighter (positivive value),
     * or darker (negative value).
     *
     * Parameter is in the scale of -1 to 1.
     *
     * @param  {number}  percent  Increase/decrease brightness by X
     * @return {Color}            New Color
     */
    Color.prototype.brighten = function (percent) {
        return new Color(__WEBPACK_IMPORTED_MODULE_0__Colors__["brighten"](this.rgb, percent));
    };
    /**
     * Returns a new [[Color]] based on current color with specific saturation
     * applied.
     *
     * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully
     * saturated).
     *
     * @param  {number}  saturation  Saturation (0-1)
     * @return {Color}               New (saturated) color
     */
    Color.prototype.saturate = function (saturation) {
        return new Color(__WEBPACK_IMPORTED_MODULE_0__Colors__["saturate"](this.rgb, saturation));
    };
    Object.defineProperty(Color.prototype, "alternative", {
        /**
         * Returns a either light or dark color that contrasts specifically with
         * this color.
         *
         * Uses properties `darkColor` (default black) and `lightColor` (default
         * white).
         *
         * Useful when determining which color label should be on a colored
         * background, so that it stands out.
         *
         * @return {Color} Contrasting color
         */
        get: function () {
            if (this.rgb != null) {
                return __WEBPACK_IMPORTED_MODULE_0__Colors__["isLight"](this.rgb) ? this.darkColor : this.lightColor;
            }
            else {
                throw new Error("Color does not exist");
            }
        },
        enumerable: true,
        configurable: true
    });
    return Color;
}());

/**
 * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]
 * object for it.
 *
 * @param  {string | iRGB | Color}  value  Input value
 * @param  {number}                 alpha  Alpha (0-1)
 * @return {Color}                         Color object
 */
function color(value, alpha) {
    if (!__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](value)) {
        return new Color();
    }
    if (typeof value == "string") {
        return new Color(__WEBPACK_IMPORTED_MODULE_0__Colors__["rgb"](value, alpha));
    }
    // Check if it's already a Color object
    if (value instanceof Color) {
        if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](alpha)) {
            value.alpha = alpha;
        }
        return value;
    }
    // Not a string or Color instance, it's the iRGB object then
    return new Color(value);
}
/**
 * Checks if supplied argument is instance of [[Color]].
 *
 * @param  {any}      value  Input value
 * @return {boolean}         Is Color?
 */
function isColor(value) {
    return value instanceof Color;
}
/**
 * Converts any value to [[Color]].
 *
 * @param  {any}    value  Input value
 * @return {Color}         Color
 */
function castColor(value) {
    return color(value);
}
/**
 * Converts any value into a [[Color]].
 *
 * @param  {any}    value  Source value
 * @return {Color}         Color object
 */
function toColor(value) {
    if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](value) && !isColor(value)) {
        return castColor(value);
    }
    return value;
}
//# sourceMappingURL=Color.js.map

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return BaseObjectEvents; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Cache__ = __webpack_require__(199);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Type__ = __webpack_require__(2);
/**
 * Base functionality
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();












/**
 * Provides base functionality for all derivative objects, like generating ids,
 * handling cache, etc.
 */
var BaseObject = /** @class */ (function () {
    //protected _classes: { [index: string]: any } = {};
    /**
     * Constructor
     * * Sets class name
     */
    function BaseObject() {
        /**
         * Indicates if this object has already been deleted. Any
         * destruction/disposal code should take this into account when deciding
         * wheter to run potentially costly disposal operations if they already have
         * been run.
         *
         * @type {boolean}
         * @ignore Exclude from docs
         */
        this._disposed = false;
        /**
         * List of IDisposer which will be disposed when the BaseObject is disposed.
         *
         * @ignore Exclude from docs
         */
        this._disposers = [];
        this.className = "BaseObject";
    }
    Object.defineProperty(BaseObject.prototype, "uid", {
        /**
         * Returns object's internal unique ID.
         *
         * @return {string} Unique ID
         */
        get: function () {
            if (!this._uid) {
                this._uid = __WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */].getUniqueId();
                __WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */].map.setKey(this._uid, this);
            }
            return this._uid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseObject.prototype, "id", {
        /**
         * @return {string} Id
         */
        get: function () {
            return this._id;
        },
        /**
         * Sets the user-defined id of the element.
         *
         * @param {string} value Id
         */
        set: function (value) {
            //registry.map.setKey(value, this); // registry.map only stores by uid
            this._id = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseObject.prototype, "map", {
        /**
         * Returns a universal collection for mapping ids with objects.
         *
         * @ignore Exclude from docs
         * @return {Dictionary<string, any>} Map collection
         */
        get: function () {
            if (!this._map) {
                this._map = new __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._map;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Applies properties from all assigned themes.
     *
     * @ignore Exclude from docs
     */
    BaseObject.prototype.applyTheme = function () {
        var _this = this;
        // TODO is this needed ?
        if (__WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */]) {
            var themes = this.getCurrentThemes();
            // TODO is this needed ?
            if (themes) {
                __WEBPACK_IMPORTED_MODULE_9__utils_Array__["b" /* each */](themes, function (theme, index) {
                    theme(_this);
                });
            }
        }
    };
    Object.defineProperty(BaseObject.prototype, "themes", {
        /**
         * @ignore Exclude from docs
         * @return {ITheme[]} An array of themes
         */
        get: function () {
            return this._themes;
        },
        /**
         * A list of themes to be used for this element.
         *
         * @ignore Exclude from docs
         * @param {ITheme[]} value An array of themes
         */
        set: function (value) {
            this._themes = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a list of themes that should be applied to this element. It could
     * either be a list of themes set explicitly on this element, or system-wide.
     *
     * @return {ITheme[]} List of themes
     */
    BaseObject.prototype.getCurrentThemes = function () {
        return this.themes || __WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */].themes;
    };
    /**
     * Returns if this object has been already been disposed.
     *
     * @return {boolean} Is disposed?
     */
    BaseObject.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Destroys this object and all related data.
     */
    BaseObject.prototype.dispose = function () {
        if (!this._disposed) {
            this._disposed = true;
            var a = this._disposers;
            this._disposers = null;
            __WEBPACK_IMPORTED_MODULE_9__utils_Array__["b" /* each */](a, function (x) {
                x.dispose();
            });
            // Clear cache
            this.clearCache();
            // remove from clones list
            if (this.clonedFrom) {
                this.clonedFrom.clones.removeValue(this);
            }
            __WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */].map.removeKey(this._uid);
        }
    };
    /**
     * Disposes disposable object and removes it from `_disposers`.
     *
     * @param {IDisposer} target Object to dispose
     * @ignore Exclude from docs
     */
    BaseObject.prototype.removeDispose = function (target) {
        //if(target){
        if (!this._disposed) {
            var index = __WEBPACK_IMPORTED_MODULE_9__utils_Array__["g" /* indexOf */](this._disposers, target);
            if (index > -1) {
                this._disposers.splice(index, 1);
            }
        }
        target.dispose();
        //}
    };
    /**
     * Makes a copy of this object and returns the clone. Try to avoid clonning complex objects like chart, create new instances if you need them.
     *
     * @param   {string}  cloneId  An id to use for clone (if not set a unique id will be generated)
     * @returns {Object}           Clone
     */
    BaseObject.prototype.clone = function (cloneId) {
        if (!cloneId) {
            cloneId = "clone-" + __WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */].getUniqueId();
        }
        var newObject = new this.constructor();
        newObject.cloneId = cloneId;
        newObject.clonedFrom = this;
        newObject.copyFrom(this);
        // add to clones list
        this.clones.push(newObject);
        return newObject;
    };
    Object.defineProperty(BaseObject.prototype, "clones", {
        /**
         * Returns a collection of object's clones.
         *
         * @ignore Exclude from docs
         * @return {Dictionary<string, BaseObject>} Clones
         */
        get: function () {
            if (!this._clones) {
                this._clones = new __WEBPACK_IMPORTED_MODULE_0__utils_List__["b" /* List */]();
            }
            return this._clones;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all properties and related data from different element.
     *
     * @param {this} object Source element
     */
    BaseObject.prototype.copyFrom = function (object) {
    };
    Object.defineProperty(BaseObject.prototype, "className", {
        /**
         * @ignore Exclude from docs
         * @return {string} Class name
         */
        get: function () {
            return this._className;
        },
        /**
         * Element's class name. (a class that was used to instantiate the element)
         *
         * @ignore Exclude from docs
         * @param {string}  value  Class name
         */
        set: function (value) {
            this._className = value;
            /*if (registry) {
                registry.registeredClasses[value] = typeof this;
            }*/
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Caches value in object's cache.
     *
     * @ignore Exclude from docs
     * @param {string}  key    Key
     * @param {any}     value  Value
     */
    BaseObject.prototype.setCache = function (key, value) {
        __WEBPACK_IMPORTED_MODULE_8__utils_Cache__["b" /* cache */].set(this.uid, key, value);
    };
    /**
     * Retrieves cached value.
     *
     * @ignore Exclude from docs
     * @param  {string}  key  Key
     * @return {any}          Value
     */
    BaseObject.prototype.getCache = function (key) {
        return __WEBPACK_IMPORTED_MODULE_8__utils_Cache__["b" /* cache */].get(this.uid, key);
    };
    /**
     * Clears object's local cache.
     *
     * @ignore Exclude from docs
     */
    BaseObject.prototype.clearCache = function () {
        __WEBPACK_IMPORTED_MODULE_8__utils_Cache__["b" /* cache */].clear(this.uid);
    };
    /**
     * Creates [[Disposer]] for `setTimeout` function call. This ensures that all
     * timeouts created by the object will be cleared when object itself is
     * disposed.
     *
     * @ignore Exclude from docs
     * @param  {() => void}  fn     Callback function
     * @param  {number}      delay  Timeout (ms)
     * @return {IDisposer}          Disposer for timeout
     */
    BaseObject.prototype.setTimeout = function (fn, delay) {
        var _this = this;
        var id = setTimeout(function () {
            _this.removeDispose(disposer);
            fn();
        }, delay);
        var disposer = new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["b" /* Disposer */](function () {
            clearTimeout(id);
        });
        this._disposers.push(disposer);
        return disposer;
    };
    Object.defineProperty(BaseObject.prototype, "config", {
        /**
         * ==========================================================================
         * JSON-BASED CONFIG PROCESSING
         * ==========================================================================
         * @hidden
         */
        /**
         * Use this property to set JSON-based config. When set, triggers processing
         * routine, which will go thorugh all properties, and try to apply values,
         * create instances, etc.
         *
         * Use this with caution, as it is a time-consuming process. It's used for
         * initialchart setup only, not routine operations.
         *
         * @param {object} json JSON config
         */
        set: function (config) {
            try {
                this.processConfig(config);
            }
            catch (e) {
                /*if (this instanceof Sprite) {
                    this.raiseCriticalError(e);
                }*/
                this.raiseCriticalError(e);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes the JSON config.
     *
     * @param {object}  json  JSON config
     * @ignore Exclude from docs
     */
    BaseObject.prototype.processConfig = function (config) {
        var _this = this;
        if (!config) {
            return;
        }
        // Get target
        var target = this;
        // Iterate through all of the items
        __WEBPACK_IMPORTED_MODULE_10__utils_Object__["eachOrdered"](config, function (configKey, configValue) {
            // Check if there's a property in target
            if (_this.hasProperty(configKey)) {
                var item_1;
                // Do we have instructions to create an object?
                if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](configValue) && __WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](configValue["type"])) {
                    // Create new instance
                    if (item_1 = _this.createClassInstance(configValue["type"])) {
                        target[configKey] = item_1;
                    }
                    else {
                        item_1 = target[configKey];
                    }
                }
                else {
                    // Get item from the object
                    item_1 = target[configKey];
                }
                /**
                 * It is...
                 * --------------------------------------------------------------------
                 */
                if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__["a" /* Adapter */]) {
                    // ... an Adapter, try to add handlers to it
                    // ------------------------------------------------------------------
                    _this.processAdapters(item_1, configValue);
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_3__utils_EventDispatcher__["a" /* EventDispatcher */]) {
                    // ... an EventDispatcher, try to add handlers to it
                    // ------------------------------------------------------------------
                    _this.processEvents(item_1, configValue);
                }
                else if (_this.asIs(configKey)) {
                    // ... a special field, just set it to new value
                    // ------------------------------------------------------------------
                    // (no need to add each indvidual item)
                    target[configKey] = configValue;
                }
                else if (configValue instanceof BaseObject) {
                    // ... a BaseObject object, we just going to use it as it is
                    // ------------------------------------------------------------------
                    target[configKey] = configValue;
                }
                else if (item_1 instanceof BaseObject) {
                    // ... another child BaseObject
                    // ------------------------------------------------------------------
                    // Let's just pass in config part in and let itself deal with it
                    item_1.config = configValue;
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_0__utils_List__["e" /* ListTemplate */]) {
                    // ... a list with template
                    // ------------------------------------------------------------------
                    // Let's see what we can do with it
                    if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isArray"](configValue)) {
                        // It's an array.
                        // Create a list item for entry, or try to apply properties to an
                        // existing entry if possible and it is present.
                        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["b" /* each */](configValue, function (entry, index) {
                            var type = _this.getConfigEntryType(entry);
                            var listItem;
                            if (item_1.hasIndex(index)) {
                                listItem = item_1.getIndex(index);
                            }
                            else if (type) {
                                listItem = item_1.create(type);
                            }
                            else {
                                listItem = item_1.create();
                            }
                            if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](entry)) {
                                // If the list item is BaseObject, we just need to let it
                                // deal if its own config
                                if (listItem instanceof BaseObject) {
                                    listItem.config = entry;
                                }
                                else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](listItem) && __WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](entry)) {
                                    __WEBPACK_IMPORTED_MODULE_10__utils_Object__["copyAllProperties"](entry, listItem);
                                }
                                else {
                                    item_1.setIndex(item_1.indexOf(listItem), entry);
                                }
                            }
                        });
                        // Truncate the list if it contains less items than the config
                        // array
                        while (configValue.length > item_1.length) {
                            item_1.pop();
                        }
                    }
                    else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](configValue)) {
                        // It's a single oject.
                        // Treat it as a template.
                        __WEBPACK_IMPORTED_MODULE_10__utils_Object__["each"](configValue, function (entryKey, entryValue) {
                            var listItem = item_1.template[entryKey];
                            if (listItem instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__["a" /* Adapter */]) {
                                _this.processAdapters(listItem, entryValue);
                            }
                            else if (listItem instanceof __WEBPACK_IMPORTED_MODULE_3__utils_EventDispatcher__["a" /* EventDispatcher */]) {
                                _this.processEvents(listItem, entryValue);
                            }
                            else if (listItem instanceof __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["c" /* DictionaryTemplate */]) {
                                _this.processDictionaryTemplate(listItem, entryValue);
                            }
                            else if (item_1.template[entryKey] instanceof BaseObject) {
                                // Template is a BaseObject. Let it deal with its own config.
                                item_1.template[entryKey].config = entryValue;
                            }
                            else {
                                // Aything else. Just assing and be done with it.
                                item_1.template[entryKey] = entryValue;
                            }
                        });
                    }
                    else {
                        // Something else?
                        // Not sure what to do with it on a list - ignore
                    }
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_0__utils_List__["b" /* List */]) {
                    // ... a list
                    // ------------------------------------------------------------------
                    // Convert to array if necessary
                    if (!__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isArray"](configValue)) {
                        configValue = [configValue];
                    }
                    // It's an array
                    // Create a list item for entry
                    __WEBPACK_IMPORTED_MODULE_9__utils_Array__["b" /* each */](configValue, function (entry, index) {
                        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](entry)) {
                            // An object.
                            //
                            // Let's see if we can instantiate a class out of it, or we need
                            // to push it into list as it is.
                            //
                            // If there are items already at the specified index in the list,
                            // apply properties rather than create a new one.
                            var listItem = void 0;
                            if (item_1.hasIndex(index)) {
                                listItem = item_1.getIndex(index);
                            }
                            else {
                                var listItem_1 = _this.createEntryInstance(entry);
                                item_1.push(listItem_1);
                            }
                            // If the list item is BaseObject, we just need to let it
                            // deal if its own config
                            if (listItem instanceof BaseObject) {
                                listItem.config = entry;
                            }
                        }
                        else {
                            // Basic value.
                            // Just push it into list, or override existing value
                            if (item_1.hasIndex(index)) {
                                item_1.setIndex(index, entry);
                            }
                            else {
                                item_1.push(entry);
                            }
                        }
                    });
                    // Truncate the list if it contains less items than the config
                    // array
                    while (configValue.length > item_1.length) {
                        item_1.pop();
                    }
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["c" /* DictionaryTemplate */]) {
                    // ... a dictionary with template
                    // ------------------------------------------------------------------
                    _this.processDictionaryTemplate(item_1, configValue);
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["a" /* Dictionary */]) {
                    // ... a dictionary
                    // ------------------------------------------------------------------
                    // @todo
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_5__utils_Color__["a" /* Color */] || item_1 instanceof __WEBPACK_IMPORTED_MODULE_6__utils_Percent__["a" /* Percent */]) {
                    // ... it's a Color or Percent
                    // ------------------------------------------------------------------
                    target[configKey] = configValue;
                }
                else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](item_1) && __WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](configValue)) {
                    // ... a regular object
                    // ------------------------------------------------------------------
                    __WEBPACK_IMPORTED_MODULE_10__utils_Object__["copyAllProperties"](configValue, item_1);
                }
                else {
                    // ... something else - probably a simple property or object
                    // ------------------------------------------------------------------
                    // Maybe convert to `Percent` or `Color`?
                    if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isString"](configValue)) {
                        if (configValue.match(/^[0-9.\-]+\%$/)) {
                            configValue = Object(__WEBPACK_IMPORTED_MODULE_6__utils_Percent__["c" /* percent */])(__WEBPACK_IMPORTED_MODULE_11__utils_Type__["toNumber"](configValue));
                        }
                        else if (configValue.match(/^\#[0-9abcdef]{3,}$/i)) {
                            configValue = Object(__WEBPACK_IMPORTED_MODULE_5__utils_Color__["c" /* color */])(configValue);
                        }
                    }
                    // Assign
                    target[configKey] = configValue;
                }
            }
        }, this.configOrder);
    };
    BaseObject.prototype.processAdapters = function (item, config) {
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](config)) {
            __WEBPACK_IMPORTED_MODULE_10__utils_Object__["each"](config, function (key, entry) {
                if (!item.has(key, entry)) {
                    item.add(key, entry);
                }
            });
        }
    };
    BaseObject.prototype.processEvents = function (item, config) {
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](config)) {
            __WEBPACK_IMPORTED_MODULE_10__utils_Object__["each"](config, function (key, entry) {
                if (!item.has(key, entry)) {
                    item.on(key, entry);
                }
            });
        }
    };
    /**
     * Processes JSON config for a [[DictionaryTemplate]] item.
     *
     * @todo Description
     * @param {DictionaryTemplate<any, any>}  item    Item
     * @param {any}                           config  Config
     */
    BaseObject.prototype.processDictionaryTemplate = function (item, config) {
        // We can only process object
        // Not sure what to do with other types - ignore
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](config)) {
            // Create an entry for each item, or override properties for
            // existing one.
            __WEBPACK_IMPORTED_MODULE_10__utils_Object__["each"](config, function (entryKey, entryValue) {
                var listItem;
                // Get existing one, or create a new one
                if (item.hasKey(entryKey)) {
                    listItem = item.getKey(entryKey);
                }
                else {
                    listItem = item.create(entryKey);
                }
                // Set data
                if (listItem instanceof BaseObject) {
                    listItem.config = entryValue;
                }
                else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](listItem) && __WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](entryValue)) {
                    __WEBPACK_IMPORTED_MODULE_10__utils_Object__["copyAllProperties"](entryValue, listItem);
                }
                else {
                    listItem.setKey(entryKey, entryValue);
                }
            });
        }
    };
    /**
     * This function is used to sort element's JSON config properties, so that
     * some properties that absolutely need to be processed last, can be put at
     * the end.
     *
     * @ignore Exclude from docs
     * @param  {string}  a  Element 1
     * @param  {string}  b  Element 2
     * @return {Ordering}   Sorting number
     */
    BaseObject.prototype.configOrder = function (a, b) {
        if (a == b) {
            return 0;
        }
        // Language must come first, so it's all set up when the rest of the
        // elements are being instantiated
        else if (a == "language") {
            return -1;
        }
        else if (b == "language") {
            return 1;
        }
        else {
            return 0;
        }
    };
    /**
     * Checks if field should be just assigned as is, without any checking when
     * processing JSON config.
     *
     * Extending functions can override this function to do their own checks.
     *
     * @param  {string}   field  Field name
     * @return {boolean}         Assign as is?
     */
    BaseObject.prototype.asIs = function (field) {
        return __WEBPACK_IMPORTED_MODULE_9__utils_Array__["g" /* indexOf */](["locale"], field) != -1;
    };
    /**
     * Creates a relevant class instance if such class definition exists.
     *
     * @ignore Exclude from docs
     * @param  {string}  className  Class name
     * @return {Object}             Instance
     */
    BaseObject.prototype.createClassInstance = function (className) {
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](__WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */].registeredClasses[className])) {
            return new __WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */].registeredClasses[className]();
        }
        return;
    };
    /**
     * Creates a class instance for a config entry using it's type. (as set in
     * `type` property)
     *
     * @ignore Exclude from docs
     * @param  {any}  config  Config part
     * @return {any}          Instance
     */
    BaseObject.prototype.createEntryInstance = function (config) {
        var res;
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](config["type"])) {
            res = this.createClassInstance(config["type"]);
        }
        if (!res) {
            return config;
        }
        return res;
    };
    /**
     * Determines config object type.
     *
     * @ignore Exclude from docs
     * @param  {any}  config  Config part
     * @return {any}          Type
     */
    BaseObject.prototype.getConfigEntryType = function (config) {
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](config["type"])) {
            if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](__WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */].registeredClasses[config["type"]])) {
                return __WEBPACK_IMPORTED_MODULE_7__Registry__["a" /* registry */].registeredClasses[config["type"]];
            }
            else {
                throw Error("Invalid type: \"" + config["type"] + "\".");
            }
        }
        return;
    };
    /**
     * Checks if this element has a property.
     *
     * @ignore Exclude from docs
     * @param  {string}   prop  Property name
     * @return {boolean}        Has property?
     */
    BaseObject.prototype.hasProperty = function (prop) {
        return prop in this ? true : false;
    };
    return BaseObject;
}());

;
/**
 * A version of [[BaseObject]] with events properties and methods.
 * Classes that use [[EventDispatcher]] should extend this instead of
 * [[BaseObject]] directly.
 */
var BaseObjectEvents = /** @class */ (function (_super) {
    __extends(BaseObjectEvents, _super);
    /**
     * Constructor
     */
    function BaseObjectEvents() {
        var _this = _super.call(this) || this;
        /**
         * An [[EventDispatcher]] instance
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_3__utils_EventDispatcher__["a" /* EventDispatcher */]();
        _this.className = "BaseObjectEvents";
        _this._disposers.push(_this.events);
        return _this;
    }
    /**
     * Dispatches an event using own event dispatcher. Will automatically
     * populate event data object with event type and target (this element).
     * It also checks if there are any handlers registered for this sepecific
     * event.
     *
     * @param {string} eventType Event type (name)
     * @param {any}    data      Data to pass into event handler(s)
     */
    BaseObjectEvents.prototype.dispatch = function (eventType, data) {
        // @todo Implement proper type check
        if (this.events.isEnabled(eventType)) {
            if (data) {
                data.type = eventType;
                data.target = data.target || this;
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this
                });
            }
            else {
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this
                });
            }
        }
    };
    /**
     * Works like `dispatch`, except event is triggered immediately, without
     * waiting for the next frame cycle.
     *
     * @param {string} eventType Event type (name)
     * @param {any}    data      Data to pass into event handler(s)
     */
    BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {
        // @todo Implement proper type check
        if (this.events.isEnabled(eventType)) {
            if (data) {
                data.type = eventType;
                data.target = data.target || this;
                this.events.dispatchImmediately(eventType, data);
            }
            else {
                this.events.dispatchImmediately(eventType, {
                    type: eventType,
                    target: this
                });
            }
        }
    };
    return BaseObjectEvents;
}(BaseObject));

//# sourceMappingURL=Base.js.map

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["entries"] = entries;
/* harmony export (immutable) */ __webpack_exports__["keys"] = keys;
/* harmony export (immutable) */ __webpack_exports__["keysOrdered"] = keysOrdered;
/* harmony export (immutable) */ __webpack_exports__["hasKey"] = hasKey;
/* harmony export (immutable) */ __webpack_exports__["getKey"] = getKey;
/* harmony export (immutable) */ __webpack_exports__["eachContinue"] = eachContinue;
/* harmony export (immutable) */ __webpack_exports__["each"] = each;
/* harmony export (immutable) */ __webpack_exports__["eachOrdered"] = eachOrdered;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["merge"] = merge;
/* harmony export (immutable) */ __webpack_exports__["copyProperties"] = copyProperties;
/* harmony export (immutable) */ __webpack_exports__["forceCopyProperties"] = forceCopyProperties;
/* harmony export (immutable) */ __webpack_exports__["copyAllProperties"] = copyAllProperties;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(2);
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * UTILITY FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Returns an iterator for all entries in object.
 *
 * Can be used to safely iterate through all properties of the object.
 *
 * @param   {object}    object  Source object
 * @returns {Iterator}          Iterator
 */
function entries(object) {
    return function (push) {
        // TODO make this more efficient ?
        for (var key in object) {
            if (hasKey(object, key)) {
                if (!push([key, object[key]])) {
                    break;
                }
            }
        }
    };
}
/**
 * Returns an array of object's property names.
 *
 * @param   {object}        object  Source object
 * @returns {Array<string}          Object property names
 */
function keys(object) {
    return Object.keys(object);
}
/**
 * Returns an array of object's property names ordered using specific ordering
 * function.
 *
 * @param   {object}        object  Source object
 * @param   {function}      order   Ordering function
 * @returns {Array<string}          Object property names
 */
function keysOrdered(object, order) {
    return Object.keys(object).sort(order);
}
/**
 * Checks if `object` has a specific `key`.
 *
 * @param   {object}   object  Source object
 * @param   {string}   key     Property name
 * @returns {boolean}          Has key?
 */
function hasKey(object, key) {
    return {}.hasOwnProperty.call(object, key);
}
/**
 * Returns value of the specific `key`.
 *
 * @param   {object}   object  Source object
 * @param   {string}   key     Property name
 * @returns {any}              Key value
 */
function getKey(object, key) {
    return object[key];
}
/**
 * Iterates through all properties of the object calling `fn` for each of them.
 *
 * If return value of the function evaluates to `false` further iteration is
 * cancelled.
 *
 * @param {object}   object  Source object
 * @param {function} fn      Callback function
 */
function eachContinue(object, fn) {
    for (var key in object) {
        if (hasKey(object, key)) {
            if (!fn(key, object[key])) {
                break;
            }
        }
    }
}
/**
 * Iterates through all properties of the object calling `fn` for each of them.
 *
 * @param {object}   object  Source object
 * @param {function} fn      Callback function
 */
function each(object, fn) {
    eachContinue(object, function (key, value) {
        fn(key, value);
        return true;
    });
}
/**
 * Orders object properties using custom `ord` function and iterates through
 * them calling `fn` for each of them.
 *
 * @param {object}    object  Source object
 * @param {function}  fn      Callback function
 * @param {function}  order   Ordering function
 */
function eachOrdered(object, fn, ord) {
    __WEBPACK_IMPORTED_MODULE_0__Array__["b" /* each */](keysOrdered(object, ord), function (key) {
        fn(key, object[key]);
    });
}
/**
 * Returns a copy of the object.
 *
 * @param   {object} object  Source object
 * @returns {object}         Copy of the object
 */
function copy(object) {
    return Object.assign({}, object);
}
/**
 * Merges two objects and returns a new object that contains properties from
 * both source objects.
 *
 * @param   {object} object1  Source object #1
 * @param   {object} object2  Source object #2
 * @returns {object}          Combined object
 */
function merge(object1, object2) {
    return Object.assign({}, object1, object2);
}
/**
 * Copies a list of properties from one object to another.
 *
 * Will not copy empty properties.
 *
 * @param {object}         from  Source object
 * @param {object}         to    Target object
 * @param {Array<string>}  keys  List of keys to copy
 */
function copyProperties(from, to, keys) {
    __WEBPACK_IMPORTED_MODULE_0__Array__["b" /* each */](keys, function (key) {
        if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](from[key])) {
            to[key] = from[key];
        }
    });
}
/**
 * Copies a list of properties from one object to another.
 *
 * Will copy empty properties.
 *
 * @param {object}         from  Source object
 * @param {object}         to    Target object
 * @param {Array<string>}  keys  List of keys to copy
 */
function forceCopyProperties(from, to, keys) {
    __WEBPACK_IMPORTED_MODULE_0__Array__["b" /* each */](keys, function (key) {
        to[key] = from[key];
    });
}
/**
 * Copies all properties from one object to another.
 *
 * @param {object}  from  Source object
 * @param {object}  to    Target object
 */
function copyAllProperties(from, to) {
    copyProperties(from, to, keys(from));
}
//# sourceMappingURL=Object.js.map

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return System; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return system; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_SVGContainer__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Component__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_Paper__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_AsyncPending__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__formatters_TextFormatter__ = __webpack_require__(202);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Animation__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__elements_Tooltip__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__elements_Preloader__ = __webpack_require__(207);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_DOM__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__rendering_filters_FocusFilter__ = __webpack_require__(208);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__elements_AmChartsLogo__ = __webpack_require__(298);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

















/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * The main class that handles system-wide tasks, like caching, heartbeats, etc.
 * @important
 */
var System = /** @class */ (function (_super) {
    __extends(System, _super);
    /**
     * Constructor
     */
    function System() {
        var _this = _super.call(this) || this;
        /**
         * All currently applied themes. All new chart instances created will
         * automatically inherit and retain System's themes.
         *
         * @type {ITheme}
         */
        _this.themes = [];
        /**
         * List of all loaded available themes.
         *
         * Whenever a theme loads, it registers itself in System's `loadedThemes`
         * collection.
         */
        _this.loadedThemes = {};
        /**
         * An indeternal counter used to generate unique IDs.
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this._uidCount = 0;
        /**
         * Console output enabled.
         *
         * @type {boolean}
         */
        _this.verbose = true;
        /**
         * Invalid sizes
         * @rodo Remove commented code
         */
        //public invalidSizes: Array<Sprite>;
        /**
         * Number of times per second charts will be updated.
         *
         * This means that each time an element is invalidated it will wait for the
         * next cycle to be re-validated, and possibly redrawn.
         *
         * This happens every `1000 / frameRate` milliseconds.
         *
         * Reducing this number may reduce the load on the CPU, but might slightly
         * reduce smoothness of the animations.
         *
         * @type {number}
         */
        _this.frameRate = 60;
        /**
         * Number of times per second component container is measured.
         *
         * It is not wise to measure container as often as `frameRate`, as this would
         * use a lot of CPU when resizing window.
         *
         * @type {number}
         */
        _this.measureRate = 10;
        /**
         * @todo Description
         * @ignore Exclude from docs
         * @private
         * @type {number}
         */
        _this.measureCounter = 0;
        /**
         * amCharts will add `class` property to some elements. All those class names
         * will be prefixed by `classNamePrefix`.
         *
         * @type {string}
         */
        _this.classNamePrefix = "amcharts-";
        /**
         * @todo Description
         * @todo Needed?
         * @ignore Exclude from docs
         * @type {number}
         */
        _this.dummyCounter = 0;
        /**
         * Keeps register of class references so that they can be instnatiated using
         * string key.
         *
         * @ignore Exclude from docs
         */
        _this.registeredClasses = {};
        /**
         * @ignore
         */
        _this.commercialLicense = false;
        _this.events = new __WEBPACK_IMPORTED_MODULE_1__utils_EventDispatcher__["a" /* EventDispatcher */]();
        return _this;
    }
    /**
     * Performs initialization of the System object.
     *
     * Called when the first [[Sprite]] object is created.
     *
     * @ignore Exclude from docs
     */
    System.prototype.init = function () {
        var _this = this;
        this.svgContainers = [];
        this.invalidPositions = [];
        this.invalidSprites = [];
        this.invalidDatas = [];
        this.invalidRawDatas = [];
        this.invalidDataRange = [];
        this.invalidDataItems = [];
        this.invalidLayouts = [];
        this.textFormatter = new __WEBPACK_IMPORTED_MODULE_7__formatters_TextFormatter__["a" /* TextFormatter */]();
        // frame at which we should measure
        this.measureAt = Math.round(this.frameRate / this.measureRate);
        // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet
        var ghostDiv = document.createElement("div");
        ghostDiv.hidden = true;
        document.body.appendChild(ghostDiv);
        var ghostSvgContainer = new __WEBPACK_IMPORTED_MODULE_3__rendering_SVGContainer__["a" /* SVGContainer */](ghostDiv);
        this.ghostPaper = new __WEBPACK_IMPORTED_MODULE_5__rendering_Paper__["a" /* Paper */](ghostSvgContainer.SVGContainer);
        this.ghostPaper.id = "ghost";
        __WEBPACK_IMPORTED_MODULE_11__utils_DOM__["k" /* ready */](function () {
            _this.update();
            Object(__WEBPACK_IMPORTED_MODULE_6__utils_AsyncPending__["b" /* raf */])(function () {
                _this.update();
            });
        });
        system.time = Date.now();
        // Create an id for system
        this.uid;
    };
    /**
     * Creates all HTML and SVG containers needed for the chart instance, as well
     * as the new [[Sprite]] (as specified in `classType` parameter).
     *
     * @param  {Optional<HTMLElement | string>}  htmlElement  A container to creat elements in
     * @param  {T}                               classType    A class definition of the new element to create
     * @return {T}                                            Newly-created Sprite object
     */
    System.prototype.createChild = function (htmlElement, classType) {
        var htmlContainer = __WEBPACK_IMPORTED_MODULE_11__utils_DOM__["h" /* getElement */](htmlElement);
        if (htmlContainer) {
            // we need to create another div with position:absolute in order div elements added inside could be positioned relatively
            /*
            let innerContainer = document.createElement("div");
            let style = innerContainer.style;
            style.width = "100%";
            style.height = "100%";
            style.position = "relative";
*/
            //	htmlContainer.appendChild(innerContainer);
            var svgDiv = new __WEBPACK_IMPORTED_MODULE_3__rendering_SVGContainer__["a" /* SVGContainer */](htmlContainer);
            var paper = new __WEBPACK_IMPORTED_MODULE_5__rendering_Paper__["a" /* Paper */](svgDiv.SVGContainer);
            paper.id = "svg-" + (system.svgContainers.length - 1);
            // the approach with masks is chosen because overflow:visible is set on SVG element in order tooltips could go outside
            // svg area - this is often needed when working with small charts.
            // main container which holds content container and tooltips container
            var container = new __WEBPACK_IMPORTED_MODULE_2__Container__["a" /* Container */]();
            container.htmlContainer = htmlContainer;
            container.svgContainer = svgDiv.SVGContainer;
            container.width = Object(__WEBPACK_IMPORTED_MODULE_13__utils_Percent__["c" /* percent */])(100);
            container.height = Object(__WEBPACK_IMPORTED_MODULE_13__utils_Percent__["c" /* percent */])(100);
            container.paper = paper;
            // this is set from parent container, but this one doesn't have, so do it manually.
            container.relativeWidth = 1;
            container.relativeHeight = 1;
            svgDiv.container = container;
            // content container
            // setting mask directly on classType object would result mask to shift together with object transformations
            var contentContainer = container.createChild(__WEBPACK_IMPORTED_MODULE_2__Container__["a" /* Container */]);
            contentContainer.width = Object(__WEBPACK_IMPORTED_MODULE_13__utils_Percent__["c" /* percent */])(100);
            contentContainer.height = Object(__WEBPACK_IMPORTED_MODULE_13__utils_Percent__["c" /* percent */])(100);
            // content mask
            contentContainer.mask = contentContainer.background;
            // creating classType instance
            var sprite_1 = contentContainer.createChild(classType);
            sprite_1.isBaseSprite = true;
            sprite_1.focusFilter = new __WEBPACK_IMPORTED_MODULE_14__rendering_filters_FocusFilter__["a" /* FocusFilter */]();
            // tooltip container
            var tooltipContainer_1 = container.createChild(__WEBPACK_IMPORTED_MODULE_2__Container__["a" /* Container */]);
            tooltipContainer_1.width = Object(__WEBPACK_IMPORTED_MODULE_13__utils_Percent__["c" /* percent */])(100);
            tooltipContainer_1.height = Object(__WEBPACK_IMPORTED_MODULE_13__utils_Percent__["c" /* percent */])(100);
            tooltipContainer_1.isMeasured = false;
            contentContainer.tooltipContainer = tooltipContainer_1;
            sprite_1.tooltip = new __WEBPACK_IMPORTED_MODULE_9__elements_Tooltip__["a" /* Tooltip */]();
            sprite_1.tooltip.hide(0);
            sprite_1.tooltip.setBounds({ x: 0, y: 0, width: tooltipContainer_1.maxWidth, height: tooltipContainer_1.maxHeight });
            tooltipContainer_1.events.on("maxsizechanged", function () {
                sprite_1.tooltip.setBounds({ x: 0, y: 0, width: tooltipContainer_1.maxWidth, height: tooltipContainer_1.maxHeight });
            });
            //@todo: maybe we don't need to create one by default but only on request?
            contentContainer.preloader = new __WEBPACK_IMPORTED_MODULE_10__elements_Preloader__["a" /* Preloader */]();
            if (!this.commercialLicense) {
                tooltipContainer_1.createChild(__WEBPACK_IMPORTED_MODULE_15__elements_AmChartsLogo__["a" /* AmChartsLogo */]);
            }
            sprite_1.numberFormatter; // need to create one.
            return sprite_1;
        }
        else {
            system.log("html container not found");
        }
    };
    /**
     * Reports time elapsed since timer was reset.
     *
     * @ignore Exclude from docs
     * @todo Needed?
     * @param {string}   msg    Message to report in console
     * @param {boolean}  reset  Reset time counter
     */
    System.prototype.reportTime = function (msg, reset) {
        if (system.dummyCounter < 6) {
            //console.log(Date.now() - system.time, msg, this.dummyCounter2);
        }
        if (reset) {
            system.time = Date.now();
        }
    };
    /**
     * Performs "heartbeat" operations `frameRate` number of times per second.
     *
     * When the chart element is invalidated, it is not immediately redrawn.
     *
     * Instead it waits for the next `update()` cycle to be re-validated.
     *
     * @ignore Exclude from docs
     * @todo Maybe should be private?
     */
    System.prototype.update = function () {
        var _this = this;
        this.dispatchImmediately("enterframe");
        this.measureCounter++;
        if (this.measureCounter >= this.measureAt) {
            this.measureCounter = 0;
            this.measure();
        }
        this.validateLayouts();
        this.validatePositions();
        // data objects first - do all calculations
        // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.
        // important to go backwards, as items are removed!
        // TODO use iterator instead
        while (this.invalidDatas.length > 0) {
            var component = this.invalidDatas[0];
            var dataProvider = component.dataProvider;
            if (dataProvider && dataProvider.dataInvalid) {
                try {
                    dataProvider.validateData();
                    if (dataProvider.dataValidationProgress < 1) {
                        break;
                    }
                }
                catch (e) {
                    __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](this.invalidDatas, dataProvider);
                    dataProvider.raiseCriticalError(e);
                }
            }
            else {
                try {
                    component.validateData();
                    if (component.dataValidationProgress < 1) {
                        break;
                    }
                }
                catch (e) {
                    __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](this.invalidDatas, component);
                    component.raiseCriticalError(e);
                }
            }
        }
        while (this.invalidRawDatas.length > 0) {
            var component = this.invalidRawDatas[0];
            try {
                component.validateRawData();
            }
            catch (e) {
                __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](this.invalidRawDatas, component);
                component.raiseCriticalError(e);
            }
        }
        // TODO use iterator instead
        while (this.invalidDataItems.length > 0) {
            var component = this.invalidDataItems[0];
            var dataProvider = component.dataProvider;
            // this is needed to avoid partial value validation when data is parsed in chunks
            if (component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {
                // void
            }
            else {
                try {
                    component.validateDataItems();
                }
                catch (e) {
                    __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](this.invalidDataItems, component);
                    component.raiseCriticalError(e);
                }
            }
            // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)
            __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](system.invalidDataItems, component);
        }
        // TODO use iterator instead
        while (this.invalidDataRange.length > 0) {
            var component = this.invalidDataRange[0];
            var dataProvider = component.dataProvider;
            if (component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {
                // void
            }
            else {
                try {
                    component.validateDataRange();
                    if (!component.skipRangeEvent) {
                        component.dispatchImmediately("datarangechanged");
                    }
                    component.skipRangeEvent = false;
                }
                catch (e) {
                    __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](this.invalidDataRange, component);
                    component.raiseCriticalError(e);
                }
            }
            // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)
            __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](system.invalidDataRange, component);
        }
        var skippedSprites = [];
        // display objects later
        // TODO use iterator instead
        while (this.invalidSprites.length > 0) {
            this.validateLayouts();
            this.validatePositions();
            var sprite = this.invalidSprites[this.invalidSprites.length - 1];
            // we need to check this, as validateLayout might validate sprite
            if (sprite && !sprite.isDisposed()) {
                if (sprite instanceof __WEBPACK_IMPORTED_MODULE_4__Component__["a" /* Component */] && (sprite.dataInvalid || (sprite.dataProvider && sprite.dataProvider.dataInvalid))) {
                    // void
                }
                else {
                    // @todo? maybe we should only check if preloader is visible and render only preloader sprites?
                    // if not, think how can we the next line better.
                    if (sprite.renderingFrame > 1) {
                        sprite.renderingFrame--;
                        skippedSprites.push(sprite);
                    }
                    else if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid) {
                        // void
                    }
                    else {
                        try {
                            sprite.validate();
                        }
                        catch (e) {
                            __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](this.invalidSprites, sprite);
                            sprite.raiseCriticalError(e);
                        }
                    }
                }
            }
            // this might seem too much, but it's ok
            __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](system.invalidSprites, sprite);
        }
        system.invalidSprites = skippedSprites;
        // TODO make this more efficient
        // TODO don't copy the array
        __WEBPACK_IMPORTED_MODULE_12__utils_Array__["b" /* each */](__WEBPACK_IMPORTED_MODULE_12__utils_Array__["a" /* copy */](__WEBPACK_IMPORTED_MODULE_8__utils_Animation__["c" /* animations */]), function (x) {
            x.update();
        });
        // to avoid flicker, we validate positions last time
        //this.validateLayouts();
        //this.validatePositions();
        Object(__WEBPACK_IMPORTED_MODULE_6__utils_AsyncPending__["d" /* triggerIdle */])();
        // to avoid flicker, we validate positions last time
        this.validateLayouts();
        this.validatePositions();
        this.dispatchImmediately("exitframe");
        //system.dummyCounter++;
        Object(__WEBPACK_IMPORTED_MODULE_6__utils_AsyncPending__["b" /* raf */])(function () {
            _this.update();
        });
    };
    /**
     * Triggers position re-validation on all [[Sprite]] elements that have
     * invalid(ated) positions.
     *
     * @ignore Exclude from docs
     * @todo Maybe should be private?
     */
    System.prototype.validatePositions = function () {
        // invalid positions
        // TODO use iterator instead
        while (this.invalidPositions.length > 0) {
            var sprite = this.invalidPositions[this.invalidPositions.length - 1];
            try {
                sprite.validatePosition();
            }
            catch (e) {
                __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](this.invalidPositions, sprite);
                sprite.raiseCriticalError(e);
            }
        }
    };
    /**
     * Triggers position re-validation on all [[Container]] elements that have
     * invalid(ated) layouts.
     *
     * @ignore Exclude from docs
     * @todo Maybe should be private?
     */
    System.prototype.validateLayouts = function () {
        // invalid positions
        // TODO use iterator instead
        while (this.invalidLayouts.length > 0) {
            var container = this.invalidLayouts[this.invalidLayouts.length - 1];
            try {
                container.validateLayout();
            }
            catch (e) {
                __WEBPACK_IMPORTED_MODULE_12__utils_Array__["k" /* remove */](this.invalidLayouts, container);
                container.raiseCriticalError(e);
            }
        }
    };
    /**
     * (Re)measures all top-level SVG containers for size.
     *
     * @ignore Exclude from docs
     * @todo Maybe should be private?
     */
    System.prototype.measure = function () {
        __WEBPACK_IMPORTED_MODULE_12__utils_Array__["b" /* each */](this.svgContainers, function (svgContainer) {
            if (svgContainer.autoResize) {
                svgContainer.measure();
            }
        });
    };
    /**
     * Sets style property on DOM element.
     *
     * @ignore Exclude from docs
     * @todo Still needed?
     */
    System.prototype.setStyle = function (element, property, value) {
        element.style[property] = value;
    };
    /**
     * Outputs string to console if `verbose` is `true`.
     *
     * @param {any} value Message to output to console
     */
    System.prototype.log = function (value) {
        if (this.verbose) {
            if (console) {
                console.log(value);
            }
        }
    };
    /**
     * amCharts Version.
     *
     * This follows npm's semver specification.
     *
     * @see {@link https://docs.npmjs.com/misc/semver}
     * @type {string}
     */
    System.VERSION = "4.0.0-beta.8";
    return System;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

/**
 * A singleton global instance of [[System]].
 *
 * All code should access this system variable, rather than instantiate their
 * own.
 */
var system = new System();
/**
 * Init the System just once
 */
system.init();
//# sourceMappingURL=System.js.map

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(123)('wks');
var uid = __webpack_require__(66);
var Symbol = __webpack_require__(13).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(16)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(9);
var IE8_DOM_DEFINE = __webpack_require__(254);
var toPrimitive = __webpack_require__(46);
var dP = Object.defineProperty;

exports.f = __webpack_require__(23) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(48);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DictionaryDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Dictionary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return DictionaryTemplate; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__String__ = __webpack_require__(109);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * A disposable dictionary, which when disposed itself will call `dispose()`
 * method on all its items.
 */
var DictionaryDisposer = /** @class */ (function (_super) {
    __extends(DictionaryDisposer, _super);
    function DictionaryDisposer(dict) {
        var _this = this;
        var disposer = dict.events.on("remove", function (x) {
            x.oldValue.dispose();
        });
        _this = _super.call(this, function () {
            disposer.dispose();
            // TODO clear the dictionary ?
            __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](dict.iterator(), function (a) {
                var v = a[1];
                v.dispose();
            });
        }) || this;
        return _this;
    }
    return DictionaryDisposer;
}(__WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */]));

/**
 * A Dictionary is collection where values of some type can be mapped to
 * string keys.
 *
 * You might call it an "associative list" or "associative array".
 */
var Dictionary = /** @class */ (function () {
    /**
     * Constructor
     */
    function Dictionary() {
        this.events = new __WEBPACK_IMPORTED_MODULE_1__EventDispatcher__["a" /* EventDispatcher */]();
        this._dictionary = {};
    }
    /**
     * Returns `true` if key exists in Dictionary.
     *
     * @param  {Key}      key  The key to search for
     * @return {boolean}       `true` if key exists, `false` if it doesn't
     */
    Dictionary.prototype.hasKey = function (key) {
        return __WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key);
    };
    /**
     * Returns the value for a specific key.
     *
     * @param  {Key}          key  The key to search for
     * @return {Optional<T>}       Value for the key, or `undefined` if it doesn't exist
     */
    Dictionary.prototype.getKey = function (key) {
        return this._dictionary[key];
    };
    /**
     * Inserts value at specific key.
     *
     * Will thrown an exception if the key already exists in the dictionary.
     *
     * @param {Key}  key    Key
     * @param {T}    value  Value
     */
    Dictionary.prototype.insertKey = function (key, value) {
        if (__WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key)) {
            throw new Error("Key " + key + " already exists in dictionary");
        }
        else {
            this._dictionary[key] = value;
            if (this.events.isEnabled("insertKey")) {
                this.events.dispatchImmediately("insertKey", {
                    type: "insertKey",
                    target: this,
                    key: key,
                    newValue: value
                });
            }
        }
    };
    /**
     * Adds or updates key/value into dictionary.
     *
     * If the key already exists, the old value will be overwritten.
     *
     * @param  {Key}  key    Key
     * @param  {T}    value  Value
     */
    Dictionary.prototype.setKey = function (key, value) {
        if (__WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key)) {
            var oldValue = this._dictionary[key];
            this._dictionary[key] = value;
            if (this.events.isEnabled("setKey")) {
                this.events.dispatchImmediately("setKey", {
                    type: "setKey",
                    target: this,
                    key: key,
                    oldValue: oldValue,
                    newValue: value
                });
            }
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
        }
        else {
            this._dictionary[key] = value;
            if (this.events.isEnabled("insertKey")) {
                this.events.dispatchImmediately("insertKey", {
                    type: "insertKey",
                    target: this,
                    key: key,
                    newValue: value
                });
            }
        }
    };
    /**
     * Updates the value at specific `key` using custom function.
     *
     * Passes in current value into the function, and uses its output as a new
     * value.
     *
     * @ignore Exclude from docs
     * @param {Key}       key  Key
     * @param {function}  fn   Function to transform the value
     */
    Dictionary.prototype.updateKey = function (key, fn) {
        if (__WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key)) {
            var oldValue = this._dictionary[key];
            var newValue = fn(oldValue);
            this._dictionary[key] = newValue;
            if (this.events.isEnabled("setKey")) {
                this.events.dispatchImmediately("setKey", {
                    type: "setKey",
                    target: this,
                    key: key,
                    oldValue: oldValue,
                    newValue: newValue
                });
            }
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
        }
        else {
            throw new Error("Key " + key + " doesn't exist in dictionary");
        }
    };
    /**
     * Removes value at specific `key` from dictionary.
     *
     * @param {Key}  key  Key to remove
     */
    Dictionary.prototype.removeKey = function (key) {
        if (__WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key)) {
            var oldValue = this._dictionary[key];
            delete this._dictionary[key];
            if (this.events.isEnabled("removeKey")) {
                this.events.dispatchImmediately("removeKey", {
                    type: "removeKey",
                    target: this,
                    key: key,
                    oldValue: oldValue
                });
            }
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
        }
    };
    /**
     * [insertKeyIfEmpty description]
     *
     * @ignore Exclude from docs
     * @todo description
     * @param  {Key}       key      [description]
     * @param  {function}  ifEmpty  [description]
     * @return {T}                  [description]
     */
    Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {
        if (!this.hasKey(key)) {
            this.insertKey(key, ifEmpty());
        }
        return this.getKey(key);
    };
    /**
     * Removes all items from the dictionary.
     */
    Dictionary.prototype.clear = function () {
        var _this = this;
        // TODO dispatch this after clear
        if (this.events.isEnabled("remove")) {
            __WEBPACK_IMPORTED_MODULE_2__Object__["each"](this._dictionary, function (key, value) {
                _this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: _this,
                    oldValue: value
                });
            });
        }
        this._dictionary = {};
        if (this.events.isEnabled("clear")) {
            this.events.dispatchImmediately("clear", {
                type: "clear",
                target: this
            });
        }
    };
    /**
     * Copies items from another Dictionary.
     *
     * @param {Dictionary<Key, T>}  source  A Dictionary to copy items from
     */
    Dictionary.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](source.iterator(), function (a) {
            // TODO fix this type cast
            _this.setKey(a[0], a[1]);
        });
    };
    /**
     * Returns an interator that can be used to iterate through all items in
     * the dictionary.
     *
     * @return {Iterator} Iterator
     */
    Dictionary.prototype.iterator = function () {
        // @todo fix this type after the Iterator bug is fixed
        // https://github.com/Microsoft/TypeScript/issues/16730
        return __WEBPACK_IMPORTED_MODULE_2__Object__["entries"](this._dictionary);
    };
    /**
     * Returns an iterator that can be used to iterate through all items in
     * the dictionary, ordered by key.
     *
     * @ignore Exclude from docs
     * @return {Iterator} Iterator
     */
    Dictionary.prototype.sortedIterator = function () {
        return __WEBPACK_IMPORTED_MODULE_3__Iterator__["sort"](this.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_4__String__["order"](x[0], y[0]); });
    };
    return Dictionary;
}());

/**
 * A version of a [[Dictionary]] that has a "template".
 *
 * A template is an instance of an object, that can be used to create new
 * elements in the list without actually needing to create instances for those.
 *
 * When new element is created in the list, e.g. by calling its `create()`
 * method, an exact copy of the element is created (including properties and
 * other attributes), inserted into the list and returned.
 */
var DictionaryTemplate = /** @class */ (function (_super) {
    __extends(DictionaryTemplate, _super);
    /**
     * Constructor
     *
     * @param {T} t Template object
     */
    function DictionaryTemplate(t) {
        var _this = _super.call(this) || this;
        _this.template = t;
        return _this;
    }
    Object.defineProperty(DictionaryTemplate.prototype, "template", {
        /**
         * @return {T} Template object
         */
        get: function () {
            return this._template;
        },
        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param {T}  v  Template object
         */
        set: function (v) {
            v.isTemplate = true;
            this._template = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all elements from other dictionary.
     *
     * @param {DictionaryTemplate}  source  Source dictionary
     */
    DictionaryTemplate.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](source.iterator(), function (a) {
            // TODO fix this type cast
            // TODO why does this need to clone ?
            _this.setKey(a[0], a[1].clone());
        });
    };
    /**
     * Instantiates a new object of the specified type, adds it to specified
     * `key` in the dictionary, and returns it.
     *
     * @param make  Item type to use. Will use the default type for the dictionary if not specified.
     * @return      Newly created item
     */
    DictionaryTemplate.prototype.create = function (key) {
        var _this = this;
        return this.insertKeyIfEmpty(key, function () { return _this.template.clone(); });
    };
    return DictionaryTemplate;
}(Dictionary));

//# sourceMappingURL=Dictionary.js.map

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(47);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EventDispatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TargetedEventDispatcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AsyncPending__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Type__ = __webpack_require__(2);
/**
 * Event Dispatcher module is used for registering listeners and dispatching
 * events across amCharts system.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * Universal Event Dispatcher.
 *
 * @important
 */
var EventDispatcher = /** @class */ (function () {
    /**
     * Constructor
     */
    function EventDispatcher() {
        this._listeners = [];
        this._killed = [];
        this._disabled = {};
        this._iterating = 0;
        this._enabled = true;
        this._disposed = false;
    }
    /**
     * Returns if this object has been already disposed.
     *
     * @return {boolean} Disposed?
     */
    EventDispatcher.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Dispose (destroy) this object.
     */
    EventDispatcher.prototype.dispose = function () {
        if (!this._disposed) {
            this._disposed = true;
            var a = this._listeners;
            this._iterating = 1;
            this._listeners = null;
            this._disabled = null;
            try {
                __WEBPACK_IMPORTED_MODULE_1__Array__["b" /* each */](a, function (x) {
                    x.disposer.dispose();
                });
            }
            finally {
                this._killed = null;
                this._iterating = null;
            }
        }
    };
    /**
     * Checks if this particular event dispatcher has any listeners set.
     *
     * @return {boolean} Has listeners?
     */
    EventDispatcher.prototype.hasListeners = function () {
        return this._listeners.length !== 0;
    };
    /**
     * Enable dispatching of events if they were previously disabled by
     * `disable()`.
     */
    EventDispatcher.prototype.enable = function () {
        this._enabled = true;
    };
    /**
     * Disable dispatching of events until re-enabled by `enable()`.
     */
    EventDispatcher.prototype.disable = function () {
        this._enabled = false;
    };
    /**
     * Enable dispatching particular event, if it was disabled before by
     * `disableType()`.
     *
     * @param {keyof T} type Event type
     */
    EventDispatcher.prototype.enableType = function (type) {
        delete this._disabled[type];
    };
    /**
     * Disable dispatching of events for a certain event type.
     *
     * Optionally, can set how many dispatches to skip before automatically
     * re-enabling the dispatching.
     *
     * @param {keyof T}            type    Event type
     * @param {number = Infinity}  amount  Number of event dispatches to skip
     */
    EventDispatcher.prototype.disableType = function (type, amount) {
        if (amount === void 0) { amount = Infinity; }
        this._disabled[type] = amount;
    };
    /**
     * Removes listener from dispatcher.
     *
     * Will throw an exception if such listener does not exists.
     *
     * @param {EventListener<T>} listener Listener to remove
     */
    EventDispatcher.prototype._removeListener = function (listener) {
        if (this._iterating === 0) {
            var index = this._listeners.indexOf(listener);
            if (index === -1) {
                throw new Error("Invalid state: could not remove listener");
            }
            this._listeners.splice(index, 1);
        }
        else {
            this._killed.push(listener);
        }
    };
    /**
     * Removes existing listener by certain parameters.
     *
     * @param {boolean}     once      Listener's once setting
     * @param {Key | null}  type      Listener's type
     * @param {A}           callback  Callback function
     * @param {B}           context   Callback context
     */
    EventDispatcher.prototype._removeExistingListener = function (once, type, callback, context) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        var index = __WEBPACK_IMPORTED_MODULE_1__Array__["e" /* findIndex */](this._listeners, function (info) {
            return info.once === once && // TODO is this correct ?
                info.type === type &&
                info.callback === callback &&
                info.context === context;
        });
        if (index !== -1) {
            this._listeners[index].disposer.dispose();
        }
    };
    /**
     * Checks if dispatching for particular event type is enabled.
     *
     * @param  {string}   type  Event type
     * @return {boolean}        Enabled?
     */
    EventDispatcher.prototype.isEnabled = function (type) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        // TODO is this check correct ?
        return this._enabled && this._disabled[type] == null && this._listeners.length > 0;
    };
    /**
     * Checks if there's already a listener with specific parameters.
     *
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @return {boolean}                Has listener?
     */
    EventDispatcher.prototype.has = function (type, callback, context) {
        var index = __WEBPACK_IMPORTED_MODULE_1__Array__["e" /* findIndex */](this._listeners, function (info) {
            return info.once !== true && // Ignoring "once" listeners
                info.type === type &&
                info.callback === callback &&
                info.context === context;
        });
        return index !== -1;
    };
    /**
     * Checks whether event of the particular type should be dispatched.
     *
     * @param  {string}   type  Event type
     * @return {boolean}        Dispatch?
     */
    EventDispatcher.prototype._shouldDispatch = function (type) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        var count = this._disabled[type];
        if (!__WEBPACK_IMPORTED_MODULE_3__Type__["isNumber"](count)) {
            return this._enabled;
        }
        else {
            if (count <= 1) {
                delete this._disabled[type];
            }
            else {
                --this._disabled[type];
            }
            return false;
        }
    };
    /**
     * [_eachListener description]
     *
     * All of this extra code is needed when a listener is removed while iterating
     *
     * @todo Description
     * @param {EventListener<T>) => void} fn [description]
     */
    EventDispatcher.prototype._eachListener = function (fn) {
        var _this = this;
        ++this._iterating;
        try {
            __WEBPACK_IMPORTED_MODULE_1__Array__["b" /* each */](this._listeners, fn);
        }
        finally {
            --this._iterating;
            // TODO should this be inside or outside the finally ?
            if (this._iterating === 0 && this._killed.length !== 0) {
                // Remove killed listeners
                __WEBPACK_IMPORTED_MODULE_1__Array__["b" /* each */](this._killed, function (killed) {
                    _this._removeListener(killed);
                });
                this._killed.length = 0;
            }
        }
    };
    /**
     * Dispatches an event immediately without waiting for next cycle.
     *
     * @param {Key}     type   Event type
     * @param {T[Key]}  event  Event object
     * @todo automatically add in type and target properties if they are missing
     */
    EventDispatcher.prototype.dispatchImmediately = function (type, event) {
        if (this._shouldDispatch(type)) {
            // TODO check if it's faster to use an object of listeners rather than a single big array
            // TODO if the function throws, maybe it should keep going ?
            this._eachListener(function (listener) {
                if (!listener.killed && (listener.type === null || listener.type === type)) {
                    listener.dispatch(type, event);
                }
            });
        }
    };
    /**
     * Shelves the event to be dispatched within next update cycle.
     *
     * @param {Key}     type   Event type
     * @param {T[Key]}  event  Event object
     * @todo automatically add in type and target properties if they are missing
     */
    EventDispatcher.prototype.dispatch = function (type, event) {
        if (this._shouldDispatch(type)) {
            this._eachListener(function (listener) {
                // TODO check if it's faster to use an object of listeners rather than a single big array
                if (!listener.killed && (listener.type === null || listener.type === type)) {
                    // TODO if the function throws, maybe it should keep going ?
                    // TODO dispatch during the update cycle, rather than using whenIdle
                    __WEBPACK_IMPORTED_MODULE_2__AsyncPending__["e" /* whenIdle */](function () {
                        if (!listener.killed) {
                            listener.dispatch(type, event);
                        }
                    });
                }
            });
        }
    };
    /**
     * Creates, catalogs and returns an [[EventListener]].
     *
     * Event listener can be disposed.
     *
     * @param   {boolean}     once      Listener's once setting
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @param   {function}    dispatch
     * @returns {EventListener} An event listener
     */
    EventDispatcher.prototype._on = function (once, type, callback, context, dispatch) {
        var _this = this;
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        this._removeExistingListener(once, type, callback, context);
        var info = {
            type: type,
            callback: callback,
            context: context,
            dispatch: dispatch,
            killed: false,
            once: once,
            disposer: new __WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */](function () {
                info.killed = true;
                _this._removeListener(info);
            })
        };
        this._listeners.push(info);
        return info;
    };
    /**
     * Creates an event listener to be invoked on **any** event.
     *
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @returns {IDisposer}             A disposable event listener
     * @todo what if `listen` is called on the same function twice ?
     */
    EventDispatcher.prototype.onAll = function (callback, context) {
        return this._on(false, null, callback, context, function (type, event) { return callback.call(context, type, event); }).disposer;
    };
    /**
     * Creates an event listener to be invoked on a specific event type.
     *
     * ```TypeScript
     * series.events.on("hide", (ev) => {
     *   console.log("Series hidden: " + ev.target.name);
     * }, this);
     * ```
     * ```JavaScript
     * series.events.on("hide", function(ev) {
     *   console.log("Series hidden: " + ev.target.name);
     * }, this);
     * ```
     * ```JSON
     * {
     *   // ...
     *   "series": [{
     *     // ...
     *     "events": {
     *     	"hide": function(ev) {
     *     	  console.log("Series hidden: " + ev.target.name);
     *     	}
     *     }
     *   }]
     * }
     * ```
     *
     * The above will invoke our custom event handler whenever series we put
     * event on is hidden.
     *
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @returns {IDisposer}             A disposable event listener
     * @todo what if `listen` is called on the same function twice ?
     */
    EventDispatcher.prototype.on = function (type, callback, context) {
        return this._on(false, type, callback, context, function (type, event) { return callback.call(context, event); }).disposer;
    };
    /**
     * Creates an event listener to be invoked on a specific event type once.
     *
     * Once the event listener is invoked, it is automatically disposed.
     *
     * ```TypeScript
     * series.events.on("hide", (ev) => {
     *   console.log("Series hidden: " + ev.target.name);
     * }, this);
     * ```
     * ```JavaScript
     * series.events.on("hide", function(ev) {
     *   console.log("Series hidden: " + ev.target.name);
     * }, this);
     * ```
     * ```JSON
     * {
     *   // ...
     *   "series": [{
     *     // ...
     *     "events": {
     *     	"hide": function(ev) {
     *     	  console.log("Series hidden: " + ev.target.name);
     *     	}
     *     }
     *   }]
     * }
     * ```
     *
     * The above will invoke our custom event handler the first time series we
     * put event on is hidden.
     *
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @returns {IDisposer}             A disposable event listener
     * @todo what if `listen` is called on the same function twice ?
     */
    EventDispatcher.prototype.once = function (type, callback, context) {
        var x = this._on(true, type, callback, context, function (type, event) {
            x.disposer.dispose();
            callback.call(context, event);
        });
        // TODO maybe this should return a different Disposer ?
        return x.disposer;
    };
    /**
     * Removes the event listener with specific parameters.
     *
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     */
    EventDispatcher.prototype.off = function (type, callback, context) {
        this._removeExistingListener(false, type, callback, context);
    };
    /**
     * Copies all dispatcher parameters, including listeners, from another event
     * dispatcher.
     *
     * @param {this} source Source event dispatcher
     */
    EventDispatcher.prototype.copyFrom = function (source) {
        var _this = this;
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        if (source === this) {
            throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
        }
        __WEBPACK_IMPORTED_MODULE_1__Array__["b" /* each */](source._listeners, function (x) {
            // TODO is this correct ?
            if (!x.killed) {
                if (x.type === null) {
                    _this.onAll(x.callback, x.context);
                }
                else if (x.once) {
                    _this.once(x.type, x.callback, x.context);
                }
                else {
                    _this.on(x.type, x.callback, x.context);
                }
            }
        });
    };
    return EventDispatcher;
}());

/**
 * A version of the [[EventDispatcher]] that dispatches events for a specific
 * target object.
 *
 * @type {[type]}
 * @important
 */
var TargetedEventDispatcher = /** @class */ (function (_super) {
    __extends(TargetedEventDispatcher, _super);
    /**
     * Constructor
     *
     * @param {Target} target Event dispatcher target
     */
    function TargetedEventDispatcher(target) {
        var _this = _super.call(this) || this;
        _this.target = target;
        return _this;
    }
    /**
     * Copies all dispatcher parameters, including listeners, from another event
     * dispatcher.
     *
     * @param {this} source Source event dispatcher
     */
    TargetedEventDispatcher.prototype.copyFrom = function (source) {
        var _this = this;
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        if (source === this) {
            throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
        }
        __WEBPACK_IMPORTED_MODULE_1__Array__["b" /* each */](source._listeners, function (x) {
            // TODO very hacky
            if (x.context === source.target) {
                return;
            }
            // TODO is this correct ?
            if (!x.killed) {
                if (x.type === null) {
                    _this.onAll(x.callback, x.context);
                }
                else if (x.once) {
                    _this.once(x.type, x.callback, x.context);
                }
                else {
                    _this.on(x.type, x.callback, x.context);
                }
            }
        });
    };
    return TargetedEventDispatcher;
}(EventDispatcher));

//# sourceMappingURL=EventDispatcher.js.map

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return GlobalAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return globalAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Adapter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SortedList__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Number__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Order__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Type__ = __webpack_require__(2);
/**
 * An Adapter can be used to apply chained synchronous transformations to any
 * value at runtime.
 *
 * Each type class using Adapters must have `adapters` property and adapter
 * interface defined.
 *
 * Adapters can be used to allow external code to apply transformations to any
 * value at any time.
 *
 * For example we have a Weather class which has a method `now()` which returns
 * current temperature.
 *
 * ```
 * function now() {
 *   // ... calculate temperature
 *   let temp = "Temperature now is " + degrees + "F";
 *   return temp;
 * }
 * ```
 *
 * Now, supposed we want to let other classes to modify the output of the
 * `now()`? We just apply an adapter to the `temp` before it is returned:
 *
 * ```
 * temp = this.adapters.apply("now", {
 *   temp: temp,
 *   degrees: degrees
 * }).temp;
 * ```
 *
 * Some other class might tap onto it by defining an Adapter that calculates
 * the temperature in Celsius:
 *
 * weather.adapters.add("now", (arg) => {
 *   arg.temp += "(" + farenheitToCelsius(arg.degrees) + "C)";
 *   return arh;
 * });
 *
 * Furthermore some time-related class could add time:
 *
 * weather.adapters.add("now", (arg) => {
 *   arg.temp += "; the time now is " + (new Date().toLocaleString());
 *   return arh;
 * });
 *
 * So without adapters we would get output like this:
 *
 * ```
 * Temperature now is 90F
 * ```
 *
 * With adapters applied we now have:
 *
 * ```
 * Temperature now is 90F (32C); the time now is 12/11/2012, 7:00:00 PM
 * ```
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * GLOBAL ADAPTER
 * ============================================================================
 * @hidden
 */
/**
 * A global adapter is an adpater that is attached to a class type rather than
 * specific object instance.
 *
 * @ignore Exclude from docs
 */
var GlobalAdapter = /** @class */ (function () {
    function GlobalAdapter() {
        /**
         * Callback id iterator.
         *
         * @type {number}
         */
        this._callbackId = 0;
        /**
         * A list of if callbacks (adapters).
         *
         */
        this._callbacks = new __WEBPACK_IMPORTED_MODULE_0__SortedList__["c" /* SortedList */](function (left, right) {
            return __WEBPACK_IMPORTED_MODULE_2__Order__["a" /* or */](__WEBPACK_IMPORTED_MODULE_1__Number__["order"](left.priority, right.priority), __WEBPACK_IMPORTED_MODULE_1__Number__["order"](left.id, right.id));
        });
    }
    /**
     * Adds a global callback which is not specific to any particular object.
     * Whenever an adapter in any object of the specific class type is invoked
     * global adapters will kick in.
     *
     * @param {any}         type      Class type
     * @param {any}         key       Adapter key
     * @param {any}         callback  Callback function
     * @param {number = 0}  priority  Priority (higher priority meaning adapter will be applied later)
     * @param {any}         scope     Callback function scaope
     */
    GlobalAdapter.prototype.addAll = function (type, key, callback, priority, scope) {
        if (priority === void 0) { priority = 0; }
        this._callbacks.insert({
            id: ++this._callbackId,
            key: key,
            callback: callback,
            priority: priority,
            scope: scope,
            type: type
        });
    };
    /**
     * Returns if there are adapters for specific type available.
     *
     * @param  {Target}   type  Adapter type
     * @param  {Key}      key   Adapter key
     * @return {boolean}
     */
    GlobalAdapter.prototype.isEnabled = function (type, key) {
        // TODO check the type and key
        return this._callbacks.length > 0;
    };
    /**
     * Applies global adapters for the object of the specific type.
     *
     * @param {any}  type   Class type
     * @param {any}  key    Adapter key
     * @param {any}  value  Value
     */
    GlobalAdapter.prototype.applyAll = function (type, key, value) {
        // This is needed to improve the performance and reduce garbage collection
        var callbacks = this._callbacks.values;
        var length = callbacks.length;
        // Cycle through all callbacks and find the ones we need to use
        for (var i = 0; i < length; ++i) {
            var item = callbacks[i];
            if (item.key === key && type instanceof item.type) {
                value = item.callback.call(item.scope, value, type);
            }
        }
        return value;
    };
    return GlobalAdapter;
}());

/**
 * A global Adapter for plugins that want to add specific
 * functionality for any chart, not just specific instance.
 *
 * If you want to add an adapter which applies to all instances of the same
 * object type, like, for instance all slices in PieSeries, you can use
 * global adapter.
 *
 * Global adapter is a system-wide instance, accessible via `globalAdapter`.
 *
 * ```TypeScript
 * amcharts4.globalAdapter.addAll<charts.IPieSeriesAdapters, charts.PieSeries, "fill">(charts.PieSeries. "fill", (value, target) => {
 *   return amcharts4.color("#005500");
 * });
 * ```
 * ```JavaScript
 * amcharts4.globalAdapter.addAll(amcharts4.charts.PieSeries. "fill", (value, target) => {
 *   return amcharts4.color("#005500");
 * });
 * ```
 *
 * @todo Description (improve)
 */
var globalAdapter = new GlobalAdapter();
/**
 * ============================================================================
 * REGULAR ADAPTER
 * ============================================================================
 * @hidden
 */
/**
 * Adapter allows adding ordered callback functions and associating them with a
 * string-based key. An Adapter user can then easily invoke those callbacks to
 * apply custom functions on its input, output or intermediate values.
 *
 * Custom code and plugins can add their own callbacks to modify and enhance
 * core functionality.
 *
 * See the description of `add()` for an example.
 *
 * Almost any object in amCharts4 has own adapter, accessible with `adapter`
 * property.
 *
 * Any adapters added to it will be applied to that object only.
 *
 * ### Global Adapters
 *
 * If you want to add an adapter which applies to all instances of the same
 * object type, like, for instance all slices in PieSeries, you can use
 * global adapter.
 *
 * Global adapter is a system-wide instance, accessible via `globalAdapter`.
 *
 * ```TypeScript
 * amcharts4.globalAdapter.addAll<charts.IPieSeriesAdapters, charts.PieSeries, "fill">(charts.PieSeries. "fill", (value, target) => {
 *   return amcharts4.color("#005500");
 * });
 * ```
 * ```JavaScript
 * amcharts4.globalAdapter.addAll(amcharts4.charts.PieSeries. "fill", (value, target) => {
 *   return amcharts4.color("#005500");
 * });
 * ```
 *
 * {@link https://www.amcharts.com/docs/v4/reference/adapter_module/#globalAdapter_property More info}.
 *
 * @important
 */
var Adapter = /** @class */ (function () {
    /**
     * Constructor, sets the object referece this Adapter should be used for.
     *
     * @param {T} c Object
     */
    function Adapter(c) {
        /**
         * Internal counter for callback ids.
         *
         * @type {number}
         */
        this._callbackId = 0;
        /**
         * A list of adapter callbacks.
         *
         * @param {[type]} $number.order(left.priority, right.priority) [description]
         * @param {[type]} $number.order(left.id,       right.id));	}  [description]
         */
        this._callbacks = new __WEBPACK_IMPORTED_MODULE_0__SortedList__["c" /* SortedList */](function (left, right) {
            return __WEBPACK_IMPORTED_MODULE_2__Order__["a" /* or */](__WEBPACK_IMPORTED_MODULE_1__Number__["order"](left.priority, right.priority), __WEBPACK_IMPORTED_MODULE_1__Number__["order"](left.id, right.id));
        });
        this.object = c;
        // TODO this exposes the internal events
        this.events = this._callbacks.events;
    }
    /**
     * Adds a callback for a specific key.
     *
     * ```TypeScript
     * // Override fill color value and make all slices green
     * chart.series.template.adapter.add("fill", (value, target) => {
     *   return amcharts4.color("#005500");
     * });
     * ```
     * ```JavaScript
     * // Override fill color value and make all slices green
     * chart.series.template.adapter.add("fill", function(value, target) {
     *   return amcharts4.color("#005500");
     * });
     * ```
     * ```JSON
     * {
     *   // ...
     *   "series": [{
     *     // ...
     *     "adapter": {
     *     	// Override fill color value and make all slices green
     *     	"fill": function(value, target) {
     *     	  return amcharts4.color("#005500");
     *     	}
     *     }
     *   }]
     * }
     * ```
     *
     * The above will call user-defined function (adapter) whenever `fill` value
     * is requested from the Pie series, allowing it to override the default
     * using custom code and any fuzzy logic.
     *
     * There can be any number of adapters set on one property key.
     *
     * In this case adapters will be applied in daisy-chain fashion. The first
     * adapter in queue will make its transformation. The next one will have
     * the output of the first adapter as a starting value, etc.
     *
     * The order of the adapters are determined either by the order they were
     * added in, or their `priority` value.
     *
     * The heigher the `priority`, the later in the game adapter will be applied.
     *
     * @param {string}         key       Key
     * @param {any[]) => any}  callback  A callback function
     * @param {number}         priority  The higher priority, the more chance the adapter will be applied last
     * @param {any}            scope     Scope for the callback function
     */
    Adapter.prototype.add = function (key, callback, priority, scope) {
        if (priority === void 0) { priority = 0; }
        this._callbacks.insert({
            id: ++this._callbackId,
            key: key,
            callback: callback,
            priority: priority,
            scope: scope
        });
    };
    /**
     * Checks whether specific adapter is already set.
     *
     * @param   {string}         key       Key
     * @param   {any[]) => any}  callback  A callback function
     * @param   {number}         priority  The higher priority, the more chance the adapter will be applied last
     * @param   {any}            scope     Scope for the callback function
     * @returns                            Adapter set?
     */
    Adapter.prototype.has = function (key, callback, priority, scope) {
        if (priority === void 0) { priority = 0; }
        // @todo Implement actual check
        return false;
    };
    /**
     * Removes adapter callbacks for the specific `key`.
     *
     * If `priority` is specified, only callbacks for that priority are removed.
     *
     * @param {string} key      Key
     * @param {number} priority Priority
     * @todo Implement
     */
    Adapter.prototype.remove = function (key, priority) {
        var _this = this;
        // It has to make a copy because it removes the elements while iterating
        // TODO inefficient
        __WEBPACK_IMPORTED_MODULE_4__utils_Array__["b" /* each */](__WEBPACK_IMPORTED_MODULE_3__utils_Iterator__["toArray"](this._callbacks.iterator()), function (item) {
            // TODO test this
            if (item.key === key && (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](priority) || priority === item.priority)) {
                _this._callbacks.remove(item);
            }
        });
    };
    /**
     * Returns if there are any adapters set for the specific `key`.
     *
     * @returns {boolean} Are there any adapters for the key?
     */
    Adapter.prototype.isEnabled = function (key) {
        // TODO check the key
        return this._callbacks.length > 0 || globalAdapter.isEnabled(this.object, key);
    };
    /**
     * Passes the input value through all the callbacks for the defined `key`.
     *
     * @param  {string}  key      Key
     * @param  {any}     value    Input value
     * @param  {any[]}   ...rest  Rest of the parameters to be passed into callback
     * @return {any}              Output value
     */
    Adapter.prototype.apply = function (key, value) {
        // This is needed to improve the performance and reduce garbage collection
        var callbacks = this._callbacks.values;
        var length = callbacks.length;
        for (var i = 0; i < length; ++i) {
            var item = callbacks[i];
            if (item.key === key) {
                value = item.callback.call(item.scope, value, this.object);
            }
        }
        // Apply global adapters
        value = globalAdapter.applyAll(this.object, key, value);
        return value;
    };
    Object.defineProperty(Adapter.prototype, "keys", {
        /**
         * Returns all adapter keys that are currently in effect.
         *
         * @return {string[]} Adapter keys
         */
        get: function () {
            // TODO inefficient
            return __WEBPACK_IMPORTED_MODULE_3__utils_Iterator__["toArray"](__WEBPACK_IMPORTED_MODULE_3__utils_Iterator__["map"](this._callbacks.iterator(), function (x) { return x.key; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all the adapter callbacks from `source`.
     *
     * @param {Adapter<Target, T>}  source  An Adapter to copy items from
     */
    Adapter.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_3__utils_Iterator__["each"](source._callbacks.iterator(), function (x) {
            _this.add(x.key, x.callback, x.priority, x.scope);
        });
    };
    return Adapter;
}());

//# sourceMappingURL=Adapter.js.map

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(24);
var createDesc = __webpack_require__(65);
module.exports = __webpack_require__(23) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(13);
var hide = __webpack_require__(31);
var has = __webpack_require__(35);
var SRC = __webpack_require__(66)('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(52).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var fails = __webpack_require__(16);
var defined = __webpack_require__(47);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Interaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return interaction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Animation__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__InteractionObject__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__InteractionKeyboardObject__ = __webpack_require__(213);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Inertia__ = __webpack_require__(214);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_DOM__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Keyboard__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Ease__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__utils_Type__ = __webpack_require__(2);
/**
 * Interaction manages all aspects of user interaction - mouse move,
 * click, hover, drag events, touch gestures.
 *
 * [[InteractionObject]] elements that want to use certain events, must attach event
 * listeners to Interaction instance.
 *
 * Interaction itself will not modify [[InteractionObject]] elements, it will be up to
 * those elements to handle interaction information received via event triggers.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

















/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
* Interaction manages all aspects of user interaction - mouse move,
* click, hover, drag events, touch gestures.
*
* [[InteractionObject]] elements that want to use certain events, must attach event
* listeners to Interaction instance.
*
* Interaction itself will not modify [[InteractionObject]] elements, it will be up to
* those elements to handle interaction information received via event triggers.
*
* @see {@link IInteractionEvents} for a list of available events
* @todo Throw exceptions on errors
*/
var Interaction = /** @class */ (function (_super) {
    __extends(Interaction, _super);
    /**
     * Constructor. Sets up universal document-wide move events to handle stuff
     * outside particular chart container.
     */
    function Interaction() {
        var _this = 
        // Call super
        _super.call(this) || this;
        /**
         * EventDispatcher for [[Interaction]].
         *
         * @ignore Exclude from docs
         * @deprecated Use inetraction.body.events instead
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_2__utils_EventDispatcher__["a" /* EventDispatcher */]();
        /**
         * An indicator of global events were already initialized.
         *
         * @type {boolean}
         */
        _this._globalEventsAdded = false;
        /**
         * Holds which mouse event listeners to use.
         *
         * @type {Object}
         */
        _this._pointerEvents = {
            "pointerdown": "mousedown",
            "pointerup": "mouseup",
            "pointermove": "mousemove",
            "wheel": "wheel"
        };
        /**
         * Indicates if Interaction should use only "pointer" type events, like
         * "pointermove", available in all modern browsers, ignoring "legacy"
         * events, like "touchmove".
         *
         * @type {boolean}
         */
        _this._usePointerEventsOnly = false;
        /**
         * List of objects that current have a pointer hovered over them.
         *
         * @type {List<InteractionObject>}
         */
        _this.overObjects = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * List of objects that currently has a pressed pointer.
         *
         * @type {List<InteractionObject>}
         */
        _this.downObjects = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * List of objects that need mouse position to be reported to them.
         *
         * @type {List<InteractionObject>}
         */
        _this.trackedObjects = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * List of objects that are currently being dragged.
         *
         * @type {List<InteractionObject>}
         */
        _this.transformedObjects = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * Holds all known pointers.
         *
         * @type {Dictionary<string, IPointer>}
         */
        _this.pointers = new __WEBPACK_IMPORTED_MODULE_7__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Inertia options that need to be applied to after element drag, if it's
         * `inert = true`.
         *
         * This is just a default, which can and probably will be overridden by
         * actual elements.
         *
         * @type {Dictionary}
         */
        _this.inertiaOptions = new __WEBPACK_IMPORTED_MODULE_7__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Default options for click events. These can be overridden in
         * [[InteractionObject]].
         *
         * @type {IHitOptions}
         */
        _this.hitOptions = {
            "holdTime": 1000,
            "doubleHitTime": 300,
            "delayFirstHit": false,
            "hitTolerance": 10,
            "noFocus": true
        };
        /**
         * Default options for detecting a swipe gesture. These can be overridden in
         * [[InteractionObject]].
         *
         * @type {ISwipeOptions}
         */
        _this.swipeOptions = {
            "time": 500,
            "verticalThreshold": 75,
            "horizontalThreshold": 30
        };
        /**
         * Default options for keyboard operations. These can be overridden in
         * [[InteractionObject]].
         *
         * @type {IKeyboarOptions}
         */
        _this.keyboardOptions = {
            "speed": 0.1,
            "accelleration": 1.2,
            "accellerationDelay": 1000
        };
        // Set class name
        _this.className = "Interaction";
        // Create InteractionObject for <body>
        _this.body = _this.getInteraction(document.body);
        // Detect browser capabilities and determine what event listeners to use
        if (window.hasOwnProperty("PointerEvent")) {
            // IE10+/Edge without touch controls enabled
            _this._pointerEvents.pointerdown = "pointerdown";
            _this._pointerEvents.pointerup = "pointerup";
            _this._pointerEvents.pointermove = "pointermove";
            _this._usePointerEventsOnly = true;
        }
        else if (window.hasOwnProperty("MSPointerEvent")) {
            // IE9
            _this._pointerEvents.pointerdown = "MSPointerDown";
            _this._pointerEvents.pointerup = "MSPointerUp";
            _this._pointerEvents.pointermove = "MSPointerMove";
            _this._usePointerEventsOnly = true;
        }
        else {
            // uses defaults for normal browsers
        }
        // Detect proper mouse wheel events
        if ("onwheel" in document.createElement("div")) {
            // Modern browsers
            _this._pointerEvents.wheel = "wheel";
        }
        else if (__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](document.onmousewheel)) {
            // Webkit and IE support at least "mousewheel"
            _this._pointerEvents.wheel = "mousewheel";
        }
        else {
            // The rest of the legacy browsers
            _this._pointerEvents.wheel = "DOMMouseScroll";
        }
        // Set up default inertia options
        _this.inertiaOptions.setKey("move", {
            "time": 100,
            "duration": 500,
            "factor": 1,
            "easing": __WEBPACK_IMPORTED_MODULE_12__utils_Ease__["polyOut3"]
        });
        _this.inertiaOptions.setKey("resize", {
            "time": 100,
            "duration": 500,
            "factor": 1,
            "easing": __WEBPACK_IMPORTED_MODULE_12__utils_Ease__["polyOut3"]
        });
        _this.inertiaOptions.setKey("rotate", {
            "time": 100,
            "duration": 500,
            "factor": 1,
            "easing": __WEBPACK_IMPORTED_MODULE_12__utils_Ease__["polyOut3"]
        });
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * ==========================================================================
     * Processing
     * ==========================================================================
     * @hidden
     */
    /**
     * Sets up global events.
     *
     * We need this so that we can track drag movement beyond chart's container.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.addGlobalEvents = function () {
        var _this = this;
        if (!this._globalEventsAdded) {
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(document, this._pointerEvents.pointermove, function (ev) { _this.handleGlobalPointerMove(ev); }));
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(document, this._pointerEvents.pointerdown, function (ev) { _this.handleGlobalPointerDown(ev); }));
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(document, this._pointerEvents.pointerup, function (ev) { _this.handleGlobalPointerUp(ev); }));
            if (!this._usePointerEventsOnly) {
                this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(document, "touchmove", function (ev) { _this.handleGlobalTouchMove(ev); }));
                this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(document, "touchstart", function (ev) { _this.handleGlobalTouchStart(ev); }));
                this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(document, "touchend", function (ev) { _this.handleGlobalTouchEnd(ev); }));
            }
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(document, "keydown", function (ev) { _this.handleGlobalKeyDown(ev); }));
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(document, "keyup", function (ev) { _this.handleGlobalKeyUp(ev); }));
            this._globalEventsAdded = true;
        }
    };
    /**
     * Sets if [[InteractionObject]] is clickable.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject} io [[InteractionObject]] instance
     */
    Interaction.prototype.processClickable = function (io) {
        // Add or remove touch events
        this.processTouchable(io);
    };
    /**
     * Sets if [[InteractionObject]] is hoverable.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject} io [[InteractionObject]] instance
     */
    Interaction.prototype.processHoverable = function (io) {
        var _this = this;
        if (io.hoverable || io.trackable) {
            // Add global events
            this.addGlobalEvents();
            // Add hover styles
            this.applyCursorOverStyle(io);
            // Add local events
            if (!io.eventDisposers.hasKey("hoverable")) {
                io.eventDisposers.setKey("hoverable", new __WEBPACK_IMPORTED_MODULE_4__utils_Disposer__["c" /* MultiDisposer */]([
                    Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(io.element, "mouseover", function (e) { return _this.handleMouseOver(io, e); }),
                    Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(io.element, "mouseout", function (e) { return _this.handleMouseOut(io, e); })
                ]));
            }
            if (io.trackable) {
                //sprite.addEventListener("touchmove", this.handleTouchMove, false, this);
            }
        }
        else {
            if (io.eventDisposers.hasKey("hoverable")) {
                io.eventDisposers.getKey("hoverable").dispose();
                io.eventDisposers.removeKey("hoverable");
            }
        }
        // Add or remove touch events
        this.processTouchable(io);
    };
    /**
     * Sets up [[InteractionObject]] as movable. Movable can be any
     * transformation, e.g. drag, swipe, resize, track, or rotate.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processMovable = function (io) {
        // Add unified events
        if (io.draggable || io.swipeable || io.trackable || io.resizable || io.rotatable) {
            // Prep the element
            this.prepElement(io);
            // Add hover styles
            this.applyCursorOverStyle(io);
        }
        // Add or remove touch events
        this.processTouchable(io);
    };
    /**
     * Checks if [[InteractionObject]] is trackable and sets relative events.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processTrackable = function (io) {
        this.processHoverable(io);
        this.processMovable(io);
        this.trackedObjects.moveValue(io);
    };
    /**
     * Checks if [[InteractionObject]] is draggable.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processDraggable = function (io) {
        this.processMovable(io);
    };
    /**
     * Checks if [[InteractionObject]] is swipeable and sets relative events.
     *
     * A swipe event is triggered when a horizontal drag of 75px or more (and
     * less than 30px vertically) occurs within 700 milliseconds. This can be
     * overridden in sprites [[swipeOptions]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processSwipeable = function (io) {
        this.processMovable(io);
    };
    /**
     * Checks if [[InteractionObject]] is resizable and attaches required events
     * to it.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processResizable = function (io) {
        this.processMovable(io);
    };
    /**
     * Checks if [[InteractionObject]] is rotatable and attaches required events
     * to it.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processRotatable = function (io) {
        this.processMovable(io);
    };
    /**
     * Checks if [[InteractionObject]] is supposed to capture mouse wheel events
     * and prepares it to catch those events.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processWheelable = function (io) {
        var _this = this;
        if (io.wheelable) {
            io.hoverable = true;
            if (!io.eventDisposers.hasKey("wheelable")) {
                io.eventDisposers.setKey("wheelable", Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(io.element, this._pointerEvents.wheel, function (e) { return _this.handleMouseWheel(io, e); }));
            }
        }
        else {
            if (io.eventDisposers.hasKey("wheelable")) {
                io.eventDisposers.getKey("wheelable").dispose();
                io.eventDisposers.removeKey("wheelable");
            }
        }
    };
    /**
     * Checks if [[InteractionObject]] is focusable. A focusable element is an
     * element that will be highlighted when users presses TAB key. If the
     * element is focusable, this function will attach relative focus/blur
     * events to it.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processFocusable = function (io) {
        var _this = this;
        if (io.focusable === true && (io.tabindex > -1)) {
            if (!io.eventDisposers.hasKey("focusable")) {
                io.eventDisposers.setKey("focusable", new __WEBPACK_IMPORTED_MODULE_4__utils_Disposer__["c" /* MultiDisposer */]([
                    Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(io.element, "focus", function (e) { return _this.handleFocus(io, e); }),
                    Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(io.element, "blur", function (e) { return _this.handleBlur(io, e); })
                ]));
            }
        }
        else {
            if (io.eventDisposers.hasKey("focusable")) {
                io.eventDisposers.getKey("focusable").dispose();
                io.eventDisposers.removeKey("focusable");
            }
        }
    };
    /**
     * Checks if [[InteractionObject]] is "touchable". It means any interaction
     * whatsoever: mouse click, touch screen tap, swipe, drag, resize, etc.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processTouchable = function (io) {
        var _this = this;
        // Add unified events
        if (io.clickable || io.hoverable || io.trackable || io.draggable || io.swipeable || io.resizable || io.rotatable) {
            // Add global events
            this.addGlobalEvents();
            // Add local events
            if (!io.eventDisposers.hasKey("touchable")) {
                if (this._usePointerEventsOnly) {
                    io.eventDisposers.setKey("touchable", new __WEBPACK_IMPORTED_MODULE_4__utils_Disposer__["c" /* MultiDisposer */]([
                        Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(io.element, this._pointerEvents.pointerdown, function (e) { return _this.handlePointerDown(io, e); }),
                        Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(io.element, "touchstart", function (e) { return _this.preventTouchAction(e); })
                    ]));
                }
                else {
                    io.eventDisposers.setKey("touchable", new __WEBPACK_IMPORTED_MODULE_4__utils_Disposer__["c" /* MultiDisposer */]([
                        Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(io.element, this._pointerEvents.pointerdown, function (e) { return _this.handlePointerDown(io, e); }),
                        Object(__WEBPACK_IMPORTED_MODULE_9__utils_DOM__["d" /* addEventListener */])(io.element, "touchstart", function (e) { return _this.handleTouchDown(io, e); })
                    ]));
                }
            }
        }
        else {
            if (io.eventDisposers.hasKey("touchable")) {
                io.eventDisposers.getKey("touchable").dispose();
                io.eventDisposers.removeKey("touchable");
            }
        }
    };
    /**
     * ==========================================================================
     * Non-pointer events
     * ==========================================================================
     * @hidden
     */
    /**
     * Dispatches "focus" event when element gains focus.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {FocusEvent}         ev  Original event
     */
    Interaction.prototype.handleFocus = function (io, ev) {
        io.isFocused = true;
        if (io.events.isEnabled("focus")) {
            var imev = {
                type: "focus",
                target: io,
                event: ev
            };
            io.events.dispatchImmediately("focus", imev);
        }
    };
    /**
     * Dispatches "blur" event when element loses focus.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {FocusEvent}         ev  Original event
     */
    Interaction.prototype.handleBlur = function (io, ev) {
        io.isFocused = false;
        if (io.events.isEnabled("blur")) {
            var imev = {
                type: "blur",
                target: io,
                event: ev
            };
            io.events.dispatchImmediately("blur", imev);
        }
    };
    /**
     * ==========================================================================
     * Global keyboard-related even handlers
     * ==========================================================================
     * @hidden
     */
    /**
     * Checks if there is an item that has currently focus and that they key is
     * one of the directional keys. If both of the conditions are true, it
     * creates an object to simulate movement of dragable element with keyboard.
     *
     * @ignore Exclude from docs
     * @param {KeyboardEvent} ev An original keyboard event
     */
    Interaction.prototype.handleGlobalKeyDown = function (ev) {
        if (this.focusedObject) {
            if (__WEBPACK_IMPORTED_MODULE_11__utils_Keyboard__["b" /* keyboard */].isKey(ev, "esc")) {
                // ESC removes focus
                __WEBPACK_IMPORTED_MODULE_9__utils_DOM__["e" /* blur */]();
            }
            else if (this.focusedObject.draggable && __WEBPACK_IMPORTED_MODULE_11__utils_Keyboard__["b" /* keyboard */].isKey(ev, ["up", "down", "left", "right"])) {
                // Prevent scrolling of the document
                ev.preventDefault();
                // Get focused object
                var io = this.focusedObject;
                // Get particular key
                var disposerKey = "interactionKeyboardObject";
                // If such disposer already exists we know the event is going on so we
                // just move on
                if (io.eventDisposers.hasKey(disposerKey)) {
                    return;
                }
                // Create a keyboard mover
                var ko = new __WEBPACK_IMPORTED_MODULE_6__InteractionKeyboardObject__["a" /* InteractionKeyboardObject */](io);
                io.eventDisposers.setKey(disposerKey, ko);
                ko.keyboardEvent = ev;
                switch (__WEBPACK_IMPORTED_MODULE_11__utils_Keyboard__["b" /* keyboard */].getEventKey(ev)) {
                    case "up":
                        ko.directionY = -1;
                        break;
                    case "down":
                        ko.directionY = 1;
                        break;
                    case "left":
                        ko.directionX = -1;
                        break;
                    case "right":
                        ko.directionX = 1;
                        break;
                }
            }
        }
    };
    /**
     * Dispatches related events when the keyboard key is realeasd.
     *
     * @ignore Exclude from docs
     * @param {KeyboardEvent} ev An original keyboard event
     */
    Interaction.prototype.handleGlobalKeyUp = function (ev) {
        var disposerKey = "interactionKeyboardObject";
        if (this.focusedObject && this.focusedObject.eventDisposers.hasKey(disposerKey)) {
            // Prevent scrolling of the document
            ev.preventDefault();
            // Dispose stuff
            this.focusedObject.eventDisposers.getKey(disposerKey).dispose();
            this.focusedObject.eventDisposers.removeKey(disposerKey);
        }
    };
    /**
     * ==========================================================================
     * Global pointer-related even handlers
     * ==========================================================================
     * @hidden
     */
    /**
     * Handler for a global "pointermove" event.
     *
     * @ignore Exclude from docs
     * @param {MouseEvent} ev Event object
     */
    Interaction.prototype.handleGlobalPointerMove = function (ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Prepare and fire global event
        if (this.events.isEnabled("track")) {
            var imev = {
                type: "track",
                target: this,
                event: ev,
                pointer: pointer
            };
            this.events.dispatchImmediately("track", imev);
        }
        // Track
        this.addBreadCrumb(pointer, pointer.point);
        // Process further
        this.handleMove(pointer, ev);
    };
    /**
     * Handler for a global "pointerdown" event.
     *
     * @ignore Exclude from docs
     * @param {MouseEvent} ev Event object
     */
    Interaction.prototype.handleGlobalPointerDown = function (ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Prepare and fire global event
        if (this.events.isEnabled("down")) {
            var imev = {
                type: "down",
                target: this,
                event: ev,
                pointer: pointer
            };
            this.events.dispatchImmediately("down", imev);
        }
    };
    /**
     * Prevents touch action from firing.
     *
     * @ignore Exclude from docs
     * @param {MouseEvent} ev Event
     */
    Interaction.prototype.preventTouchAction = function (ev) {
        if (!ev.defaultPrevented) {
            ev.preventDefault();
        }
    };
    /**
     * Handler for a global "pointerup" event.
     *
     * @ignore Exclude from docs
     * @param {MouseEvent} ev Event object
     */
    Interaction.prototype.handleGlobalPointerUp = function (ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Prepare and fire global event
        if (this.events.isEnabled("up")) {
            var imev = {
                type: "up",
                target: this,
                event: ev,
                pointer: pointer
            };
            this.events.dispatchImmediately("up", imev);
        }
        // Process further
        this.handleUp(pointer, ev);
    };
    /**
 * ==========================================================================
 * Global touch-related even handlers
 * ==========================================================================
 */
    /**
     * Handler for a global "touchmove" event.
     *
     * @ignore Exclude from docs
     * @param {TouchEvent} ev Event object
     */
    Interaction.prototype.handleGlobalTouchMove = function (ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        /*ev.stopPropagation();
        if (ev.defaultPrevented) {
            ev.preventDefault();
        }*/
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
            // Get pointer
            var pointer = this.getPointer(ev.changedTouches[i]);
            // Prepare and fire global event
            if (this.events.isEnabled("track")) {
                var imev = {
                    type: "track",
                    target: this,
                    event: ev,
                    pointer: pointer
                };
                this.events.dispatchImmediately("track", imev);
            }
            // Track
            this.addBreadCrumb(pointer, pointer.point);
            // Process further
            this.handleMove(pointer, ev);
        }
    };
    /**
     * Handler for a global "touchstart" event.
     *
     * @ignore Exclude from docs
     * @param {TouchEvent} ev Event object
     */
    Interaction.prototype.handleGlobalTouchStart = function (ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        /*ev.preventDefault();
        if (ev.defaultPrevented) {
            ev.stopPropagation();
        }*/
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
            // Get pointer
            var pointer = this.getPointer(ev.changedTouches[i]);
            // Prepare and fire global event
            if (this.events.isEnabled("down")) {
                var imev = {
                    type: "down",
                    target: this,
                    event: ev,
                    pointer: pointer
                };
                this.events.dispatchImmediately("down", imev);
            }
        }
    };
    /**
     * Handler for a global "touchend" event.
     *
     * @ignore Exclude from docs
     * @param {TouchEvent} ev Event object
     */
    Interaction.prototype.handleGlobalTouchEnd = function (ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        /*ev.stopPropagation();
        if (ev.defaultPrevented) {
            ev.preventDefault();
        }*/
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
            // Get pointer
            var pointer = this.getPointer(ev.changedTouches[i]);
            // Prepare and fire global event
            if (this.events.isEnabled("up")) {
                var imev = {
                    type: "up",
                    target: this,
                    event: ev,
                    pointer: pointer
                };
                this.events.dispatchImmediately("up", imev);
            }
            // Handle element-related events
            this.handleUp(pointer, ev);
        }
    };
    /**
     * ==========================================================================
     * Element-specific pointer-related even handlers
     * ==========================================================================
     * @hidden
     */
    /**
     * Handles event when pointer is over [[InteractionObject]] and button is
     * pressed.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}          io  Element
     * @param {MouseEvent | PointerEvent}  ev  Original event
     */
    Interaction.prototype.handlePointerDown = function (io, ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        //ev.preventDefault();
        //ev.stopPropagation();
        //if (ev.defaultPrevented) {
        //}
        // Get pointer
        var pointer = this.getPointer(ev);
        // Set mouse button
        pointer.button = ev.which;
        // Reset pointer
        this.resetPointer(pointer);
        // Process down
        this.handleDown(io, pointer, ev);
    };
    /**
     * Handles event when [[InteractionObject]] is hovered by a mouse pointer.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {MouseEvent}         ev  Original event
     */
    Interaction.prototype.handleMouseOver = function (io, ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Lock wheel
        if (io.wheelable) {
            this.lockWheel();
        }
        // Process down
        this.handleOver(io, pointer, ev);
    };
    /**
     * Handles event when [[InteractionObject]] loses hover from a mouse pointer.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {MouseEvent}         ev  Original event
     */
    Interaction.prototype.handleMouseOut = function (io, ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Lock wheel
        if (io.wheelable) {
            this.unlockWheel();
        }
        // Process down
        this.handleOut(io, pointer, ev);
    };
    /**
     * Handles event when mouse wheel is crolled over the [[InteractionObject]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {WheelEvent}         ev  Original event
     * @todo Investigate more-cross browser stuff https://developer.mozilla.org/en-US/docs/Web/Events/wheel
     */
    Interaction.prototype.handleMouseWheel = function (io, ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Init delta values
        var deltaX = 0, deltaY = 0;
        // Calculate deltas
        if (ev instanceof WheelEvent) {
            deltaX = Math.round(ev.deltaX);
            deltaY = Math.round(ev.deltaY);
        }
        else {
            throw new Error("Invalid event type");
        }
        // Handle the event
        this.handleWheel(io, pointer, deltaX, deltaY, ev);
    };
    /**
     * ==========================================================================
     * Element-specific touch-related even handlers
     * ==========================================================================
     * @hidden
     */
    /**
      * Handles an event when an [[InteractionObject]] is touched on a touch
      * device.
      *
      * @ignore Exclude from docs
      * @param {InteractionObject}  io  Element
      * @param {TouchEvent}         ev  Original event
      */
    Interaction.prototype.handleTouchDown = function (io, ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        /*ev.stopPropagation();
        if (ev.defaultPrevented) {
            ev.preventDefault();
        }*/
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
            // Get pointer
            var pointer = this.getPointer(ev.changedTouches[i]);
            // Reset pointer
            this.resetPointer(pointer);
            // Process down
            this.handleDown(io, pointer, ev);
        }
    };
    /**
     * ==========================================================================
     * Universal handlers
     * ==========================================================================
     * @hidden
     */
    /**
     * Handles click/tap. Checks for doublehit.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Interaction object
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleHit = function (io, pointer, ev) {
        // Check if this is a double-hit
        var now = new Date().getTime();
        if (io.lastHit >= (now - this.getHitOption(io, "doubleHitTime"))) {
            // Yup - it's a double-hit
            // Cancel the hit
            //clearTimeout(io.lastHitPointer.hitTimeout);
            // Clear last hit
            io.lastHit = undefined;
            io.lastHitPointer = undefined;
            // Dispatch event
            if (io.events.isEnabled("doublehit")) {
                var imev = {
                    type: "doublehit",
                    target: io,
                    point: pointer.point,
                    event: ev
                };
                io.events.dispatchImmediately("doublehit", imev);
            }
        }
        else {
            // Log last hit
            io.lastHit = now;
            io.lastHitPointer = pointer;
            if (this.getHitOption(io, "delayFirstHit")) {
                // Schedule hit report event to element
                /*io.lastHitPointer.hitTimeout = setTimeout(() => {
                    if (pointer.button === 3) {
                        if (io.events.isEnabled("rightclick")) {
                            let imev: AMEvent<InteractionObject, InteractionObjectEvents>["rightclick"] = {
                                type: "rightclick",
                                target: io,
                                event: ev
                            };
                            io.events.dispatchImmediately("rightclick", imev);
                        }

                    } else {
                        if (io.events.isEnabled("hit")) {
                            let imev: AMEvent<InteractionObject, InteractionObjectEvents>["hit"] = {
                                type: "hit",
                                target: io,
                                event: ev,
                                point: pointer.point
                            };
                            io.events.dispatchImmediately("hit", imev);
                        }
                    }
                }, this.getHitOption(io, "doubleHitTime"));*/
            }
            else {
                if (pointer.button === 3) {
                    // Execute HIT now
                    if (io.events.isEnabled("rightclick")) {
                        var imev = {
                            type: "rightclick",
                            target: io,
                            event: ev
                        };
                        io.events.dispatchImmediately("rightclick", imev);
                    }
                }
                else {
                    if (io.events.isEnabled("hit")) {
                        var imev = {
                            type: "hit",
                            target: io,
                            event: ev,
                            point: pointer.point
                        };
                        io.events.dispatchImmediately("hit", imev);
                    }
                }
            }
        }
    };
    /**
     * Handles pointer hovering over [[InteractionObject]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Interaction object
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleOver = function (io, pointer, ev) {
        if (!io.hoverable) {
            return;
        }
        // Add pointer to object
        io.overPointers.moveValue(pointer);
        // First one?
        if (io.overPointers.length === 1) {
            // Add to hovered elements (moved to InteractionObject)
            //this.overObjects.moveValue(io);
            // Report event to interaction object (but only for the first time)
            if (!io.isHover) {
                // Set element as hovered
                io.isHover = true;
                // Event
                if (io.events.isEnabled("over")) {
                    var imev = {
                        type: "over",
                        target: io,
                        event: ev,
                        pointer: pointer
                    };
                    io.events.dispatchImmediately("over", imev);
                }
            }
        }
    };
    /**
     * Handles when [[InteractionObject]] is no longer hovered.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Interaction object
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleOut = function (io, pointer, ev) {
        if (!io.hoverable) {
            return;
        }
        // Remove pointer from object
        io.overPointers.removeValue(pointer);
        // If there are no over and down pointers left, report OUT event
        // We need to check downPointers here because we might be dragging an item
        // that is constrained to certain area, but the mouse is already outside
        // that area. In this case we don't want to trigger an out event, not until
        // down pointer is rised.
        if (io.overPointers.length === 0) {
            // Remove from hovered objects (moved to InteractionObject)
            //this.overObjects.removeValue(io);
            // Report event to InteractionObject (but only when the last hover leaves)
            if (io.isHover) {
                if (io.downPointers.length === 0) {
                    if (io.lastOutEvent) {
                        io.lastOutEvent = undefined;
                    }
                    io.isHover = false;
                    if (io.events.isEnabled("out")) {
                        var imev = {
                            type: "out",
                            target: io,
                            event: ev,
                            pointer: pointer
                        };
                        io.events.dispatchImmediately("out", imev);
                    }
                }
                else {
                    io.lastOutEvent = ev;
                }
            }
        }
    };
    /**
     * Performs tasks on pointer down.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Element
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleDown = function (io, pointer, ev) {
        // Stop inertia animations if they're currently being played out
        if (io.inert) {
            this.stopInertia(io);
        }
        // Log last down event
        pointer.lastDownEvent = ev;
        // Add Pointer in object
        io.downPointers.moveValue(pointer);
        // Lose focus if needed
        if (io.focusable && this.getHitOption(io, "noFocus")) {
            if (this.focusedObject) {
                __WEBPACK_IMPORTED_MODULE_9__utils_DOM__["e" /* blur */]();
            }
            ev.preventDefault();
        }
        io.isDown = true;
        // Report event
        if (io.events.isEnabled("down")) {
            var imev = {
                type: "down",
                target: io,
                event: ev,
                pointer: pointer
            };
            io.events.dispatchImmediately("down", imev);
        }
        // Apply styles if necessary
        this.applyCursorDownStyle(io, pointer);
        // Check if element is already hovered
        // (can't be pressed down without hovering)
        this.handleOver(io, pointer, ev);
        // First down pointer?
        if (io.downPointers.length === 1) {
            // Start hold timeout
            /*pointer.holdTimeout = setTimeout(() => {
                if (io.events.isEnabled("hold")) {
                    let imev: AMEvent<InteractionObject, InteractionObjectEvents>["hold"] = {
                        type: "hold",
                        target: io,
                        event: ev,
                        pointer: pointer
                    };
                    io.events.dispatchImmediately("hold", imev);
                }
            }, this.getHitOption(io, "holdTime"));*/
        }
        else {
            this.cancelHold(io);
        }
        // If element is draggable we prepare and postpone DRAG_START event (until
        // it is actually moved)
        if (io.draggable) {
            this.processDragStart(io, pointer, ev);
        }
        // Set up swipe timeout
        if (io.swipeable) {
            pointer.swipeCanceled = false;
            /*pointer.swipeTimeout = setTimeout(function() {
                pointer.swipeCanceled = true;
            }, this.getSwipeOption(io, "time"));*/
        }
    };
    /**
     * Handles pointer move.
     *
     * @ignore Exclude from docs
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleMove = function (pointer, ev) {
        var _this = this;
        // Process hovered elements
        // We check if the element became unhovered without reporting the mouseout
        // event. (it happens in some cases)
        if (!pointer.touch) {
            __WEBPACK_IMPORTED_MODULE_14__utils_Iterator__["each"](this.overObjects.backwards().iterator(), function (io) {
                // Is this pointer relevant to element?
                if (io.overPointers.contains(pointer) && io.hoverable) {
                    // Check if the element is still hovered
                    var reset = false;
                    if (io.element) {
                        if (!io.element.contains(pointer.lastEvent.target)) {
                            reset = true;
                        }
                    }
                    else {
                        reset = true;
                    }
                    if (reset) {
                        _this.handleOut(io, pointer, ev);
                    }
                }
            });
        }
        // Override only if we have objects currently being dragged or otherwise
        // interacted with
        if (this.transformedObjects.length) {
            ev.preventDefault();
        }
        // Process down elements
        __WEBPACK_IMPORTED_MODULE_14__utils_Iterator__["each"](this.transformedObjects.backwards().iterator(), function (io) {
            // Is this pointer relevant to element?
            if (io.downPointers.contains(pointer) &&
                // Swipe still happening?
                !(io.swipeable && _this.swiping(io, pointer)) &&
                (io.draggable || io.resizable || io.rotatable)) {
                _this.handleTransform(io, ev);
            }
        });
        // Process tracked elements
        __WEBPACK_IMPORTED_MODULE_14__utils_Iterator__["each"](this.trackedObjects.backwards().iterator(), function (io) {
            // Is this pointer relevant to element?
            // @todo check if this is check is necessary
            /*if (!io.overPointers.contains(pointer)) {
                continue;
            }*/
            _this.handleTrack(io, pointer, ev);
        });
    };
    /**
     * Handles reporting of pointer movement.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Element
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleTrack = function (io, pointer, ev) {
        // Do nothing if the cursor did not actually move
        if (!this.moved(pointer, 0)) {
            return;
        }
        // Initiate TRACK event
        if (io.events.isEnabled("track")) {
            var imev = {
                type: "track",
                target: io,
                event: ev,
                point: pointer.point,
                pointer: pointer
            };
            io.events.dispatchImmediately("track", imev);
        }
    };
    /**
     * Performs tasks on pointer up.
     *
     * @ignore Exclude from docs
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleUp = function (pointer, ev) {
        var _this = this;
        // Log last up event
        pointer.lastUpEvent = ev;
        // Process hovered elements (but only if it's a touch pointer)
        if (pointer.touch) {
            __WEBPACK_IMPORTED_MODULE_14__utils_Iterator__["each"](this.overObjects.backwards().iterator(), function (io) {
                // Is this pointer relevant to element?
                if (io.overPointers.contains(pointer)) {
                    // Remove from over pointers
                    io.overPointers.removeValue(pointer);
                    // No over pointers left?
                    if (io.overPointers.length === 0) {
                        _this.handleOut(io, pointer, ev);
                        //this.overObjects.removeValue(io);
                        //io.isHover = false;
                    }
                }
            });
        }
        // Process down objects
        __WEBPACK_IMPORTED_MODULE_14__utils_Iterator__["each"](this.downObjects.backwards().iterator(), function (io) {
            // Is this pointer relevant to element?
            if (io && io.downPointers.contains(pointer)) {
                // Clear HOLD timeout just in case
                //this.cancelHold(io);
                // Restore styles
                _this.restoreCursorDownStyle(io, pointer);
                // Remove from over pointers
                io.downPointers.removeValue(pointer);
                // Initiate UP event
                if (io.events.isEnabled("up")) {
                    var imev = {
                        type: "up",
                        target: io,
                        event: ev,
                        pointer: pointer
                    };
                    io.events.dispatchImmediately("up", imev);
                }
                // Initiate delayed OUT event
                if (io.lastOutEvent) {
                    _this.handleOut(io, pointer, io.lastOutEvent);
                }
                // Handle swiping-related stuff
                if (io.swipeable && _this.swiped(io, pointer)) {
                    // Swiped - nothing else should happen
                    _this.handleSwipe(io, pointer, ev);
                }
                else {
                    // Check if it maybe a click
                    if (io.clickable && !_this.moved(pointer, _this.getHitOption(io, "hitTolerance"))) {
                        _this.handleHit(io, pointer, ev);
                    }
                    // Remove from down objects if no more pointers pressing down
                    if (io.downPointers.length === 0) {
                        io.isDown = false;
                    }
                    // Do extra work for inert draggable objects
                    if (io.inert && _this.moved(pointer, _this.getHitOption(io, "hitTolerance"))) {
                        _this.handleInertia(io, pointer);
                    }
                    else if (io.draggable) {
                        _this.processDragStop(io, pointer, ev);
                    }
                }
            }
        });
        // No more down pointers?
        /*if (this.transformedObjects.length === 0) {
            this.unlockDocument();
        }*/
        // Reset pointer
        this.resetPointer(pointer);
    };
    /**
     * Handles swipe action.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Element
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleSwipe = function (io, pointer, ev) {
        // We pass in InteractionEvent with shift in mouse coordinates
        // between when the drag started and ended
        if (io.events.isEnabled("swipe")) {
            var imev = {
                type: "swipe",
                target: io,
                event: ev
            };
            io.events.dispatchImmediately("swipe", imev);
        }
        if (pointer.startPoint.x < pointer.point.x) {
            if (io.events.isEnabled("swiperight")) {
                var imev = {
                    type: "swiperight",
                    target: io,
                    event: ev
                };
                io.events.dispatchImmediately("swiperight", imev);
            }
        }
        else {
            if (io.events.isEnabled("swipeleft")) {
                var imev = {
                    type: "swipeleft",
                    target: io,
                    event: ev
                };
                io.events.dispatchImmediately("swipeleft", imev);
            }
        }
    };
    /**
     * Handles event triggering for wheel rotation.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     * @param {number}             deltaX   Horizontal shift
     * @param {number}             deltaY   Vertical shift
     * @param {WheelEvent}         ev       Original event
     */
    Interaction.prototype.handleWheel = function (io, pointer, deltaX, deltaY, ev) {
        var shift = {
            x: deltaX,
            y: deltaY
        };
        // Trigger generic WHEEL event
        if (io.events.isEnabled("swiperight")) {
            io.events.dispatchImmediately("wheel", {
                type: "wheel",
                target: io,
                event: ev,
                point: pointer.point,
                shift: shift
            });
        }
        // Trigger direction-specific events
        // Horizontal
        if (deltaX < 0) {
            if (io.events.isEnabled("wheelleft")) {
                io.events.dispatchImmediately("wheelleft", {
                    type: "wheelleft",
                    target: io,
                    event: ev,
                    point: pointer.point,
                    shift: shift
                });
            }
        }
        else if (deltaX > 0) {
            if (io.events.isEnabled("swiperight")) {
                io.events.dispatchImmediately("wheelright", {
                    type: "wheelright",
                    target: io,
                    event: ev,
                    point: pointer.point,
                    shift: shift
                });
            }
            // Vertical
        }
        else if (deltaY < 0) {
            if (io.events.isEnabled("wheelup")) {
                io.events.dispatchImmediately("wheelup", {
                    type: "wheelup",
                    target: io,
                    event: ev,
                    point: pointer.point,
                    shift: shift
                });
            }
        }
        else if (deltaY > 0) {
            if (io.events.isEnabled("wheeldown")) {
                io.events.dispatchImmediately("wheeldown", {
                    type: "wheeldown",
                    target: io,
                    event: ev,
                    point: pointer.point,
                    shift: shift
                });
            }
        }
    };
    /**
     * Initiates inertia checking sub-routines for different movement types:
     * drag, resize, rotate.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}   sprite
     * @param {IPointer}            pointer
     */
    Interaction.prototype.handleInertia = function (io, pointer) {
        if (io.draggable && io.downPointers.length === 0) {
            this.handleMoveInertia(io, pointer);
        }
        if (io.rotatable && io.downPointers.length === 1) {
            this.handleRotateInertia(io, pointer);
        }
        if (io.resizable && io.downPointers.length > 1) {
            this.handleResizeInertia(io, pointer);
        }
    };
    /**
     * Continues moving the element to simulate the effect of inertia. Happens
     * when `inert` and `draggable` object is dragged and then released.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.handleMoveInertia = function (io, pointer) {
        // Init inertia object
        var inertia = new __WEBPACK_IMPORTED_MODULE_8__Inertia__["a" /* Inertia */]();
        inertia.interaction = io;
        inertia.type = "move";
        inertia.point = {
            "x": pointer.point.x,
            "y": pointer.point.y
        };
        inertia.startPoint = {
            "x": pointer.startPoint.x,
            "y": pointer.startPoint.y
        };
        // Get inertia data
        var ref = this.getTrailPoint(pointer, new Date().getTime() - this.getInertiaOption(io, "move", "time"));
        if (typeof ref === "undefined") {
            this.processDragStop(io, pointer, pointer.lastUpEvent);
            return;
        }
        // Init animation options
        var factor = this.getInertiaOption(io, "move", "factor");
        var animationOptions = [{
                "to": pointer.point.x + (pointer.point.x - ref.point.x) * factor,
                "property": "x"
            }, {
                "to": pointer.point.y + (pointer.point.y - ref.point.y) * factor,
                "property": "y"
            }];
        // Start animation
        var animation = new __WEBPACK_IMPORTED_MODULE_3__utils_Animation__["a" /* Animation */](inertia, animationOptions, this.getInertiaOption(io, "move", "duration"), this.getInertiaOption(io, "move", "easing")).start();
        this._disposers.push(animation.events.on("animationend", function (ev) {
            inertia.done();
        }));
        // Add inertia object
        io.inertias.setKey("move", inertia);
    };
    /**
     * Continues rotation of a `rotatable` element after it is rotated and
     * released.
     *
     * **NOTE:** this is is just a placeholder function. No actual functionality
     * is implemented, yet.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     * @todo Implement functionality
     */
    Interaction.prototype.handleRotateInertia = function (io, pointer) {
        // Some day, folks. Some day...
    };
    /**
     * Continues resizing of a `resizable` element after it is resized and
     * released.
     *
     * **NOTE:** this is is just a placeholder function. No actual fucntionality
     * is implemented, yet.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.handleResizeInertia = function (io, pointer) {
        // Some day, folks. Some day...
    };
    /**
     * Recalculates element's position, size and rotation based on position of
     * all its related pointers.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io  Element
     * @param {MouseEvent | TouchEvent}  ev  Original event
     */
    Interaction.prototype.handleTransform = function (io, ev) {
        // Get primary pointer and its respective points
        var pointer1 = io.downPointers.getIndex(0);
        var point1 = pointer1.point;
        var startPoint1 = pointer1.startPoint;
        // Init secondary pointer
        var pointer2 = io.downPointers.getIndex(1);
        var point2;
        var startPoint2;
        // Determine if it's a sinngle pointer or multi
        var singlePoint = true;
        if (io.downPointers.length > 1) {
            // Several pointers down
            singlePoint = false;
            // Get second pointer
            point2 = pointer2.point;
            startPoint2 = pointer2.startPoint;
        }
        else {
            // Just one pointer down
            singlePoint = true;
            // Use center of the sprite to simulate "second" point of touch
            point2 = {
                "x": io.originalPosition.x,
                "y": io.originalPosition.y
            };
            startPoint2 = point2;
        }
        // Primary touch point moved?
        var pointer1Moved = this.moved(pointer1, 0);
        // Report DRAG_START if necessary
        if (io.draggable && pointer1.dragStartEvents.length && pointer1Moved) {
            if (io.events.isEnabled("dragstart")) {
                io.events.dispatchImmediately("dragstart", pointer1.dragStartEvents.shift());
            }
            //delete pointer1.dragStartEvents;
        }
        // Determine what we do in order of superiority
        if (singlePoint && io.draggable) {
            // We have only one pointer and the Sprite is draggable
            // There's nothing else to be done - just move it
            this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved);
        }
        else {
            // Check if second touch point moved
            var pointer2Moved = this.moved(pointer2, 0);
            if (io.draggable && io.resizable && io.rotatable) {
                //this.handleTransformAll(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
                this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved && pointer2Moved);
                this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
                this.handleTransformRotate(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
            }
            else {
                if (io.draggable) {
                    this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved);
                }
                if (io.resizable) {
                    this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
                }
                if (io.rotatable) {
                    this.handleTransformRotate(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
                }
            }
        }
    };
    /**
     * Handles movement of the dragged element.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}                        io            Element
     * @param {IPoint}                                   point         Current point of the pointer
     * @param {IPoint}                                   startPoint    Starting point of the pointer
     * @param {MouseEvent | TouchEvent | KeyboardEvent}  ev            Original event
     * @param {boolean}                                  pointerMoved  Did pointer move?
     */
    Interaction.prototype.handleTransformMove = function (io, point, startPoint, ev, pointerMoved) {
        if (pointerMoved) {
            if (io.events.isEnabled("drag")) {
                var imev = {
                    type: "drag",
                    target: io,
                    event: ev,
                    shift: {
                        "x": point.x - startPoint.x,
                        "y": point.y - startPoint.y
                    },
                    startPoint: startPoint,
                    point: point
                };
                io.events.dispatchImmediately("drag", imev);
            }
        }
    };
    /**
     * Handles resizing of the element.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io            Element
     * @param {IPoint}                   point1        Current position of reference point #1
     * @param {IPoint}                   startPoint1   Original position of reference point #1
     * @param {IPoint}                   point2        Current position of reference point #2
     * @param {IPoint}                   startPoint2   Original position of reference point #2
     * @param {MouseEvent | TouchEvent}  ev            Original event
     * @param {boolean}                  pointerMoved  Did pointer move?
     */
    Interaction.prototype.handleTransformResize = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved) {
        if (io.events.isEnabled("resize")) {
            var imev = {
                type: "resize",
                target: io,
                event: ev,
                scale: __WEBPACK_IMPORTED_MODULE_13__utils_Math__["getScale"](point1, startPoint1, point2, startPoint2),
                startPoint1: startPoint1,
                point1: point1,
                startPoint2: startPoint2,
                point2: point2
            };
            io.events.dispatchImmediately("resize", imev);
        }
    };
    /**
     * Hdanles rotation of the element.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io            Element
     * @param {IPoint}                   point1        Current position of reference point #1
     * @param {IPoint}                   startPoint1   Original position of reference point #1
     * @param {IPoint}                   point2        Current position of reference point #2
     * @param {IPoint}                   startPoint2   Original position of reference point #2
     * @param {MouseEvent | TouchEvent}  ev            Original event
     * @param {boolean}                  pointerMoved  Did pointer move?
     */
    Interaction.prototype.handleTransformRotate = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved) {
        // Prepare {InteractionEvent} object
        if (io.events.isEnabled("rotate")) {
            var imev = {
                type: "rotate",
                target: io,
                event: ev,
                angle: __WEBPACK_IMPORTED_MODULE_13__utils_Math__["getRotation"](point1, startPoint1, point2, startPoint2),
            };
            io.events.dispatchImmediately("rotate", imev);
        }
    };
    /**
     * Handles all the preparations of the element when it starts to be dragged.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Element
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.processDragStart = function (io, pointer, ev) {
        // Add to draggedObjects
        this.transformedObjects.push(io);
        // Report "dragstart"
        var imev = {
            type: "dragstart",
            target: io,
            event: ev
        };
        /**
         * If pointer is set we will not fire the event until the pointer has
         * actually move. If it's not set we don't have to wait for anything, so we
         * just fire off the event right away.
         */
        if (pointer) {
            pointer.dragStartEvents.push(imev);
        }
        else {
            io.dispatchImmediately("dragstart", imev);
        }
    };
    /**
     * Finishes up element drag operation.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Element
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.processDragStop = function (io, pointer, ev) {
        // Pointer set?
        if (!pointer) {
            pointer = this.getDragPointer(io);
        }
        // Removed from transformedObjects
        this.transformedObjects.removeValue(io);
        // Unlock document
        //this.unlockDocument();
        // Report dragstop
        if (!pointer || this.moved(pointer, 0)) {
            if (io.events.isEnabled("dragstop")) {
                var imev = {
                    type: "dragstop",
                    target: io
                };
                io.events.dispatchImmediately("dragstop", imev);
            }
        }
    };
    /**
     * ==========================================================================
     * Controls for InteractionObjects initiating directly
     * ==========================================================================
     * @hidden
     */
    /**
     * Manually triggers drag start on the element. Could be useful in cases
     * where tracking or dragging one element can also influence dragging another
     * element.
     *
     * Passing in `pointer` reference is advisable. If not passed in it will try
     * to determine which pointer to attach to. However, it's better to specify
     * it explicitly.
     *
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.dragStart = function (io, pointer) {
        if (pointer || (pointer = this.getDragPointer(io))) {
            this.handleDown(io, pointer, pointer.lastDownEvent);
        }
    };
    /**
     * Manually ends drag on the element.
     *
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.dragStop = function (io, pointer) {
        if (pointer || (pointer = this.getDragPointer(io))) {
            this.handleUp(pointer, pointer.lastUpEvent);
        }
    };
    /**
     * This method uses a fuzzy logic to find the pointer to be used for dragging.
     * Beware that this is not a rock-solid solution. If there are a few objects
     * being dragged at the same time, you may get unexepected results.
     *
     * @param  {InteractionObject}  io  InteractionObject to get pointers from
     * @return {IPointer}               Pointer currently being used for dragging
     */
    Interaction.prototype.getDragPointer = function (io) {
        if (io) {
            // InteractionObject is supplied
            // Use it's first down pointer
            return io.downPointers.getIndex(0);
        }
        else if (this.transformedObjects.length) {
            // Use first dragged object
            return this.getDragPointer(this.transformedObjects.getIndex(0));
        }
        else {
            return undefined;
        }
    };
    /**
     * ==========================================================================
     * Utils
     * ==========================================================================
     * @hidden
     */
    /**
     * Returns pointer id for the given event object.
     *
     * @param  {any}     ev  Event
     * @return {string}      Pointer ID
     */
    Interaction.prototype.getPointerId = function (ev) {
        if (__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](ev.identifier)) {
            return ev.identifier;
        }
        else if (__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](ev.pointerId)) {
            return ev.pointerId;
        }
        else {
            return "1";
        }
    };
    /**
     * Returns [[Pointer]] object that is associated with the Event.
     *
     * If no such [[Pointer]] object exists, it is created.
     *
     * @param  {MouseEvent | Touch}  ev  Event
     * @return {IPointer}                Pointer
     */
    Interaction.prototype.getPointer = function (ev) {
        // Get pointer id
        var id = this.getPointerId(ev);
        // Get current coordinates
        var point = {
            "x": ev.clientX,
            "y": ev.clientY
        };
        // Look for the pointer in the Dictionary if it maybe already exists
        var pointer;
        if (this.pointers.hasKey(id)) {
            // We already have such pointer
            pointer = this.pointers.getKey(id);
            // Reset pointer
            pointer.point = point;
        }
        else {
            // Init pointer
            pointer = {
                "id": id,
                "touch": !(ev instanceof MouseEvent) || (ev.pointerType && ev.pointerType != "mouse"),
                "startPoint": point,
                "startTime": new Date().getTime(),
                "point": point,
                "track": [],
                "swipeCanceled": false,
                "dragStartEvents": []
            };
            // Add first breadcrumb
            this.addBreadCrumb(pointer, point);
            // Add for re-use later
            this.pointers.setKey(id, pointer);
        }
        // Log last event
        pointer.lastEvent = ev;
        return pointer;
    };
    /**
     * Resets the poiner to original state, i.e. cleans movement information,
     * starting point, etc.
     *
     * @param {IPointer} pointer Pointer
     */
    Interaction.prototype.resetPointer = function (pointer) {
        pointer.startTime = new Date().getTime();
        pointer.startPoint = pointer.point;
        pointer.track = [];
        pointer.swipeCanceled = false;
        //clearTimeout(pointer.swipeTimeout);
        //clearTimeout(pointer.holdTimeout);
    };
    /**
     * Adds a "breadcrumb" point to the [[Pointer]] to log its movement path.
     *
     * @param {IPointer}  pointer  Pointer
     * @param {IPoint}    point    Point coordinates
     */
    Interaction.prototype.addBreadCrumb = function (pointer, point) {
        pointer.track.push({
            "timestamp": new Date().getTime(),
            "point": point
        });
    };
    /**
     * Prepares the document for various touch-related operations.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.lockDocument = function () {
        this.prepElement(this.body);
    };
    /**
     * Restores document functionality.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.unlockDocument = function () {
        if (this.transformedObjects.length == 0) {
            this.restoreAllStyles(this.body);
        }
    };
    /**
     * Locks document's wheel scroll.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.lockWheel = function () {
        window.addEventListener(this._pointerEvents.wheel, this.wheelLockEvent);
    };
    /**
     * Unlocks document's wheel scroll.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.unlockWheel = function () {
        window.removeEventListener(this._pointerEvents.wheel, this.wheelLockEvent);
    };
    /**
     * A function that cancels mouse wheel scroll.
     *
     * @ignore Exclude from docs
     * @param  {MouseEvent}  ev  Event object
     * @return {boolean}         Returns `false` to cancel
     */
    Interaction.prototype.wheelLockEvent = function (ev) {
        ev.preventDefault();
        return false;
    };
    /**
     * Applies a set of styles to an element. Stores the original styles so they
     * can be restored later.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}           io      Element
     * @param {Dictionary<string, string>}  styles  A Dictionary of style property and values
     */
    Interaction.prototype.prepElement = function (io, permanent) {
        var el = io.element;
        if (el) {
            // Define possible props
            var props = [
                "touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction",
                "userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect",
                "touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect",
                "touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout",
                "contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming",
                "userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"
            ];
            for (var i = 0; i < props.length; i++) {
                if (props[i] in el.style) {
                    this.setTemporaryStyle(io, props[i], "none");
                }
            }
            // Remove iOS-specific selection;
            this.setTemporaryStyle(io, "tapHighlightColor", "rgba(0, 0, 0, 0)");
            //this.setTemporaryStyle(io, "webkitOverflowScrolling", "none");
        }
    };
    /**
     * Cancels hold counting for the object.
     *
     * @param {InteractionObject} io Element
     */
    Interaction.prototype.cancelHold = function (io) {
        __WEBPACK_IMPORTED_MODULE_14__utils_Iterator__["each"](io.downPointers.iterator(), function (pointer) {
            //clearTimeout(pointer.holdTimeout);
        });
    };
    /**
     * Cancels swipe.
     *
     * @param {InteractionObject} io Element
     */
    Interaction.prototype.cancelSwipe = function (io) {
        __WEBPACK_IMPORTED_MODULE_14__utils_Iterator__["each"](io.downPointers.iterator(), function (pointer) {
            //clearTimeout(pointer.swipeTimeout);
        });
    };
    /**
     * Returns an option associated with hit events.
     *
     * @ignore Exclude from docs
     * @param  {InteractionObject}  io      Element
     * @param  {string}             option  Option key
     * @return {any}                        Option value
     */
    Interaction.prototype.getHitOption = function (io, option) {
        var res = io.hitOptions[option];
        if (typeof res === "undefined") {
            res = this.hitOptions[option];
        }
        return res;
    };
    /**
     * Returns an option associated with swipe events.
     *
     * @ignore Exclude from docs
     * @param  {InteractionObject}  io      Element
     * @param  {string}             option  Option key
     * @return {any}                        Option value
     */
    Interaction.prototype.getSwipeOption = function (io, option) {
        var res = io.swipeOptions[option];
        if (typeof res === "undefined") {
            res = this.swipeOptions[option];
        }
        return res;
    };
    /**
     * Returns an option for keyboard.
     *
     * @ignore Exclude from docs
     * @param  {InteractionObject}  io      Element
     * @param  {string}             option  Option key
     * @return {any}                        Option value
     */
    Interaction.prototype.getKeyboardOption = function (io, option) {
        var res = io.keyboardOptions[option];
        if (typeof res === "undefined") {
            res = this.keyboardOptions[option];
        }
        return res;
    };
    /**
     * Returns an option associated with inertia.
     *
     * @ignore Exclude from docs
     * @param  {InteractionObject}  io      Element
     * @param  {InertiaTypes}       type    Inertia type
     * @param  {string}             option  Option key
     * @return {any}                        Option value
     */
    Interaction.prototype.getInertiaOption = function (io, type, option) {
        var options = io.inertiaOptions.getKey(type);
        var res;
        if (options && __WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](options[type])) {
            res = options[type];
        }
        else {
            res = this.inertiaOptions.getKey(type)[option];
        }
        return res;
    };
    /**
     * Stops currently going on inertia. Useful if inertia is currently being
     * animated and the object is being interacted with.
     *
     * @param {InteractionObject} io Element
     */
    Interaction.prototype.stopInertia = function (io) {
        var x;
        var inertias = ["move", "resize", "rotate"];
        for (var i = 0; i < inertias.length; i++) {
            x = inertias[i];
            if (io.inertias.hasKey(x)) {
                var inertia = io.inertias.getKey(x);
                if (inertia) {
                    inertia.dispose();
                    //io.inertiaAnimations.removeKey(x);
                    //this.processDragStop(io);
                    continue;
                }
            }
        }
    };
    /**
     * Check if swiping is currently being performed on an object.
     *
     * @param  {InteractionObject}  io       Element
     * @param  {IPointer}           pointer  Pointer to check
     * @return {boolean}                     `true` if swiping
     */
    Interaction.prototype.swiping = function (io, pointer) {
        var now = new Date().getTime();
        if (pointer.swipeCanceled || !io.swipeable) {
            return false;
        }
        else if ((Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, "verticalThreshold")) &&
            (pointer.startTime > (now - this.getSwipeOption(io, "time")))) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Returns `true` if a successfull swipe action was performed on an element.
     *
     * @param  {InteractionObject}  io       Element
     * @param  {IPointer}           pointer  Pointer
     * @return {boolean}                     Swiped?
     */
    Interaction.prototype.swiped = function (io, pointer) {
        var now = new Date().getTime();
        if (pointer.swipeCanceled) {
            return false;
        }
        else if ((Math.abs(pointer.startPoint.x - pointer.point.x) > this.getSwipeOption(io, "horizontalThreshold")) &&
            (Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, "verticalThreshold")) &&
            (pointer.startTime > (now - this.getSwipeOption(io, "time")))) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Applies style to mouse cursor based on its stage in relation to
     * [[InteractionObject]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}   Element
     */
    Interaction.prototype.applyCursorOverStyle = function (io) {
        // Get sprite's cursor ooptions
        var options = io.cursorOptions;
        if (!__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](options.overStyle)) {
            return;
        }
        // Apply cursor down styles
        for (var i = 0; i < options.overStyle.length; i++) {
            __WEBPACK_IMPORTED_MODULE_10__System__["b" /* system */].setStyle(io.element, options.overStyle[i].property, options.overStyle[i].value);
        }
    };
    /**
     * Applies style to mouse cursor based on its stage in relation to
     * [[InteractionObject]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.applyCursorDownStyle = function (io, pointer) {
        // Not applicable for touch pointers since they don't display a cursor
        if (pointer.touch) {
            return;
        }
        // Is down?
        if (io.downPointers.contains(pointer) && __WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](io.cursorOptions.downStyle)) {
            // Get sprite's cursor ooptions
            var options = io.cursorOptions;
            // Apply cursor down styles
            for (var i = 0; i < options.downStyle.length; i++) {
                this.setTemporaryStyle(this.body, options.downStyle[i].property, options.downStyle[i].value);
                this.setTemporaryStyle(io, options.downStyle[i].property, options.downStyle[i].value);
            }
        }
    };
    /**
     * Restores original cursor style for the element.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.restoreCursorDownStyle = function (io, pointer) {
        // Not applicable for touch pointers since they don't display a cursor
        if (pointer.touch) {
            return;
        }
        // Is down?
        if (io.downPointers.contains(pointer) && __WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](io.cursorOptions.downStyle)) {
            // Get sprite's cursor ooptions
            var options = io.cursorOptions;
            // Apply cursor down styles
            for (var i = 0; i < options.downStyle.length; i++) {
                this.restoreStyle(this.body, options.downStyle[i].property);
                this.restoreStyle(io, options.downStyle[i].property);
            }
        }
    };
    /**
     * Checks if pointer has moved since it was created.
     *
     * @param  {IPointer}  pointer    Pointer
     * @param  {number}    tolerance  Tolerance in pixels
     * @return {boolean}              `true` if the pointer has moved
     */
    Interaction.prototype.moved = function (pointer, tolerance) {
        var shift = this.getShift(pointer);
        return (Math.abs(shift.x) > tolerance) || (Math.abs(shift.y) > tolerance);
    };
    /**
     * Returns total a shift in pointers coordinates between its original
     * position and now.
     *
     * @param  {IPointer}  pointer  Pointer
     * @return {IPoint}             Shift in coordinates (x/y)
     */
    Interaction.prototype.getShift = function (pointer) {
        return {
            "x": pointer.startPoint.x - pointer.point.x,
            "y": pointer.startPoint.y - pointer.point.y
        };
    };
    /**
     * Returns a point from [[Pointer]]'s move history at a certain timetamp.
     *
     * @param  {IPointer}     pointer    Pointer
     * @param  {number}       timestamp  Timestamp
     * @return {IBreadcrumb}             Point
     */
    Interaction.prototype.getTrailPoint = function (pointer, timestamp) {
        var res;
        for (var i = 0; i < pointer.track.length; i++) {
            if (pointer.track[i].timestamp >= timestamp) {
                res = pointer.track[i];
                break;
            }
        }
        return res;
    };
    /**
     * Returns an [[InteractionObject]] representation of a DOM element.
     *
     * You can use this on any HTML or SVG element, to add interactive features
     * to it.
     *
     * @param  {HTMLElement | SVGSVGElement}  element  Element
     * @return {InteractionObject}                     InteractionObject
     */
    Interaction.prototype.getInteraction = function (element) {
        var io = new __WEBPACK_IMPORTED_MODULE_5__InteractionObject__["a" /* InteractionObject */]();
        io.element = element;
        return io;
    };
    /**
     * Sets a style property on an element. Stores original value to be restored
     * later with [[restoreStyle]].
     *
     * @see {@link restoreStyle}
     * @param {InteractionObject}  io        Element
     * @param {string}             property  Property
     * @param {string}             value     Value
     */
    Interaction.prototype.setTemporaryStyle = function (io, property, value) {
        // Get element
        //let el = io.element.tagName == "g" ? <SVGSVGElement>io.element.parentNode : io.element;
        var el = io.element;
        // Save original property if it is set and hasn't been saved before already
        if (__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](el.style[property]) && !io.replacedStyles.hasKey(property)) {
            io.replacedStyles.setKey(property, el.style[property]);
        }
        // Replace with the new one
        __WEBPACK_IMPORTED_MODULE_10__System__["b" /* system */].setStyle(el, property, value);
    };
    /**
     * Restores specific style on an element.
     *
     * @param {InteractionObject}  io        Element
     * @param {string}             property  Style property
     */
    Interaction.prototype.restoreStyle = function (io, property) {
        // Reset style
        if (io.replacedStyles.hasKey(property)) {
            io.element.style[property] = io.replacedStyles.getKey(property);
            io.replacedStyles.removeKey(property);
        }
        else {
            delete io.element.style[property];
        }
    };
    /**
     * Restore temporarily reset styles on an element.
     *
     * @param {InteractionObject} io Element
     */
    Interaction.prototype.restoreAllStyles = function (io) {
        __WEBPACK_IMPORTED_MODULE_14__utils_Iterator__["each"](io.replacedStyles.iterator(), function (a) {
            var key = a[0];
            var value = a[1];
            io.element.style[key] = value;
            io.replacedStyles.removeKey(key);
        });
    };
    /**
     * Disposes this object and cleans up after itself.
     */
    Interaction.prototype.dispose = function () {
        if (!this.isDisposed) {
            _super.prototype.dispose.call(this);
            this.restoreAllStyles(this.body);
            this.unlockWheel();
        }
    };
    return Interaction;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

/**
 * A single unified global instance of [[Interaction]].
 *
 * All code should use this variable, rather than create their own instances
 * of [[Interaction]].
 */
var interaction = new Interaction();
//# sourceMappingURL=Interaction.js.map

/***/ }),
/* 35 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(101);
var defined = __webpack_require__(47);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(102);
var createDesc = __webpack_require__(65);
var toIObject = __webpack_require__(36);
var toPrimitive = __webpack_require__(46);
var has = __webpack_require__(35);
var IE8_DOM_DEFINE = __webpack_require__(254);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(23) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(35);
var toObject = __webpack_require__(27);
var IE_PROTO = __webpack_require__(166)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["linear"] = linear;
/* harmony export (immutable) */ __webpack_exports__["quadIn"] = quadIn;
/* harmony export (immutable) */ __webpack_exports__["quadOut"] = quadOut;
/* harmony export (immutable) */ __webpack_exports__["quadInOut"] = quadInOut;
/* harmony export (immutable) */ __webpack_exports__["polyIn"] = polyIn;
/* harmony export (immutable) */ __webpack_exports__["polyOut"] = polyOut;
/* harmony export (immutable) */ __webpack_exports__["polyInOut"] = polyInOut;
/* harmony export (immutable) */ __webpack_exports__["polyIn3"] = polyIn3;
/* harmony export (immutable) */ __webpack_exports__["polyOut3"] = polyOut3;
/* harmony export (immutable) */ __webpack_exports__["polyInOut3"] = polyInOut3;
/* harmony export (immutable) */ __webpack_exports__["expIn"] = expIn;
/* harmony export (immutable) */ __webpack_exports__["expOut"] = expOut;
/* harmony export (immutable) */ __webpack_exports__["expInOut"] = expInOut;
/* harmony export (immutable) */ __webpack_exports__["sinIn"] = sinIn;
/* harmony export (immutable) */ __webpack_exports__["sinOut"] = sinOut;
/* harmony export (immutable) */ __webpack_exports__["sinInOut"] = sinInOut;
/* harmony export (immutable) */ __webpack_exports__["cubicIn"] = cubicIn;
/* harmony export (immutable) */ __webpack_exports__["cubicOut"] = cubicOut;
/* harmony export (immutable) */ __webpack_exports__["cubicInOut"] = cubicInOut;
/* harmony export (immutable) */ __webpack_exports__["circleIn"] = circleIn;
/* harmony export (immutable) */ __webpack_exports__["circleOut"] = circleOut;
/* harmony export (immutable) */ __webpack_exports__["circleInOut"] = circleInOut;
/* harmony export (immutable) */ __webpack_exports__["bounceIn"] = bounceIn;
/* harmony export (immutable) */ __webpack_exports__["bounceOut"] = bounceOut;
/* harmony export (immutable) */ __webpack_exports__["bounceInOut"] = bounceInOut;
/* harmony export (immutable) */ __webpack_exports__["elasticIn"] = elasticIn;
/* harmony export (immutable) */ __webpack_exports__["elasticOut"] = elasticOut;
/* harmony export (immutable) */ __webpack_exports__["elasticInOut"] = elasticInOut;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Math__ = __webpack_require__(3);
/**
 * A collection of easing functions
 *
 * Parts of this collection are taken from D3.js library (https://d3js.org/)
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * The functions below are from D3.js library (https://d3js.org/)
 *
 * ----------------------------------------------------------------------------
 * Copyright 2017 Mike Bostock
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * ----------------------------------------------------------------------------
 * @hidden
 */
/**
 * ============================================================================
 * LINEAR FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "linear".
 */
function linear(t) {
    return +t;
}
/**
 * Easing function: "quadIn".
 */
function quadIn(t) {
    return t * t;
}
/**
 * Easing function: "quadOut".
 */
function quadOut(t) {
    return t * (2 - t);
}
/**
 * Easing function: "quadInOut".
 */
function quadInOut(t) {
    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}
/**
 * Easing function: "polyIn".
 */
function polyIn(t, e) {
    return Math.pow(t, e);
}
/**
 * Easing function: "polyOut".
 */
function polyOut(t, e) {
    return 1 - Math.pow(1 - t, e);
}
/**
 * Easing function: "polyInOut".
 */
function polyInOut(t, e) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
}
/**
 * Easing function: "polyIn3".
 */
function polyIn3(t) {
    return polyIn(t, 3);
}
/**
 * Easing function: "polyOut3".
 */
function polyOut3(t) {
    return polyOut(t, 3);
}
/**
 * Easing function: "polyInOut3".
 */
function polyInOut3(t) {
    return polyInOut(t, 3);
}
/**
 * ============================================================================
 * EXPONENTIAL FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "expIn".
 */
function expIn(t) {
    return Math.pow(2, 10 * t - 10);
}
/**
 * Easing function: "expOut".
 */
function expOut(t) {
    return 1 - Math.pow(2, -10 * t);
}
/**
 * Easing function: "expInOut".
 */
function expInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}
/**
 * ============================================================================
 * SINE FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "sinIn".
 */
function sinIn(t) {
    return 1 - Math.cos(t * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["HALFPI"]);
}
/**
 * Easing function: "sinOut".
 */
function sinOut(t) {
    return Math.sin(t * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["HALFPI"]);
}
/**
 * Easing function: "sinInOut".
 */
function sinInOut(t) {
    return (1 - Math.cos(__WEBPACK_IMPORTED_MODULE_0__utils_Math__["PI"] * t)) / 2;
}
/**
 * ============================================================================
 * CUBIC FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "cubicIn".
 */
function cubicIn(t) {
    return t * t * t;
}
/**
 * Easing function: "cubicOut".
 */
function cubicOut(t) {
    return --t * t * t + 1;
}
/**
 * Easing function: "cubicInOut".
 */
function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
/**
 * ============================================================================
 * CIRCLE FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "circleIn".
 */
function circleIn(t) {
    return 1 - Math.sqrt(1 - t * t);
}
/**
 * Easing function: "circleOut".
 */
function circleOut(t) {
    return Math.sqrt(1 - --t * t);
}
/**
 * Easing function: "circleInOut".
 */
function circleInOut(t) {
    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}
/**
 * ============================================================================
 * BOUNCE FUNCTIONS
 * ============================================================================
 * @hidden
 */
var b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
/**
 * Easing function: "bounceIn".
 */
function bounceIn(t) {
    return 1 - bounceOut(1 - t);
}
/**
 * Easing function: "bounceOut".
 */
function bounceOut(t) {
    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}
/**
 * Easing function: "bounceInOut".
 */
function bounceInOut(t) {
    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}
/**
 * ============================================================================
 * ELASTIC FUNCTIONS
 * ============================================================================
 * @hidden
 */
var tau = 2 * Math.PI;
var amplitude = 1;
var period = 0.3 / tau;
var s = Math.asin(1 / amplitude) * period;
/**
 * Easing function: "elasticIn".
 *
 * @function elasticIn
 * @param {number}  a  Amplitude
 * @param {number}  p  period
 */
function elasticIn(t) {
    return amplitude * Math.pow(2, 10 * --t) * Math.sin((s - t) / period);
}
/**
 * Easing function: "elasticOut".
 *
 * @function elasticOut
 * @param {number}  a  Amplitude
 * @param {number}  p  period
 */
function elasticOut(t) {
    return 1 - amplitude * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / period);
}
/**
 * Easing function: "elasticInOut".
 *
 * @function elasticInOut
 * @param {number}  a  Amplitude
 * @param {number}  p  period
 */
function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0
        ? amplitude * Math.pow(2, 10 * t) * Math.sin((s - t) / period)
        : 2 - amplitude * Math.pow(2, -10 * t) * Math.sin((s + t) / period)) / 2;
}
//# sourceMappingURL=Ease.js.map

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Label; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Type__ = __webpack_require__(2);
/**
 * Text class deals with all text placed on chart.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Text is used to display highly configurable, data-enabled textual elements.
 *
 * ## Data Binding
 *
 * A Text element can dynamically parse and populate its contents with values
 * from a [[DataItem]].
 *
 * To activate such binding, set element's `dataItem` property.
 *
 * When activated, text contents will be parsed for special tags, e.g.:
 *
 * ```TypeScript
 * label.dataItem = myDataItem;
 * label.text = "The title is: {title}";
 * ```
 * ```JavaScript
 * label.dataItem = myDataItem;
 * label.text = "The title is: {title}";
 * ```
 *
 * The above will automatically replace "{title}" in the string with the
 * actual data value from `myDataItem`.
 *
 * Note, that most often dataItem is set by the Component.
 *
 *
 * @see {@link ILabelEvents} for a list of available events
 * @see {@link ILabelAdapters} for a list of available Adapters
 * @todo Vertical align
 * @todo Linkage to relative documentation (formatters, data binding)
 * @important
 */
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    /**
     * Constructor
     */
    function Label() {
        var _this = 
        // Execute super's constructor
        _super.call(this) || this;
        /**
         * Indicates if the whole text does not fit into max dimenstions set for it.
         *
         * @type {boolean}
         */
        _this.isOversized = false;
        _this._svgLines = [];
        // Set this class name
        _this.className = "Label";
        _this.fill = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("text");
        // not good to set this, as then these will appear on each label and values set on container won't be applied. 
        //this.textDecoration = "none";
        //this.fontWeigth = "normal";
        // Set defaults
        _this.wrap = false;
        _this.truncate = false;
        _this.ellipsis = "...";
        _this.textAlign = "start";
        _this.textValign = "top";
        _this.layout = "none";
        _this.renderingFrequency = 1;
        _this.ignoreOverflow = false;
        // Set up adapters for manipulating accessibility
        _this.adapter.add("readerTitle", function (arg) {
            if (!arg) {
                arg = _this.populateString(__WEBPACK_IMPORTED_MODULE_5__utils_Utils__["plainText"](!__WEBPACK_IMPORTED_MODULE_5__utils_Utils__["empty"](_this.html)
                    ? _this.html
                    : _this.text));
            }
            return arg;
        });
        // Add events to watch for maxWidth/maxHeight changes so that we can
        // invalidate this
        _this.events.on("maxsizechanged", function (ev) {
            if ((_this._bbox.width > _this.availableWidth)
                || ((_this._bbox.width < _this.availableWidth) && _this.isOversized)
                || (_this._bbox.height > _this.availableHeight)
                || ((_this._bbox.height < _this.availableHeight) && _this.isOversized)) {
                _this.invalidate();
            }
            else {
                _this.alignSVGText();
            }
        });
        // trying to solve strange bug when text is measured as 0x0
        _this.events.once("validated", function () {
            if (_this.text && (_this._bbox.width == 0 || _this._bbox.height == 0)) {
                __WEBPACK_IMPORTED_MODULE_1__System__["b" /* system */].events.once("exitframe", function () {
                    _this._prevStatus = "";
                    _this.invalidate();
                });
            }
        });
        // Aply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * [arrange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Label.prototype.arrange = function () {
    };
    /**
     * Updates current text according to data item and supported features.
     * Returns `true` if current text has changed.
     *
     * @return {boolean} Text changed?
     */
    Label.prototype.updateCurrentText = function () {
        // Determine output format
        var output, text;
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Utils__["empty"](this.html) && this.paper.supportsForeignObject()) {
            // We favor HTML text if it's set and browser supports `foreignObject`
            output = "html";
            text = this.html;
        }
        else {
            output = "svg";
            text = this.text;
        }
        // Need to format text all the time
        if (__WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](text) && text !== "") {
            text = this.populateString(text, this.dataItem);
        }
        // Update the text
        var changed = text != this._currentText || output != this._currentFormat;
        this._currentText = text;
        this._currentFormat = output;
        return changed;
    };
    /**
     * Draws the textual label.
     *
     * @ignore Exclude from docs
     */
    Label.prototype.draw = function () {
        // Draw super
        _super.prototype.draw.call(this);
        // Calculate max width and height
        var maxWidth = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["max"](this.availableWidth - this.pixelPaddingLeft - this.pixelPaddingRight, 0);
        var maxHeight = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["max"](this.availableHeight - this.pixelPaddingTop - this.pixelPaddingBottom, 0);
        // save 
        var status = maxHeight + "," + maxWidth + this.wrap + this.truncate + this.rtl + this.ellipsis;
        // Update text
        if (!this.updateCurrentText() && this.inited && this._prevStatus == status) {
            return;
        }
        this._measuredWidth = 0;
        this._measuredHeight = 0;
        // Reset
        this.isOversized = false;
        // Determine output format
        var output = this._currentFormat;
        var text = this._currentText;
        // Empty string
        if (!__WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](text) || text == "") {
            this.element.attr({ display: "none" });
            return;
        }
        // Chop up text into lines
        // We're still processing SVG and HTML in the same way for now
        var lines = text.split("\n");
        // Do we need to go through the trouble of measuring lines
        //let measure: boolean = true;// (lines.length > 1) || this.wrap;
        this._prevStatus = status;
        this.textAlign = this.textAlign;
        var display = this.group.getAttr("display");
        if (display == "none") {
            this.group.removeAttr("display");
        }
        // SVG or HTML?
        if (output === "svg") {
            /**
             * SVG
             */
            this.element.removeAttr("display");
            // Clear the element
            var group = this.element;
            this.resetBBox();
            // Init state variables
            var currentHeight = 0;
            var currentFormat = "";
            // Process each line
            for (var i = 0; i < lines.length; i++) {
                // Get line
                var line = lines[i];
                // Check if line is empty
                if (line == "") {
                    // It is, let's just update currentHeight and go to the next one
                    // If it's the first line, we'll have to use arbirary line height,
                    // since there's nothing to measure. For subsequent lines we can take
                    // previous line's height
                    var tempElement = this.getSVGLineElement("", 0);
                    tempElement.add(this.getSvgElement(".", __WEBPACK_IMPORTED_MODULE_1__System__["b" /* system */].textFormatter.translateStyleShortcuts(currentFormat)));
                    group.add(tempElement);
                    var offset = Math.ceil(tempElement.getBBox().height);
                    if (offset > 0) {
                        currentHeight += offset;
                    }
                    group.removeElement(tempElement);
                    continue;
                }
                // Chunk up the line and process each chunk
                var chunks = __WEBPACK_IMPORTED_MODULE_1__System__["b" /* system */].textFormatter.chunk(line);
                var currentLineHeight = 0;
                var firstChunk = true;
                var skipTextChunks = false;
                // Create line element or grab it from cache
                var lineInfo = void 0;
                if (lineInfo = this.getLineInfo(i)) {
                    // Empty line
                    lineInfo.element.textContent = "";
                }
                else {
                    // Init new line info
                    lineInfo = {
                        "element": this.getSVGLineElement("", 0),
                        "complex": false
                    };
                    // Create the line element
                    //lineInfo.element = this.getSVGLineElement("", 0);
                    //lineElement = this.getSVGLineElement("", 0);
                    group.add(lineInfo.element);
                }
                lineInfo.element.removeAttr("display");
                if (this.rtl) {
                    chunks.reverse();
                }
                // Process each chunk
                for (var x = 0; x < chunks.length; x++) {
                    // If there's more than one chunk, means the line is "complex"
                    if (x) {
                        lineInfo.complex = true;
                    }
                    // Get chunk
                    var chunk = chunks[x];
                    // Is this chunk format or text?
                    if (chunk.type === "format") {
                        // Log current format, so that we can apply it to multiple lines if
                        // necessary
                        currentFormat = chunk.text;
                    }
                    else {
                        // It's text block
                        // Need to skip?
                        // We do this when truncating. We can't just simply go ahead and
                        // abandon chunk processing as they might have formatting
                        // instructions in them that are relevant for subsequent lines
                        if (skipTextChunks) {
                            continue;
                        }
                        // Add chunk to the current element
                        //lineInfo.element.content += $utils.trim(system.textFormatter.format(currentFormat + chunk.text, output));
                        lineInfo.element.add(this.getSvgElement(chunk.text, __WEBPACK_IMPORTED_MODULE_1__System__["b" /* system */].textFormatter.translateStyleShortcuts(currentFormat)));
                        lineInfo.bbox = lineInfo.element.getBBox();
                        lineInfo.bbox.width = Math.ceil(lineInfo.bbox.width);
                        // Updated current line height
                        if (currentLineHeight < lineInfo.bbox.height) {
                            currentLineHeight = lineInfo.bbox.height;
                        }
                        // Wrapping?
                        if ((this.wrap || this.truncate) && (lineInfo.bbox.width > maxWidth)) {
                            // Set oversized
                            this.isOversized = true;
                            // Take temporary measurements
                            var lineText = lineInfo.element.textContent;
                            var avgCharWidth = (lineInfo.bbox.width / lineText.length) * .9;
                            // Calculate average number of symbols / width
                            var excessChars = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["min"](Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length);
                            // Are we truncating or auto-wrapping text?
                            if (this.truncate) {
                                /**
                                 * Processing line truncation
                                 * With the addition of each text chunk we measure if current
                                 * line does not exceed maxWidth. If it does, we will stop
                                 * addition of further chunks as well as try to truncate
                                 * current or any number of previous chunks with an added
                                 * ellipsis
                                 */
                                // Indicator whether we need to add ellipsis to the current
                                // element, even if it fits. This is needed to indicate
                                // whether we have already removed some subsequent chunks in
                                // which case we need to add ellipsis.
                                var addEllipsis = false;
                                // Process each child in the temporary line, until the whole
                                // line fits, preferably with an ellipsis
                                // TODO use iterator instead
                                for (var e = lineInfo.element.children.length - 1; e >= 0; e--) {
                                    // Get current element
                                    var element = lineInfo.element.children.getIndex(e);
                                    // Add ellipsis only if previous chunk was removed in full
                                    // and this chunk already fits
                                    //if (addEllipsis && (bbox.width <= maxWidth)) {
                                    if (addEllipsis && (lineInfo.bbox.width <= maxWidth)) {
                                        // Add ellipsis
                                        element.textContent += " " + this.ellipsis;
                                        // Measure again (we need to make sure ellipsis fits)
                                        lineInfo.bbox = lineInfo.element.getBBox();
                                        lineInfo.bbox.width = Math.floor(lineInfo.bbox.width);
                                        // If it fits, we're done here
                                        // If it doesn't we continue rolling
                                        if (lineInfo.bbox.width <= maxWidth) {
                                            break;
                                        }
                                    }
                                    addEllipsis = false;
                                    // Get element text
                                    var elementText = element.textContent;
                                    // Calculate average number of symbols / width
                                    lineText = lineInfo.element.textContent;
                                    excessChars = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["min"](Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length);
                                    // Do this until we fit
                                    while ((lineInfo.bbox.width > maxWidth) && (excessChars <= lineText.length) && (excessChars > 0)) {
                                        // Calculate max available chars
                                        var maxChars = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["max"](elementText.length - excessChars - this.ellipsis.length, 1);
                                        // Is there anything left?
                                        if (maxChars <= 1) {
                                            // Nope, let's jump to the previous item
                                            // Set excess characters to zero so that this loop does
                                            // not repeat when it over
                                            excessChars = 0;
                                            // Add ellipsis to previous item
                                            // Subsequent iterations will check if the ellipsis fits
                                            if (e > 0) {
                                                // Indicating to add ellipsis to previous item
                                                addEllipsis = true;
                                                // Removing this node
                                                lineInfo.element.removeElement(element);
                                            }
                                        }
                                        // If we're on first chunk of text, we can break mid-word.
                                        // Otherwise we break by words
                                        if (e === 0) {
                                            elementText = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["truncateWithEllipsis"](elementText, maxChars, this.ellipsis, false, this.rtl);
                                        }
                                        else {
                                            elementText = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["truncateWithEllipsis"](elementText, maxChars, this.ellipsis, true, this.rtl);
                                        }
                                        // Set truncated text
                                        element.textContent = elementText;
                                        // Measure again
                                        lineInfo.bbox = lineInfo.element.getBBox();
                                        lineInfo.bbox.width = Math.floor(lineInfo.bbox.width);
                                        // Increase excess characters count, just in case it still
                                        // doesn't fit and we have to go at it again
                                        excessChars = Math.ceil(excessChars * 1.1);
                                    }
                                    // Do not process further chunks
                                    skipTextChunks = true;
                                }
                            }
                            else {
                                /**
                                 * Processign auto-wrap
                                 * In this case we're going to be adding text chunks until
                                 * they don't fit into current line. Once that happens we will
                                 * inject the rest of the chunks to the next line
                                 */
                                // Get last node added and measure it
                                var lastElement_1 = lineInfo.element.lastChild;
                                // Init split lines
                                var splitLines = void 0;
                                while ((lineInfo.bbox.width > maxWidth) && (excessChars <= lineText.length) && (excessChars > 0)) {
                                    // Calculate max available chars
                                    var maxChars = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["max"](chunk.text.length - excessChars, 1);
                                    // Don't split the words mid-word if it's not the first chunk
                                    // in the line
                                    if (firstChunk) {
                                        // Split mid-word if necessary
                                        splitLines = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["splitTextByCharCount"](chunk.text, maxChars, false, this.rtl);
                                    }
                                    else {
                                        // Don't split mid-word
                                        splitLines = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["splitTextByCharCount"](chunk.text, maxChars, true, this.rtl);
                                        // Check if the first word is too long
                                        if ((splitLines[0].length > maxChars) || maxChars === 1) {
                                            // Yes - move the whole chunk to the next line
                                            // Remove the element we just added
                                            lineInfo.element.removeElement(lastElement_1);
                                            // Break out of the while on next cycle
                                            excessChars = 0;
                                        }
                                    }
                                    // Use the first line to update last item
                                    if (excessChars > 0) {
                                        lastElement_1.textContent = __WEBPACK_IMPORTED_MODULE_1__System__["b" /* system */].textFormatter.cleanUp(__WEBPACK_IMPORTED_MODULE_5__utils_Utils__["trim"](splitLines.shift()));
                                    }
                                    // Measure again, just in case
                                    lineInfo.bbox = lineInfo.element.getBBox();
                                    lineInfo.bbox.width = Math.floor(lineInfo.bbox.width);
                                    // Increase excess characters count, just in case it still
                                    // doesn't fit and we have to go at it again
                                    excessChars = Math.ceil(excessChars * 1.1);
                                }
                                // Construct the rest of the line
                                if (splitLines.length > 0) {
                                    var restOfLine = "";
                                    // Add leftovers from splitting the current chunk
                                    if (__WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](splitLines)) {
                                        if (this.rtl) {
                                            restOfLine += splitLines.join("") + currentFormat;
                                        }
                                        else {
                                            restOfLine += currentFormat + splitLines.join("");
                                        }
                                    }
                                    // Add the rest of the chunks
                                    for (var c = x + 1; c < chunks.length; c++) {
                                        restOfLine += chunks[c].text;
                                    }
                                    // Inject the rest of the lines as chunks for subsequent
                                    lines.splice(i + 1, 0, restOfLine);
                                }
                                // Skip processing the rest of the chunks
                                skipTextChunks = true;
                            }
                        }
                        // Let's update the text's bbox with the line's one
                        if (this._bbox.width < lineInfo.bbox.width) {
                            this._bbox.width = lineInfo.bbox.width;
                        }
                        if (this._bbox.x > lineInfo.bbox.x) {
                            this._bbox.x = lineInfo.bbox.x;
                        }
                        this._bbox.height = currentHeight + currentLineHeight;
                        // Position current line
                        lineInfo.element.attr({
                            "x": "0",
                            "y": currentHeight + currentLineHeight,
                            "dy": __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"]((-0.2 * currentLineHeight), 3).toString()
                        });
                        firstChunk = false;
                    }
                }
                // Trim the last item
                var lastElement = lineInfo.element.lastChild;
                if (lastElement) {
                    lastElement.textContent = this.rtl ?
                        __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["ltrim"](lastElement.textContent) :
                        __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["rtrim"](lastElement.textContent);
                }
                // Increment collective height
                currentHeight += currentLineHeight;
                // Save line cache
                this.addLineInfo(lineInfo, i);
            }
            // Check if maybe we need to hide the whole label if it doesn't fit
            if (this.hideOversized && ((this.availableWidth < this._bbox.width) || (this.availableHeight < this._bbox.height))) {
                this.element.attr({ display: "none" });
                this.isOversized = true;
            }
            this._measuredWidth = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["max"](this._bbox.width, this.pixelWidth - this.pixelPaddingLeft - this.pixelPaddingRight);
            this._measuredHeight = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["max"](this._bbox.height, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);
            // Align the lines
            this.alignSVGText();
            this._bbox.width = this._measuredWidth;
            this._bbox.height = this._measuredHeight;
            this.hideUnused(lines.length);
        }
        else {
            /**
             * HTML
             */
            // Create a ForeignObject to use as HTML container
            this.element = this.paper.foreignObject();
            this.paper.append(this.group);
            this.resetBBox();
            // Set ForeignObject dimensions
            var width = maxWidth > 0 ? (maxWidth).toString() + "px" : "100%";
            var height = maxHeight > 0 ? (maxHeight).toString() + "px" : "100%";
            this.element.attr({
                "width": width,
                "height": height
            });
            // Create line element
            //let lineElement: HTMLElement = this.getHTMLLineElement(system.textFormatter.format(this.html, output));
            var lineElement = this.getHTMLLineElement(text);
            this.element.node.appendChild(lineElement);
            this.isOversized = true;
        }
        // Set applicable styles
        this.setStyles();
        this.updateCenter();
        this.updateBackground(this._measuredWidth, this._measuredHeight);
        if (display == "none") {
            this.group.attr({ display: "none" });
        }
    };
    /**
     * Aligns the lines horizontally ant vertically, based on properties.
     *
     * @ignore Exclude from docs
     */
    Label.prototype.alignSVGText = function () {
        var _this = this;
        // Get Group
        var group = this.element;
        // Is there anything to align?
        if (!group.children) {
            return;
        }
        var width = this._measuredWidth;
        var height = this._measuredHeight;
        // Process each line
        __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](group.children.backwards().iterator(), function (element) {
            // Align horizontally
            // Since we are using `text-anchor` for horizontal alignement, all we need
            // to do here is move the `x` position
            element.attr({ "text-anchor": _this.textAlign });
            switch (_this.textAlign) {
                case "middle":
                    element.attr({ "x": (width / 2).toString() });
                    break;
                case "end":
                    if (_this.rtl) {
                    }
                    else {
                        element.attr({ "x": width.toString() });
                    }
                    break;
                default:
                    if (_this.rtl) {
                        element.attr({ "x": width.toString() });
                    }
                    else {
                        element.removeAttr("text-anchor");
                    }
                    break;
            }
            if (_this.textValign != "top") {
                var y = __WEBPACK_IMPORTED_MODULE_7__utils_Type__["toNumber"](element.getAttr("y"));
                switch (_this.textValign) {
                    case "middle":
                        element.attr({ "y": (y + (height - _this._bbox.height) / 2).toString() });
                        break;
                    case "bottom":
                        element.attr({ "y": (y + height - _this._bbox.height).toString() });
                        break;
                    default:
                        break;
                }
            }
        });
    };
    /**
     * Produces an SVG line element with formatted text.
     *
     * @ignore Exclude from docs
     * @param  {string}     text    Text to wrap into line
     * @param  {number}     y       Current line vertical position
     * @return {AMElement}          A DOM element
     * @todo Implement HTML support
     */
    Label.prototype.getSVGLineElement = function (text, y) {
        // Create a <text> node and set text
        var element = this.paper.addGroup("text");
        element.textContent = text;
        // Set parameters
        element.attr({
            "x": "0"
            //"alignment-baseline": "hanging",
            //"baseline-shift": "-20%",
            //"text-anchor": "center"
        });
        // Set `y` position
        if (__WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](y)) {
            element.attr({
                "y": y.toString()
            });
        }
        // Don't let labels blled out of the alotted area
        if (this.truncate || this.wrap) {
            element.attr({ "overflow": "hidden" });
        }
        // Add RTL?
        if (this.rtl) {
            element.attr({
                "direction": "rtl",
                "unicode-bidi": "bidi-override"
            });
        }
        return element;
    };
    /**
     * Resets cached BBox.
     *
     * @ignore Exclude from docs
     */
    Label.prototype.resetBBox = function () {
        this._bbox = { x: 0, y: 0, width: 0, height: 0 };
    };
    /**
     * Creates and returns an HTML line element (`<div>`).
     *
     * @ignore Exclude from docs
     * @param  {string}       text  Text to add
     * @return {HTMLElement}        `<div>` element reference
     */
    Label.prototype.getHTMLLineElement = function (text) {
        // Create the <div> element
        var div = document.createElement("div");
        div.innerHTML = text;
        // Set text alignement
        switch (this.textAlign) {
            case "middle":
                div.style.textAlign = "center";
                break;
            case "end":
                div.style.textAlign = "right";
                break;
        }
        // Disable or enable wrapping
        if (this.wrap) {
            div.style.wordWrap = "break-word";
        }
        else {
            div.style.whiteSpace = "nowrap";
        }
        // Don't let labels blled out of the alotted area
        if (this.truncate) {
            div.style.overflow = "hidden";
        }
        // Set RTL-related styles
        if (this.rtl) {
            div.style.direction = "rtl";
            div.style.unicodeBidi = "bidi-override";
        }
        return div;
    };
    /**
     * Applies specific styles to text to make it not selectable, unless it is
     * explicitly set as `selectable`.
     *
     * @ignore Exclude from docs
     * @todo Set styles via AMElement
     */
    Label.prototype.setStyles = function () {
        var group = this.element;
        if (!this.selectable || this.draggable || this.resizable || this.swipeable) {
            group.addStyle({
                "webkitUserSelect": "none",
                "msUserSelect": "none",
                "pointerEvents": "none"
            });
        }
        else if (this.selectable) {
            group.removeStyle("webkitUserSelect");
            group.removeStyle("msUserSelect");
            group.removeStyle("pointerEvents");
        }
    };
    /**
     * Hides unused lines
     */
    Label.prototype.hideUnused = function (index) {
        this.initLineCache();
        var lines = this.getCache("lineInfo");
        if (lines.length >= index) {
            for (var i = index; i < lines.length; i++) {
                var line = lines[i];
                if (line && line.element) {
                    line.element.attr({ "display": "none" });
                }
            }
        }
    };
    Object.defineProperty(Label.prototype, "text", {
        /**
         * Returns current SVG text.
         *
         * @return {string} SVG text
         */
        get: function () {
            return this.getPropertyValue("text");
        },
        /**
         * Sets SVG text.
         *
         * Please note that setting `html` will override this setting if browser
         * supports `foreignObject` in SGV, such as most modern browsers excluding
         * IEs.
         *
         * @param {string} value SVG Text
         */
        set: function (value) {
            //this.setPropertyValue("html", undefined);
            this.setPropertyValue("text", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "wrap", {
        /**
         * Returns current auto-wrap setting.
         *
         * @return {boolean} Auto-wrap enabled or not
         */
        get: function () {
            return this.getPropertyValue("wrap");
        },
        /**
         * Enables or disables autowrapping of text.
         *
         * @param {boolean} value Auto-wrapping enabled
         */
        set: function (value) {
            this.resetBBox();
            this.setPropertyValue("wrap", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "truncate", {
        /**
         * Returns current truncation setting.
         *
         * @return {boolean} Truncate text?
         */
        get: function () {
            return this.getPropertyValue("truncate");
        },
        /**
         * Indicates if text lines need to be truncated if they do not fit, using
         * configurable `ellipsis` string.
         *
         * `truncate` overrides `wrap` if both are set to `true`.
         *
         * NOTE: For HTML text, this setting **won't** trigger a parser and actual
         * line truncation with ellipsis. It will just hide everything that goes
         * outside the label.
         *
         * @param {boolean}  value  trincate text?
         */
        set: function (value) {
            this.resetBBox();
            this.setPropertyValue("truncate", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "ellipsis", {
        /**
         * Returns current ellipsis setting.
         *
         * @return {string} Ellipsis string
         */
        get: function () {
            return this.getPropertyValue("ellipsis");
        },
        /**
         * Sets ellipsis character to use if `truncate` is enabled.
         *
         * @param {string} value Ellipsis string
         * @default "..."
         */
        set: function (value) {
            this.setPropertyValue("ellipsis", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "selectable", {
        /**
         * Returns current setting for selectable text.
         *
         * @return {boolean} Text selectable?
         */
        get: function () {
            return this.getPropertyValue("selectable");
        },
        /**
         * Forces the text to be selectable. This setting will be ignored if the
         * object has some kind of interaction attached to it, such as it is
         * `draggable`, `swipeable`, `resizable`.
         *
         * @param {boolean}  value  Text selectable?
         * @default false
         */
        set: function (value) {
            this.setPropertyValue("selectable", value, true);
            this.setStyles();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "textAlign", {
        /**
         * Returns current horizontal text alignement.
         *
         * @return {TextAlign} Alignement
         */
        get: function () {
            return this.getPropertyValue("textAlign");
        },
        /**
         * Sets text alignement.
         *
         * Available choices:
         * * "start"
         * * "middle"
         * * "end"
         *
         * @param {TextAlign} value Alignement
         */
        set: function (value) {
            this.setPropertyValue("textAlign", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "textValign", {
        /**
         * Returns vertical text alignement.
         *
         * @ignore Exclude from docs (not used)
         * @return {TextValign} Alignement
         * @deprecated
         */
        get: function () {
            return this.getPropertyValue("textValign");
        },
        /**
         * Sets vertical text alignement.
         *
         * @ignore Exclude from docs (not used)
         * @param {TextValign} value Alignement
         * @deprecated
         */
        set: function (value) {
            this.setPropertyValue("textValign", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "html", {
        /**
         * Returns current HTML content of the label.
         *
         * @return {string} HTML content
         */
        get: function () {
            return this.getPropertyValue("html");
        },
        /**
         * Sets raw HTML to be used as text.
         *
         * NOTE: HTML text is subject to browser support. It relies on browsers
         * supporting SVG `foreignObject` nodes. Some browsers (read IEs) do not
         * support it. On those browsers, the text will fall back to basic SVG text,
         * striping out all HTML markup and styling that goes with it.
         *
         * For more information about `foreignObject` and its browser compatibility
         * refer to [this page](https://developer.mozilla.org/en/docs/Web/SVG/Element/foreignObject#Browser_compatibility).
         *
         * @param {string} value HTML text
         */
        set: function (value) {
            this.setPropertyValue("html", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "hideOversized", {
        /**
         * Returns current setting for hiding oversized text.
         *
         * @return {boolean} Hide if text does not fit?
         */
        get: function () {
            return this.getPropertyValue("hideOversized");
        },
        /**
         * Sets whether the whole text should be hidden if it does not fit into its
         * allotted space.
         *
         * @param {boolean} value Hide if text does not fit?
         */
        set: function (value) {
            this.setPropertyValue("hideOversized", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Override `mesaureElement` so it does not get measure again, because
     * internal `_bbox` is being updated by measuring routines in Text itself.
     */
    Label.prototype.measureElement = function () { };
    /**
     * Returns information about a line element.
     *
     * @ignore Exclude from docs
     * @param  {number}         index  Line index
     * @return {ITextLineInfo}         Line info object
     */
    Label.prototype.getLineInfo = function (index) {
        this.initLineCache();
        var lines = this.getCache("lineInfo");
        return lines.length > index ? lines[index] : undefined;
    };
    /**
     * Adds a line to line info cache.
     *
     * @ignore Exclude from docs
     * @param {ITextLineInfo}  line     Line info object
     * @param {number}         index    Insert at specified index
     */
    Label.prototype.addLineInfo = function (line, index) {
        this.initLineCache();
        this.getCache("lineInfo")[index] = line;
    };
    /**
     * Checks if line cache is initialized and initializes it.
     */
    Label.prototype.initLineCache = function () {
        if (!this.getCache("lineInfo")) {
            this.setCache("lineInfo", []);
        }
    };
    /**
     * Sets a [[DataItem]] to use for populating dynamic sections of the text.
     *
     * Check the description for [[Text]] class, for data binding.
     *
     * @param {DataItem} dataItem Data item
     */
    Label.prototype.setDataItem = function (dataItem) {
        if (this._sourceDataItemEvents) {
            this._sourceDataItemEvents.dispose();
        }
        if (dataItem) {
            this._sourceDataItemEvents = new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["c" /* MultiDisposer */]([
                dataItem.events.on("valuechanged", this.invalidate, this),
                dataItem.events.on("workingvaluechanged", this.invalidate, this),
                dataItem.events.on("calculatedvaluechanged", this.invalidate, this),
                dataItem.events.on("propertychanged", this.invalidate, this)
            ]);
        }
        _super.prototype.setDataItem.call(this, dataItem);
    };
    Object.defineProperty(Label.prototype, "availableWidth", {
        /**
         * Returns available horizontal space.
         *
         * @ignore Exclude from docs
         * @return {number} Available width (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](this.maxWidth) ? this.maxWidth : this.pixelWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "availableHeight", {
        /**
         * Returns available vertical space.
         *
         * @return {number} Available height (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](this.maxHeight) ? this.maxHeight : this.pixelHeight;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Invalidates the whole element, causing its redraw.
     *
     * Appending `<defs>` section might influence appearance and thus its
     * dimensions.
     *
     * @ignore Exclude from docs
     */
    Label.prototype.appendDefs = function () {
        _super.prototype.appendDefs.call(this);
        this.invalidate(); // otherwise getBBOx of text element returns 0 simetimes
    };
    // temp, replacing textFormatter method
    Label.prototype.getSvgElement = function (text, style) {
        var element = this.paper.add("tspan");
        element.textContent = text;
        if (style) {
            element.node.setAttribute("style", style);
        }
        return element;
    };
    return Label;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Label.js.map

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(29);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(16);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = addEventListener;
/* harmony export (immutable) */ __webpack_exports__["h"] = getElement;
/* harmony export (immutable) */ __webpack_exports__["c"] = addClass;
/* harmony export (immutable) */ __webpack_exports__["l"] = removeClass;
/* harmony export (immutable) */ __webpack_exports__["e"] = blur;
/* harmony export (immutable) */ __webpack_exports__["j"] = outerHTML;
/* harmony export (immutable) */ __webpack_exports__["i"] = isElement;
/* harmony export (immutable) */ __webpack_exports__["f"] = copyAttributes;
/* harmony export (immutable) */ __webpack_exports__["g"] = fixPixelPerfect;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return StyleRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StyleClass; });
/* harmony export (immutable) */ __webpack_exports__["k"] = ready;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AsyncPending__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Type__ = __webpack_require__(2);
/**
 * A collection of DOM-related functions.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * Function that adds a disposable event listener directly to a DOM element.
 *
 * @ignore Exclude from docs
 * @param {EventTarget}   dom       A DOM element to add event to
 * @param {string}        type      Event type
 * @param {Function}      listener  Event listener
 * @returns {IDisposer}             Disposable event
 */
function addEventListener(dom, type, listener) {
    dom.addEventListener(type, listener, false);
    return new __WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */](function () {
        dom.removeEventListener(type, listener, false);
    });
}
/**
 * Finds and returns an element reference using following logic:
 * * If we pass in an element instance, we just return it back.
 * * If we pass in a string, the function looks for an element with such id.
 * * If no element with such id is found, we grab the first element with a tag name like this.
 *
 * @ignore Exclude from docs
 * @param  {Optional<HTMLElement | string>}  el  Element definition (reference, or id, or tag name)
 * @return {Optional<HTMLElement>}               Element reference
 * @todo Review this function as it seems pretty fuzzy and hacky
 */
function getElement(el) {
    if (__WEBPACK_IMPORTED_MODULE_5__Type__["isString"](el)) {
        var e = document.getElementById(el);
        if (e == null) {
            e = document.getElementsByClassName(el)[0];
        }
        if (e instanceof HTMLElement) {
            return e;
        }
    }
    else if (el instanceof HTMLElement) {
        return el;
    }
    __WEBPACK_IMPORTED_MODULE_1__System__["b" /* system */].log(el + " not found");
}
/**
 * Adds a class name to an HTML or SVG element.
 *
 * @ignore Exclude from docs
 * @param {HTMLElement | SVGSVGElement}  element    Element
 * @param {string}                       className  Class name to add
 */
function addClass(element, className) {
    if (element.classList) {
        element.classList.add(className);
    }
    else {
        var currentClassName = element.getAttribute("class");
        if (currentClassName) {
            element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
                return item !== className;
            }).join(" ") + " " + className);
        }
        else {
            element.setAttribute("class", className);
        }
        //element.className = element.className.replace(new RegExp("^" + className + "| " + className), "") + " " + className;
    }
}
/**
 * Removes a class name from an HTML or SVG element.
 *
 * @ignore Exclude from docs
 * @param {HTMLElement | SVGSVGElement}  element    Element
 * @param {string}                       className  Class name to add
 */
function removeClass(element, className) {
    if (element.classList) {
        element.classList.remove(className);
    }
    else {
        var currentClassName = element.getAttribute("class");
        if (currentClassName) {
            element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
                return item !== className;
            }).join(" "));
        }
        //element.className = element.className.replace(new RegExp("^" + className + "| " + className), "");
    }
}
/**
 * Removes focus from any element by shifting focus to body.
 *
 * @ignore Exclude from docs
 */
function blur() {
    var input = document.createElement("input");
    input.style.position = "fixed";
    input.style.top = "0px";
    input.style.left = "-10000px";
    document.body.appendChild(input);
    input.focus();
    input.blur();
    document.body.removeChild(input);
}
/**
 * Returns markup for the element including the element tag itself.
 * SVG elements do not support `outerHTML` so this functions applies of
 * a workaround which creates a new temporary wrapper, clones element and uses
 * wrapper's `innerHTML`.
 *
 * @ignore Exclude from docs
 * @param  {HTMLElement | SVGSVGElement}  element  Element to get full markup for
 * @return {string}                                Markup
 * @deprecated Not in use anywhere
 */
function outerHTML(element) {
    if (element.outerHTML) {
        return element.outerHTML;
    }
    else {
        var twrap = document.createElement("div");
        var tnode = element.cloneNode(true);
        twrap.appendChild(tnode);
        var content = twrap.innerHTML;
        return content;
    }
}
/**
 * Checks if element is a valid DOM node.
 *
 * @ignore Exclude from docs
 * @param  {HTMLElement}  el  Element
 * @return {boolean}          `true` if element is a valid DOM node
 */
function isElement(el) {
    return el instanceof Object && el && el.nodeType === 1;
}
/**
 * Copies attributes from one element to another.
 *
 * @ignore Exclude from docs
 * @param {Element | HTMLElement |  SVGSVGElement}  source  Element to copy attributes from
 * @param {HTMLElement | SVGSVGElement}          target  Element to copy attributes to
 */
function copyAttributes(source, target) {
    for (var attr in source.attributes) {
        var value = source.attributes[attr].nodeValue;
        // TODO what if it's null ?
        if (value != null) {
            target.setAttribute(source.attributes[attr].nodeName, value);
        }
    }
}
/**
 * [fixPixelPerfect description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {HTMLElement}  el  Element
 */
function fixPixelPerfect(el) {
    Object(__WEBPACK_IMPORTED_MODULE_2__AsyncPending__["c" /* readFrame */])(function () {
        // sometimes IE doesn't like this
        // TODO figure out a way to remove this
        try {
            var rect = el.getBoundingClientRect();
            var left_1 = rect.left - Math.round(rect.left);
            var top_1 = rect.top - Math.round(rect.top);
            if (left_1 !== 0) {
                Object(__WEBPACK_IMPORTED_MODULE_2__AsyncPending__["f" /* writeFrame */])(function () {
                    el.style.left = left_1 + "px";
                });
            }
            if (top_1 !== 0) {
                Object(__WEBPACK_IMPORTED_MODULE_2__AsyncPending__["f" /* writeFrame */])(function () {
                    el.style.top = top_1 + "px";
                });
            }
        }
        catch (e) { }
    });
}
/**
 * [rootStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Optional<CSSStyleSheet>}
 */
var rootStylesheet = null;
/**
 * [getStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @return {CSSStyleSheet} [description]
 */
function getStylesheet() {
    if (!__WEBPACK_IMPORTED_MODULE_5__Type__["hasValue"](rootStylesheet)) {
        // TODO use createElementNS ?
        var e = document.createElement("style");
        e.type = "text/css";
        document.head.appendChild(e);
        rootStylesheet = e.sheet;
    }
    return rootStylesheet;
}
/**
 * [makeStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {string}        selector  [description]
 * @return {CSSStyleRule}            [description]
 */
function makeStylesheet(selector) {
    var root = getStylesheet();
    var index = root.cssRules.length;
    root.insertRule(selector + "{}", index);
    return root.cssRules[index];
}
/**
 * Defines a class for a CSS rule.
 *
 * Can be used to dynamically add CSS to the document.
 */
var StyleRule = /** @class */ (function (_super) {
    __extends(StyleRule, _super);
    /**
     * Constructor.
     *
     * @param {string}  selector  CSS selector
     * @param {object}  styles    An object of style attribute - value pairs
     */
    function StyleRule(selector, styles) {
        var _this = 
        // TODO test this
        _super.call(this, function () {
            var root = getStylesheet();
            // TODO a bit hacky
            var index = __WEBPACK_IMPORTED_MODULE_4__Array__["g" /* indexOf */](root.cssRules, _this._rule);
            if (index === -1) {
                throw new Error("Could not dispose StyleRule");
            }
            else {
                root.deleteRule(index);
            }
        }) || this;
        _this._rule = makeStylesheet(selector);
        __WEBPACK_IMPORTED_MODULE_3__Object__["each"](styles, function (key, value) {
            _this.setStyle(key, value);
        });
        return _this;
    }
    Object.defineProperty(StyleRule.prototype, "selector", {
        /**
         * @return {string} CSS selector
         */
        get: function () {
            return this._rule.selectorText;
        },
        /**
         * A CSS selector text.
         *
         * E.g.: `.myClass p`
         *
         * @param {string}  selector  CSS selector
         */
        set: function (selector) {
            this._rule.selectorText = selector;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the same style properties with browser-speicifc prefixes.
     *
     * @param {string}  name   Attribute name
     * @param {string}  value  Attribute value
     */
    StyleRule.prototype._setVendorPrefixName = function (name, value) {
        var style = this._rule.style;
        style.setProperty("-webkit-" + name, value, "");
        style.setProperty("-moz-" + name, value, "");
        style.setProperty("-ms-" + name, value, "");
        style.setProperty("-o-" + name, value, "");
        style.setProperty(name, value, "");
    };
    /**
     * Sets a value for specific style attribute.
     *
     * @param {string}  name   Attribute
     * @param {string}  value  Value
     */
    StyleRule.prototype.setStyle = function (name, value) {
        if (name === "transition") {
            this._setVendorPrefixName(name, value);
        }
        else {
            this._rule.style.setProperty(name, value, "");
        }
    };
    return StyleRule;
}(__WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */]));

/**
 * An internal counter for unique style ids.
 *
 * @ignore Exclude from docs
 * @type {number}
 */
var styleId = 0;
/**
 * @ignore Exclude from docs
 * @todo Description
 */
var StyleClass = /** @class */ (function (_super) {
    __extends(StyleClass, _super);
    /**
     * Constructor.
     *
     * @param {object}  styles  An object of style attribute - value pairs
     * @param {string}  name    Class name
     */
    function StyleClass(styles, name) {
        var _this = this;
        var className = (!__WEBPACK_IMPORTED_MODULE_5__Type__["hasValue"](name)
            // TODO generate the classname randomly
            ? "__style_" + (++styleId) + "__"
            : name);
        _this = _super.call(this, "." + className, styles) || this;
        _this._className = className;
        return _this;
    }
    Object.defineProperty(StyleClass.prototype, "className", {
        /**
         * @return {string} Class name
         */
        get: function () {
            return this._className;
        },
        /**
         * Class name.
         *
         * @param {string}  name  Class name
         */
        set: function (name) {
            this._className = name;
            this.selector = "." + name;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts the whole class to
     * @ignore Exclude from docs
     */
    StyleClass.prototype.toString = function () {
        return this._className;
    };
    return StyleClass;
}(StyleRule));

function ready(f) {
    if (document.readyState !== "loading") {
        f();
    }
    else {
        var listener_1 = function () {
            if (document.readyState !== "loading") {
                document.removeEventListener("readystatechange", listener_1);
                f();
            }
        };
        document.addEventListener("readystatechange", listener_1);
    }
}
//# sourceMappingURL=DOM.js.map

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = animate;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return animations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Animation; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__defs_SVGDefaults__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_AsyncPending__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Ease__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Colors__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Type__ = __webpack_require__(2);
/**
 * Animation module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */













/**
 * Calls a `callback` function for the `duration` of milliseconds.
 *
 * @todo Needed?
 * @deprecated Not used anywhere
 * @ignore Exclude from docs
 * @param  {number}     duration  Duration (ms)
 * @param  {function}   callback  Callback function
 * @return {IDisposer}            Disposer
 */
function animate(duration, callback) {
    var disposed = false;
    // TODO use performance.now() ?
    var startTime = Date.now();
    function loop(now) {
        if (!disposed) {
            var diff = now - startTime;
            if (diff >= duration) {
                callback(1);
            }
            else {
                __WEBPACK_IMPORTED_MODULE_7__utils_AsyncPending__["a" /* nextFrame */](loop);
                callback(diff / duration);
            }
        }
    }
    __WEBPACK_IMPORTED_MODULE_7__utils_AsyncPending__["a" /* nextFrame */](loop);
    return new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["b" /* Disposer */](function () {
        disposed = true;
    });
}
/**
 * Holds the list of currently playing animations.
 *
 * @ignore Exclude from docs
 * @type {Array<IAnimationObject>}
 */
var animations = [];
/**
 * Animation can be used to transition certain properties on an object that
 * implements [[IAnimatable]] interface.
 *
 * @see {@link IAnimationEvents} for a list of available events
 */
var Animation = /** @class */ (function (_super) {
    __extends(Animation, _super);
    /**
     * Constructor
     *
     * @param {IAnimatable}                              object            An object animation should run on
     * @param {IAnimationOptions[] | IAnimationOptions}  animationOptions  One or several (array) of animation options
     * @param {number}                                   duration          Duration (ms)
     * @param {(number) => number}                       easing            Easing function
     */
    function Animation(object, animationOptions, duration, easing) {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Event dispatcher.
         *
         * @type {EventDispatcher<AMEvent<Animation, IAnimationEvents>>}
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_1__utils_EventDispatcher__["a" /* EventDispatcher */]();
        /**
         * Duration of the animation in milliseconds.
         *
         * @type {number}
         */
        _this.duration = 0;
        /**
         * Easing function to use.
         *
         * @see {@link Ease}
         * @type {(value: number) => number}
         */
        _this.easing = __WEBPACK_IMPORTED_MODULE_8__utils_Ease__["linear"];
        /**
         * Is this a frame-based animation?
         *
         * If the animation is frame-based, Animation will ensure that every frame
         * is played, regardless of time.
         *
         * If the animation is non-frame-based, it will play exactly the time set in
         * [[duration]].
         *
         * @type {boolean}
         */
        _this.frameBased = false;
        /**
         * Indicated how many times animation should loop.
         *
         * @type {number}
         */
        _this._loop = 0;
        /**
         * Animation duration in frames.
         *
         * @type {number}
         */
        _this._frames = 0;
        /**
         * Animation is paused.
         *
         * @type {boolean}
         */
        _this._pause = false;
        _this.className = "Animation";
        // Set parameters
        _this.object = object;
        _this.animationOptions = __WEBPACK_IMPORTED_MODULE_11__utils_Array__["n" /* toArray */](animationOptions);
        _this.duration = duration;
        if (easing) {
            _this.easing = easing;
        }
        // Run check if there are already animations playing on the same properties
        // and stop them - the last animation takes precedence
        //this.stopSameAnimations();
        /*if ($type.hasValue(callback)) {
            // TODO don't use .call
            this.events.on("animationend", callback, object);
        }*/
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Disposes this object, clears up after itself.
     */
    Animation.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.pause();
        if (this._delayTimeout) {
            this.removeDispose(this._delayTimeout);
            this._delayTimeout = null;
        }
        __WEBPACK_IMPORTED_MODULE_11__utils_Array__["k" /* remove */](animations, this);
    };
    /**
     * Delays animation start by X milliseconds.
     *
     * @param  {number}     delay  Delay (ms)
     * @return {Animation}         Animation
     */
    Animation.prototype.delay = function (delay) {
        //@todo Maybe not use `bind()`
        if (delay > 0) {
            this._pause = true;
            this._delayTimeout = this.setTimeout(this.start.bind(this), delay);
        }
        return this;
    };
    /**
     * Starts animation.
     *
     * @return {Animation} Animation
     */
    Animation.prototype.start = function () {
        // Clear delay timeout if there was one
        if (this._delayTimeout) {
            this.removeDispose(this._delayTimeout);
            this._delayTimeout = null;
        }
        // Run check if there are already animations playing on the same properties
        // and stop them - the last animation takes precedence
        this.stopSameAnimations();
        // Reset counters
        this._pause = false;
        this._frame = 1;
        this._frames = __WEBPACK_IMPORTED_MODULE_4__System__["b" /* system */].frameRate * this.duration / 1000;
        this._startTime = Date.now();
        this._time = 0;
        this.staticOptions = [];
        // Process initial property values
        for (var i = this.animationOptions.length - 1; i >= 0; i--) {
            var options = this.animationOptions[i];
            if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](options.from)) {
                if (options.childObject) {
                    options.from = options.childObject[options.property];
                }
                else {
                    options.from = this.object[options.property];
                    if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](options.from)) {
                        options.from = __WEBPACK_IMPORTED_MODULE_2__defs_SVGDefaults__["a" /* SVGDefaults */][options.property];
                    }
                }
                /*if (!$type.hasValue(options.from)) {
                    throw Error("Could not get initial transition value.");
                }*/
            }
            if (options.from == options.to) { // || options.to == (<any>this.object)[options.property]){ this is not good, as dataItem.value is set to final at once, and we animate workingValue
                __WEBPACK_IMPORTED_MODULE_11__utils_Array__["k" /* remove */](this.animationOptions, options);
            }
            else {
                // Use different update methods for different value types
                if (__WEBPACK_IMPORTED_MODULE_12__utils_Type__["isNumber"](options.to)) {
                    // Numeric value
                    options.updateMethod = this.getProgressNumber;
                    // Check if initial value is not Percent
                    if (options.from instanceof __WEBPACK_IMPORTED_MODULE_6__utils_Percent__["a" /* Percent */]) {
                        // It is. Let's convert it to pixel value
                        // @todo Check if we can do this in a less hacky way
                        var convertedFrom = this.object[this.getHybridProperty(options.property, "pixel")];
                        if (!isNaN(convertedFrom)) {
                            options.from = convertedFrom;
                        }
                    }
                }
                else {
                    // Check if maybe we have a color or percent value
                    if (options.to instanceof __WEBPACK_IMPORTED_MODULE_5__utils_Color__["a" /* Color */]) {
                        // Yup - set resolved named color
                        //options.from = $colors.stringToColor(<string>options.from);
                        if (options.from) {
                            options.updateMethod = this.getProgressColor;
                        }
                        else {
                            // Static value
                            this.staticOptions.push(options);
                            __WEBPACK_IMPORTED_MODULE_11__utils_Array__["k" /* remove */](this.animationOptions, options);
                        }
                    }
                    else if (options.to instanceof __WEBPACK_IMPORTED_MODULE_6__utils_Percent__["a" /* Percent */]) {
                        // Percent
                        options.updateMethod = this.getProgressPercent;
                        // Check if the initial value is maybe in pixels
                        if (!isNaN(options.from)) {
                            // It is. Let's convert it
                            // @todo Check if we can do this in a less hacky way
                            var convertedFrom = this.object[this.getHybridProperty(options.property, "relative")];
                            if (!isNaN(convertedFrom)) {
                                options.from = Object(__WEBPACK_IMPORTED_MODULE_6__utils_Percent__["c" /* percent */])(convertedFrom * 100);
                            }
                        }
                    }
                    else {
                        // Static value
                        this.staticOptions.push(options);
                        __WEBPACK_IMPORTED_MODULE_11__utils_Array__["k" /* remove */](this.animationOptions, options);
                    }
                }
            }
        }
        // Register animation
        __WEBPACK_IMPORTED_MODULE_11__utils_Array__["j" /* move */](animations, this);
        // Register this animation in object's `animations` list
        __WEBPACK_IMPORTED_MODULE_11__utils_Array__["j" /* move */](this.object.animations, this);
        // Apply static options (just in case they were reset by previous
        // animation loop)
        this.applyStaticOptions();
        if (this.events.isEnabled("animationstart")) {
            this.events.dispatchImmediately("animationstart", {
                type: "animationstart",
                target: this,
                progress: this.progress
            });
        }
        this.update();
        // If duration is 0, just end animation
        if (this.duration === 0) {
            this.end();
        }
        return this;
    };
    /**
     * Sets loop count for the animation. If parameter is not a valid number the
     * animation will keep on looping indefinitely.
     *
     * @param  {number}     count  Number of times to loop animation
     * @return {Animation}         Animation
     */
    Animation.prototype.loop = function (count) {
        if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["isNumber"](count)) {
            count = Infinity;
        }
        this._loop = count;
        return this;
    };
    /**
     * Pauses animation.
     *
     * @return {Animation} Animation
     */
    Animation.prototype.pause = function () {
        this._pause = true;
        return this;
    };
    /**
     * Resumes paused animation.
     *
     * @return {Animation} Animation
     */
    Animation.prototype.resume = function () {
        this._pause = false;
        this._startTime = Date.now() - this._time;
        return this;
    };
    /**
     * Jumps to animation end. If animation is set to loop, this will start
     * another round of animation from start.
     *
     * @return {Animation} Animation
     */
    Animation.prototype.end = function () {
        // Pause and complete the progress
        this.pause();
        this.setProgress(1);
        // Apply static options
        this.applyStaticOptions();
        if (this.events.isEnabled("animationend")) {
            this.events.dispatchImmediately("animationend", {
                type: "animationend",
                target: this,
                progress: this.progress
            });
        }
        // Check if we should loop
        if (this._loop > 0) {
            this._loop--;
            this.start();
        }
        else {
            this.stop();
        }
        return this;
    };
    /**
     * Applies static options that can't be animated.
     */
    Animation.prototype.applyStaticOptions = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_11__utils_Array__["b" /* each */](this.staticOptions, function (options) {
            if (options.childObject) {
                options.childObject[options.property] = _this.progress == 1 ? options.to : options.from;
            }
            else {
                _this.object[options.property] = _this.progress == 1 ? options.to : options.from;
            }
        });
    };
    /**
     * Stops animation.
     *
     * When animation is stopped, the properties of the target object will remain
     * where they were at the moment when `stop()` was called.
     *
     * @param  {boolean}    skipEvent  Do not trigger `animationstop` event
     * @return {Animation}             Animation
     */
    Animation.prototype.stop = function (skipEvent) {
        this.pause();
        this.dispose();
        __WEBPACK_IMPORTED_MODULE_11__utils_Array__["k" /* remove */](this.object.animations, this);
        if (!skipEvent) {
            if (this.events.isEnabled("animationstop")) {
                this.events.dispatchImmediately("animationstop", {
                    type: "animationstop",
                    target: this,
                    progress: this.progress
                });
            }
        }
        return this;
    };
    /**
     * Returns numeric value accoring to progress between start and end values.
     *
     * @param  {IAnimationOptions}  options   Option
     * @param  {number}             progress  Progress (0-1)
     * @return {number}                       Value according to progress
     */
    Animation.prototype.getProgressNumber = function (options, progress) {
        return options.from + (options.to - options.from) * progress;
    };
    /**
     * Returns [[Percent]] value accoring to progress between start and end
     * values.
     *
     * @param  {IPercentAnimationOptions}  options   Option
     * @param  {number}                    progress  Progress (0-1)
     * @return {number}                              Value according to progress
     */
    Animation.prototype.getProgressPercent = function (options, progress) {
        return new __WEBPACK_IMPORTED_MODULE_6__utils_Percent__["a" /* Percent */](__WEBPACK_IMPORTED_MODULE_12__utils_Type__["getValue"](options.from).percent + (options.to.percent - __WEBPACK_IMPORTED_MODULE_12__utils_Type__["getValue"](options.from).percent) * progress);
    };
    /**
     * Returns color value accoring to progress between start and end values.
     *
     * @param  {IAnimationOptions}  options   Option
     * @param  {number}             progress  Progress (0-1)
     * @return {string}                       Color according to progress
     */
    Animation.prototype.getProgressColor = function (options, progress) {
        return new __WEBPACK_IMPORTED_MODULE_5__utils_Color__["a" /* Color */](__WEBPACK_IMPORTED_MODULE_9__utils_Colors__["interpolate"](__WEBPACK_IMPORTED_MODULE_12__utils_Type__["getValue"](options.from).rgb, options.to.rgb, progress));
    };
    /**
     * Sets current progress and updates object's numeric and color values.
     *
     * @param {number} progress Progress (0-1)
     */
    Animation.prototype.setProgress = function (progress) {
        var _this = this;
        this._time = this.duration * progress; // just in case we call this from outside
        __WEBPACK_IMPORTED_MODULE_11__utils_Array__["b" /* each */](this.animationOptions, function (options) {
            var value = options.updateMethod(options, progress);
            if (options.childObject) {
                options.childObject[options.property] = value;
            }
            else {
                _this.object[options.property] = value;
            }
        });
        this.progress = progress;
        if (this.events.isEnabled("animationprogress")) {
            this.events.dispatchImmediately("animationprogress", {
                type: "animationprogress",
                target: this,
                progress: this.progress
            });
        }
    };
    /**
     * Tracks and sets progress according to time or frames.
     *
     * @ignore Exclude from docs
     * @return {Animation} Animation
     */
    Animation.prototype.update = function () {
        if (!this._pause) {
            var progress = void 0;
            if (this.frameBased) {
                progress = this.easing(this._frame / this._frames);
            }
            else {
                this._time = __WEBPACK_IMPORTED_MODULE_10__utils_Math__["fitToRange"](Date.now() - this._startTime, 0, this.duration);
                progress = this.easing(this._time / this.duration);
                if (this.duration == 0 || !__WEBPACK_IMPORTED_MODULE_12__utils_Type__["isNumber"](progress)) {
                    progress = 1;
                }
            }
            this.setProgress(progress);
            if (this.frameBased) {
                this._frame++;
                if (this._frame >= this._frames) {
                    this.end();
                }
            }
            else {
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Math__["round"](this._time / this.duration, 6) == 1) {
                    this.end();
                }
            }
        }
        return this;
    };
    Object.defineProperty(Animation.prototype, "delayed", {
        /**
         * Returns `true` if this animation is delayed.
         *
         * @readonly
         * @return {boolean} [description]
         */
        get: function () {
            return this._delayTimeout ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks other animations currently running on the same object and removes
     * overlapping options from those other animations that are contained in
     * this animation.
     *
     * This is needed to ensure that no two confurent animations step on each
     * other's toes by trying to animate the same property.
     */
    Animation.prototype.stopSameAnimations = function () {
        var _this = this;
        // stop animation of the same property
        // TODO make this more efficient
        // TODO don't copy the array
        __WEBPACK_IMPORTED_MODULE_11__utils_Array__["b" /* each */](__WEBPACK_IMPORTED_MODULE_11__utils_Array__["a" /* copy */](this.object.animations), function (animation) {
            if (animation !== _this && !animation.delayed) {
                var killed_1 = [];
                __WEBPACK_IMPORTED_MODULE_11__utils_Array__["b" /* each */](_this.animationOptions, function (newOptions) {
                    __WEBPACK_IMPORTED_MODULE_11__utils_Array__["b" /* each */](animation.animationOptions, function (oldOptions) {
                        if (newOptions.property == oldOptions.property && newOptions.childObject == oldOptions.childObject) {
                            killed_1.push(oldOptions);
                            if (animation.animationOptions.length == 0) {
                                animation.stop(true);
                            }
                        }
                    });
                });
                __WEBPACK_IMPORTED_MODULE_11__utils_Array__["b" /* each */](killed_1, function (oldOptions) {
                    __WEBPACK_IMPORTED_MODULE_11__utils_Array__["k" /* remove */](animation.animationOptions, oldOptions);
                });
            }
        });
    };
    /**
     * [getHybridProperty description]
     *
     * @todo Description
     * @param  {string}     property [description]
     * @param  {"pixel" |        "relative"}  type [description]
     * @return {string}              [description]
     */
    Animation.prototype.getHybridProperty = function (property, type) {
        return type + property.charAt(0).toUpperCase() + property.substr(1);
    };
    return Animation;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Animation.js.map

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(17);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 47 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 48 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(0);
var core = __webpack_require__(52);
var fails = __webpack_require__(16);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(41);
var IObject = __webpack_require__(101);
var toObject = __webpack_require__(27);
var toLength = __webpack_require__(25);
var asc = __webpack_require__(183);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Filter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Animation__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__ = __webpack_require__(4);
/**
 * This module contains a base class for an SVG filter.
 *
 * Filters can be used to decorate, change and transform just about any DOM
 * element.
 *
 * A Filter works by applying one or more effects (primitives) to SVG element.
 *
 * For more information on how SVG filters work, refer to
 * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base filter class.
 *
 * This class while can be instantiated will not do anything. It is just a base
 * functionality for any other "real" filters to extend.
 *
 * Filters can be used to decorate, change and transform just about any DOM
 * element.
 *
 * A Filter works by applying one or more effects (primitives) to SVG element.
 *
 * For more information on how SVG filters work, refer to
 * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).
 *
 * @todo Example
 */
var Filter = /** @class */ (function (_super) {
    __extends(Filter, _super);
    /**
     * Constructor
     */
    function Filter() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A storage for Filter property/value pairs.
         *
         * @ignore Exclude from docs
         * @see {@link FilterProperties}
         * @type {FilterProperties}
         */
        _this.properties = {};
        /**
         * [_scale description]
         *
         * @todo Description
         * @type {number}
         */
        _this._scale = 1;
        /**
         * [_nonScaling description]
         *
         * @todo Description
         * @type {boolean}
         */
        _this._nonScaling = true;
        _this.className = "Filter";
        // Create a list to hold primitives (effect elements)
        _this.filterPrimitives = new __WEBPACK_IMPORTED_MODULE_3__utils_List__["b" /* List */]();
        // Automatically add added primitives to `_disposers` so they are discarded
        // when Filter object is destroyed (disposed)
        _this.filterPrimitives.events.on("insert", function (ev) {
            _this._disposers.push(ev.newValue);
        });
        // Set default dimensions
        _this.width = 120;
        _this.height = 120;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Appends actual filter elements to the filter group.
     *
     * @ignore Exclude from docs
     * @param {Group} filterElement An SVG `<group>` element to add filter element to
     */
    Filter.prototype.appendPrimitives = function (filterElement) {
        __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](this.filterPrimitives.iterator(), function (filterPrimitive) {
            filterElement.add(filterPrimitive);
        });
    };
    /**
     * Uses Transitions filter's values from current to target. This is used to
     * smoothly appear filter, rather than it pop into effect.
     *
     * @ignore Exclude from docs
     * @param  {IAnimationOptions[] | IAnimationOptions}  animationOptions  Animation options
     * @param  {number}                                   duration          Duration in milliseconds
     * @param  {(number) => number}                       easing            Easing function
     * @return {Animation}                                                  Animation instance
     */
    Filter.prototype.animate = function (animationOptions, duration, easing) {
        var animation = new __WEBPACK_IMPORTED_MODULE_2__utils_Animation__["a" /* Animation */](this, animationOptions, duration, easing).start();
        return animation;
    };
    Object.defineProperty(Filter.prototype, "width", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.properties["width"];
        },
        /**
         * Width of the filter element in pixels.
         *
         * @default 120
         * @param {number} value Width (px)
         */
        set: function (value) {
            this.properties["width"] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "height", {
        /**
         * @return {number} Height
         */
        get: function () {
            return this.properties["height"];
        },
        /**
         * Height of the filter element in pixels.
         *
         * @default 120
         * @param {number} value Height (px)
         */
        set: function (value) {
            this.properties["height"] = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies properties from another [[Filter]] object.
     *
     * @param {Filter} filter Source [[Filter]] object
     */
    Filter.prototype.copyFrom = function (filter) {
        var _this = this;
        _super.prototype.copyFrom.call(this, filter);
        __WEBPACK_IMPORTED_MODULE_5__utils_Object__["each"](filter.properties, function (key, value) {
            _this[key] = value;
        });
    };
    Object.defineProperty(Filter.prototype, "paper", {
        /**
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            return __WEBPACK_IMPORTED_MODULE_1__System__["b" /* system */].ghostPaper;
        },
        /**
         * Sets [[Paper]] instance to create filter's elements in.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            if (this._paper != paper) {
                this._paper = paper;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "animations", {
        /**
         * All animations currently in play.
         *
         * @ignore Exclude from docs
         * @return {Array<Animation>} List of animations
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_4__utils_Disposer__["c" /* MultiDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "scale", {
        /**
         * @ignore Exclude from docs
         */
        get: function () {
            return this._scale;
        },
        /**
         * [[Sprite]] uses this method to inform filter about it's scale.
         *
         * @ignore Exclude from docs
         */
        set: function (value) {
            this._scale = value;
            this.updateScale();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates filter properties which depend on scale.
     *
     * @ignore Exclude from docs
     */
    Filter.prototype.updateScale = function () {
        // Dummy method for extending classes to override.
    };
    Object.defineProperty(Filter.prototype, "nonScaling", {
        /**
         * @return {boolean} Non scaling?
         */
        get: function () {
            return this._nonScaling;
        },
        /**
         * If a filter is non scaling, it will look the same even if the sprite is
         * scaled, otherwise filter will scale together with a [[Sprite]].
         *
         * @default false
         * @param {boolean}  value  Non scaling?
         */
        set: function (value) {
            this._nonScaling = value;
            if (!value) {
                this._scale = 1;
            }
            this.updateScale();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "sprite", {
        /**
         * A target element this filter is currently attached to.
         *
         * We need to keep track of it because one filter can be used for just one
         * element, so we have to remove it from the old "parent" when attaching to
         * the new one.
         *
         * @ignore Exclude from docs
         * @param {Sprite}  value  Target element
         */
        set: function (value) {
            this.setSprite(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets filter's target element.
     *
     * @ignore Exclude from docs
     * @param {Sprite}  value  Element filter is being attached to
     */
    Filter.prototype.setSprite = function (value) {
        if (this._sprite && this._sprite != value) {
            this._sprite.filters.removeValue(this);
        }
        this._sprite = value;
    };
    return Filter;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Filter.js.map

/***/ }),
/* 52 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.5' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(23)) {
  var LIBRARY = __webpack_require__(67);
  var global = __webpack_require__(13);
  var fails = __webpack_require__(16);
  var $export = __webpack_require__(0);
  var $typed = __webpack_require__(133);
  var $buffer = __webpack_require__(189);
  var ctx = __webpack_require__(41);
  var anInstance = __webpack_require__(73);
  var propertyDesc = __webpack_require__(65);
  var hide = __webpack_require__(31);
  var redefineAll = __webpack_require__(75);
  var toInteger = __webpack_require__(48);
  var toLength = __webpack_require__(25);
  var toIndex = __webpack_require__(280);
  var toAbsoluteIndex = __webpack_require__(69);
  var toPrimitive = __webpack_require__(46);
  var has = __webpack_require__(35);
  var classof = __webpack_require__(103);
  var isObject = __webpack_require__(17);
  var toObject = __webpack_require__(27);
  var isArrayIter = __webpack_require__(180);
  var create = __webpack_require__(70);
  var getPrototypeOf = __webpack_require__(38);
  var gOPN = __webpack_require__(71).f;
  var getIterFn = __webpack_require__(182);
  var uid = __webpack_require__(66);
  var wks = __webpack_require__(22);
  var createArrayMethod = __webpack_require__(50);
  var createArrayIncludes = __webpack_require__(124);
  var speciesConstructor = __webpack_require__(131);
  var ArrayIterators = __webpack_require__(185);
  var Iterators = __webpack_require__(88);
  var $iterDetect = __webpack_require__(128);
  var setSpecies = __webpack_require__(72);
  var arrayFill = __webpack_require__(184);
  var arrayCopyWithin = __webpack_require__(270);
  var $DP = __webpack_require__(24);
  var $GOPD = __webpack_require__(37);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(275);
var $export = __webpack_require__(0);
var shared = __webpack_require__(123)('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(278))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Keyboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return keyboard; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Type__ = __webpack_require__(2);
/**
 * A collection of keyboard-related utilities accessible via `keyboard`
 * instance.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * A class that represents collection of keyboard-related utilities.
 *
 * Do not instantiate this class directly, but rather use `keyboard` variable.
 */
var Keyboard = /** @class */ (function () {
    function Keyboard() {
    }
    /**
     * Returns a named key based on information contained in the event or
     * "other".
     *
     * @param  {KeyboardEvent}  ev  A keyboard event
     * @return {KeyboardKeys}       Keyboard named key
     */
    Keyboard.prototype.getEventKey = function (ev) {
        // Get the key code
        var code = ev.keyCode || ev.which, key;
        // Map to internal key
        switch (code) {
            case 38:
                key = "up";
                break;
            case 40:
                key = "down";
                break;
            case 37:
                key = "left";
                break;
            case 39:
                key = "right";
                break;
            case 13:
                key = "enter";
                break;
            case 27:
                key = "esc";
                break;
            case 36:
                key = "home";
                break;
            case 35:
                key = "end";
                break;
            case 9:
                key = "tab";
                break;
            case 17:
                key = "ctrl";
                break;
            case 18:
                key = "alt";
                break;
            case 16:
                key = "shift";
                break;
            case 32:
                key = "space";
                break;
            case 36:
                key = "home";
                break;
            case 35:
                key = "end";
                break;
            case 33:
                key = "pgup";
                break;
            case 34:
                key = "pgdn";
                break;
            case 45:
                key = "ins";
                break;
            case 46:
                key = "del";
                break;
            case 107:
                key = "plus";
                break;
            case 109:
                key = "minus";
                break;
            default:
                key = "other";
                break;
        }
        return key;
    };
    /**
     * Checks if event key is one or more of the selected named keys.
     *
     * @param  {KeyboardEvent}      ev   Keyboard event
     * @param  {string | string[]}  key  Named key or array of keys
     * @return {boolean}                 Is event key one of the list?
     */
    Keyboard.prototype.isKey = function (ev, key) {
        var eventKey = this.getEventKey(ev);
        if (__WEBPACK_IMPORTED_MODULE_0__Type__["isString"](key)) {
            key = [key];
        }
        return key.indexOf(eventKey) !== -1;
    };
    /**
     * Returns `true` if shift key was presset at the moment of the event.
     *
     * @param  {KeyboardEvent | MouseEvent}  ev  Event object
     * @return {boolean}                         Was shift pressed?
     */
    Keyboard.prototype.shiftKey = function (ev) {
        return ev.shiftKey;
    };
    /**
     * Returns `true` if ctrl key was presset at the moment of the event.
     *
     * @param  {KeyboardEvent | MouseEvent}  ev  Event object
     * @return {boolean}                         Was ctrl pressed?
     */
    Keyboard.prototype.ctrlKey = function (ev) {
        return ev.ctrlKey;
    };
    /**
     * Returns `true` if alt key was presset at the moment of the event
     * @param  {KeyboardEvent | MouseEvent}  ev  Event object
     * @return {boolean}                         Was alt pressed?
     */
    Keyboard.prototype.altKey = function (ev) {
        return ev.altKey;
    };
    /**
     * Returns `true` if meta key was presset at the moment of the event
     * @param  {KeyboardEvent | MouseEvent}  ev  Event object
     * @return {boolean}                         Was meta pressed?
     */
    Keyboard.prototype.metaKey = function (ev) {
        return ev.metaKey;
    };
    return Keyboard;
}());

/**
 * A single [[Keyboard]] instance to be reused across all elements so that
 * they don't need to instantiate their own.
 *
 * @ignore Exclude from docs
 */
var keyboard = new Keyboard();
//# sourceMappingURL=Keyboard.js.map

/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RoundedRectangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Type__ = __webpack_require__(2);
/**
 * Rounded rectangle module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a rectangle with rounded corners.
 *
 * @see {@link IRoundedRectangleEvents} for a list of available events
 * @see {@link IRoundedRectangleAdapters} for a list of available Adapters
 */
var RoundedRectangle = /** @class */ (function (_super) {
    __extends(RoundedRectangle, _super);
    /**
     * Constructor
     */
    function RoundedRectangle() {
        var _this = _super.call(this) || this;
        _this.className = "RoundedRectangle";
        _this.element = _this.paper.add("path");
        _this.pixelPerfect = true;
        _this.cornerRadius(3, 3, 3, 3);
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    RoundedRectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.innerWidth;
        var h = this.innerHeight;
        if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](w) && __WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](h)) {
            var maxcr = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["min"](Math.abs(w / 2), Math.abs(h / 2));
            var crtl = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](this.cornerRadiusTopLeft, 0, maxcr);
            var crtr = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](this.cornerRadiusTopRight, 0, maxcr);
            var crbr = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](this.cornerRadiusBottomRight, 0, maxcr);
            var crbl = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](this.cornerRadiusBottomLeft, 0, maxcr);
            var lineT = "M" + crtl + ",0 L" + (w - crtr) + ",0";
            var lineB = " L" + crbl + "," + h;
            var lineL = " L0," + crtl;
            var lineR = " L" + w + "," + (h - crbr);
            var arcTR = " a" + crtr + "," + crtr + " 0 0 1 " + crtr + "," + crtr;
            var arcBR = " a" + crbr + "," + crbr + " 0 0 1 -" + crbr + "," + crbr;
            var arcBL = " a" + crbl + "," + crbl + " 0 0 1 -" + crbl + ",-" + crbl;
            var arcTL = " a" + crtl + "," + crtl + " 0 0 1 " + crtl + ",-" + crtl;
            var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + " Z";
            this.element.attr({ "d": path });
        }
    };
    /**
     * Sets radius for all four corners at ones.
     *
     * All numbers are in pixels.
     *
     * @param {number}  tl  Top-left corner
     * @param {number}  tr  Top-right corner
     * @param {number}  bl  Bottom-left corner
     * @param {number}  br  Bottom-right corner
     */
    RoundedRectangle.prototype.cornerRadius = function (tl, tr, bl, br) {
        this.cornerRadiusTopLeft = tl;
        this.cornerRadiusTopRight = tr;
        this.cornerRadiusBottomLeft = bl;
        this.cornerRadiusBottomRight = br;
    };
    Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusTopLeft", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadiusTopLeft");
        },
        /**
         * Radius of the top-left corner in pixels.
         *
         * @default 3
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadiusTopLeft", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusTopRight", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadiusTopRight");
        },
        /**
         * Radius of the top-right corner in pixels.
         *
         * @default 3
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadiusTopRight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusBottomRight", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadiusBottomRight");
        },
        /**
         * Radius of the bottom-right corner in pixels.
         *
         * @default 3
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadiusBottomRight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusBottomLeft", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadiusBottomLeft");
        },
        /**
         * Radius of the bottom-left corner in pixels.
         *
         * @default 3
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadiusBottomLeft", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Measures the element.
     *
     * @ignore Exclude from docs
     */
    RoundedRectangle.prototype.measureElement = function () {
        this._bbox = { x: 0, y: 0, width: this.innerWidth, height: this.innerHeight };
    };
    return RoundedRectangle;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=RoundedRectangle.js.map

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Component; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_SortedList__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__export_Export__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__data_DataSource__ = __webpack_require__(219);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__responsive_Responsive__ = __webpack_require__(221);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__DataItem__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Ease__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__utils_Type__ = __webpack_require__(2);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */
















/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A Component represents an independent functional element or control, that
 * can have it's own behavior, children, data, etc.
 *
 * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].
 *
 * @see {@link IComponentEvents} for a list of available events
 * @see {@link IComponentAdapters} for a list of available Adapters
 * @important
 */
var Component = /** @class */ (function (_super) {
    __extends(Component, _super);
    /**
     * Constructor
     */
    function Component() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds data field names.
         *
         * Data fields define connection beween [[DataItem]] and actual properties
         * in raw data.\z
         *
         * @type {IComponentDataFields}
         */
        _this.dataFields = {};
        /**
         * A list of [[DataSource]] definitions of external data source.
         *
         * @ignore Exclude from docs
         * @type {Object}
         */
        _this._dataSources = {};
        /**
         * This is used when only new data is invalidated (if added using `addData`
         * method).
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this._parseDataFrom = 0;
        /**
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {List<Component>}
         */
        _this._dataUsers = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * [_start description]
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this._start = 0;
        /**
         * [_end description]
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this._end = 1;
        /**
         * If set to `true`, changing data range in element will not trigger
         * `daterangechanged` event.
         *
         * @type {boolean}
         */
        _this.skipRangeEvent = false;
        /**
         * Duration (ms) to animate between different range selections.
         * @type {number}
         */
        _this.rangeChangeDuration = 0;
        /**
         * An easing function to use for range change animation.
         *
         * @see {@link Ease}
         * @type {function}
         */
        _this.rangeChangeEasing = __WEBPACK_IMPORTED_MODULE_11__utils_Ease__["cubicOut"];
        /**
         * A duration (ms) of each data parsing step. A Component parses its data in
         * chunks in order to avoid completely freezing the machine when large data
         * sets are used. This setting will control how many milliseconds should pass
         * when parsing data until parser stops for a brief moment to let other
         * processes catch up.
         *
         * @type {number}
         */
        _this.parsingStepDuration = 100;
        /**
         * [dataInvalid description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {boolean}
         */
        _this.dataInvalid = false;
        /**
         *
         * @ignore Exclude from docs
         */
        _this.rawDataInvalid = false;
        /**
         * [dataRangeInvalid description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {boolean}
         */
        _this.dataRangeInvalid = false;
        /**
         * [dataItemsInvalid description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {boolean}
         */
        _this.dataItemsInvalid = false;
        /**
         * Duration (ms) the interpolation (morphing) animation should take when
         * transiting from one value into another.
         *
         * @type {number}
         */
        _this.interpolationDuration = 0;
        /**
         * An easing function to use for the interpolation (morphing) animation for
         * transition between two values.
         *
         * @see {@link Ease}
         * @type {function}
         */
        _this.interpolationEasing = __WEBPACK_IMPORTED_MODULE_11__utils_Ease__["cubicOut"];
        /**
         * Should interpolation animations for each element's data item play
         * consequently?
         *
         * @type {boolean}
         */
        _this.sequencedInterpolation = true;
        /**
         * A delay (ms) to wait between animating each subsequent data item's
         * interpolation animation.
         *
         * @type {number}
         */
        _this.sequencedInterpolationDelay = 0;
        /**
         * A progress (0-1) for the data validation process.
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this.dataValidationProgress = 0;
        _this.className = "Component";
        _this.invalidateData();
        // Set up events
        _this.events.on("maxsizechanged", _this.invalidate, _this);
        // TODO what about remove ?
        _this.dataUsers.events.on("insert", _this.handleDataUserAdded, _this);
        // Set up disposers
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_1__utils_List__["c" /* ListDisposer */](_this.dataItems));
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {DataItem} Data Item
     */
    Component.prototype.createDataItem = function () {
        return new __WEBPACK_IMPORTED_MODULE_7__DataItem__["a" /* DataItem */]();
    };
    /**
     * [handleDataUserAdded description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {IListEvents<Component>["insert"]} event Event object
     */
    Component.prototype.handleDataUserAdded = function (event) {
        var dataUser = event.newValue;
        dataUser.dataProvider = this;
    };
    /**
     * [handleDataItemValueChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemValueChange = function () {
        this.invalidateDataItems();
    };
    /**
     * [handleDataItemWorkingValueChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemWorkingValueChange = function (event) {
    };
    /**
     * [handleDataItemWorkingLocationChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemWorkingLocationChange = function (event) {
    };
    /**
     * [handleDataItemCalculatedValueChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemCalculatedValueChange = function () {
    };
    /**
     * [handleDataItemPropertyChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemPropertyChange = function () {
    };
    /**
     * Populates a [[DataItem]] width data from data source.
     *
     * Loops through all the fields and if such a field is found in raw data
     * object, a corresponding value on passed in `dataItem` is set.
     *
     * @ignore Exclude from docs
     * @param {Object} item
     */
    Component.prototype.processDataItem = function (dataItem, dataContext, index) {
        var _this = this;
        if (dataItem) {
            if (!dataContext) {
                dataContext = {};
            }
            // store reference to original data item
            dataItem.dataContext = dataContext;
            __WEBPACK_IMPORTED_MODULE_14__utils_Object__["each"](this.dataFields, function (fieldName, fieldValue) {
                var value = dataContext[fieldValue];
                // Apply adapters to a retrieved value
                value = _this.adapter.apply("dataContextValue", {
                    field: fieldName,
                    value: value,
                    dataItem: dataItem
                }).value;
                if (dataItem.hasChildren[fieldName]) {
                    if (value) {
                        var children = new __WEBPACK_IMPORTED_MODULE_2__utils_SortedList__["b" /* OrderedListTemplate */](_this.createDataItem());
                        children.events.on("insert", _this.handleDataItemAdded, _this);
                        children.events.on("remove", _this.handleDataItemRemoved, _this);
                        for (var i = 0; i < value.length; i++) {
                            var rawDataItem = value[i];
                            var childDataItem = children.create();
                            childDataItem.parent = dataItem;
                            _this.processDataItem(childDataItem, rawDataItem, i);
                        }
                        var anyDataItem = dataItem;
                        anyDataItem[fieldName] = children;
                    }
                }
                else {
                    // data is converted to numbers/dates in each dataItem
                    if (__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](value)) {
                        dataItem[fieldName] = value;
                    }
                }
            });
            __WEBPACK_IMPORTED_MODULE_14__utils_Object__["each"](this.propertyFields, function (f, fieldValue) {
                var value = dataContext[fieldValue];
                if (__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](value)) {
                    dataItem.setProperty(f, value);
                }
            });
            this._disposers.push(dataItem.events.on("valuechanged", this.handleDataItemValueChange, this));
            this._disposers.push(dataItem.events.on("workingvaluechanged", this.handleDataItemWorkingValueChange, this));
            this._disposers.push(dataItem.events.on("calculatedvaluechanged", this.handleDataItemCalculatedValueChange, this));
            this._disposers.push(dataItem.events.on("propertychanged", this.handleDataItemPropertyChange, this));
            this._disposers.push(dataItem.events.on("locationchanged", this.handleDataItemValueChange, this));
            this._disposers.push(dataItem.events.on("workinglocationchanged", this.handleDataItemWorkingLocationChange, this));
        }
    };
    /**
     *
     * When validating raw data, instead of processing data item, we update it
     *
     * @ignore Exclude from docs
     * @param {Object} item
     */
    Component.prototype.updateDataItem = function (dataItem) {
        var _this = this;
        if (dataItem) {
            var dataContext_1 = dataItem.dataContext;
            __WEBPACK_IMPORTED_MODULE_14__utils_Object__["each"](this.dataFields, function (fieldName, fieldValue) {
                var value = dataContext_1[fieldValue];
                // Apply adapters to a retrieved value
                value = _this.adapter.apply("dataContextValue", {
                    field: fieldName,
                    value: value,
                    dataItem: dataItem
                }).value;
                if (dataItem.hasChildren[fieldName]) {
                    if (value) {
                        var anyDataItem = dataItem;
                        var children = (anyDataItem[fieldName]);
                        __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__["each"](children.iterator(), function (child) {
                            _this.updateDataItem(child);
                        });
                    }
                }
                else {
                    // data is converted to numbers/dates in each dataItem
                    if (__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](value)) {
                        dataItem[fieldName] = value;
                    }
                }
            });
            __WEBPACK_IMPORTED_MODULE_14__utils_Object__["each"](this.propertyFields, function (f, fieldValue) {
                var value = dataContext_1[fieldValue];
                if (__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](value)) {
                    dataItem.setProperty(f, value);
                }
            });
        }
    };
    /**
     * [validateDataElements description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.validateDataElements = function () {
        for (var i = this.startIndex; i < this.endIndex; i++) {
            this.validateDataElement(this.dataItems.getIndex(i));
        }
    };
    /**
     * Validates this element and its related elements.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.validate = function () {
        this.validateDataElements();
        _super.prototype.validate.call(this);
    };
    /**
     * [validateDataElement description]
     *
     * @ignore Exclude from docs
     * @param {this["_dataItem"]} dataItem [description]
     */
    Component.prototype.validateDataElement = function (dataItem) {
    };
    /**
     * Adds one or several (arrat) of data items to the existing data.
     *
     * @param {Object | Object[]} rawDataItem One or many raw data item objects
     */
    Component.prototype.addData = function (rawDataItem) {
        this._parseDataFrom = this.data.length; // save length of parsed data
        if (rawDataItem instanceof Array) {
            this.data = this.data.concat(rawDataItem);
        }
        else {
            this.data.push(rawDataItem); // add to raw data array
        }
        this.invalidateData();
    };
    /**
     * Triggers a data (re)parsing.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.invalidateData = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidDatas, this);
        this.dataInvalid = true;
        __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__["each"](this._dataUsers.iterator(), function (x) {
            x.invalidateDataItems();
        });
    };
    /**
     * [invalidateDataUsers description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.invalidateDataUsers = function () {
        __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__["each"](this._dataUsers.iterator(), function (x) {
            x.invalidate();
        });
    };
    /**
     * Invalidates data values. When data array is not changed, but values within
     * it changes, we invalidate data so that component would process changes.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.invalidateDataItems = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidDataItems, this);
        this.dataItemsInvalid = true;
        __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__["each"](this._dataUsers.iterator(), function (x) {
            x.invalidateDataItems();
        });
    };
    /**
     * Invalidates data range. This is done when data which must be shown
     * changes (chart is zoomed for example).
     *
     * @ignore Exclude from docs
     */
    Component.prototype.invalidateDataRange = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        this.dataRangeInvalid = true;
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidDataRange, this);
    };
    /**
     * Processes data range.
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.validateDataRange = function () {
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidDataRange, this);
        this.dataRangeInvalid = false;
        if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {
            this.rangeChangeUpdate();
        }
        this.appendDataItems();
        this.invalidate();
        this.dispatchImmediately("datarangechanged");
    };
    /**
     * [sliceData description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.sliceData = function () {
        this._workingStartIndex = this.startIndex;
        this._workingEndIndex = this.endIndex;
    };
    /**
     * [rangeChangeUpdate description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.rangeChangeUpdate = function () {
        this.sliceData();
        this._prevStartIndex = this.startIndex;
        this._prevEndIndex = this.endIndex;
    };
    /**
     * [removeDataItems description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.removeDataItems = function () {
    };
    /**
     * [appendDataItems description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.appendDataItems = function () {
        // todo: think if we can optimize this place, maybe mark the ones which should not be removed and then remove all others?
        this.removeDataItems();
        // TODO use an iterator instead
        for (var i = this.startIndex; i < this.endIndex; i++) {
            // data item
            var dataItem = this.dataItems.getIndex(i);
            if (dataItem) {
                // append item
                this.appendDataItem(dataItem);
            }
        }
    };
    /**
     * [appendDataItem description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {this["_dataItem"]} dataItem [description]
     */
    Component.prototype.appendDataItem = function (dataItem) {
        // todo: this makes default state to be applied a lot of times. Need to think of a diff solution
        // and we also need to find when we actually need this
        //dataItem.invalidate();
    };
    /**
     * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.
     * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data
     */
    Component.prototype.invalidateRawData = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidRawDatas, this);
        this.rawDataInvalid = true;
        __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__["each"](this._dataUsers.iterator(), function (x) {
            x.invalidateRawData();
        });
    };
    /**
     * @ignore
     */
    Component.prototype.validateRawData = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidRawDatas, this);
        __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__["each"](this.dataItems.iterator(), function (dataItem) {
            if (dataItem) {
                _this.updateDataItem(dataItem);
            }
        });
    };
    /**
     * Validates (processes) data.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.validateData = function () {
        this.dispatchImmediately("predatavalidate");
        this.dataInvalid = false;
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidDatas, this);
        this.dataValidationProgress = 0;
        // need this to slice new data
        this._prevStartIndex = undefined;
        this._prevEndIndex = undefined;
        // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always
        this._startIndex = undefined;
        this._endIndex = undefined;
        if (this.dataFields.data && this.dataItem) {
            var dataContext = this.dataItem.dataContext;
            this._data = dataContext[this.dataFields.data];
        }
        if (this.data.length > 0) {
            var preloader = this.preloader;
            // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only
            if (this._parseDataFrom === 0) {
                __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__["each"](this.dataItems.iterator(), function (dataItem) {
                    dataItem.dispose();
                });
                this.dataItems.clear();
                // and for all components
                __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__["each"](this._dataUsers.iterator(), function (dataUser) {
                    dataUser.dataItems.clear();
                    // need this to slice new data
                    dataUser._prevStartIndex = undefined;
                    dataUser._prevEndIndex = undefined;
                    // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always
                    dataUser._startIndex = undefined;
                    dataUser._endIndex = undefined;
                });
            }
            var counter = 0;
            var startTime = Date.now();
            // parse data
            var i_1 = this._parseDataFrom;
            var n = this.data.length;
            var _loop_1 = function () {
                var rawDataItem = this_1.data[i_1];
                var dataItem = this_1.dataItems.create();
                this_1.processDataItem(dataItem, rawDataItem, i_1);
                __WEBPACK_IMPORTED_MODULE_13__utils_Iterator__["each"](this_1._dataUsers.iterator(), function (dataUser) {
                    var dataUserDataItem = dataUser.dataItems.create();
                    dataUser.processDataItem(dataUserDataItem, rawDataItem, i_1);
                });
                counter++;
                // show preloader if this takes too many time
                if (counter == 100) { // no need to check it on each data item
                    counter = 0;
                    var elapsed = Date.now() - startTime;
                    if (elapsed > this_1.parsingStepDuration) {
                        if (i_1 < this_1.data.length - 10) {
                            this_1._parseDataFrom = i_1 + 1;
                            // update preloader
                            if (preloader) {
                                if (i_1 / this_1.data.length > 0.5 && !this_1.preloader.visible) {
                                    // do not start showing
                                }
                                else {
                                    preloader.progress = i_1 / this_1.data.length;
                                }
                            }
                            this_1.dataValidationProgress = i_1 / this_1.data.length;
                            i_1 = this_1.data.length; // stops cycle
                            this_1.invalidateData();
                            return { value: void 0 };
                        }
                    }
                }
            };
            var this_1 = this;
            for (i_1; i_1 < n; i_1++) {
                var state_1 = _loop_1();
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            if (preloader) {
                preloader.progress = 1;
            }
        }
        this.dataValidationProgress = 1;
        this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.
        this.invalidateDataItems();
        this.dispatch("datavalidated");
    };
    /**
     * Validates (processes) data items.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.validateDataItems = function () {
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidDataItems, this);
        this.dataItemsInvalid = false;
        this.invalidateDataRange();
        this.dispatch("valueschanged");
    };
    Object.defineProperty(Component.prototype, "data", {
        /**
         * Returns element's source (raw) data.
         *
         * @return {any[]} Data
         */
        get: function () {
            if (!this._data) {
                this._data = [];
            }
            return this._data;
        },
        /**
         * Sets source (raw) data for the element. The "data" is always an `Array`
         * of objects.
         *
         * @param {any[]} value Data
         */
        set: function (value) {
            // array might be the same, but there might be items added
            // todo: check if array changed, toString maybe?
            //if (this._data != value) {
            this._data = value;
            this.invalidateData();
            //}
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns (creates if necessary) a [[DataSource]] bound to any specific
     * property.
     *
     * For example if I want to bind `data` to an external JSON file, I'd create
     * a DataSource for it.
     *
     * @param  {string}      property  Property to bind external data to
     * @return {DataSource}            A DataSource for property
     */
    Component.prototype.getDataSource = function (property) {
        var _this = this;
        if (!__WEBPACK_IMPORTED_MODULE_15__utils_Type__["hasValue"](this._dataSources[property])) {
            this._dataSources[property] = new __WEBPACK_IMPORTED_MODULE_5__data_DataSource__["a" /* DataSource */]();
            this._dataSources[property].component = this;
            this.setDataSourceEvents(this._dataSources[property], property);
            this._dataSources[property].adapter.add("dateFields", function (val) {
                return _this.dataSourceDateFields(val);
            });
            this._dataSources[property].adapter.add("numberFields", function (val) {
                return _this.dataSourceNumberFields(val);
            });
            this.events.on("inited", this.loadData, this);
        }
        return this._dataSources[property];
    };
    Object.defineProperty(Component.prototype, "dataSource", {
        /**
         * Returns a [[DataSource]] specifically for loading Component's data.
         *
         * @return {DataSource} Data source
         */
        get: function () {
            if (!this._dataSources["data"]) {
                this.getDataSource("data");
            }
            return this._dataSources["data"];
        },
        /**
         * Sets a [[DataSource]] to be used for loading Component's data.
         *
         * @param {DataSource} value Data source
         */
        set: function (value) {
            if (this._dataSources["data"]) {
                this.removeDispose(this._dataSources["data"]);
            }
            this._dataSources["data"] = value;
            this._dataSources["data"].component = this;
            this.events.on("inited", this.loadData, this);
            this.setDataSourceEvents(value, "data");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initiates loading of the external data via [[DataSource]].
     *
     * @ignore Exclude from docs
     */
    Component.prototype.loadData = function () {
        this._dataSources["data"].load();
    };
    /**
     * This function is called by the [[DataSource]]'s `dateFields` adapater
     * so that particular chart types can popuplate this setting with their
     * own type-speicifc data fields so they are parsed properly.
     *
     * @ignore Exclude from docs
     * @param  {string[]}  value  Array of date fields
     * @return {string[]}         Array of date fields populated with chart's date fields
     */
    Component.prototype.dataSourceDateFields = function (value) {
        return value;
    };
    /**
     * This function is called by the [[DataSource]]'s `numberFields` adapater
     * so that particular chart types can popuplate this setting with their
     * own type-speicifc data fields so they are parsed properly.
     *
     * @ignore Exclude from docs
     * @param  {string[]}  value  Array of number fields
     * @return {string[]}         Array of number fields populated with chart's number fields
     */
    Component.prototype.dataSourceNumberFields = function (value) {
        return value;
    };
    /**
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {string[]}  list        [description]
     * @param  {object}    dataFields  [description]
     * @param  {string[]}  targetList  [description]
     * @return {string[]}              [description]
     */
    Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["b" /* each */](targetList, function (value) {
            if (dataFields[value] && __WEBPACK_IMPORTED_MODULE_10__utils_Array__["g" /* indexOf */](list, dataFields[value]) === -1) {
                list.push(dataFields[value]);
            }
        });
        return list;
    };
    /**
     * Sets events on a [[DataSource]].
     *
     * @ignore Exclude from docs
     */
    Component.prototype.setDataSourceEvents = function (ds, property) {
        var _this = this;
        ds.events.on("start", function (ev) {
            _this.preloader.progress = 0;
            //this.preloader.label.text = this.language.translate("Loading");
        });
        ds.events.on("loadstart", function (ev) {
            _this.preloader.progress = 0.25;
        });
        ds.events.on("loadstop", function (ev) {
            _this.preloader.progress = 0.5;
        });
        ds.events.on("parsestop", function (ev) {
            _this.preloader.progress = 0.75;
        });
        ds.events.on("stop", function (ev) {
            _this.preloader.progress = 1;
        });
        ds.events.on("error", function (ev) {
            _this.preloader.progress = 1;
            _this.showModal(ev.message);
        });
        if (property) {
            ds.events.on("done", function (ev) {
                _this.preloader.progress = 1;
                if (property == "data" && !__WEBPACK_IMPORTED_MODULE_15__utils_Type__["isArray"](ev.data)) {
                    ev.data = [ev.data];
                }
                _this[property] = ev.data;
            });
        }
    };
    Object.defineProperty(Component.prototype, "responsive", {
        /**
         * Returns (creates if necessary) a new [[DataSource]] object for loading
         * external data files.
         *
         * @return {DataSource} Data source
         */
        get: function () {
            if (!this._responsive) {
                this._responsive = new __WEBPACK_IMPORTED_MODULE_6__responsive_Responsive__["a" /* Responsive */]();
                this._responsive.component = this;
            }
            return this._responsive;
        },
        /**
         * Sets a [[Responsive]] instance to be used when applying conditional
         * property values.
         *
         * @param {Responsive} value Data source
         */
        set: function (value) {
            this._responsive = value;
            this._responsive.component = this;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets current zoom.
     *
     * The range uses relative values from 0 to 1, with 0 marking beginning and 1
     * marking end of the available data range.
     *
     * @param  {IRange}  range          Range
     * @param  {boolean} skipRangeEvent Should rangechanged event not be triggered?
     * @param  {boolean} instantly      Do not animate?
     * @return {IRange}                 Actual mofidied range (taking `maxZoomFactor` into account)
     */
    Component.prototype.zoom = function (range, skipRangeEvent, instantly) {
        var start = range.start;
        var end = range.end;
        var priority = range.priority;
        if (!__WEBPACK_IMPORTED_MODULE_15__utils_Type__["isNumber"](start) || !__WEBPACK_IMPORTED_MODULE_15__utils_Type__["isNumber"](end)) {
            return { start: this.start, end: this.end };
        }
        if (this._finalStart != start || this._finalEnd != end) {
            var maxZoomFactor = this.maxZoomFactor;
            // most likely we are dragging left scrollbar grip here, so we tend to modify end
            if (priority == "start") {
                // add to the end
                if (1 / (end - start) > maxZoomFactor) {
                    end = start + 1 / maxZoomFactor;
                }
                //unless end is > 0
                if (end > 1 && end - start < 1 / maxZoomFactor) {
                    //end = 1;
                    start = end - 1 / maxZoomFactor;
                }
            }
            // most likely we are draggin right, so we modify left
            else {
                // remove from start
                if (1 / (end - start) > maxZoomFactor) {
                    start = end - 1 / maxZoomFactor;
                }
                if (start < 0 && end - start < 1 / maxZoomFactor) {
                    //start = 0;
                    end = start + 1 / maxZoomFactor;
                }
            }
            this._finalEnd = end;
            this._finalStart = start;
            this.skipRangeEvent = skipRangeEvent;
            if (this.rangeChangeDuration > 0 && !instantly) {
                // todo: maybe move this to Animation
                var rangeChangeAnimation = this.rangeChangeAnimation;
                if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {
                    var options = rangeChangeAnimation.animationOptions;
                    if (options.length > 1) {
                        if (options[0].to == start && options[1].to == end) {
                            return { start: start, end: end };
                        }
                    }
                }
                this.rangeChangeAnimation = this.animate([{ property: "start", to: start }, { property: "end", to: end }], this.rangeChangeDuration, this.rangeChangeEasing);
            }
            else {
                this.start = start;
                this.end = end;
            }
        }
        return { start: start, end: end };
    };
    /**
     * Zooms to specific data items using their index in data.
     *
     * @param {number}  startIndex     Index of the starting data item
     * @param {number}  endIndex       Index of the ending data item
     * @param {boolean} skipRangeEvent Should rangechanged event not be triggered?
     * @param {boolean} instantly      Do not animate?
     */
    Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {
        if (!__WEBPACK_IMPORTED_MODULE_15__utils_Type__["isNumber"](startIndex) || !__WEBPACK_IMPORTED_MODULE_15__utils_Type__["isNumber"](endIndex)) {
            return;
        }
        var start = startIndex / this.dataItems.length;
        var end = endIndex / this.dataItems.length;
        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);
    };
    Object.defineProperty(Component.prototype, "zoomFactor", {
        /**
         * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of
         * the available data)
         *
         * @return {number} Zoom factor
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_9__utils_Math__["fitToRange"](1 / (this.end - this.start), 1, this.maxZoomFactor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "maxZoomFactor", {
        /**
         * Returns max available `zoomFactor`. The element will not allow zoom to
         * occur beyond this factor.
         *
         * @return {number} Maximum `zoomFactor`
         */
        get: function () {
            return this.getPropertyValue("maxZoomFactor");
        },
        /**
         * Sets max available `zoomFactor`.
         *
         * @param {number} value Maximum `zoomFactor`
         */
        set: function (value) {
            if (this.setPropertyValue("maxZoomFactor", value)) {
                this.invalidateDataRange();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "startIndex", {
        /**
         * Current starting index.
         *
         * @return {number} Start index
         */
        get: function () {
            if (!__WEBPACK_IMPORTED_MODULE_15__utils_Type__["isNumber"](this._startIndex)) {
                this.startIndex = 0;
            }
            return this._startIndex;
        },
        /**
         * Sets current starting index.
         *
         * @ignore Exclude from docs
         * @param {number} value Start index
         */
        set: function (value) {
            this._startIndex = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["fitToRange"](Math.round(value), 0, this.dataItems.length);
            this.start = this._startIndex / this.dataItems.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "endIndex", {
        /**
         * Current ending index.
         *
         * @return {number} End index
         */
        get: function () {
            if (!__WEBPACK_IMPORTED_MODULE_15__utils_Type__["isNumber"](this._endIndex)) {
                this.endIndex = this.dataItems.length;
            }
            return this._endIndex;
        },
        /**
         * Sets current ending index.
         *
         * @ignore Exclude from docs
         * @param {number} value End index
         */
        set: function (value) {
            this._endIndex = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["fitToRange"](Math.round(value), 0, this.dataItems.length);
            this.end = this._endIndex / this.dataItems.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "start", {
        /**
         * Current relative starting position of the data range (zoom).
         *
         * @return {number} Start (0-1)
         */
        get: function () {
            return this._start;
        },
        /**
         * Sets start of the current data range (zoom).
         *
         * @ignore Exclude from docs
         * @param {number} value Start (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["round"](value, 5);
            //if (1 / (this.end - value) > this.maxZoomFactor) {
            //	value = this.end - 1 / this.maxZoomFactor;
            //}
            if (this._start != value) {
                this._start = value;
                this._startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);
                this.invalidateDataRange();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "end", {
        /**
         * Current relative ending position fo the data range (zoom).
         *
         * @return {number} End (0-1)
         */
        get: function () {
            return this._end;
        },
        /**
         * Sets end of the current data range (zoom).
         *
         * @ignore Exclude from docs
         * @param {number} value End (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["round"](value, 5);
            //if (1 / (value - this.start) > this.maxZoomFactor) {
            //	value = 1 / this.maxZoomFactor + this.start;
            //}
            if (this._end != value) {
                this._end = value;
                this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);
                this.invalidateDataRange();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "dataDateFormat", {
        /**
         * Format of the dates in source data.
         *
         * @ignore Exclude from docs
         * @deprecated Not used?
         * @return {string} Format of the dates in source data
         */
        get: function () {
            if (!this._dataDateFormat) {
                //return this.parentComponent.dataDateFormat;
            }
            return this._dataDateFormat;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [removeFromInvalids description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.removeFromInvalids = function () {
        _super.prototype.removeFromInvalids.call(this);
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidDatas, this);
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidSprites, this);
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidDataItems, this);
        __WEBPACK_IMPORTED_MODULE_10__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_8__System__["b" /* system */].invalidDataRange, this);
    };
    Object.defineProperty(Component.prototype, "dataItems", {
        /**
         * Returns a list of source [[DataItem]] objects.
         *
         * @return {OrderedListTemplate} List of data items
         * @todo Check if we can automatically dispose all of the data items when Component is disposed
         */
        get: function () {
            if (!this._dataItems) {
                this._dataItems = new __WEBPACK_IMPORTED_MODULE_2__utils_SortedList__["b" /* OrderedListTemplate */](this.createDataItem());
                this._dataItems.events.on("insert", this.handleDataItemAdded, this);
                this._dataItems.events.on("remove", this.invalidateDataItems, this);
                //this._disposers.push(new ListDisposer(this._dataItems));
            }
            return this._dataItems;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes newly added [[DataItem]] as well as triggers data re-validation.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<DataItem>["insert"]} event [description]
     */
    Component.prototype.handleDataItemAdded = function (event) {
        event.newValue.component = this;
        this.invalidateDataItems();
    };
    /**
     * removes [[DataItem]] as well as triggers data re-validation.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<DataItem>["insert"]} event [description]
     */
    Component.prototype.handleDataItemRemoved = function (event) {
        event.oldValue.component = undefined;
        this.invalidateDataItems();
    };
    Object.defineProperty(Component.prototype, "dataMethods", {
        /**
         * [dataMethods description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @deprecated Not used?
         * @param {Dictionary} List of data methods
         */
        get: function () {
            if (!this._dataMethods) {
                this._dataMethods = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._dataMethods;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Binds a data element's field to a specific field in raw data.
     * For example, for the very basic column chart you'd want to bind a `value`
     * field to a field in data, such as `price`.
     *
     * Some more advanced Components, like [[CandlestickSeries]] need several
     * data fields bound to data, such as ones for open, high, low and close
     * values.
     *
     * @todo Example
     * @param {Key}                       field  Field name
     * @param {this["_dataFields"][Key]}  value  Field name in data
     */
    Component.prototype.bindDataField = function (field, value) {
        this.dataFields[field] = value;
        this.invalidateDataRange();
    };
    /**
     * Invalidates processed data.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.invalidateProcessedData = function () {
        this.resetProcessedRange();
        this.invalidateDataRange();
    };
    /**
     * [resetProcessedRange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.resetProcessedRange = function () {
        this._prevEndIndex = null;
        this._prevStartIndex = null;
    };
    Object.defineProperty(Component.prototype, "dataUsers", {
        /**
         * Returns all other [[Component]] objects that are using this element's
         * data.
         *
         * @ignore Exclude from docs
         * @todo Description (review)
         * @return {List<Component>} [description]
         */
        get: function () {
            return this._dataUsers;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a clone of this element.
     *
     * @return {this} Clone
     */
    Component.prototype.clone = function () {
        var component = _super.prototype.clone.call(this);
        component.dataFields = __WEBPACK_IMPORTED_MODULE_12__utils_Utils__["copyProperties"](this.dataFields, {});
        return component;
    };
    /**
     * Copies all parameters from another [[Component]].
     *
     * @param {Component} source Source Component
     */
    Component.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.data = source.data;
    };
    /**
     * Invalidates the whole element, including all its children, causing
     * complete re-parsing of data and redraw.
     *
     * Use sparingly!
     */
    Component.prototype.reinit = function () {
        this._inited = false;
        this.deepInvalidate();
    };
    Object.defineProperty(Component.prototype, "exporting", {
        /**
         * Returns an [[Export]] instance.
         *
         * If it does not exist it looks in parents. It also adds "data" Adapter so
         * that Export can access Component's data.
         *
         * @return {Export} Export instance
         */
        get: function () {
            var _this = this;
            var _export = this._exporting.get();
            if (_export) {
                return _export;
            }
            else {
                if (this.parent) {
                    _export = this.parent.exporting;
                }
                else {
                    _export = new __WEBPACK_IMPORTED_MODULE_4__export_Export__["a" /* Export */]();
                    _export.container = this.svgContainer;
                    _export.sprite = this;
                }
                this._exporting.set(_export, _export);
                _export.adapter.add("data", function (arg) {
                    arg.data = _this.data;
                    return arg;
                });
            }
            return _export;
        },
        enumerable: true,
        configurable: true
    });
    return Component;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Component.js.map

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Language; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__lang_en__ = __webpack_require__(300);
/**
 * Language module contains everything related to language-specific operations:
 * * Translating prompts
 * * Translating functions
 * * Date format localizations
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






;
;
/**
 * Handles all language-related tasks, like loading and storing translations,
 * translating prompts, lists of prompts and even functions.
 *
 * Almost every object in amCharts4 universe will have a `language` property,
 * which can be accessed for prompt translation.
 *
 * @see {@link ILanguageAdapters} for a list of available Adapters
 * @todo Make prompt keys case-insensitive
 * @important
 */
var Language = /** @class */ (function (_super) {
    __extends(Language, _super);
    /**
     * Constructor
     */
    function Language() {
        var _this = _super.call(this) || this;
        /**
         * Event dispatcher.
         *
         * @type {EventDispatcher<AMEvent<Language, ILanguageEvents>>}
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_2__EventDispatcher__["a" /* EventDispatcher */]();
        /**
         * Adapter.
         *
         * @type {Adapter<Language, ILanguageAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__Adapter__["a" /* Adapter */](_this);
        /**
         * Current locale.
         *
         * @type {ILocale}
         */
        _this._locale = __WEBPACK_IMPORTED_MODULE_5__lang_en__["a" /* default */];
        /**
         * Default locale. A locale to fall back to if none is specified, or
         * if there's no translation for the prompt for the current language.
         *
         * @type {ILocaleDefault}
         */
        _this._defaultLocale = __WEBPACK_IMPORTED_MODULE_5__lang_en__["a" /* default */];
        _this.className = "Language";
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns locale that is currently used.
     *
     * @param  {ILocale}  locale  Force locale. Will use current language if not set.
     * @return {string}           Locale
     */
    Language.prototype.getLocale = function (locale) {
        if (locale == null) {
            locale = this._locale;
        }
        return this.adapter.apply("locale", {
            locale: locale
        }).locale;
    };
    /**
     * Retruns the translation of the string.
     *
     * If the translation is empty, it will return untranslated prompt.
     *
     * Third parameter and up are strings that can be used to replace "%X"
     * placeholders in prompt.
     *
     * E.g.:
     *
     * ```TypeScript
     * // Results in "This is a first translation test"
     * chart.language.translate("This is a %1 translation %2", null, "first", "test");
     * ```
     * ```JavaScriptScript
     * // Results in "This is a first translation test"
     * chart.language.translate("This is a %1 translation %2", null, "first", "test");
     * ```
     *
     * @param  {Key}            prompt   A string to translate
     * @param  {ILocale}        locale   Force translation into specific locale, e.g. fr_FR
     * @param  {Array<string>}  ...rest  Parameters to replace in string
     * @return {string}                  Translation
     */
    Language.prototype.translate = function (prompt, locale) {
        var rest = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            rest[_i - 2] = arguments[_i];
        }
        // Get langauge
        locale = this.getLocale(locale);
        // Init translation
        var translation = prompt;
        // Get translations for the locale
        var translations = this.getTranslations(locale);
        var value = translations[prompt];
        // Try to look for the translation
        if (__WEBPACK_IMPORTED_MODULE_4__Type__["hasValue"](value)) {
            // It might be an empty string
            translation = value || prompt;
            // Try to look in default language
        }
        else if (locale !== this._defaultLocale) {
            return this.translate.apply(this, __spread([prompt, this._defaultLocale], rest));
        }
        // Replace %1, %2, etc params
        if (rest.length) {
            for (var len = rest.length, i = 0; i < len; ++i) {
                translation = translation.split("%" + (i + 1)).join(rest[i]);
            }
        }
        // Return the translation
        return this.adapter.apply("translate", {
            translation: translation,
            locale: locale
        }).translation;
    };
    /**
     * Translates prompt.
     *
     * If translation is empty, it will return empty string, which is a different
     * behavior than that of regular `translate`.
     *
     * @param  {Key}            prompt   A string to translate
     * @param  {ILocale}        locale   Force translation into specific locale, e.g. fr_FR
     * @param  {Array<string>}  ...rest  Parameters to replace in string
     * @return {string}                  Translation
     */
    Language.prototype.translateEmpty = function (prompt, locale) {
        var rest = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            rest[_i - 2] = arguments[_i];
        }
        var translation = this.translate.apply(this, __spread([prompt, locale], rest));
        return translation == prompt ? "" : translation;
    };
    /**
     * Translates a function.
     *
     * This method will return a function reference, but will not run it. It's
     * up to the caller script to run the function.
     *
     * @param  {Key}                    prompt  A function id to translate
     * @param  {ILocale}                locale  Force translation into specific locale. e.g. fr_FR
     * @return {ILocaleFunctions[Key]}          A language-specific version of the function
     * @todo Apply adapter
     */
    Language.prototype.translateFunc = function (prompt, locale) {
        // Get langauge
        locale = this.getLocale(locale);
        // Get translations for the locale
        var translations = this.getTranslations(locale);
        var value = translations[prompt];
        // Try to look for the translation
        if (value != null) {
            return value;
        }
        // Try to look in default language
        if (locale !== this._defaultLocale) {
            return this.translateFunc(prompt, this._defaultLocale);
        }
        // Fail - return empty function
        return function () {
            return "";
        };
    };
    /**
     * Translates a list of prompts in one go.
     *
     * @param  {Array<Key>}     list    An array of strings to translate
     * @param  {ILocale}        locale  Force translation into specific locale. e.g. fr_FR
     * @return {Array<string>}          An array of translated strings in the same order as source list
     */
    Language.prototype.translateAll = function (list, locale) {
        var _this = this;
        // Translate all items in the list
        if (!this.isDefault()) {
            return __WEBPACK_IMPORTED_MODULE_3__Array__["i" /* map */](list, function (x) { return _this.translate(x, locale); });
        }
        else {
            return list;
        }
    };
    /**
     * Returns `true` if the currently selected locale is a default locale.
     *
     * @return {boolean} `true` if locale is default; `false` if it is not.
     */
    Language.prototype.isDefault = function () {
        return this._defaultLocale === this._locale;
    };
    Object.defineProperty(Language.prototype, "locale", {
        /**
         * @return {ILocale} Locale definition
         */
        get: function () {
            return this._locale;
        },
        /**
         * Current locale.
         *
         * @param {ILocale}  value  Locale definition (translations)
         */
        set: function (value) {
            if (this._locale != value) {
                this._locale = value;
                if (this.events.isEnabled("localeChanged")) {
                    this.events.dispatchImmediately("localeChanged", {
                        type: "localeChanged",
                        locale: value,
                        target: this
                    });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns translations for a given locale.
     *
     * @ignore
     * @deprecated
     * @param  {ILocale}        locale  Locale
     * @return {ILocale}        Translations
     */
    Language.prototype.getTranslations = function (locale) {
        return this.adapter.apply("translations", {
            translations: locale,
            locale: locale
        }).translations;
    };
    return Language;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Language.js.map

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(66)('meta');
var isObject = __webpack_require__(17);
var has = __webpack_require__(35);
var setDesc = __webpack_require__(24).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(16)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(22)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(31)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return PX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return NUMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DURATION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return PLACEHOLDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return PLACEHOLDER2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return PLACEHOLDER3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return PLACEHOLDER4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return PLACEHOLDER5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return PLACEHOLDER_L; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return PLACEHOLDER_R; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return PLACEHOLDER_Q; });
/**
 * A collection of String-based constants.
 * @hidden
 * @ignore Exclude from docs
 */
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PX = "px";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var STRING = "string";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var NUMBER = "number";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var DATE = "date";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var DURATION = "duration";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER = "__§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER2 = "__§§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER3 = "__§§§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER4 = "__§§§§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER5 = "__§§§§§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER_L = "__amcharts_a6uo6cfd8f__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER_R = "__amcharts_jhovxywbes__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER_Q = "__amcharts_pf4bcqdo3t__";
//# sourceMappingURL=Strings.js.map

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DataItem; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Animation__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Type__ = __webpack_require__(2);
/**
 * Defines functionality for "Data Item"
 *
 * A Data Item can be any object that can hold data. For example [[LineSeries]]
 * holds a number of values, that comprise a line graph. Each of those values
 * (data points) is a {DataItem}.
 *
 * Furthermore the [[LineSeries]] itself can be represented as a entry in the
 * legend. Since legend needs access to Line Series' value, a DataItem is
 * created for the series.
 *
 * @todo Verify/update description
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * DataItem represents single element in data, for example a data point in a
 * Serial Chart Series, e.g. a column.
 *
 * DataItem defines relationship between structured data, required for specific
 * chart type or task, and raw source data.
 *
 * It also implements required calculations, updates related visual elements,
 * etc.
 *
 * @todo Description
 * @important
 */
var DataItem = /** @class */ (function (_super) {
    __extends(DataItem, _super);
    /**
     * Constructor
     * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right
     */
    function DataItem() {
        var _this = _super.call(this) || this;
        /**
         * Holds Adapter.
         *
         * @type {Adapter<DataItem, IDataItemAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * This Data Item is currently disabled.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._disabled = false;
        /**
         * Indicates whether Data Item has any properties set.
         *
         * If it does not have any, the code can use this property to check whether
         * they need to apply costly operation of re-applying properties, whenever
         * Data Item-related element is redrawn, e.g. series.
         *
         * @type {boolean}
         */
        _this.hasProperties = false;
        /**
         * An object containing calculated values.
         */
        _this.values = {};
        /**
         * An object container current working values.
         */
        //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};
        /**
         * An object containing categories.
         */
        _this.categories = {};
        /**
         * An object containing dates.
         */
        _this.dates = {};
        /**
         * An object containing locations for the Data Item.
         *
         * A location is a position within date or category, or, in some other cases,
         * where there is no single point but rather some period.
         */
        _this.locations = {};
        /**
         * Current working locations.
         */
        _this.workingLocations = {};
        /**
         * An object containing Data Item specific appearance properties in key-value
         * pairs.
         *
         * Sometimes a single Data Item needs to apply different properties than the
         * rest of the data [[Series]] it is part of. E.g. a single column,
         * represented by a Data Item needs to be filled with a different color than
         * the reset of the [[ColumnSeries]] it belongs to.
         *
         * That's where Data Item's `properties` come into play.
         *
         * Please note that you should set Data Item-specific properties using
         * `setProperty()` method, rather than access `properties` object directly.
         */
        _this.properties = {};
        /**
         * A list of [[Sprite]] elements that are associated with this Data Item.
         *
         * E.g. an [[Axis]] Data Item has several separate elements associated with
         * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].
         *
         * Data Item keeps track of all of them, so it can toggle all related visual
         * elements when it itself is toggled.
         *
         * @type {Sprite[]}
         */
        _this.sprites = [];
        /**
         * Is Data Item currently visible?
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._visible = true;
        /**
         * Should this Data Item be used when calculating data ranges and scales?
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._ignoreMinMax = false;
        /**
         * Some of the Data Item's data fields may contain an array of children. This
         * property contains an object indicating which fields hold an array, so that
         * they can be processed properly.
         *
         * @ignore Exclude from docs
         */
        _this.hasChildren = {};
        /**
         * Indicates whether Data Item is currently animiting from visible to hidden
         * state.
         *
         * @type {boolean}
         */
        _this.isHiding = false;
        /**
         *
         * @ignore Exclude from docs
         */
        _this._valueAnimations = {};
        /**
         *
         * @ignore Exclude from docs
         */
        _this._locationAnimations = {};
        _this.className = "DataItem";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(DataItem.prototype, "index", {
        /**
         * Data Item's position index in Component's data.
         *
         * @return {number} Index
         */
        get: function () {
            if (this.component) {
                return this.component.dataItems.indexOf(this);
            }
            else {
                return -1;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "animations", {
        /**
         * A list of [[Animations]] objects currently mutating Data Item's values.
         *
         * @return {Array<Animation>} [description]
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["c" /* MultiDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "visible", {
        /**
         * Returns `true` if this Data Item is currently visible.
         *
         * @return {boolean} Visible?
         */
        get: function () {
            return this._visible;
        },
        /**
         * Sets visibility of the Data Item.
         *
         * @param {boolean} value Visible?
         */
        set: function (value) {
            this.setVisibility(value);
            if (this._visible != value) {
                this._visible = value;
                if (this.events.isEnabled("visibilitychanged")) {
                    this.events.dispatchImmediately("visibilitychanged", {
                        type: "visibilitychanged",
                        target: this,
                        visible: value
                    });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "__disabled", {
        /**
         * Is this Data Item currently disabled?
         *
         * @ignore Exclude from docs
         * @param {boolean}
         */
        get: function () {
            return this._disabled;
        },
        /**
         * Disables all Sprites associated with this Data Item.
         *
         * @ignore Exclude from docs
         * @param {boolean}
         */
        set: function (value) {
            //	if (this._disabled != value) { // not good
            this._disabled = value;
            __WEBPACK_IMPORTED_MODULE_5__utils_Array__["b" /* each */](this.sprites, function (sprite) {
                sprite.__disabled = value;
            });
            //	}
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets visibility of the Data Item.
     *
     * @param {boolean} value Data Item
     */
    DataItem.prototype.setVisibility = function (value) {
        __WEBPACK_IMPORTED_MODULE_5__utils_Array__["b" /* each */](this.sprites, function (sprite) {
            sprite.visible = value;
            //sprite.hide();
        });
    };
    /**
     * Shows the Data Item and related visual elements.
     *
     * @param {number}    duration  Animation duration (ms)
     * @param {number}    delay     Delay animation (ms)
     * @param {string[]}  fields    A list of fields to set values of
     */
    DataItem.prototype.show = function (duration, delay, fields) {
        var _this = this;
        this.isHiding = false;
        if (this._hideDisposer) {
            this.removeDispose(this._hideDisposer);
        }
        var animation;
        if (fields) {
            __WEBPACK_IMPORTED_MODULE_5__utils_Array__["b" /* each */](fields, function (field) {
                animation = _this.setWorkingValue(field, _this.values[field].value, duration, delay);
            });
        }
        __WEBPACK_IMPORTED_MODULE_5__utils_Array__["b" /* each */](this.sprites, function (sprite) {
            var animation = sprite.show(duration);
            if (delay > 0 && animation && !animation.isDisposed()) {
                animation.delay(delay);
            }
        });
        this._visible = true;
        return animation;
    };
    // if data item is disposed, dispose sprites
    DataItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        __WEBPACK_IMPORTED_MODULE_5__utils_Array__["b" /* each */](this.sprites, function (sprite) {
            sprite.dispose();
        });
    };
    /**
     * Hides the Data Item and related visual elements.
     *
     * @param {number}    duration  Animation duration (ms)
     * @param {number}    delay     Delay animation (ms)
     * @param {number}    toValue   A value to set to `fields` when hiding
     * @param {string[]}  fields    A list of data fields to set value to `toValue`
     */
    DataItem.prototype.hide = function (duration, delay, toValue, fields) {
        var _this = this;
        this.isHiding = true;
        __WEBPACK_IMPORTED_MODULE_5__utils_Array__["b" /* each */](this.sprites, function (sprite) {
            var animation = sprite.hide(duration);
            if (delay > 0 && animation && !animation.isDisposed()) {
                animation.delay(delay);
            }
        });
        if (__WEBPACK_IMPORTED_MODULE_7__utils_Type__["isNumber"](toValue) && fields) {
            var animation_1;
            __WEBPACK_IMPORTED_MODULE_5__utils_Array__["b" /* each */](fields, function (field) {
                var anim = _this.setWorkingValue(field, toValue, duration, delay);
                if (anim) {
                    animation_1 = anim;
                }
            });
            if (animation_1) {
                this._hideDisposer = animation_1.events.on("animationend", function () {
                    _this.visible = false;
                    _this.isHiding = false;
                });
                this._disposers.push(this._hideDisposer);
                return animation_1;
            }
        }
        this.visible = false;
    };
    /**
     * Returns a duration (ms) the Data Item should take to animate from one
     * value to another.
     *
     * If the duration is not specified via parameter, this method will try to
     * request a default duration from the ralated `Component`.
     *
     * @param  {number}  duration  Default duration (ms)
     * @return {number}            Duration (ms)
     */
    DataItem.prototype.getDuration = function (duration) {
        var component = this.component;
        if (component) {
            if (!__WEBPACK_IMPORTED_MODULE_7__utils_Type__["isNumber"](duration)) {
                duration = component.interpolationDuration;
            }
        }
        return this.adapter.apply("duration", duration);
    };
    /**
     * Returns a numeric value for specific data field.
     *
     * If `calculated` is not set, it will return a raw value, as it is in
     * source data.
     *
     * If `calculated` is set, it will return a pre-calculated specific value.
     *
     * @param  {string}           name        Data field name
     * @param  {CalculatedValue}  calculated  A calculated value name
     * @return {number}                       Value
     */
    DataItem.prototype.getValue = function (name, calculated) {
        if (name && this.component) {
            if (!calculated) {
                calculated = this.component.dataFields[name + "Show"];
                if (!calculated) {
                    calculated = "value";
                }
            }
            var value = this.values[name][calculated];
            if (this.adapter.isEnabled("value")) {
                return this.adapter.apply("value", {
                    value: value,
                    field: name
                }).value;
            }
            else {
                return value;
            }
        }
    };
    /**
     * Returns a current working value for a specific data field.
     *
     * The actual value may differ from the one returned by `getValue()`. The
     * latter returns static values from the data source.
     *
     * `getWorkingValue()` returns current value, which is usually different if
     * Data Item is animating from one state to another.
     *
     * @param  {string}           name        Data field name
     * @param  {CalculatedValue}  calculated  A calculated value name
     * @return {number}                       Value
     */
    DataItem.prototype.getWorkingValue = function (name) {
        if (name && this.component) {
            var realName = this.component.dataFields[name + "Show"];
            if (!realName) {
                realName = "workingValue";
            }
            return this.adapter.apply("workingValue", {
                workingValue: this.values[name][realName],
                field: name
            }).workingValue;
        }
    };
    /**
     * Sets a numeric value for specific data field.
     *
     * @param {string}           name        Data field name
     * @param {number}           value       Value
     * @param {CalculatedValue}  calculated  Calculated data field name
     * @param {number}           duration    Duration (ms) to animate to new value to
     * @param {number}           delay       Delay animation (ms)
     */
    DataItem.prototype.setValue = function (name, value, duration, delay) {
        var currentValue = this.values[name].value;
        duration = this.getDuration(duration);
        value = __WEBPACK_IMPORTED_MODULE_7__utils_Type__["toNumber"](value);
        if (currentValue !== value) {
            this.values[name].value = value;
            if (this.events.isEnabled("valuechanged")) {
                this.events.dispatchImmediately("valuechanged", {
                    type: "valuechanged",
                    target: this,
                    property: name
                });
            }
        }
        this.setWorkingValue(name, value, duration, delay);
    };
    DataItem.prototype.setCalculatedValue = function (name, value, calculated) {
        var currentValue = this.values[name][calculated];
        if (currentValue !== value && __WEBPACK_IMPORTED_MODULE_7__utils_Type__["isNumber"](value)) {
            this.values[name][calculated] = value;
            if (this.events.isEnabled("calculatedvaluechanged")) {
                this.events.dispatchImmediately("calculatedvaluechanged", {
                    type: "calculatedvaluechanged",
                    target: this,
                    property: name
                });
            }
        }
    };
    /**
     * Set current working numeric value for a specific data field.
     *
     * @param  {string}           name        Data field name
     * @param  {number}           value       Value
     * @param  {CalculatedValue}  calculated  Calculated data field name
     * @param  {number}           duration    Duration (ms) to animate to new value to
     * @param  {number}           delay       Delay animation (ms)
     * @return {Animation}                    An [[Animation]] object used for transition to new values
     */
    DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {
        if (__WEBPACK_IMPORTED_MODULE_7__utils_Type__["isNumber"](this.values[name].value)) {
            duration = this.getDuration(duration);
            var workingValue = this.values[name].workingValue;
            if ((duration > 0) && __WEBPACK_IMPORTED_MODULE_7__utils_Type__["isNumber"](workingValue) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop
                if (workingValue != value) {
                    var animation = this.animate({ childObject: this.values[name], property: "workingValue", from: workingValue, to: value, dummyData: name }, duration, this.component.interpolationEasing).delay(delay);
                    animation.events.on("animationstart", this.handleInterpolationProgress, this);
                    animation.events.on("animationprogress", this.handleInterpolationProgress, this);
                    animation.events.on("animationend", this.handleInterpolationProgress, this);
                    this._valueAnimations[name] = animation;
                    return animation;
                }
                else {
                    var valueAnimation = this._valueAnimations[name];
                    if (valueAnimation) {
                        valueAnimation.stop();
                    }
                    this.values[name].workingValue = value;
                }
            }
            else {
                var valueAnimation = this._valueAnimations[name];
                if (valueAnimation) {
                    valueAnimation.stop();
                }
                this.values[name].workingValue = value;
                if (this.events.isEnabled("workingvaluechanged")) {
                    this.events.dispatchImmediately("workingvaluechanged", {
                        type: "workingvaluechanged",
                        target: this,
                        property: name
                    });
                }
            }
        }
    };
    /**
     * Sets a relative location for a data field.
     *
     * A location is always relative on a 0 to 1 scale, with 0 being beginning,
     * 0.5 middle and 1 end.
     *
     * @todo Rewiew description
     * @param {string}  name      Data field name
     * @param {number}  value     Location (0-1)
     * @param {number}  duration  Duration (ms) to animate to new value to
     * @param {number}  delay     Delay animation (ms)
     */
    DataItem.prototype.setLocation = function (name, value, duration, delay) {
        var currentLocation = this.locations[name];
        if (currentLocation !== value) {
            this.locations[name] = value;
            if (this.events.isEnabled("locationchanged")) {
                this.events.dispatchImmediately("locationchanged", {
                    type: "locationchanged",
                    target: this,
                    property: name
                });
            }
            this.setWorkingLocation(name, value, duration, delay);
        }
    };
    /**
     * Sets a current working location for a data field.
     *
     * @todo Rewiew description
     * @param {string}  name      Data field name
     * @param {number}  value     Location (0-1)
     * @param {number}  duration  Duration (ms) to animate to new value to
     * @param {number}  delay     Delay animation (ms)
     */
    DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {
        duration = this.getDuration(duration);
        var workingLocation = this.workingLocations[name];
        if ((duration > 0) && __WEBPACK_IMPORTED_MODULE_7__utils_Type__["isNumber"](workingLocation) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop
            if (workingLocation != value) {
                var animation = this.animate({ childObject: this.workingLocations, property: name, from: workingLocation, to: value, dummyData: name }, duration, this.component.interpolationEasing);
                animation.delay(delay);
                animation.events.on("animationstart", this.handleInterpolationProgress, this);
                animation.events.on("animationprogress", this.handleInterpolationProgress, this);
                animation.events.on("animationend", this.handleInterpolationProgress, this);
                this._locationAnimations[name] = animation;
                return animation;
            }
            else {
                var locationAnimation = this._locationAnimations[name];
                if (locationAnimation) {
                    locationAnimation.stop();
                }
                this.workingLocations[name] = value;
            }
        }
        else {
            var locationAnimation = this._locationAnimations[name];
            if (locationAnimation) {
                locationAnimation.stop();
            }
            this.workingLocations[name] = value;
            if (this.events.isEnabled("workinglocationchanged")) {
                this.events.dispatchImmediately("workinglocationchanged", {
                    type: "workinglocationchanged",
                    target: this,
                    property: name
                });
            }
        }
    };
    /**
     * Sets Date value to a data field.
     *
     * @param {string}  name      Data field name
     * @param {Date}    date      Date object
     * @param {number}  duration  Duration (ms) to animate to new value to
     */
    DataItem.prototype.setDate = function (name, date, duration) {
        if (!__WEBPACK_IMPORTED_MODULE_7__utils_Type__["isDate"](date)) {
            date = this.component.dateFormatter.parse(date);
        }
        var currentDate = this.dates[name];
        if (currentDate !== date) {
            this.dates[name] = date;
            this.setValue(name, date.getTime(), duration);
        }
    };
    /**
     * Returns a Date value of the data field.
     *
     * @param  {string}  name  Data field name
     * @return {Date}          Date object
     */
    DataItem.prototype.getDate = function (name) {
        return this.adapter.apply("date", {
            date: this.dates[name],
            field: name
        }).date;
    };
    /**
     * Sets a Data Item-specific visual properties to apply to related elements.
     *
     * @param {string}  name   Property name
     * @param {any}     value  Property value
     */
    DataItem.prototype.setProperty = function (name, value) {
        if (this.properties[name] !== value) {
            this.hasProperties = true;
            this.properties[name] = value;
            if (this.events.isEnabled("propertychanged")) {
                this.events.dispatchImmediately("propertychanged", {
                    type: "propertychanged",
                    target: this,
                    property: name,
                    value: value
                });
            }
        }
    };
    /**
     * Sets a related category for this Data Item.
     *
     * @todo Review description
     * @param {string}  name   Data field name
     * @param {string}  value  Category
     */
    DataItem.prototype.setCategory = function (name, value) {
        if (!__WEBPACK_IMPORTED_MODULE_7__utils_Type__["isString"](value)) {
            value = __WEBPACK_IMPORTED_MODULE_7__utils_Type__["castString"](value);
        }
        if (this.categories[name] !== value) {
            this.categories[name] = value;
        }
    };
    /**
     * Clones the Data Item, including all related data.
     *
     * @return {this} New Data Item clone
     */
    DataItem.prototype.clone = function (cloneId) {
        var dataItem = _super.prototype.clone.call(this, cloneId);
        if (this.dataContext) {
            dataItem.dataContext = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["copy"](this.dataContext, {});
        }
        __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["copyProperties"](this.locations, dataItem.locations);
        __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["copyProperties"](this.properties, dataItem.properties);
        __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["copyProperties"](this.categories, dataItem.categories);
        __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["copyProperties"](this.values, dataItem.values);
        __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["copyProperties"](this.dates, dataItem.dates);
        __WEBPACK_IMPORTED_MODULE_6__utils_Object__["each"](this.values, function (name, value) {
            //for (let name in this.values) {
            dataItem.values[name] = __WEBPACK_IMPORTED_MODULE_6__utils_Object__["copy"](value);
        });
        dataItem.events.copyFrom(this.events);
        dataItem.component = this.component;
        return dataItem;
    };
    Object.defineProperty(DataItem.prototype, "opacity", {
        /**
         * Sets opacity for all Data Item's related elements (Sprites).
         *
         * @param {number} value Opacity (0-1)
         */
        set: function (value) {
            __WEBPACK_IMPORTED_MODULE_5__utils_Array__["b" /* each */](this.sprites, function (sprite) {
                sprite.opacity = value;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "ignoreMinMax", {
        /**
         * Exclude from min/max calculations?
         * @return {boolean} Exclude from min/max calculations?
         */
        get: function () {
            return this._ignoreMinMax;
        },
        /**
         * Sets whether this data point should not be included in the scale and
         * minimum/maximum calculations.
         *
         * E.g. some we may want to exclude a particular data point from influencing
         * [[ValueAxis]] scale.
         *
         * @param {boolean}  value  Exclude from min/max calculations?
         */
        set: function (value) {
            this._ignoreMinMax = value;
            if (this.events.isEnabled("propertychanged")) {
                this.events.dispatchImmediately("propertychanged", {
                    type: "propertychanged",
                    target: this,
                    property: "ignoreMinMax",
                    value: value
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and starts an [[Animation]] to interpolate (morph) Data Item's
     * properties and/or values.
     *
     * @see {@link Animation}
     * @param  {IAnimationOptions[] | IAnimationOptions}  animationOptions  Animation options
     * @param  {number}                                   duration          Animation duration (ms)
     * @param  {function}                                 easing            Easing function
     * @return {Animation}                                                  Animation
     */
    DataItem.prototype.animate = function (animationOptions, duration, easing) {
        return new __WEBPACK_IMPORTED_MODULE_2__utils_Animation__["a" /* Animation */](this, animationOptions, duration, easing).start();
    };
    /**
     * Handles intermediate steps when Data Item is interpolating (morphing) from
     * one value to another.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Animation, IAnimationEvents>["animationstart" | "animationend" | "animationprogress"]} event Event object
     */
    DataItem.prototype.handleInterpolationProgress = function (event) {
        var animation = event.target;
        // it's always only one options, no need cycle
        var animationOptions = animation.animationOptions[0];
        if (animationOptions) {
            if (this.events.isEnabled("workingvaluechanged")) {
                this.events.dispatchImmediately("workingvaluechanged", {
                    type: "workingvaluechanged",
                    target: this,
                    property: animationOptions.dummyData
                });
            }
        }
    };
    /**
     * Checks whether Data Item has values set for all of the data fields,
     * supplied via argument.
     *
     * @ignore Exclude from docs
     * @param  {string[]}  fields  Field list to check
     * @return {boolean}           Has values for all fields?
     */
    DataItem.prototype.hasValue = function (fields) {
        // todo: what about categories?
        for (var i = 0; i < fields.length; i++) {
            if (!__WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](this.values[fields[i]].value)) {
                return false;
            }
        }
        return true;
    };
    Object.defineProperty(DataItem.prototype, "depth", {
        /**
         * Depth of the Data Item.
         *
         * In nested data structures, like TreeMap, this indicates the level this
         * data point is at, in relation to the parent Data Item.
         *
         * @return {number} Depth
         */
        get: function () {
            if (!this.parent) {
                return 0;
            }
            else if (this.parent) {
                return this.parent.depth + 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "dataContext", {
        /**
         * Sets to a reference to an original object from Component's data.
         *
         * @return {Object} [description]
         */
        get: function () {
            return this._dataContext;
        },
        /**
         * A reference to an original object in Component's data, that this Data Item
         * is derived from.
         *
         * @param {Object} value Original data object
         */
        set: function (value) {
            this._dataContext = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * adds a sprite to dataItem.sprites array
     * @ignore
     */
    DataItem.prototype.addSprite = function (sprite) {
        if (sprite.dataItem && sprite.dataItem != this) {
            __WEBPACK_IMPORTED_MODULE_5__utils_Array__["k" /* remove */](sprite.dataItem.sprites, sprite);
        }
        this.sprites.push(sprite);
        sprite.dataItem = this;
    };
    return DataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=DataItem.js.map

/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorSet; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Colors__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Utils__ = __webpack_require__(5);
/**
 * This module contains ColorSet object definition
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents a set of colors. Can also generate colors according to set rules.
 *
 * @important
 */
var ColorSet = /** @class */ (function (_super) {
    __extends(ColorSet, _super);
    /**
     * Constructor
     */
    function ColorSet() {
        var _this = _super.call(this) || this;
        /**
         * Holds the list of the colors in this set. (preset or auto-generated)
         *
         * @type {Color[]}
         */
        _this._list = [];
        /**
         * Current step in a color generator's cycle.
         *
         * @type {number}
         */
        _this._currentStep = 0;
        /**
         * Current pass in the color generator's cycle. Normally a generator would
         * cycle through all available hue range, then repeat it, alternating other
         * color properties, to generate distinctive colors.
         *
         * @type {number}
         */
        _this._currentPass = 0;
        /**
         * A base color. If there are no colors pre-set in the color list, ColorSet
         * will use this color as a base when generating new ones, applying
         * `stepOptions` and `passOptions` to this base color.
         *
         * @type {Color}
         */
        _this.baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* Color */]({
            r: 103,
            g: 183,
            b: 220
        });
        /**
         * Modifications to apply with each new generated color.
         *
         * @type {iColorSetStepOptions}
         */
        _this.stepOptions = {};
        /**
         * Modifications to apply on top of `stepOptions` for each "pass" of the
         * color generation.
         *
         * A "pass" is when ColorSet generates `minColors` number of colors.
         *
         * @type {iColorSetStepOptions}
         */
        _this.passOptions = {
            brighten: -0.2
        };
        /**
         * An index increment to use when iterating through color list.
         *
         * Default is 1, which means returning each and every color.
         *
         * Setting it to a bigger number will make ColorSet `next()` iterator skip
         * some colors.
         *
         * E.g. setting to 2, will return every second color in the list.
         *
         * This is useful, when the color list has colors that are too close each
         * other for contrast.
         *
         * However, having bigger number will mean that `next()` iterator will go
         * through the list quicker, and the generator will kick sooner.
         *
         * @type {number}
         */
        _this.step = 1;
        /**
         * A number of colors to generate in one "pass".
         *
         * This setting can be automatically overridden, if ColorSet has a list of
         * pre-set colors. In such case ColorSet will generate exactly the same
         * number of colors with each pass as there were colors in original set.
         *
         * @type {number}
         */
        _this.minColors = 20;
        /**
         * Do not let the "lightness" of generated color to fall below this
         * threshold.
         *
         * @type {number}
         */
        _this.minLightness = 0.2;
        /**
         * Do not let the "lightness" of generated color to get above this threshold.
         *
         * @type {number}
         */
        _this.maxLightness = 0.9;
        /**
         * Randomly shuffle generated colors.
         *
         * @type {boolean}
         */
        _this.shuffle = false;
        /**
         * When colors are generated, based on `stepOptions`, each generated color
         * gets either lighter or darker.
         *
         * If this is set to `true`, color generator will switch to opposing spectrum
         * when reaching `minLightness` or `maxLightness`.
         *
         * E.g. if we start off with a red color, then gradually generate lighter
         * colors through rose shades, then switch back to dark red and gradually
         * increase the lightness of it until it reaches the starting red.
         *
         * If set to `false` it will stop there and cap lightness at whatever level
         * we hit `minLightness` or `maxLightness`, which may result in a number of
         * the same colors.
         *
         * @type {boolean}
         */
        _this.wrap = true;
        /**
         * Re-use same colors in the pre-set list, when ColorSet runs out of colors,
         * rather than start generating new ones.
         *
         * @type {boolean}
         */
        _this.reuse = false;
        /**
         * Saturation of colors. THis will change saturation of all colors of color set.
         * It is recommended to set this in theme, as changing it at run time won't make the items to redraw and change color.
         *
         * @type {boolean}
         */
        _this.saturation = 1;
        _this.className = "ColorSet";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ColorSet.prototype, "list", {
        /**
         * Returns current list of colors.
         *
         * If there are none, a new list of colors is generated, based on various
         * ColorSet settings.
         *
         * @return {Color[]} Color list
         */
        get: function () {
            if (!this._list) {
                this.generate(this.minColors);
            }
            return this._list;
        },
        /**
         * Sets a list of pre-defined colors to use for the iterator.
         *
         * @param {Color[]} value Color list
         */
        set: function (value) {
            this._list = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns next color in the list using internal iterator counter.
     *
     * If `step` is set to something other than 1, it may return other color than
     * exact next one in the list.
     *
     * @return {Color} Color
     */
    ColorSet.prototype.next = function () {
        if (this.list.length <= this._currentStep) {
            if (this.reuse && this._currentPass == 0 && this._list.length) {
                this.minColors = this._list.length;
            }
            this.generate(this.minColors);
        }
        var color = this.list[this._currentStep];
        this._currentStep += this.step;
        return color.saturate(this.saturation);
    };
    /**
     * Returns a color at specific index in the list.
     *
     * @param  {number}  i  Index
     * @return {Color}      Color
     */
    ColorSet.prototype.getIndex = function (i) {
        if (this.list.length <= i) {
            if (this.reuse && this._currentPass == 0 && this._list.length) {
                this.minColors = this._list.length;
            }
            this.generate(this.minColors);
            return this.getIndex(i);
        }
        return this.list[i].saturate(this.saturation);
    };
    /**
     * Resets internal iterator.
     *
     * Calling `next()` after this will return the very first color in the color
     * list, even if it was already returned before.
     */
    ColorSet.prototype.reset = function () {
        this._currentStep = 0;
    };
    /**
     * Generates colors based on the various ColorSet settings.
     *
     * @param {number} count Number of colors to generate
     */
    ColorSet.prototype.generate = function (count) {
        // Init
        var curColor = this.currentColor;
        var hsl = __WEBPACK_IMPORTED_MODULE_2__Colors__["rgbToHsl"](curColor.rgb);
        var hueStep = __WEBPACK_IMPORTED_MODULE_3__Type__["hasValue"](this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;
        var mods = {
            brighten: 0,
            lighten: 0,
            lightness: hsl.l,
            saturation: hsl.s
        };
        // Generate list of hues, and shuffle them
        var hues = [];
        if (this.reuse) {
            for (var i = 0; i < count; i++) {
                hues.push(__WEBPACK_IMPORTED_MODULE_2__Colors__["rgbToHsl"](this._list[i].rgb).h);
            }
        }
        else {
            for (var i = 0; i < count; i++) {
                var h = hsl.h + hueStep * i;
                if (this.wrap && (h > 1)) {
                    h -= 1;
                }
                hues.push(h);
            }
        }
        // Shuffle colors randomly
        if (this.shuffle) {
            hues.sort(function (a, b) {
                return Math.random() - 0.5;
            });
        }
        // Generate colors by rotating hue
        for (var i = 0; i < count; i++) {
            // Update hue
            if (this.reuse) {
                hsl = __WEBPACK_IMPORTED_MODULE_2__Colors__["rgbToHsl"](this._list[i].rgb);
            }
            else {
                hsl.h = hues.shift();
            }
            // Apply HSL mods
            this.applyStepOptions(hsl, mods, i, this._currentPass);
            // Convert back to Color
            var c = Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])(__WEBPACK_IMPORTED_MODULE_2__Colors__["hslToRgb"](hsl));
            // Apply regular color mods
            var brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;
            if (brighten != 0) {
                if (this.wrap) {
                    brighten = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumberRelative"](brighten, this.minLightness, this.maxLightness);
                }
                else {
                    brighten = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumber"](brighten, this.minLightness, this.maxLightness);
                }
                c = c.brighten(brighten);
            }
            var lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;
            if (lighten != 0) {
                if (this.wrap) {
                    lighten = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumberRelative"](lighten, this.minLightness, this.maxLightness);
                }
                else {
                    lighten = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumber"](lighten, this.minLightness, this.maxLightness);
                }
                c = c.lighten(lighten);
            }
            this._list.push(c);
        }
        this._currentPass++;
    };
    Object.defineProperty(ColorSet.prototype, "currentColor", {
        /**
         * Returns current last color. It's either the last color in the list of
         * colors, or `baseColor` if list is empty.
         *
         * @return {Color} Color
         */
        get: function () {
            if (this._list.length == 0) {
                return this.baseColor.saturate(this.saturation);
            }
            else {
                return this._list[this._list.length - 1].saturate(this.saturation);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Generates modifiers for color, based on what step and pass.
     *
     * @param {iHSL}                  hsl   Curren HSL value of the color to modify
     * @param {iColorSetStepOptions}  base  The modifiers that were before modification to use as a base
     * @param {number}                step  Current step
     * @param {number}                pass  Current pass
     */
    ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {
        // Process lightness
        hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;
        if (this.wrap) {
            if (hsl.l > 1) {
                hsl.l = hsl.l - Math.floor(hsl.l);
            }
            else if (hsl.l < 0) {
                hsl.l = -(hsl.l - Math.floor(hsl.l));
            }
            hsl.l = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumberRelative"](hsl.l, this.minLightness, this.maxLightness);
        }
        else {
            if (hsl.l > 1) {
                hsl.l = 1;
            }
            else if (hsl.l < 0) {
                hsl.l = 0;
            }
            hsl.l = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumber"](hsl.l, this.minLightness, this.maxLightness);
        }
    };
    return ColorSet;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=ColorSet.js.map

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ValueAxisDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ValueAxis; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Axis__ = __webpack_require__(119);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AxisRendererY__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ValueAxisBreak__ = __webpack_require__(156);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__ = __webpack_require__(5);
/**
 * Value Axis module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[ValueAxis]].
 *
 * @see {@link DataItem}
 */
var ValueAxisDataItem = /** @class */ (function (_super) {
    __extends(ValueAxisDataItem, _super);
    /**
     * Constructor
     */
    function ValueAxisDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "ValueAxisDataItem";
        _this.values.value = {};
        _this.values.endValue = {};
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ValueAxisDataItem.prototype, "value", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values["value"].value;
        },
        /**
         * A data point's numeric value.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("value", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxisDataItem.prototype, "startValue", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values["value"].value;
        },
        /**
         * A data point's starting value.
         *
         * Used for items that span several dates, like [[ValueAxisBreak]].
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("value", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxisDataItem.prototype, "endValue", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values["endValue"].value;
        },
        /**
         * Data point's numeric end value.
         *
         * @param {number}  value  End value
         */
        set: function (value) {
            this.setValue("endValue", value);
        },
        enumerable: true,
        configurable: true
    });
    return ValueAxisDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Axis__["b" /* AxisDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to create a value axis for the chart.
 *
 * ```TypeScript
 * // Create the axis
 * let valueAxis = chart.yAxes.push(new charts.ValueAxis());
 *
 * // Set settings
 * valueAxis.title.text = "Monthly Sales";
 * ```
 * ```JavaScript
 * // Create the axis
 * var valueAxis = chart.yAxes.push(new amcharts4.charts.ValueAxis());
 *
 * // Set settings
 * valueAxis.title.text = "Monthly Sales";
 * ```
 * ```JSON
 * "yAxes": [{
 *   "type": "ValueAxis",
 *   "title": {
 *     "text": "Monthly Sales"
 *   }
 * }]
 * ```
 *
 * @see {@link IValueAxisEvents} for a list of available Events
 * @see {@link IValueAxisAdapters} for a list of available Adapters
 * @important
 */
var ValueAxis = /** @class */ (function (_super) {
    __extends(ValueAxis, _super);
    /**
     * Constructor
     */
    function ValueAxis() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * [_stepDecimalPlaces description]
         *
         * @todo Description
         * @type {number}
         */
        _this._stepDecimalPlaces = 0;
        /**
         * Should axis scale explicitly start and `min` and `max`?
         *
         * @type {boolean}
         */
        _this._strictMinMax = false;
        /**
         * Base value for the axis.
         *
         * @type {number}
         */
        _this._baseValue = 0;
        /**
         * Adjusted start in case we have breaks.
         *
         * @todo Description
         * @type {number}
         */
        _this._adjustedStart = 0;
        /**
         * Adjusted end in case we have breaks.
         *
         * @todo Description
         * @type {number}
         */
        _this._adjustedEnd = 1;
        /**
         * @todo Description
         */
        _this._valueToPosition = {};
        /**
         * @todo Description
         */
        _this._positionToValue = {};
        /**
         * A function which applies fills to alternating cells.
         *
         * @todo Description
         * @type {function}
         */
        _this.fillRule = function (dataItem) {
            var value = dataItem.value;
            var axis = dataItem.component;
            if (value / axis.step / 2 == Math.round(value / axis.step / 2)) {
                dataItem.axisFill.__disabled = true;
            }
            else {
                dataItem.axisFill.__disabled = false;
            }
        };
        /**
         * As calculating totals is expensive operation and not often needed, by default we do not do it. In case you use totalPercent or total for your charts, you must set this to true
         * @todo review description
         * @type {boolean}
         */
        _this.calculateTotals = false;
        _this.className = "ValueAxis";
        // Set field name
        _this.axisFieldName = "value";
        // Set defaults
        _this.maxZoomFactor = 1000;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a new/empty [[DataItem]] of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {ValueAxisDataItem} Data Item
     */
    ValueAxis.prototype.createDataItem = function () {
        return new ValueAxisDataItem();
    };
    /**
     * Returns a new/empty [[AxisBreak]] of the appropriate type.
     *
     * @return {ValueAxisBreak} Axis break
     */
    ValueAxis.prototype.createAxisBreak = function () {
        return new __WEBPACK_IMPORTED_MODULE_4__ValueAxisBreak__["a" /* ValueAxisBreak */]();
    };
    /**
     * Validates Axis' data items.
     *
     * @ignore Exclude from docs
     */
    ValueAxis.prototype.validateDataItems = function () {
        this._positionToValue = {};
        _super.prototype.validateDataItems.call(this);
        this.fixAxisBreaks();
        this.getMinMax();
        // note, not zoomMin and zoomMax, but actual position
        var minZoomed = this.positionToValue(this.start);
        var maxZoomed = this.positionToValue(this.end);
        if (this.interpolationDuration > 0) {
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](minZoomed) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](maxZoomed)) {
                this.zoomToValues(minZoomed, maxZoomed, true, true);
            }
        }
    };
    /**
     * Processes data items of the related Series.
     *
     * @ignore Exclude from docs
     */
    ValueAxis.prototype.processSeriesDataItems = function () {
        // @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu
        if (this.calculateTotals) {
            var series = this.series.getIndex(0);
            var startIndex = series.startIndex;
            if (series.dataItems.length > 0) {
                if (startIndex > 0) {
                    startIndex--;
                }
                var endIndex = series.endIndex;
                if (endIndex < series.dataItems.length) {
                    endIndex++;
                }
                // This has to be `var` in order to avoid garbage collection
                for (var i = startIndex; i < endIndex; ++i) {
                    // This has to be `var` in order to avoid garbage collection
                    var total = {};
                    __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
                        var dataItem = series.dataItems.getIndex(i);
                        if (dataItem) {
                            __WEBPACK_IMPORTED_MODULE_7__core_utils_Object__["each"](dataItem.values, function (key) {
                                var value = dataItem.values[key].workingValue; // can not use getWorkingValue here!
                                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
                                    if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](total[key])) {
                                        total[key] = value;
                                    }
                                    else {
                                        total[key] += value;
                                    }
                                }
                            });
                        }
                    });
                    __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
                        var dataItem = series.dataItems.getIndex(i);
                        if (dataItem) {
                            __WEBPACK_IMPORTED_MODULE_7__core_utils_Object__["each"](dataItem.values, function (key) {
                                var value = dataItem.values[key].workingValue; // can not use getWorkingValue here!
                                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
                                    dataItem.setCalculatedValue(key, total[key], "total");
                                    dataItem.setCalculatedValue(key, 100 * value / total[key], "totalPercent");
                                }
                            });
                        }
                    });
                }
            }
        }
    };
    /**
     * Validates the data range.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    ValueAxis.prototype.validateDataRange = function () {
        _super.prototype.validateDataRange.call(this);
        // not using default caching for a better performance
        this._valueToPosition = {};
        this._positionToValue = {};
        // it's important to fix axis breaks in the beginning, as positionToValue and adjustDifference depends on breaks values
        this.fixAxisBreaks();
        // calculate zoom values
        this.calculateZoom();
    };
    /**
     * Validates the whole axis. Causes it to redraw.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    ValueAxis.prototype.validate = function () {
        // this is moved to a separate method because it differs in DateAxis
        this.validateAxisElements();
        _super.prototype.validate.call(this);
        this.hideUnusedDataItems();
        // hide too close
        //this.hideTooCloseDataItems();
    };
    /**
     * Calculates all positions, related to axis as per current zoom.
     *
     * @ignore Exclude from docs
     */
    ValueAxis.prototype.calculateZoom = function () {
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this.min) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this.max)) {
            var min = this.positionToValue(this.start);
            var max = this.positionToValue(this.end);
            var differece = this.adjustDifference(min, max);
            var minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);
            min = minMaxStep.min;
            max = minMaxStep.max;
            this._adjustedStart = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"]((min - this.min) / (this.max - this.min), 5);
            this._adjustedEnd = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"]((max - this.min) / (this.max - this.min), 5);
            this._step = minMaxStep.step;
            this._stepDecimalPlaces = __WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__["decimalPlaces"](this._step);
            if (this._minZoomed != min || this._maxZoomed != max) {
                this._minZoomed = min;
                this._maxZoomed = max;
                this.dispatchImmediately("selectionextremeschanged");
            }
        }
        else {
            this._adjustedStart = this.start;
            this._adjustedEnd = this.end;
        }
    };
    /*
        fixAxisBreaks() {
            let axisBreaks: List<ValueAxisBreak> = <List<ValueAxisBreak>>this.axisBreaks;
            if (axisBreaks.length > 0) {

                // first make sure that startValue is <= end value
                for (let i: number = 0; i < axisBreaks.length; i++) {
                    let axisBreak: ValueAxisBreak = axisBreaks.get(i);
                    let startValue: number = $math.min(axisBreak.startValue, axisBreak.endValue);
                    let endValue: number = $math.max(axisBreak.startValue, axisBreak.endValue);

                    axisBreak.adjustedStartValue = startValue;
                    axisBreak.adjustedEndValue = endValue;
                }

                // sort by adjustedStartValue
                this.axisBreaks.sortByKey("adjustedStartValue");

                let firstAxisBreak: ValueAxisBreak = axisBreaks.get(0);
                let previousEndValue: number = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);

                // process breaks
                for (let i: number = 0; i < this.axisBreaks.length; i++) {
                    let axisBreak: ValueAxisBreak = axisBreaks.get(i);

                    let startValue: number = axisBreak.adjustedStartValue;
                    let endValue: number = axisBreak.adjustedEndValue;

                    // breaks can't overlap
                    // if break starts before previous break ends
                    if (startValue < previousEndValue) {
                        startValue = previousEndValue;

                        if (endValue < previousEndValue) {
                            endValue = previousEndValue;
                        }
                    }

                    axisBreak.adjustedStartValue = startValue;
                    axisBreak.adjustedEndValue = endValue;

                    // break difference
                    let axisBreakDif: number = endValue - startValue;
                    let axisBreakGridCount: number = Math.ceil(axisBreakDif / this._step * axisBreak.breakSize);

                    // calculate min, max and step for axis break
                    let breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount);
                    axisBreak.adjustedStep = breakMinMaxStep.step;
                    axisBreak.adjustedMin = breakMinMaxStep.min;
                    axisBreak.adjustedMax = breakMinMaxStep.max;
                    previousEndValue = endValue;
                }
            }

            this._difference = this.adjustDifference(this.min, this.max);
        }
    */
    /**
     * Validates Axis elements.
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    ValueAxis.prototype.validateAxisElements = function () {
        var _this = this;
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this.max) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this.min)) {
            // first regular items
            var value_1 = this.minZoomed - this._step * 2;
            if (this.strictMinMax) {
                value_1 = Math.floor(value_1 / this._step) * this._step;
            }
            this.resetIterators();
            var dataItemsIterator_1 = this._dataItemsIterator;
            var i = 0;
            while (value_1 <= this._maxZoomed) {
                var axisBreak = this.isInBreak(value_1);
                if (!axisBreak) {
                    var dataItem = dataItemsIterator_1.find(function (x) { return x.value === value_1; });
                    this.processDataItem(dataItem);
                    this.appendDataItem(dataItem);
                    dataItem.axisBreak = undefined;
                    if (dataItem.value != value_1) {
                        dataItem.value = value_1;
                        dataItem.text = this.formatLabel(value_1);
                        if (dataItem.label.invalid) {
                            dataItem.label.validate();
                        }
                    }
                    this.validateDataElement(dataItem);
                    i++;
                }
                if (!this.logarithmic) {
                    value_1 += this._step;
                }
                else {
                    var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;
                    if (differencePower > 1) {
                        value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);
                    }
                    else {
                        value_1 += this._step;
                    }
                }
            }
            var axisBreaks = this.axisBreaks;
            // breaks later
            var renderer_1 = this.renderer;
            __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](axisBreaks.iterator(), function (axisBreak) {
                if (axisBreak.breakSize > 0) {
                    // only add grid if gap is bigger then minGridDistance
                    if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["getDistance"](axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {
                        var breakValue_1 = axisBreak.adjustedMin;
                        while (breakValue_1 <= axisBreak.adjustedMax) {
                            if (breakValue_1 >= axisBreak.adjustedStartValue && breakValue_1 <= axisBreak.adjustedEndValue) {
                                var dataItem = dataItemsIterator_1.find(function (x) { return x.value === breakValue_1; });
                                _this.processDataItem(dataItem);
                                _this.appendDataItem(dataItem);
                                dataItem.axisBreak = axisBreak;
                                if (dataItem.value != breakValue_1) {
                                    dataItem.value = breakValue_1;
                                    dataItem.text = _this.formatLabel(breakValue_1);
                                    if (dataItem.label.invalid) {
                                        dataItem.label.validate();
                                    }
                                }
                                _this.validateDataElement(dataItem);
                            }
                            breakValue_1 += axisBreak.adjustedStep;
                        }
                    }
                }
            });
        }
    };
    /**
     * Validates axis data item.
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {ValueAxisDataItem}  dataItem  Data item
     */
    ValueAxis.prototype.validateDataElement = function (dataItem) {
        _super.prototype.validateDataElement.call(this, dataItem);
        dataItem.__disabled = false;
        var renderer = this.renderer;
        var value = dataItem.value;
        var endValue = dataItem.endValue;
        var position = this.valueToPosition(value);
        var endPosition = position;
        var fillEndPosition = this.valueToPosition(value + this._step);
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](endValue)) {
            endPosition = this.valueToPosition(endValue);
            fillEndPosition = endPosition;
        }
        // this point is needed to calculate distance to satisfy minGridDistance
        dataItem.point = renderer.positionToPoint(position);
        var tick = dataItem.tick;
        if (tick) {
            renderer.updateTickElement(tick, position, endPosition);
        }
        var grid = dataItem.grid;
        if (grid) {
            renderer.updateGridElement(grid, position, endPosition);
        }
        var label = dataItem.label;
        if (label) {
            renderer.updateLabelElement(label, position, endPosition);
        }
        var fill = dataItem.axisFill;
        if (fill) {
            renderer.updateFillElement(fill, position, fillEndPosition);
            if (!dataItem.isRange) {
                this.fillRule(dataItem);
            }
        }
        var mask = dataItem.mask;
        if (mask) {
            renderer.updateFillElement(mask, position, fillEndPosition);
        }
    };
    /**
     * Formats the value according to axis' own [[NumberFormatter]].
     *
     * @param  {number}  value  Source value
     * @return {string}         Formatted value
     */
    ValueAxis.prototype.formatLabel = function (value) {
        return this.numberFormatter.format(value);
    };
    Object.defineProperty(ValueAxis.prototype, "basePoint", {
        /**
         * A coordinate of the axis' base value.
         *
         * @ignore Exclude from docs
         * @return {IPoint} Base point
         */
        get: function () {
            var baseValue = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](this._baseValue, this.minZoomed, this.maxZoomed);
            var position = this.valueToPosition(baseValue);
            var basePoint = this.renderer.positionToPoint(position);
            return basePoint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "baseValue", {
        /**
         * @return {number} base value
         */
        get: function () {
            return this._baseValue;
        },
        /**
         * A base value.
         *
         * This is a threshold value that will divide "positive" and "negative"
         * value ranges.
         *
         * Other scale-related functionality also depend on base value. E.g. stacks,
         * value-dependent coloring, etc.
         *
         * @param {number} value Base value
         */
        set: function (value) {
            this._baseValue = value;
            this.invalidateLayout();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts a numeric value to relative position on axis
     *
     * An alias to `valueToPosition()`.
     *
     * @param  {number}  value  Value
     * @return {number}         Position
     */
    ValueAxis.prototype.anyToPosition = function (value) {
        return this.valueToPosition(value);
    };
    /**
     * Converts a numeric value to orientation point (x, y, angle) on axis
     *
     * @param  {number}  value  Value
     * @return {IOrientationPoint}  Orientation point
     */
    ValueAxis.prototype.valueToPoint = function (value) {
        var position = this.valueToPosition(value);
        var point = this.renderer.positionToPoint(position);
        var angle = this.renderer.positionToAngle(position);
        return { x: point.x, y: point.y, angle: angle };
    };
    /**
     * Converts a numeric value to orientation (x, y, angle) point on axis
     *
     * @param  {number}  value  Value
     * @return {IOrientationPoint}  Orientation point
     */
    ValueAxis.prototype.anyToPoint = function (value) {
        return this.valueToPoint(value);
    };
    /**
     * Converts a numeric value to relative position on axis.
     *
     * @param  {number}  value  Value
     * @return {number}  relative position
     */
    ValueAxis.prototype.valueToPosition = function (value) {
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
            var strValue = value.toString();
            var cachedPosition = this._valueToPosition[strValue];
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](cachedPosition)) {
                return cachedPosition;
            }
            else {
                // todo: think if possible to take previous value and do not go through all previous breaks
                var min_1 = this.min;
                var max_1 = this.max;
                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](min_1) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](max_1)) {
                    var difference = this._difference;
                    if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](difference)) {
                        difference = this.adjustDifference(min_1, max_1);
                    }
                    var axisBreaks = this.axisBreaks;
                    __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["eachContinue"](axisBreaks.iterator(), function (axisBreak) {
                        var startValue = axisBreak.adjustedStartValue;
                        var endValue = axisBreak.adjustedEndValue;
                        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](startValue) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](endValue)) {
                            if (value < startValue) {
                                return false;
                            }
                            if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["intersect"]({ start: startValue, end: endValue }, { start: min_1, end: max_1 })) { // todo: check this once and set some flag in axisBreak
                                startValue = Math.max(startValue, min_1);
                                endValue = Math.min(endValue, max_1);
                                var breakSize = axisBreak.breakSize;
                                // value to the right of break end
                                if (value > endValue) {
                                    min_1 += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?
                                }
                                // value to the left of break start
                                else if (value < startValue) {
                                }
                                // value within break
                                else {
                                    value = startValue + (value - startValue) * breakSize;
                                }
                            }
                        }
                        return true;
                    });
                    var position = void 0;
                    if (!this.logarithmic) {
                        position = (value - min_1) / difference;
                    }
                    else {
                        position = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));
                    }
                    position = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](position, 5);
                    this._valueToPosition[strValue] = position;
                    return position;
                }
            }
        }
    };
    /**
     * Converts an relative position to a corresponding value within
     * axis' scale.
     *
     * @param  {number}  position  Position (px)
     * @return {number}            Value
     */
    ValueAxis.prototype.positionToValue = function (position) {
        position = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](position, 10);
        var strPosition = position.toString();
        var cachedValue = this._positionToValue[strPosition];
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](cachedValue)) {
            return cachedValue;
        }
        else {
            var min_2 = this.min;
            var max_2 = this.max;
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](min_2) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](max_2)) {
                var difference_1 = max_2 - min_2; //no need to adjust!
                var axisBreaks = this.axisBreaks;
                var value_2 = null;
                // in case we have some axis breaks
                __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["eachContinue"](axisBreaks.iterator(), function (axisBreak) {
                    var breakStartPosition = axisBreak.startPosition;
                    var breakEndPosition = axisBreak.endPosition;
                    var breakStartValue = axisBreak.adjustedStartValue;
                    var breakEndValue = axisBreak.adjustedEndValue;
                    if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](breakStartValue) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](breakEndValue)) {
                        if (breakStartValue > max_2) {
                            return false;
                        }
                        if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["intersect"]({ start: breakStartValue, end: breakEndValue }, { start: min_2, end: max_2 })) {
                            breakStartValue = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["max"](breakStartValue, min_2);
                            breakEndValue = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["min"](breakEndValue, max_2);
                            var breakSize = axisBreak.breakSize;
                            difference_1 -= (breakEndValue - breakStartValue) * (1 - breakSize);
                            // position to the right of break end
                            if (position > breakEndPosition) {
                                min_2 += (breakEndValue - breakStartValue) * (1 - breakSize);
                            }
                            // position to the left of break start
                            else if (position < breakStartPosition) {
                            }
                            // value within break
                            else {
                                var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);
                                value_2 = breakStartValue + breakPosition * (breakEndValue - breakStartValue);
                                return false;
                            }
                        }
                        return true;
                    }
                });
                if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value_2)) {
                    value_2 = position * difference_1 + min_2;
                }
                this._positionToValue[strPosition] = value_2;
                return value_2;
            }
        }
    };
    /**
     * Converts an X coordinate to a relative value in axis' scale.
     *
     * @param  {number}  x  X (px)
     * @return {number}     Value
     */
    ValueAxis.prototype.xToValue = function (x) {
        return this.positionToValue(this.pointToPosition({ x: x, y: 0 }));
    };
    /**
     * Converts an Y coordinate to a relative value in axis' scale.
     *
     * @param  {number}  y  Y (px)
     * @return {number}     Value
     */
    ValueAxis.prototype.yToValue = function (y) {
        return this.positionToValue(this.pointToPosition({ x: 0, y: y }));
    };
    /**
     * Converts pixel coordinates to a relative position. (0-1)
     *
     * @param {IPoint}   point  Coorinates (px)
     * @return {number}         Position (0-1)
     */
    ValueAxis.prototype.pointToPosition = function (point) {
        if (this.renderer instanceof __WEBPACK_IMPORTED_MODULE_1__AxisRendererY__["a" /* AxisRendererY */]) {
            return 1 - this.renderer.pointToPosition(point);
        }
        else {
            return this.renderer.pointToPosition(point);
        }
    };
    /**
     * Calculates smallest and biggest value for the axis scale.
     *
     * @todo Description (review)
     */
    ValueAxis.prototype.getMinMax = function () {
        var _this = this;
        var min = Number.POSITIVE_INFINITY;
        var max = Number.NEGATIVE_INFINITY;
        // only if min and max are not set from outside, we go through min and max influencers
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._minDefined) || !__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._maxDefined)) {
            __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
                if (!series.ignoreMinMax) {
                    // check min
                    var seriesMin = series.min(_this);
                    if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](seriesMin) && (seriesMin < min)) {
                        min = seriesMin;
                    }
                    // check max
                    var seriesMax = series.max(_this);
                    if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](seriesMax) && (seriesMax > max)) {
                        max = seriesMax;
                    }
                }
            });
        }
        // if defined from outside
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._minDefined)) {
            min = this._minDefined;
        }
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._maxDefined)) {
            max = this._maxDefined;
        }
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](min) || !__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](max)) {
            return;
        }
        this._minReal = min;
        this._maxReal = max;
        if (min == Number.POSITIVE_INFINITY) {
            min = undefined;
        }
        if (max == Number.NEGATIVE_INFINITY) {
            max = undefined;
        }
        var dif = this.adjustDifference(min, max); // previously it was max-min, but not worked well
        min = this.fixMin(min);
        max = this.fixMax(max);
        var minMaxStep = this.adjustMinMax(min, max, dif, this._gridCount);
        min = minMaxStep.min;
        max = minMaxStep.max;
        // do it for the second time (importat!)
        minMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);
        min = minMaxStep.min;
        max = minMaxStep.max;
        // return min max if strict
        if (this.strictMinMax) {
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._minDefined)) {
                min = this._minDefined;
            }
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._maxDefined)) {
                max = this._maxDefined;
            }
        }
        // checking isNumber is good when all series are hidden
        if ((this._minAdjusted != min || this._maxAdjusted != max) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](min) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](max)) {
            this._minAdjusted = min;
            this._maxAdjusted = max;
            this.invalidate();
            this.dispatchImmediately("extremeschanged");
        }
    };
    /**
     * Adjusts the minimum value.
     *
     * This is a placeholder method for extending classes to override.
     *
     * For numeric values this does nothing, however for more complex types, like
     * dates, it may be necessary to adjust.
     *
     * @param  {number}  value  Value
     * @return {number}         Adjusted value
     */
    ValueAxis.prototype.fixMin = function (value) {
        return value;
    };
    /**
     * Adjusts the maximum value.
     *
     * This is a placeholder method for extending classes to override.
     *
     * For numeric values this does nothing, however for more complex types, like
     * dates, it may be necessary to adjust.
     *
     * @param  {number}  value  Value
     * @return {number}         Adjusted value
     */
    ValueAxis.prototype.fixMax = function (value) {
        return value;
    };
    /**
     * Adjusts actual min and max scale values so that the axis starts and ends
     * at "nice" values, unless `strictMinMax` is set.
     *
     * The `difference` can be something else than `max - min`, because of the
     * axis breaks.
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}      min        [description]
     * @param  {number}      max        [description]
     * @param  {number}      difference [description]
     * @param  {number}      gridCount  [description]
     * @param  {boolean}     strictMode [description]
     * @return {IMinMaxStep}            [description]
     */
    ValueAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {
        // will fail if 0
        if (gridCount <= 0) {
            gridCount = 1;
        }
        var initialMin = min;
        var initialMax = max;
        // in case min and max is the same, use max
        if (difference === 0) {
            difference = max;
        }
        // the number by which we need to raise 10 to get difference
        var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
        // here we find a number which is power of 10 and has the same count of numbers as difference has
        var power = Math.pow(10, Math.floor(exponent));
        // reduce this number by 10 times
        power = power / 10;
        var extra = power;
        if (strictMode) {
            extra = 0;
        }
        if (!this.logarithmic) {
            // round down min
            if (strictMode) {
                min = Math.floor(min / power) * power;
                // round up max
                max = Math.ceil(max / power) * power;
            }
            else {
                min = Math.ceil(min / power) * power - extra;
                // round up max
                max = Math.floor(max / power) * power + extra;
            }
            // don't let min go below 0 if real min is >= 0
            if (min < 0 && initialMin >= 0) {
                min = 0;
            }
            // don't let max go above 0 if real max is <= 0
            if (max > 0 && initialMax <= 0) {
                max = 0;
            }
        }
        else {
            if (min <= 0) {
                throw Error("Logarithmic value axis can not have vales <= 0.");
            }
            min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));
            max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));
        }
        // repeat diff, exponent and power again with rounded values
        //difference = this.adjustDifference(min, max);
        exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
        power = Math.pow(10, Math.floor(exponent));
        power = power / 10;
        // approximate difference between two grid lines
        var step = Math.ceil((difference / gridCount) / power) * power;
        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));
        // TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution
        // the step should divide by  2, 5, and 10.
        var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10
        if (stepDivisor > 5) {
            stepDivisor = 10;
        }
        else if (stepDivisor <= 5 && stepDivisor > 2) {
            stepDivisor = 5;
        }
        // now get real step
        step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;
        var decCount = 0;
        // in case numbers are smaller than 1
        if (stepPower < 1) {
            // exponent is less then 1 too. Count decimals of exponent
            decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;
            // round step
            step = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](step, decCount);
        }
        if (!this.logarithmic) {
            // final min and max		
            min = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](step * Math.floor(min / step), decCount);
            max = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](step * Math.ceil(max / step), decCount);
        }
        return { min: min, max: max, step: step };
    };
    Object.defineProperty(ValueAxis.prototype, "min", {
        /**
         * @return {number} Min value
         */
        get: function () {
            return this._minAdjusted;
        },
        /**
         * A minimum value for the axis scale.
         *
         * This value might be auto-adjusted by the Axis in order to accomodate the
         * grid nicely, i.e. plot area is divided by grid in nice equal cells.
         *
         * The above might be overridden by `strictMinMax` which will force exact
         * user-defined min and max values to be used for scale.
         *
         * @param {number}  value  Min value
         */
        set: function (value) {
            this._minDefined = value;
            this.getMinMax();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "step", {
        /**
         * [step description]
         *
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            return this._step;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "max", {
        /**
         * @return {number} Max value
         */
        get: function () {
            return this._maxAdjusted;
        },
        /**
         * A maximum value for the axis scale.
         *
         * This value might be auto-adjusted by the Axis in order to accomodate the
         * grid nicely, i.e. plot area is divided by grid in nice equal cells.
         *
         * The above might be overridden by `strictMinMax` which will force exact
         * user-defined min and max values to be used for scale.
         *
         * @param {number}  value  Max value
         */
        set: function (value) {
            this._maxDefined = value;
            this.getMinMax();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Used for the Series to register itself as the user of this Axis.
     *
     * This will also decorate both the Series and Axis with event handlers, used
     * to redraw on Axis position/zoom change.
     *
     * A disposer for those events is returned, so that they can be disposed
     * together with Series.
     *
     * @ignore Exclude from docs
     * @param  {XYSeries}   series  Series
     * @return {IDisposer}          Disposer for events
     */
    ValueAxis.prototype.registerSeries = function (series) {
        return new __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__["c" /* MultiDisposer */]([
            _super.prototype.registerSeries.call(this, series),
            series.events.on("extremeschanged", this.handleExtremesChange, this),
            series.events.on("selectionextremeschanged", this.handleSelectionExtremesChange, this),
            this.events.on("datarangechanged", series.invalidateDataRange, series),
            this.events.on("extremeschanged", series.invalidate, series)
        ]);
    };
    /**
     * Perform tasks after Axis zoom.
     */
    ValueAxis.prototype.handleSelectionExtremesChange = function () {
        var _this = this;
        var selectionMin;
        var selectionMax;
        var allHidden = true;
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            if (!series.ignoreMinMax) {
                if (series.visible && !series.isHiding) {
                    allHidden = false;
                }
                var seriesSelectionMin = series.selectionMin(_this);
                var seriesSelectionMax = series.selectionMax(_this);
                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](seriesSelectionMin)) {
                    if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](selectionMin) || (seriesSelectionMin < selectionMin)) {
                        selectionMin = seriesSelectionMin;
                    }
                }
                // check max
                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](seriesSelectionMax)) {
                    if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](selectionMax) || (seriesSelectionMax > selectionMax)) {
                        selectionMax = seriesSelectionMax;
                    }
                }
            }
        });
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._minDefined)) {
            if (this.strictMinMax) {
                selectionMin = this._minDefined;
            }
            else {
                selectionMin = this.min;
            }
        }
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._maxDefined)) {
            if (this.strictMinMax) {
                selectionMax = this._maxDefined;
            }
            else {
                selectionMax = this.max;
            }
        }
        var dif = this.adjustDifference(selectionMin, selectionMax);
        var minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);
        selectionMin = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](minMaxStep.min, this.min, this.max);
        selectionMax = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](minMaxStep.max, this.min, this.max);
        // do it for the second time !important
        dif = this.adjustDifference(selectionMin, selectionMax);
        minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);
        selectionMin = minMaxStep.min;
        selectionMax = minMaxStep.max;
        if (this.strictMinMax) {
            selectionMin = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["max"](selectionMin, this._minDefined);
            selectionMax = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["min"](selectionMax, this._maxDefined);
        }
        var start = this.valueToPosition(selectionMin);
        var end = this.valueToPosition(selectionMax);
        // in case all series are hidden or hiding, full zoomout
        if (allHidden) {
            start = 0;
            end = 1;
        }
        // temp, not sure. solving selection.change jumping
        /*
        if(selectionMin < this.min){
            this._minAdjusted = selectionMin;
        }

        if(selectionMax > this.max){
            this._maxAdjusted = selectionMax;
        } 	*/
        this.zoom({ start: start, end: end });
    };
    Object.defineProperty(ValueAxis.prototype, "strictMinMax", {
        /**
         * @return {boolean} Use exact values?
         */
        get: function () {
            return this.getPropertyValue("strictMinMax");
        },
        /**
         * Indicates whether to blindly use exact `min` and `max` values set by user
         * when generating Axis scale.
         *
         * If not set, the Axis might slightly adjust those values to accomodate a
         * better looking grid.
         *
         * @default false
         * @param {boolean} value Use exact values?
         */
        set: function (value) {
            this.setPropertyValue("strictMinMax", value);
            this.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "logarithmic", {
        /**
         * @return {boolean} Logarithmic scale?
         */
        get: function () {
            return this.getPropertyValue("logarithmic");
        },
        /**
         * Indicates if this axis should use a logarithmic scale.
         *
         * Please note that logarithmic axis can **only** accommodate values bigger
         * than zero.
         *
         * Having zero or negative values will result in error and failure of the
         * whole chart.
         *
         * @param {boolean} value Logarithmic scale?
         */
        set: function (value) {
            this.setPropertyValue("logarithmic", value);
            this.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Invalidates axis data items when series extremes change
     */
    ValueAxis.prototype.handleExtremesChange = function () {
        this.getMinMax();
    };
    /**
     * Returns the X coordinate for series' data item's value.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Data field to get value from
     * @param  {number}            location  Location (0-1)
     * @param  {string}            stackKey  ?
     * @return {number}                      X coordinate (px)
     */
    ValueAxis.prototype.getX = function (dataItem, key, location, stackKey) {
        var value = dataItem.getWorkingValue(key);
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](stackKey)) {
            stackKey = "valueX";
        }
        var stack = dataItem.getValue(stackKey, "stack");
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
            value = this.baseValue;
        }
        return this.renderer.positionToPoint(this.valueToPosition(value + stack)).x;
    };
    /**
     * Returns the Y coordinate for series' data item's value.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Data field to get value from
     * @param  {number}            location  Location (0-1)
     * @param  {string}            stackKey  Stack ID
     * @return {number}                      Y coordinate (px)
     */
    ValueAxis.prototype.getY = function (dataItem, key, location, stackKey) {
        var value = dataItem.getWorkingValue(key);
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](stackKey)) {
            stackKey = "valueY";
        }
        var stack = dataItem.getValue(stackKey, "stack");
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
            value = this.baseValue;
        }
        return this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;
    };
    /**
     * Returns an angle for series data item.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Data field to get value from
     * @param  {number}            location  Location (0-1)
     * @param  {string}            stackKey  Stack ID
     * @return {number}                      Angle
     */
    ValueAxis.prototype.getAngle = function (dataItem, key, location, stackKey) {
        var value = dataItem.getWorkingValue(key);
        var stack = dataItem.getValue(stackKey, "stack");
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
            value = this.baseValue;
        }
        return this.positionToAngle(this.valueToPosition(value + stack));
    };
    /**
     * [getAnyRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  start     [description]
     * @param  {number}  end       [description]
     * @param  {number}  location  [description]
     * @return {string}            [description]
     */
    ValueAxis.prototype.getAnyRangePath = function (start, end, location) {
        var startPosition = this.valueToPosition(start);
        var endPosition = this.valueToPosition(end);
        return this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer
    };
    /**
     * Returns text to show in a axis tooltip, based on specific position within
     * axis.
     *
     * The label will be formatted as per [[NumberFormatter]] set for the whole
     * chart, or explicitly for this Axis.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position (px)
     * @return {string}            Label (numeric value)
     */
    ValueAxis.prototype.getTooltipText = function (position) {
        var value = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](this.positionToValue(position), this._stepDecimalPlaces);
        return this.adapter.apply("getTooltipText", this.tooltip.numberFormatter.format(value));
    };
    /**
     * Zooms axis to specific values.
     *
     * @param {number}   startValue      Start value
     * @param {number}   endValue        End value
     * @param {boolean}  skipRangeEvent  Do not invoke events
     * @param {boolean}  instantly       Do not play zoom animations
     */
    ValueAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly) {
        var start = (startValue - this.min) / (this.max - this.min);
        var end = (endValue - this.min) / (this.max - this.min);
        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);
    };
    Object.defineProperty(ValueAxis.prototype, "minZoomed", {
        /**
         * A smallest value in axis scale within current zoom.
         *
         * @return {number} Min zoom value
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["max"](this.min, this._minZoomed);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "maxZoomed", {
        /**
         * A biggest value in axis scale within current zoom.
         * @return {number} [description]
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["min"](this.max, this._maxZoomed);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates positioning of Axis breaks after something changes.
     *
     * @ignore Exclude from docs
     */
    ValueAxis.prototype.fixAxisBreaks = function () {
        var _this = this;
        _super.prototype.fixAxisBreaks.call(this);
        // process breaks
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.axisBreaks.iterator(), function (axisBreak) {
            var startValue = axisBreak.adjustedStartValue;
            var endValue = axisBreak.adjustedEndValue;
            // break difference
            var axisBreakDif = endValue - startValue;
            var axisBreakGridCount = Math.ceil(axisBreakDif / _this._step * axisBreak.breakSize);
            // calculate min, max and step for axis break
            var breakMinMaxStep = _this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount);
            axisBreak.adjustedStep = breakMinMaxStep.step;
            axisBreak.adjustedMin = breakMinMaxStep.min;
            axisBreak.adjustedMax = breakMinMaxStep.max;
        });
        this._difference = this.adjustDifference(this.min, this.max);
    };
    /**
     * Returns value based on position
     * @param  {number}  position  Relative position on axis (0-1)
     * @return {string}            Position label
     */
    ValueAxis.prototype.getPositionLabel = function (position) {
        var value = this.positionToValue(position);
        return this.numberFormatter.format(value);
    };
    /**
     * Shows Axis tooltip at specific value
     *
     * @param {number} value Value
     */
    ValueAxis.prototype.showTooltipAt = function (value) {
        this.showTooltipAtPosition(this.valueToPosition(value));
    };
    return ValueAxis;
}(__WEBPACK_IMPORTED_MODULE_0__Axis__["a" /* Axis */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["a" /* registry */].registeredClasses["ValueAxis"] = ValueAxis;
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["a" /* registry */].registeredClasses["ValueAxisDataItem"] = ValueAxisDataItem;
//# sourceMappingURL=ValueAxis.js.map

/***/ }),
/* 65 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 66 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 67 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(256);
var enumBugKeys = __webpack_require__(167);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(48);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(9);
var dPs = __webpack_require__(257);
var enumBugKeys = __webpack_require__(167);
var IE_PROTO = __webpack_require__(166)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(164)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(168).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(256);
var hiddenKeys = __webpack_require__(167).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(13);
var dP = __webpack_require__(24);
var DESCRIPTORS = __webpack_require__(23);
var SPECIES = __webpack_require__(22)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 73 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(41);
var call = __webpack_require__(268);
var isArrayIter = __webpack_require__(180);
var anObject = __webpack_require__(9);
var toLength = __webpack_require__(25);
var getIterFn = __webpack_require__(182);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(32);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),
/* 76 */,
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRendererY; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisRenderer__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedRectangle__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__ = __webpack_require__(5);
/**
 * Module, defining Axis Renderer for vertical axes.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A renderer for vertical axis.
 *
 * @see {@link IAxisRendererYEvents} for a list of available events
 * @see {@link IAxisRendererYAdapters} for a list of available Adapters
 */
var AxisRendererY = /** @class */ (function (_super) {
    __extends(AxisRendererY, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRendererY(axis) {
        var _this = _super.call(this, axis) || this;
        _this.className = "AxisRendererY";
        _this.minGridDistance = 40;
        _this.opposite = false;
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        _this.labels.template.verticalCenter = "middle";
        axis.layout = "horizontal"; // in order to properly position title, as title goes to axis, not renderer
        _this.applyTheme();
        return _this;
    }
    /**
     * Called when rendered is attached to an Axis, as well as a property of
     * Axis that might affect the appearance is updated.
     *
     * E.g. `axis.opposite`, `axis.inside`, etc.
     *
     * This method is called **before** draw, so that any related setting
     * changed in this method can be changed.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRendererY.prototype.processRenderer = function () {
        _super.prototype.processRenderer.call(this);
        var axis = this.axis;
        if (axis) {
            var title = axis.title;
            title.valign = "middle";
            axis.height = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
            if (this.opposite) {
                title.rotation = 90;
                this.line.toBack();
                title.toFront();
            }
            else {
                title.rotation = -90;
                title.toBack();
                this.line.toFront();
            }
        }
    };
    /**
     * Updates some of the Axis tooltip's visual properties, related to
     * rendering of the Axis.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRendererY.prototype.updateTooltip = function () {
        var axis = this.axis;
        if (axis) {
            var bigNum = 2000;
            var bbx = 0;
            var bby = 0;
            var bbw = bigNum;
            var bbh = this.pixelHeight;
            // right
            if (this.opposite) {
                if (this.inside) {
                    bbx = -bigNum;
                    bbw = bigNum;
                }
            }
            // left
            else {
                if (!this.inside) {
                    bbx = -bigNum;
                    bbw = bigNum;
                }
            }
            this.axis.updateTooltip("horizontal", { x: bbx, y: bby, width: bbw, height: bbh });
        }
    };
    Object.defineProperty(AxisRendererY.prototype, "axisLength", {
        /**
         * Returns actual length of the Axis, in pixels.
         *
         * @return {number} Length (px)
         */
        get: function () {
            var axis = this.axis;
            return axis.pixelHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position on axis to point coordinates.
     *
     * @param  {number}  position  Position (0-1)
     * @return {IPoint}            Point
     */
    AxisRendererY.prototype.positionToPoint = function (position) {
        return { x: 0, y: this.positionToCoordinate(position) };
    };
    /**
     * Converts a point at specific coordinates to a relative position (0-1)
     * on the axis.
     *
     * @param  {IPoint}  point  Point
     * @return {number}         Position (0-1)
     */
    AxisRendererY.prototype.pointToPosition = function (point) {
        return this.coordinateToPosition(point.y);
    };
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  startPosition  Starting position
     * @param  {number}  endPosition    End position
     * @return {string}                 SVG path
     */
    AxisRendererY.prototype.getPositionRangePath = function (startPosition, endPosition) {
        var y1 = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](this.positionToCoordinate(startPosition), 0, this.axisLength);
        var y2 = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](this.positionToCoordinate(endPosition), 0, this.axisLength);
        var h = Math.abs(y2 - y1);
        var w = this.gridContainer.pixelWidth;
        var y = Math.min(y1, y2);
        var x = 0;
        return __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["rectToPath"]({
            x: x,
            y: y,
            width: w,
            height: h
        }, true);
    };
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRendererY.prototype.updateGridElement = function (grid, position, endPosition) {
        var point = this.positionToPoint(position);
        if (grid.element) {
            grid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: this.gridContainer.pixelWidth, y: 0 }) });
        }
        this.positionItem(grid, point);
        this.toggleVisibility(grid, position, 0, 1);
    };
    /**
     * Updates and positions a tick element.
     *
     * @ignore Exclude from docs
     * @param {AxisTick}  tick         Tick element
     * @param {number}    position     Starting position
     * @param {number}    endPosition  End position
     */
    AxisRendererY.prototype.updateTickElement = function (tick, position, endPosition) {
        var point = this.positionToPoint(position);
        var tickLength = tick.length;
        if (!this.opposite) {
            point.x = this.pixelWidth;
            tickLength *= (tick.inside ? 1 : -1);
        }
        else {
            tickLength *= (tick.inside ? -1 : 1);
        }
        tick.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: tickLength, y: 0 }) });
        this.positionItem(tick, point);
        this.toggleVisibility(tick, position, 0, 1);
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererY.prototype.updateAxisLine = function () {
        var element = this.line.element;
        if (element) {
            element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: 0, y: this.axisLength }) });
        }
    };
    /**
     * Updates and positions the base grid element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererY.prototype.updateBaseGridElement = function () {
        _super.prototype.updateBaseGridElement.call(this);
        var axis = this.axis;
        var w = this.gridContainer.pixelWidth;
        var h = this.gridContainer.pixelHeight;
        var y = axis.basePoint.y;
        var baseGrid = this.baseGrid;
        if (y < 0 || y > h) {
            baseGrid.hide(0);
        }
        else {
            var x = __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__["spritePointToSprite"]({ x: 0, y: 0 }, this.gridContainer, this).x;
            baseGrid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: w, y: 0 }) });
            baseGrid.moveTo({ x: x, y: y });
            baseGrid.show(0);
        }
    };
    /**
     * Updates and positions a label element.
     *
     * @ignore Exclude from docs
     * @param {AxisLabel}  label        Label element
     * @param {number}     position     Starting position
     * @param {number}     endPosition  Ending position
     */
    AxisRendererY.prototype.updateLabelElement = function (label, position, endPosition) {
        position = position + (endPosition - position) * label.location;
        label.isMeasured = !label.inside;
        var point = this.positionToPoint(position);
        var align;
        if (this.opposite) {
            if (label.inside) {
                align = "right";
            }
            else {
                align = "left";
            }
            point.x = 0;
        }
        else {
            if (label.inside) {
                align = "left";
            }
            else {
                align = "right";
            }
            point.x = this.pixelWidth;
        }
        label.horizontalCenter = align;
        this.positionItem(label, point);
        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);
    };
    /**
     * Updates and positions an axis break element.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Break element
     */
    AxisRendererY.prototype.updateBreakElement = function (axisBreak) {
        _super.prototype.updateBreakElement.call(this, axisBreak);
        var startLine = axisBreak.startLine;
        var endLine = axisBreak.endLine;
        var fillShape = axisBreak.fillShape;
        var startPoint = axisBreak.startPoint;
        var endPoint = axisBreak.endPoint;
        var x1 = axisBreak.pixelMarginLeft;
        var x2 = this.gridContainer.pixelWidth - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;
        var w = Math.abs(x2 - x1);
        startLine.x = x1;
        startLine.height = 0;
        startLine.width = w;
        endLine.x = x1;
        endLine.height = 0;
        endLine.width = w;
        fillShape.width = w;
        fillShape.height = Math.abs(endPoint.y - startPoint.y);
        fillShape.x = x1;
        fillShape.y = endPoint.y;
    };
    /**
     * Creates visual elements for and axis break.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Axis break
     */
    AxisRendererY.prototype.createBreakSprites = function (axisBreak) {
        axisBreak.startLine = new __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__["a" /* WavedLine */]();
        axisBreak.endLine = new __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__["a" /* WavedLine */]();
        var wavedRectangle = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedRectangle__["a" /* WavedRectangle */]();
        wavedRectangle.setWavedSides(true, false, true, false);
        axisBreak.fillShape = wavedRectangle;
    };
    Object.defineProperty(AxisRendererY.prototype, "inside", {
        /**
         * Returns current setting for `inside`.
         *
         * @return {boolean} Labels inside?
         */
        get: function () {
            return this.getPropertyValue("inside");
        },
        /**
         * Sets if Axis labels should be drawn inside Axis.
         *
         * @param {boolean} value Labels inside?
         */
        set: function (value) {
            this.setPropertyValue("inside", value);
            this.minWidth = value ? undefined : 65;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts a position on the axis to a coordinate in pixels.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position (0-1)
     * @return {number}            Coordinate (px)
     */
    AxisRendererY.prototype.positionToCoordinate = function (position) {
        var coordinate;
        var axis = this.axis;
        var axisFullLength = axis.axisFullLength;
        if (!axis.renderer.inversed) {
            coordinate = (axis.end - position) * axisFullLength;
        }
        else {
            coordinate = (position - axis.start) * axisFullLength;
        }
        return __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](coordinate, 1);
    };
    return AxisRendererY;
}(__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__["a" /* AxisRenderer */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["a" /* registry */].registeredClasses["AxisRendererY"] = AxisRendererY;
//# sourceMappingURL=AxisRendererY.js.map

/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Button; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Label__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_RoundedRectangle__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 * Functionality for drawing simple buttons.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Button class is capable of drawing a simple rectangular button with
 * optionally rounded corners and an icon in it.
 *
 * @see {@link IButtonEvents} for a list of available events
 * @see {@link IButtonAdapters} for a list of available Adapters
 */
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    /**
     * Constructor
     */
    function Button() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Button";
        _this.tooltipY = 0;
        // Set defaults
        _this.iconPosition = "left";
        _this.layout = "horizontal";
        _this.contentAlign = "center";
        _this.contentValign = "middle";
        _this.padding(8, 16, 8, 16);
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create background
        var background = _this.background;
        background.fill = interfaceColors.getFor("secondaryButton");
        background.stroke = interfaceColors.getFor("secondaryButtonStroke");
        background.fillOpacity = 1;
        background.strokeOpacity = 1;
        background.cornerRadius(3, 3, 3, 3);
        // Create the label element
        _this.label = new __WEBPACK_IMPORTED_MODULE_1__Label__["a" /* Label */]();
        _this.label.fill = interfaceColors.getFor("secondaryButtonText");
        ;
        // Create default states
        var hoverState = background.states.create("hover");
        hoverState.properties.fillOpacity = 1;
        hoverState.properties.fill = interfaceColors.getFor("secondaryButtonHover");
        var downState = background.states.create("down");
        downState.transitionDuration = 100;
        downState.properties.fill = interfaceColors.getFor("secondaryButtonDown");
        downState.properties.fillOpacity = 1;
        // Set up accessibility
        // A button should be always focusable
        _this.role = "button";
        _this.focusable = true;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Button.prototype, "icon", {
        /**
         * @return {Sprite} Icon Sprite
         */
        get: function () {
            return this.getPropertyValue("icon");
        },
        /**
         * A [[Sprite]] to be used as an icon on button.
         *
         * @param {Sprite} icon Icon Sprite
         */
        set: function (icon) {
            var currentIcon = this.getPropertyValue("icon");
            if (currentIcon) {
                //this._icon.dispose();
                //this.removeDispose(currentIcon);
                currentIcon.parent = undefined;
            }
            if (icon) {
                this.setPropertyValue("icon", icon);
                icon.parent = this;
                icon.mouseEnabled = false;
                this.iconPosition = this.iconPosition;
                this._disposers.push(icon);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "iconPosition", {
        /**
         * @return {"left" | "right"} Icon position
         */
        get: function () {
            return this.getPropertyValue("iconPosition");
        },
        /**
         * Icon position: "left" or "right".
         *
         * @default "left"
         * @param {"left" | "right"}  position  Icon position
         */
        set: function (position) {
            this.setPropertyValue("iconPosition", position);
            if (this.icon) {
                if (position == "left") {
                    this.icon.toBack();
                }
                else {
                    this.icon.toFront();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "label", {
        /**
         * @return {Label} Label element
         */
        get: function () {
            return this._label;
        },
        /**
         * [[Label]] element to be used for text.
         *
         * @param {Label}  label element
         */
        set: function (label) {
            if (this._label) {
                //this._label.dispose();
                this.removeDispose(this._label);
            }
            if (label) {
                this._label = label;
                label.parent = this;
                this._disposers.push(this._label);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a background element for the button.
     *
     * @ignore Exclude from docs
     * @return {RoundedRectangle} Background element
     */
    Button.prototype.createBackground = function () {
        return new __WEBPACK_IMPORTED_MODULE_2__elements_RoundedRectangle__["a" /* RoundedRectangle */]();
    };
    return Button;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Button.js.map

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return raf; });
/* harmony export (immutable) */ __webpack_exports__["a"] = nextFrame;
/* harmony export (immutable) */ __webpack_exports__["c"] = readFrame;
/* harmony export (immutable) */ __webpack_exports__["f"] = writeFrame;
/* harmony export (immutable) */ __webpack_exports__["e"] = whenIdle;
/* harmony export (immutable) */ __webpack_exports__["d"] = triggerIdle;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Array__ = __webpack_require__(15);
/**
 * A collection of low-level async operation stuff.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

var pendingFrame = false;
var nextQueue = [];
var readQueue = [];
var writeQueue = [];
var idleQueue = [];
var fps = 1000 / 60;
/**
 * [raf description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
var raf = (typeof requestAnimationFrame === "function"
    ? function (fn) {
        requestAnimationFrame(fn);
    }
    : function (fn) {
        setTimeout(fn, fps);
    });
/**
 * [frameLoop description]
 *
 * @ignore Exclude from docs
 * @todo Description
 */
function frameLoop() {
    var now = Date.now();
    var length = nextQueue.length;
    for (var i = 0; i < length; ++i) {
        nextQueue[i](now);
    }
    __WEBPACK_IMPORTED_MODULE_0__Array__["m" /* shiftLeft */](nextQueue, length);
    for (var i = 0; i < readQueue.length; ++i) {
        readQueue[i](now);
    }
    readQueue.length = 0;
    for (var i = 0; i < writeQueue.length; ++i) {
        writeQueue[i](now);
    }
    writeQueue.length = 0;
    if (nextQueue.length === 0 && readQueue.length === 0) {
        pendingFrame = false;
    }
    else {
        raf(frameLoop);
    }
}
/**
 * [pendFrame description]
 *
 * @ignore Exclude from docs
 * @todo Description
 */
function pendFrame() {
    if (!pendingFrame) {
        pendingFrame = true;
        raf(frameLoop);
    }
}
/**
 * [nextFrame description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {Listener} fn [description]
 */
function nextFrame(fn) {
    nextQueue.push(fn);
    pendFrame();
}
/**
 * [readFrame description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {Listener} fn [description]
 */
function readFrame(fn) {
    readQueue.push(fn);
    pendFrame();
}
/**
 * [writeFrame description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {Listener} fn [description]
 */
function writeFrame(fn) {
    writeQueue.push(fn);
    pendFrame();
}
/**
 * [whenIdle description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {Listener} fn [description]
 */
function whenIdle(fn) {
    idleQueue.push(fn);
}
/**
 * [triggerIdle description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @todo Maybe don't trigger a callback which was added while in the middle of triggering?
 */
function triggerIdle() {
    var now = Date.now();
    var length = idleQueue.length;
    for (var i = 0; i < length; ++i) {
        idleQueue.shift()(now);
    }
}
//# sourceMappingURL=AsyncPending.js.map

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["rgb"] = rgb;
/* harmony export (immutable) */ __webpack_exports__["hexToRgb"] = hexToRgb;
/* harmony export (immutable) */ __webpack_exports__["rgbaToRgb"] = rgbaToRgb;
/* harmony export (immutable) */ __webpack_exports__["rgbToHex"] = rgbToHex;
/* harmony export (immutable) */ __webpack_exports__["rgbToRGBA"] = rgbToRGBA;
/* harmony export (immutable) */ __webpack_exports__["pad2"] = pad2;
/* harmony export (immutable) */ __webpack_exports__["interpolate"] = interpolate;
/* harmony export (immutable) */ __webpack_exports__["lighten"] = lighten;
/* harmony export (immutable) */ __webpack_exports__["getLightnessStep"] = getLightnessStep;
/* harmony export (immutable) */ __webpack_exports__["brighten"] = brighten;
/* harmony export (immutable) */ __webpack_exports__["getBrightnessStep"] = getBrightnessStep;
/* harmony export (immutable) */ __webpack_exports__["saturate"] = saturate;
/* harmony export (immutable) */ __webpack_exports__["hslToRgb"] = hslToRgb;
/* harmony export (immutable) */ __webpack_exports__["rgbToHsl"] = rgbToHsl;
/* harmony export (immutable) */ __webpack_exports__["rgbToHsv"] = rgbToHsv;
/* harmony export (immutable) */ __webpack_exports__["hsvToRgb"] = hsvToRgb;
/* harmony export (immutable) */ __webpack_exports__["isLight"] = isLight;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(2);
/**
 * A collection of color-related functions
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * Define named colors for easy resolution to RGB.
 *
 * @type {Object}
 */
var namedColors = {
    aliceblue: { r: 240, g: 248, b: 255 },
    antiquewhite: { r: 250, g: 235, b: 215 },
    aqua: { r: 0, g: 255, b: 255 },
    aquamarine: { r: 127, g: 255, b: 212 },
    azure: { r: 240, g: 255, b: 255 },
    beige: { r: 245, g: 245, b: 220 },
    bisque: { r: 255, g: 228, b: 196 },
    black: { r: 0, g: 0, b: 0 },
    blanchedalmond: { r: 255, g: 235, b: 205 },
    blue: { r: 0, g: 0, b: 255 },
    blueviolet: { r: 138, g: 43, b: 226 },
    brown: { r: 165, g: 42, b: 42 },
    burlywood: { r: 222, g: 184, b: 135 },
    cadetblue: { r: 95, g: 158, b: 160 },
    chartreuse: { r: 127, g: 255, b: 0 },
    chocolate: { r: 210, g: 105, b: 30 },
    coral: { r: 255, g: 127, b: 80 },
    cornflowerblue: { r: 100, g: 149, b: 237 },
    cornsilk: { r: 255, g: 248, b: 220 },
    crimson: { r: 220, g: 20, b: 60 },
    cyan: { r: 0, g: 255, b: 255 },
    darkblue: { r: 0, g: 0, b: 139 },
    darkcyan: { r: 0, g: 139, b: 139 },
    darkgoldenrod: { r: 184, g: 134, b: 11 },
    darkgray: { r: 169, g: 169, b: 169 },
    darkgrey: { r: 169, g: 169, b: 169 },
    darkgreen: { r: 0, g: 100, b: 0 },
    darkkhaki: { r: 189, g: 183, b: 107 },
    darkmagenta: { r: 139, g: 0, b: 139 },
    darkolivegreen: { r: 85, g: 107, b: 47 },
    darkorange: { r: 255, g: 140, b: 0 },
    darkorchid: { r: 153, g: 50, b: 204 },
    darkred: { r: 139, g: 0, b: 0 },
    darksalmon: { r: 233, g: 150, b: 122 },
    darkseagreen: { r: 143, g: 188, b: 143 },
    darkslateblue: { r: 72, g: 61, b: 139 },
    darkslategray: { r: 47, g: 79, b: 79 },
    darkslategrey: { r: 47, g: 79, b: 79 },
    darkturquoise: { r: 0, g: 206, b: 209 },
    darkviolet: { r: 148, g: 0, b: 211 },
    deeppink: { r: 255, g: 20, b: 147 },
    deepskyblue: { r: 0, g: 191, b: 255 },
    dimgray: { r: 105, g: 105, b: 105 },
    dimgrey: { r: 105, g: 105, b: 105 },
    dodgerblue: { r: 30, g: 144, b: 255 },
    firebrick: { r: 178, g: 34, b: 34 },
    floralwhite: { r: 255, g: 250, b: 240 },
    forestgreen: { r: 34, g: 139, b: 34 },
    fuchsia: { r: 255, g: 0, b: 255 },
    gainsboro: { r: 220, g: 220, b: 220 },
    ghostwhite: { r: 248, g: 248, b: 255 },
    gold: { r: 255, g: 215, b: 0 },
    goldenrod: { r: 218, g: 165, b: 32 },
    gray: { r: 128, g: 128, b: 128 },
    grey: { r: 128, g: 128, b: 128 },
    green: { r: 0, g: 128, b: 0 },
    greenyellow: { r: 173, g: 255, b: 47 },
    honeydew: { r: 240, g: 255, b: 240 },
    hotpink: { r: 255, g: 105, b: 180 },
    indianred: { r: 205, g: 92, b: 92 },
    indigo: { r: 75, g: 0, b: 130 },
    ivory: { r: 255, g: 255, b: 240 },
    khaki: { r: 240, g: 230, b: 140 },
    lavender: { r: 230, g: 230, b: 250 },
    lavenderblush: { r: 255, g: 240, b: 245 },
    lawngreen: { r: 124, g: 252, b: 0 },
    lemonchiffon: { r: 255, g: 250, b: 205 },
    lightblue: { r: 173, g: 216, b: 230 },
    lightcoral: { r: 240, g: 128, b: 128 },
    lightcyan: { r: 224, g: 255, b: 255 },
    lightgoldenrodyellow: { r: 250, g: 250, b: 210 },
    lightgray: { r: 211, g: 211, b: 211 },
    lightgrey: { r: 211, g: 211, b: 211 },
    lightgreen: { r: 144, g: 238, b: 144 },
    lightpink: { r: 255, g: 182, b: 193 },
    lightsalmon: { r: 255, g: 160, b: 122 },
    lightseagreen: { r: 32, g: 178, b: 170 },
    lightskyblue: { r: 135, g: 206, b: 250 },
    lightslategray: { r: 119, g: 136, b: 153 },
    lightslategrey: { r: 119, g: 136, b: 153 },
    lightsteelblue: { r: 176, g: 196, b: 222 },
    lightyellow: { r: 255, g: 255, b: 224 },
    lime: { r: 0, g: 255, b: 0 },
    limegreen: { r: 50, g: 205, b: 50 },
    linen: { r: 250, g: 240, b: 230 },
    magenta: { r: 255, g: 0, b: 255 },
    maroon: { r: 128, g: 0, b: 0 },
    mediumaquamarine: { r: 102, g: 205, b: 170 },
    mediumblue: { r: 0, g: 0, b: 205 },
    mediumorchid: { r: 186, g: 85, b: 211 },
    mediumpurple: { r: 147, g: 112, b: 219 },
    mediumseagreen: { r: 60, g: 179, b: 113 },
    mediumslateblue: { r: 123, g: 104, b: 238 },
    mediumspringgreen: { r: 0, g: 250, b: 154 },
    mediumturquoise: { r: 72, g: 209, b: 204 },
    mediumvioletred: { r: 199, g: 21, b: 133 },
    midnightblue: { r: 25, g: 25, b: 112 },
    mintcream: { r: 245, g: 255, b: 250 },
    mistyrose: { r: 255, g: 228, b: 225 },
    moccasin: { r: 255, g: 228, b: 181 },
    navajowhite: { r: 255, g: 222, b: 173 },
    navy: { r: 0, g: 0, b: 128 },
    oldlace: { r: 253, g: 245, b: 230 },
    olive: { r: 128, g: 128, b: 0 },
    olivedrab: { r: 107, g: 142, b: 35 },
    orange: { r: 255, g: 165, b: 0 },
    orangered: { r: 255, g: 69, b: 0 },
    orchid: { r: 218, g: 112, b: 214 },
    palegoldenrod: { r: 238, g: 232, b: 170 },
    palegreen: { r: 152, g: 251, b: 152 },
    paleturquoise: { r: 175, g: 238, b: 238 },
    palevioletred: { r: 219, g: 112, b: 147 },
    papayawhip: { r: 255, g: 239, b: 213 },
    peachpuff: { r: 255, g: 218, b: 185 },
    peru: { r: 205, g: 133, b: 63 },
    pink: { r: 255, g: 192, b: 203 },
    plum: { r: 221, g: 160, b: 221 },
    powderblue: { r: 176, g: 224, b: 230 },
    purple: { r: 128, g: 0, b: 128 },
    rebeccapurple: { r: 102, g: 51, b: 153 },
    red: { r: 255, g: 0, b: 0 },
    rosybrown: { r: 188, g: 143, b: 143 },
    royalblue: { r: 65, g: 105, b: 225 },
    saddlebrown: { r: 139, g: 69, b: 19 },
    salmon: { r: 250, g: 128, b: 114 },
    sandybrown: { r: 244, g: 164, b: 96 },
    seagreen: { r: 46, g: 139, b: 87 },
    seashell: { r: 255, g: 245, b: 238 },
    sienna: { r: 160, g: 82, b: 45 },
    silver: { r: 192, g: 192, b: 192 },
    skyblue: { r: 135, g: 206, b: 235 },
    slateblue: { r: 106, g: 90, b: 205 },
    slategray: { r: 112, g: 128, b: 144 },
    slategrey: { r: 112, g: 128, b: 144 },
    snow: { r: 255, g: 250, b: 250 },
    springgreen: { r: 0, g: 255, b: 127 },
    steelblue: { r: 70, g: 130, b: 180 },
    tan: { r: 210, g: 180, b: 140 },
    teal: { r: 0, g: 128, b: 128 },
    thistle: { r: 216, g: 191, b: 216 },
    tomato: { r: 255, g: 99, b: 71 },
    turquoise: { r: 64, g: 224, b: 208 },
    violet: { r: 238, g: 130, b: 238 },
    wheat: { r: 245, g: 222, b: 179 },
    white: { r: 255, g: 255, b: 255 },
    whitesmoke: { r: 245, g: 245, b: 245 },
    yellow: { r: 255, g: 255, b: 0 },
    yellowgreen: { r: 154, g: 205, b: 50 }
};
/**
 * Tries to resolve a named color into a hex color representation.
 *
 * @ignore Exclude from docs
 * @param  {string}  value  Color name
 * @return {string}         Color
 * @deprecated
 */
/*export function resolveNamedColor(value: string): Color {
    return (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;
}*/
/**
 * Converts a proper color hex code (i.e. "#FF5500") or named color (i.e. "red")
 * into an {iRGB} object. If the code is not correctly formatted, an RGB of
 * black is returned.
 *
 * @ignore Exclude from docs
 * @param  {string}  color  Color code
 * @param  {number}  alpha  Alpha (0-1)
 * @return {iRGB}           RGB
 */
function rgb(color, alpha) {
    // Init return value
    var rgb;
    // Try resolving color format
    // Named color?
    if (namedColors[color]) {
        rgb = namedColors[color];
    }
    // Hex code?
    else if (color.charAt(0) === "#") {
        rgb = hexToRgb(color);
    }
    // rgb() format?
    else if (color.match(/^rgba?\(/)) {
        rgb = rgbaToRgb(color);
    }
    // Was not able to resolve?
    if (!rgb) {
        rgb = { r: 0, g: 0, b: 0, a: 1 };
    }
    // Set alpha
    if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](alpha)) {
        rgb.a = alpha;
    }
    return rgb;
}
/**
 * Converts a hex color code (i.e. "#FF5500") to an [[iRGB]] object.
 *
 * @ignore Exclude from docs
 * @param  {string}  hex  Hex color code
 * @return {iRGB}         RGB
 */
function hexToRgb(hex) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
        return r + r + g + g + b + b;
    });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : undefined;
}
/**
 * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].
 *
 * @ignore Exclude from docs
 * @param  {string}  color  Color code
 * @return {iRGB}           RGB
 */
function rgbaToRgb(color) {
    // Init
    var matches;
    color = color.replace(/[ ]/g, "");
    // Try rgb() format
    if (matches = color.match(/^rgb\(([0-9]*),([0-9]*),([0-9]*)\)/i)) {
        matches.push("1");
    }
    else if (matches = color.match(/^rgba\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\)/i)) {
        // nothing
    }
    else {
        return undefined;
    }
    return {
        r: parseInt(matches[1]),
        g: parseInt(matches[2]),
        b: parseInt(matches[3]),
        a: parseFloat(matches[4])
    };
}
/**
 * Converts an [[iRGB]] object into a hex color code.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    rgb  RGB
 * @return {string}       Hex color code
 */
function rgbToHex(rgb) {
    return "#" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));
}
/**
 * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    rgb  RGB
 * @return {string}       `rgba()` syntax
 */
function rgbToRGBA(rgb) {
    if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](rgb.a) && rgb.a !== 1) {
        return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")";
    }
    else {
        return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
    }
}
/**
 * Pads a 1-digit string with a zero.
 *
 * @ignore Exclude from docs
 * @param  {string}  c  Input string
 * @return {string}     Padded string
 */
function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
}
/**
 * Returns an intermediate color between two colors based on the relative
 * position. Position needs to be in range between 0 and 1. Zero meaning the
 * resulting color will be closest to the first reference color.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    color1   First reference color
 * @param  {iRGB}    color2   Second reference color
 * @param  {number}  percent  Relative position (0-1)
 * @return {iRGB}             Interpolated color
 */
function interpolate(rgb1, rgb2, percent) {
    percent = __WEBPACK_IMPORTED_MODULE_0__Math__["fitToRange"](percent, 0, 1);
    if (rgb1) {
        if (rgb2) {
            return {
                r: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),
                g: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),
                b: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),
                a: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)
            };
        }
        else {
            return rgb1;
        }
    }
    else if (rgb2) {
        return rgb2;
    }
    else {
        return rgb1;
    }
}
/**
 * Returns a color that is `percent` brighter than the reference color.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    color    Reference color
 * @param  {number}  percent  Brightness percent
 * @return {iRGB}             Hex code of the new color
 */
function lighten(rgb, percent) {
    if (rgb) {
        return {
            r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),
            g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),
            b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),
            a: rgb.a
        };
    }
    else {
        // TODO is this correct ?
        return rgb;
    }
}
;
/**
 * Gets lightness step.
 *
 * @ignore Exclude from docs
 * @param  {number}  value    Value
 * @param  {number}  percent  Percent
 * @return {number}           Step
 */
function getLightnessStep(value, percent) {
    var base = percent > 0 ? 255 - value : value;
    return Math.round(base * percent);
}
/**
 * Returns a color that is `percent` brighter than the source `color`.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    color    Source color
 * @param  {number}  percent  Brightness percent
 * @return {iRGB}             New color
 */
function brighten(rgb, percent) {
    if (rgb) {
        var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);
        //let base = Math.max(rgb.r, rgb.g, rgb.b);
        var step = getLightnessStep(base, percent);
        return {
            r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),
            g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),
            b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),
            a: rgb.a
        };
    }
    else {
        // TODO is this correct ?
        return rgb;
    }
}
;
/**
 * Returns brightness step.
 *
 * @ignore Exclude from docs
 * @param  {number}  value    Value
 * @param  {number}  percent  Percent
 * @return {number}           Step
 */
function getBrightnessStep(value, percent) {
    var base = 255; //percent > 0 ? 255 - value : value;
    return Math.round(base * percent);
}
/**
 * Returns a new [[iRGB]] object based on `rgb` parameter with specific
 * saturation applied.
 *
 * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully
 * saturated).
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    color       Base color
 * @param  {number}  saturation  Saturation (0-1)
 * @return {iRGB}                New color
 */
function saturate(rgb, saturation) {
    if (saturation == 1) {
        return rgb;
    }
    var hsl = rgbToHsl(rgb);
    hsl.s = saturation;
    return hslToRgb(hsl);
}
/*
// not used
export function rgbToMatrix(rgb: iRGB): string {
    let r = $type.toText($math.round((rgb.r || 0) / 255, 10));
    let g = $type.toText($math.round((rgb.g || 0) / 255, 10));
    let b = $type.toText($math.round((rgb.b || 0) / 255, 10));
    let a = $type.toText(rgb.a || 1);
    return	      r + " 0 0 0 0" +
                    " 0 " + g + " 0 0 0" +
                    " 0 0 " + b + " 0 0" +
                    " 0 0 0 " + a + " 0";
}
*/
/**
 * The functions below are taken and adapted from Garry Tan's blog post:
 * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 *
 * The further attributions go mjijackson.com, which now seems to be defunct.
 */
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * Function adapted from:
 * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 *
 * @ignore Exclude from docs
 * @param   {number}  h       The hue
 * @param   {number}  s       The saturation
 * @param   {number}  l       The lightness
 * @return  {Array}           The RGB representation
 */
function hslToRgb(color) {
    var r, g, b;
    var h = color.h;
    var s = color.s;
    var l = color.l;
    if (s == 0) {
        r = g = b = l; // achromatic
    }
    else {
        var hue2rgb = function hue2rgb(p, q, t) {
            if (t < 0)
                t += 1;
            if (t > 1)
                t -= 1;
            if (t < 1 / 6)
                return p + (q - p) * 6 * t;
            if (t < 1 / 2)
                return q;
            if (t < 2 / 3)
                return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        };
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
    };
}
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * Function adapted from:
 * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 *
 * @ignore Exclude from docs
 * @param   {number}  r       The red color value
 * @param   {number}  g       The green color value
 * @param   {number}  b       The blue color value
 * @return  {Array}           The HSL representation
 */
function rgbToHsl(color) {
    var r = color.r / 255;
    var g = color.g / 255;
    var b = color.b / 255;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    var s = 0;
    var l = (max + min) / 2;
    if (max === min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        l: l
    };
}
/**
 * Converts an RGB color value to HSV. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and v in the set [0, 1].
 *
 * @ignore Exclude from docs
 * @param   Number  r       The red color value
 * @param   Number  g       The green color value
 * @param   Number  b       The blue color value
 * @return  Array           The HSV representation
 */
function rgbToHsv(color) {
    var r = color.r / 255;
    var g = color.g / 255;
    var b = color.b / 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h = 0;
    var s = 0;
    var v = max;
    var d = max - min;
    s = max == 0 ? 0 : d / max;
    if (max == min) {
        h = 0; // achromatic
    }
    else {
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        v: v
    };
}
/**
 * Converts an HSV color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes h, s, and v are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @ignore Exclude from docs
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  v       The value
 * @return  Array           The RGB representation
 */
function hsvToRgb(color) {
    var r = 0;
    var g = 0;
    var b = 0;
    var h = color.h;
    var s = color.s;
    var v = color.v;
    var i = Math.floor(h * 6);
    var f = h * 6 - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0:
            r = v, g = t, b = p;
            break;
        case 1:
            r = q, g = v, b = p;
            break;
        case 2:
            r = p, g = v, b = t;
            break;
        case 3:
            r = p, g = q, b = v;
            break;
        case 4:
            r = t, g = p, b = v;
            break;
        case 5:
            r = v, g = p, b = q;
            break;
    }
    return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
    };
}
/**
 * Returns `true` if color is "light". Useful indetermining which contrasting
 * color to use for elements over this color. E.g.: you would want to use
 * black text over light background, and vice versa.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}     color  Source color
 * @return {boolean}         Light?
 */
function isLight(color) {
    return ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;
}
//# sourceMappingURL=Colors.js.map

/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Tooltip; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__PointedRectangle__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_Label__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Animation__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DropShadowFilter__ = __webpack_require__(206);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Ease__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Utils__ = __webpack_require__(5);
/**
 * Provides functionality used to creating and showing tooltips (balloons).
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Tooltip displays text and/or multimedia information in a balloon over chart
 * area.
 * @see {@link ITooltipEvents} for a list of available events
 * @see {@link ITooltipAdapters} for a list of available Adapters
 */
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    /**
     * Constructor
     */
    function Tooltip() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds numeric boundary values. Calculated from the `boundingContainer`.
         *
         * @type {IRectangle}
         */
        _this._boundingRect = { x: 0, y: 0, width: 40000, height: 40000 };
        /**
         * Coordinates tolltip's pointer (stem) should point to.
         *
         * @type {IPoint}
         */
        _this._pointTo = { x: 0, y: 0 };
        /**
         * [fitPointerToBounds description]
         *
         * @todo Description
         * @type {boolean}
         */
        _this.fitPointerToBounds = false;
        /**
         * If tooltipOrientation is vertical, it can be drawn below or above point. We need to know this when solving overlapping
         *
         * @type "up" | "down"
         * @ignore
         */
        _this._verticalOrientation = "up";
        _this.className = "Tooltip";
        _this.isMeasured = false;
        _this.getFillFromObject = true;
        _this.margin(5, 5, 5, 5);
        // Create chrome/background
        var background = _this.background;
        background.mouseEnabled = false;
        background.fillOpacity = 0.9;
        background.strokeWidth = 1;
        background.strokeOpacity = 1;
        background.stroke = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Color__["c" /* color */])("#ffffff");
        background.cornerRadius = 3;
        background.pointerLength = 6;
        background.pointerBaseWidth = 10;
        _this.autoTextColor = true;
        // Create text element
        var label = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__elements_Label__["a" /* Label */]);
        label.shouldClone = false;
        _this.label = label;
        label.padding(7, 12, 6, 12);
        label.mouseEnabled = false;
        label.horizontalCenter = "middle";
        label.fill = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Color__["c" /* color */])("#ffffff");
        _this._disposers.push(label);
        _this.label.events.on("sizechanged", function () {
            _this.drawBackground();
        });
        _this.label.events.on("positionchanged", function () {
            _this.drawBackground();
        });
        _this.label.zIndex = 1; // @todo remove this line when bg sorting is solved
        // Set defaults
        _this.pointerOrientation = "vertical";
        var dropShadow = new __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DropShadowFilter__["a" /* DropShadowFilter */]();
        dropShadow.dy = 1;
        dropShadow.dx = 1;
        dropShadow.opacity = 0.5;
        _this.filters.push(dropShadow);
        _this.animationDuration = 0;
        _this.animationEasing = __WEBPACK_IMPORTED_MODULE_7__utils_Ease__["cubicOut"];
        // Set accessibility options
        _this.role = "tooltip";
        _this.visible = false;
        _this.opacity = 0;
        _this.x = 0;
        _this.y = 0;
        _this.events.on("visibilitychanged", function () {
            _this.label.disabled = !_this.visible;
            if (_this.visible) {
                _this.label.invalidate();
            }
        });
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Tooltip.prototype, "getStrokeFromObject", {
        /**
         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.
         *
         * @return {boolean}
         * @default false
         */
        get: function () {
            return this.getPropertyValue("getStrokeFromObject");
        },
        /**
         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.
         *
         * @param {value} value boolean
         */
        set: function (value) {
            this.setPropertyValue("getStrokeFromObject", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "autoTextColor", {
        /**
         * Specifies if text color should be chosen automatically for a better readability.
         *
         * @return {boolean}
         * @default true
         */
        get: function () {
            return this.getPropertyValue("autoTextColor");
        },
        /**
         * Specifies if text color should be chosen automatically for a better readability.
         *
         * @param {value} value boolean
         */
        set: function (value) {
            this.setPropertyValue("autoTextColor", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "getFillFromObject", {
        /**
         * Specifies if tooltip background should get fill color from the sprite it is pointing to.
         *
         * @return {boolean}
         * @default true
         */
        get: function () {
            return this.getPropertyValue("getFillFromObject");
        },
        /**
         * Specifies if tooltip background should get fill color from the sprite it is pointing to.
         *
         * @param {value} value boolean
         */
        set: function (value) {
            this.setPropertyValue("getFillFromObject", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and returns a background element.
     *
     * @ignore Exclude from docs
     * @return {PointedRectangle} Background
     */
    Tooltip.prototype.createBackground = function () {
        return new __WEBPACK_IMPORTED_MODULE_1__PointedRectangle__["a" /* PointedRectangle */]();
    };
    Object.defineProperty(Tooltip.prototype, "pointerOrientation", {
        /**
         * @return {PointerOrientation} Orientation
         */
        get: function () {
            return this.getPropertyValue("pointerOrientation");
        },
        /**
         * Pointer orientation: "horizontal" or "vertical".
         *
         * @default "vertical"
         * @param {PointerOrientation}  value  Orientation
         */
        set: function (value) {
            this.setPropertyValue("pointerOrientation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "animationDuration", {
        /**
         * @return {PointerOrientation} Orientation
         */
        get: function () {
            return this.getPropertyValue("animationDuration");
        },
        /**
         * Duration in milliseconds for the animation to take place when the tolltip
         * is moving from one place to another.
         * @default 0
         * @param {number}  value  number
         */
        set: function (value) {
            this.setPropertyValue("animationDuration", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "animationEasing", {
        /**
         * @return {Function}
         */
        get: function () {
            return this.getPropertyValue("animationEasing");
        },
        /**
         * Tooltip animation easing function.
         * @todo: review description and default
         * @default $ease.cubicOut
         * @param {Function}  value (value: number) => number
         */
        set: function (value) {
            this.setPropertyValue("animationEasing", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "html", {
        /**
         * @return {string} HTML content
         */
        get: function () {
            return this.label.html;
        },
        /**
         * HTML content for the Tooltip.
         *
         * Provided value will be used as is, without applying any further
         * formatting to it.
         *
         * @param {string}  value  HTML content
         */
        set: function (value) {
            this.label.html = value;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "text", {
        /**
         * @return {string} SVG text
         */
        get: function () {
            return this.label.text;
        },
        /**
         * SVG text content for the Tooltip.
         *
         * Text can have a number of formatting options supported by
         * [[TextFormatter]].
         *
         * @param {string}  value  SVG text
         */
        set: function (value) {
            if (this.label.text != value) {
                this.label.text = value;
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates the Tooltip.
     *
     * @ignore Exclude from docs
     */
    Tooltip.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var label = this.label;
        if (label.invalid) {
            label.validate();
        }
        var x = this._pointTo.x;
        var y = this._pointTo.y;
        var boundingRect = this._boundingRect;
        var textW = label.pixelWidth;
        var textH = label.pixelHeight;
        var pointerLength = this.background.pointerLength;
        var textX;
        var textY;
        // horizontal
        if (this.pointerOrientation == "horizontal") {
            textY = -textH / 2;
            if (x > boundingRect.x + boundingRect.width / 2) {
                textX = -textW / 2 - pointerLength;
            }
            else {
                textX = textW / 2 + pointerLength;
            }
        }
        // vertical pointer
        else {
            textX = __WEBPACK_IMPORTED_MODULE_6__utils_Math__["fitToRange"](0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);
            if (y > boundingRect.y + textH + pointerLength) {
                textY = -textH - pointerLength;
                this._verticalOrientation = "up";
            }
            else {
                textY = pointerLength;
                this._verticalOrientation = "down";
            }
        }
        textY = __WEBPACK_IMPORTED_MODULE_6__utils_Math__["fitToRange"](textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);
        label.x = textX;
        label.y = textY;
    };
    /**
     * Overrides functionality from the superclass.
     *
     * @ignore Exclude from docs
     */
    Tooltip.prototype.updateBackground = function () {
        this.group.addToBack(this.background.group);
    };
    /**
     * Draws Tooltip background (chrome, background and pointer/stem).
     *
     * @ignore Exclude from docs
     */
    Tooltip.prototype.drawBackground = function () {
        var label = this.label;
        var background = this.background;
        var textWidth = label.measuredWidth;
        var textHeight = label.measuredHeight;
        var boundingRect = this._boundingRect;
        var bgWidth = textWidth;
        var bgX = label.pixelX - textWidth / 2;
        var bgHeight = textHeight;
        var bgY = label.pixelY;
        var x = this._pointTo.x;
        var y = this._pointTo.y;
        var boundX1 = boundingRect.x - x;
        var boundX2 = boundX1 + boundingRect.width;
        var boundY1 = boundingRect.y - y;
        var boundY2 = boundY1 + boundingRect.height;
        background.x = bgX;
        background.y = bgY;
        background.width = bgWidth;
        background.height = bgHeight;
        if (this.fitPointerToBounds) {
            background.pointerX = __WEBPACK_IMPORTED_MODULE_6__utils_Math__["fitToRange"](-background.x, boundX1 - background.x, boundX2 - background.x);
            background.pointerY = __WEBPACK_IMPORTED_MODULE_6__utils_Math__["fitToRange"](-background.y, boundY1 - background.y, boundY2 - background.y);
        }
        else {
            background.pointerX = -background.x;
            background.pointerY = -background.y;
        }
        background.validate();
    };
    /**
     * Set nes tooltip's anchor point and moves whole tooltip.
     *
     * @param {number}  x  X coordinate
     * @param {number}  y  Y coordinate
     */
    Tooltip.prototype.pointTo = function (point, instantly) {
        if (this._pointTo.x != point.x || this._pointTo.y != point.y) {
            this._pointTo = point;
            this.invalidate();
            // this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already
            if (!this.visible || instantly) {
                this.moveTo(this._pointTo);
            }
            else {
                new __WEBPACK_IMPORTED_MODULE_3__utils_Animation__["a" /* Animation */](this, [{ property: "x", to: point.x, from: this.pixelX }, { property: "y", to: point.y, from: this.pixelY }], this.animationDuration, this.animationEasing).start();
            }
        }
    };
    /**
     * Sets numeric boundaries Tooltip needs to obey (so it does not go outside
     * specific area).
     *
     * @ignore Exclude from docs
     * @param {IRectangle} rectangle Boundary rectangle
     */
    Tooltip.prototype.setBounds = function (rectangle) {
        this._boundingRect = rectangle;
        this.invalidate();
    };
    Object.defineProperty(Tooltip.prototype, "boundingContainer", {
        /**
         * Sets a [[Container]] instance to be used when calculating numeric
         * boundaries for the Tooltip.
         *
         * @ignore Exclude from docs
         * @param {Container}  container  Boundary container
         */
        set: function (container) {
            this._boundingContainer = container;
            // TODO remove closures ?
            container.events.on("sizechanged", this.updateBounds, this);
            container.events.on("positionchanged", this.updateBounds, this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates numeric boundaries for the Tooltip, based on the
     * `boundingCountrainer`.
     */
    Tooltip.prototype.updateBounds = function () {
        var boundingContainer = this._boundingContainer;
        // to global
        var rect = __WEBPACK_IMPORTED_MODULE_8__utils_Utils__["spriteRectToSvg"]({
            x: boundingContainer.pixelX,
            y: boundingContainer.pixelY,
            width: boundingContainer.maxWidth,
            height: boundingContainer.maxHeight
        }, boundingContainer);
        this.setBounds(rect);
    };
    Object.defineProperty(Tooltip.prototype, "verticalOrientation", {
        /**
         * If tooltipOrientation is vertical, it can be drawn below or above point. We need to know this when solving overlapping
         * @return "up" | "down"
         */
        get: function () {
            return this._verticalOrientation;
        },
        enumerable: true,
        configurable: true
    });
    return Tooltip;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Tooltip.js.map

/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LinearGradient; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(2);
/**
 * Contains code and logic for generating linear gradients.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Linear gradient class.
 */
var LinearGradient = /** @class */ (function (_super) {
    __extends(LinearGradient, _super);
    /**
     * Constructor.
     */
    function LinearGradient() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * List of colors switch definitions in a gradient.
         *
         * @type {List<IGradientStop>}
         */
        _this._stops = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * Gradient direction.
         *
         * @type {number}
         */
        _this._rotation = 0;
        _this.className = "LinearGradient";
        _this._stops.events.on("setIndex", _this.validate, _this);
        _this._stops.events.on("insert", _this.validate, _this);
        // Create element
        _this.element = _this.paper.addGroup("linearGradient");
        _this.id = "gradient-" + __WEBPACK_IMPORTED_MODULE_3__Registry__["a" /* registry */].getUniqueId();
        _this.element.attr({ "id": _this.id });
        _this._disposers.push(_this.element);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws gradient.
     *
     * @ignore Exclude from docs
     */
    LinearGradient.prototype.validate = function () {
        var _this = this;
        var rotation = (this._rotation + 90) * __WEBPACK_IMPORTED_MODULE_5__utils_Math__["RADIANS"];
        var x1 = Math.round(50 + Math.sin(rotation + Math.PI) * 50) + '%';
        var y1 = Math.round(50 + Math.cos(rotation) * 50) + '%';
        var x2 = Math.round(50 + Math.sin(rotation) * 50) + '%';
        var y2 = Math.round(50 + Math.cos(rotation + Math.PI) * 50) + '%';
        var gradientElement = this.element;
        gradientElement.removeChildNodes();
        gradientElement.attr({ "x1": x1, "x2": x2, "y1": y1, "y2": y2 });
        __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["indexed"](this._stops.iterator()), function (a) {
            var i = a[0];
            var stop = a[1];
            var offset = stop.offset;
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](offset)) {
                offset = i / (_this._stops.length - 1);
            }
            var gradientStop = _this.paper.add("stop");
            gradientStop.attr({ "stop-color": stop.color });
            if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](stop.opacity)) {
                gradientStop.attr({ "stop-opacity": stop.opacity });
            }
            if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](offset)) {
                gradientStop.attr({ "offset": offset });
            }
            gradientElement.add(gradientStop);
        });
    };
    /**
     * Clears the gradient.
     *
     * @ignore Exclude from docs
     */
    LinearGradient.prototype.clear = function () {
        this._stops.clear();
    };
    /**
     * Adds a color step to the gradient.
     *
     * @param {Color}   color    Color (hex code or named color)
     * @param {number}  opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)
     * @param {number}  offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)
     */
    LinearGradient.prototype.addColor = function (color, opacity, offset) {
        this._stops.push({ color: color, opacity: opacity, offset: offset });
    };
    Object.defineProperty(LinearGradient.prototype, "stops", {
        /**
         * A list of color stops in the gradient.
         *
         * @return {List<IGradientStop>} Stops
         */
        get: function () {
            return this._stops;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradient.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            return __WEBPACK_IMPORTED_MODULE_2__System__["b" /* system */].ghostPaper;
        },
        /**
         * [[Paper]] instace to use for the gradient.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            if (this._paper != paper) {
                this._paper = paper;
                this.validate();
                paper.appendDef(this.element);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradient.prototype, "rotation", {
        /**
         * @return {number} Rotation
         */
        get: function () {
            return this._rotation;
        },
        /**
         * Rotation (direction) of the gradient in degrees.
         *
         * @param {number}  value  Rotation
         */
        set: function (value) {
            //this.element.attr({ "gradientTransform": "rotate(" + value + " 10 100)" });
            this._rotation = value;
            this.validate();
        },
        enumerable: true,
        configurable: true
    });
    LinearGradient.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this._stops = source.stops;
        this._rotation = source.rotation;
    };
    return LinearGradient;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=LinearGradient.js.map

/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Series; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Component__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_DataItem__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_elements_Tooltip__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__elements_Bullet__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Legend__ = __webpack_require__(146);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_utils_Ease__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__core_utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__core_utils_Colors__ = __webpack_require__(80);
/**
 * Functionality for any series-based elements, like Line Series (graphs),
 * Pie slice lists, etc.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



















/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[Series]].
 *
 * @see {@link DataItem}
 */
var SeriesDataItem = /** @class */ (function (_super) {
    __extends(SeriesDataItem, _super);
    /**
     * Constructor
     */
    function SeriesDataItem() {
        var _this = _super.call(this) || this;
        /**
         * A dictionary of data items bullets, where key is uid of a bullet template.
         *
         * @ignore Exclude from docs
         * @todo review description
         * @type {Dictionary}
         */
        _this.bullets = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        _this.className = "SeriesDataItem";
        //@todo Should we make `bullets` list disposable?
        //this._disposers.push(new DictionaryDisposer(this.bullets));
        _this.values.value = {};
        _this.values.value = {};
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(SeriesDataItem.prototype, "value", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.value.value;
        },
        /**
         * data items's numeric value.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("value", value);
        },
        enumerable: true,
        configurable: true
    });
    return SeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_4__core_DataItem__["a" /* DataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines base class for any kind of serial data.
 *
 * @see {@link ISeriesEvents} for a list of available Events
 * @see {@link ISeriesAdapters} for a list of available Adapters
 * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff
 */
var Series = /** @class */ (function (_super) {
    __extends(Series, _super);
    /**
     * Constructor
     */
    function Series() {
        var _this = _super.call(this) || this;
        /**
         * Should this series excluded from the axis scale calculations?
         *
         * @default false
         * @type {boolean}
         */
        _this._ignoreMinMax = false;
        /**
         * Should series' bullets?
         *
         * @default true
         * @type {boolean}
         */
        _this._showBullets = true;
        /**
         * Settings for the appearance of the related legend items.
         */
        _this.legendSettings = new __WEBPACK_IMPORTED_MODULE_8__Legend__["c" /* LegendSettings */]();
        /**
         * Lowest overal values by type.
         *
         * @type {Dictionary}
         */
        _this._tmin = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Highest overal values by type.
         *
         * @type {Dictionary}
         */
        _this._tmax = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Lowest values in current selection by type.
         *
         * @type {Dictionary}
         */
        _this._smin = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Highest values in current selection by type.
         *
         * @type {Dictionary}
         */
        _this._smax = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * [dataItemsByAxis description]
         *
         * Both by category and date.
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {Dictionary}
         */
        _this.dataItemsByAxis = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Normally series items are focusable using keyboard, so that people can
         * select them with a TAB key. However, if there are a lot of data points on
         * screen it might be long and useless to tab through all o fthem.
         *
         * This is where `skipFocusThreshold` comes in. If there are more items than
         * the value set here, we will not make those focusable and rather let screen
         * reader software rely on the series summary, or authors provide alternative
         * detailed information display, such as HTML table.
         *
         * Different series might have different threshold defaults.
         *
         * @type {Number}
         */
        _this.skipFocusThreshold = 20;
        /**
         * flag which is set to true when initial animation is finished
         * @ignore
         */
        _this.appeared = false;
        _this.className = "Series";
        _this.isMeasured = false;
        _this.layout = "none";
        _this.shouldClone = false;
        _this.axisRanges = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["b" /* List */]();
        _this.axisRanges.events.on("insert", _this.processAxisRange, _this);
        _this.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug
        _this.mainContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]);
        _this.mainContainer.shouldClone = false;
        _this.mainContainer.mask = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]);
        // all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer
        _this.bulletsContainer = _this.mainContainer.createChild(__WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]);
        _this.bulletsContainer.shouldClone = false;
        _this.bulletsContainer.layout = "none";
        _this.tooltip = new __WEBPACK_IMPORTED_MODULE_6__core_elements_Tooltip__["a" /* Tooltip */]();
        _this.hiddenState.easing = __WEBPACK_IMPORTED_MODULE_13__core_utils_Ease__["cubicIn"];
        // this data item holds sums, averages, etc
        _this.dataItem = _this.createDataItem();
        _this.dataItem.component = _this;
        // Apply accessibility
        _this.role = "group";
        _this.events.once("prevalidate", _this.appear, _this);
        _this.hiddenState.properties.opacity = 1; // because we hide by changing values
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    Series.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        this.readerTitle = this.language.translate("Series");
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {SeriesDataItem} Data Item
     */
    Series.prototype.createDataItem = function () {
        return new SeriesDataItem();
    };
    Object.defineProperty(Series.prototype, "chart", {
        /**
         * @return {this} Chart
         */
        get: function () {
            return this._chart;
        },
        /**
         * Chart series is used on.
         *
         * @param {this["_chart"]}  value  Chart
         */
        set: function (value) {
            this._chart = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Performs initial animation of the series after data validation.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.appear = function () {
        var _this = this;
        this.appeared = false;
        this.hide(0);
        var animation = this.show();
        if (animation) {
            animation.events.once("animationend", function () {
                _this.appeared = true;
            });
        }
        else {
            this.appeared = true;
        }
    };
    /**
     * Fades in bullet container and related elements.
     *
     * @ignore Exclude from docs
     * @param  {number}     duration  Animation duration (ms)
     * @return {Animation}            Animation
     */
    Series.prototype.showReal = function (duration) {
        this.bulletsContainer.show(duration);
        return _super.prototype.showReal.call(this, duration);
    };
    /**
     * Fades out bullet container and related elements.
     *
     * @ignore Exclude from docs
     * @param  {number}     duration  Animation duration (ms)
     * @return {Animation}            Animation
     */
    Series.prototype.hideReal = function (duration) {
        this.bulletsContainer.hide(duration);
        return _super.prototype.hideReal.call(this, duration);
    };
    /**
     * Positions bullet.
     *
     * @param {Bullet}  bullet  Bullet
     */
    Series.prototype.positionBullet = function (bullet) {
        // Placeholder method for extending classes to override.
    };
    /**
     * Decorates newly created bullet after it has been instert into the list.
     *
     * @param {IListEvents<Bullet>["insert"]}  event  List event
     * @todo investigate why itemReaderText is undefined
     */
    Series.prototype.processBullet = function (event) {
        var bullet = event.newValue;
        // create list and iterator
        var bulletsList = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](bullet);
        this.bulletsLists.setKey(bullet.uid, bulletsList);
        var iterator = new __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["ListIterator"](bulletsList, function () { return bulletsList.create(); });
        this.bulletsIterators.setKey(bullet.uid, iterator);
        iterator.createNewItems = true;
        // Add accessibility options to bullet
        // If there are relatively few bullets, make them focusable
        if (this.itemsFocusable()) {
            bullet.focusable = true;
        }
    };
    /**
     * Validates data items.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.validateDataItems = function () {
        _super.prototype.validateDataItems.call(this);
        this.processValues(false);
    };
    /**
     * Returns first value for the specific key in the series.
     *
     * @param  {string}  key  Key
     * @return {number}       Value
     * @todo Description
     * @todo Convert to propert object property iterator
     */
    Series.prototype.getFirstValue = function (key) {
        // find first
        return __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["findMap"](this.dataItems.iterator(), function (dataItem) {
            for (var key_1 in dataItem.values) {
                var value = dataItem.values[key_1].workingValue;
                if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](value)) {
                    return value;
                }
            }
            return null;
        });
    };
    /**
     * [rangeChangeUpdate description]
     *
     * @todo Description
     */
    Series.prototype.rangeChangeUpdate = function () {
        _super.prototype.rangeChangeUpdate.call(this);
        this.processValues(true);
    };
    /**
     * [processValues description]
     *
     * @todo Description
     * @todo Convert to propert object property iterator
     * @param {OrderedList<this["_dataItem"]>} dataItems [description]
     */
    Series.prototype.processValues = function (working) {
        var _this = this;
        var dataItems = this.dataItems;
        var count = {};
        var sum = {};
        var low = {};
        var high = {};
        var open = {};
        var close = {};
        var previous = {};
        var first = {};
        //let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration
        var startIndex = this._workingStartIndex;
        var endIndex = this._workingEndIndex;
        // it's ok, we loop trough all the data and check if i is within start/end index later
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["indexed"](dataItems.iterator()), function (a) {
            var i = a[0];
            var dataItem = a[1];
            for (var key in dataItem.values) {
                var value = dataItem.values[key].workingValue;
                if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index
                    if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](value)) {
                        // count values
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](count[key])) {
                            count[key] = 0;
                        }
                        count[key]++;
                        // sum values
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](sum[key])) {
                            sum[key] = 0;
                        }
                        sum[key] += value;
                        // open
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](open[key])) {
                            open[key] = value;
                        }
                        // close
                        close[key] = value;
                        // low
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](low[key])) {
                            low[key] = value;
                        }
                        else {
                            if (low[key] > value) {
                                low[key] = value;
                            }
                        }
                        // high
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](high[key])) {
                            high[key] = value;
                        }
                        else {
                            if (high[key] < value) {
                                high[key] = value;
                            }
                        }
                    }
                }
                if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](first[key])) {
                    first[key] = _this.getFirstValue(key);
                }
                // change
                dataItem.setCalculatedValue(key, value - first[key], "change");
                // change from start percent
                dataItem.setCalculatedValue(key, (value - first[key]) / first[key] * 100, "changePercent");
                // previous change
                var prevValue = previous[key];
                if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](prevValue)) {
                    prevValue = value;
                }
                dataItem.setCalculatedValue(key, value - prevValue, "previousChange");
                // previous change percent
                dataItem.setCalculatedValue(key, (value - prevValue) / prevValue * 100, "previousChangePercent");
                // save previous
                previous[key] = value;
            }
        });
        // todo: this is not often needed (pie chart mostly), any chance to avoid? chart could have a flag which would enable/disable this calculations
        // todo: think what to do with value.percent - we need to cycle through all data in order to have proper values, but this is expensive. flag might be a solution.
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["indexed"](dataItems.iterator()), function (a) {
            var i = a[0];
            var dataItem = a[1];
            __WEBPACK_IMPORTED_MODULE_15__core_utils_Object__["each"](dataItem.values, function (key) {
                var ksum = sum[key];
                var value = dataItem.values[key].workingValue;
                // this hack is made in order to make it possible to animate single slice to 0
                // if there is only one slice left, percent value is always 100%, so it won't animate
                // so we use real value of a slice instead of current value
                if (value == ksum) {
                    ksum = dataItem.values[key].value;
                }
                if (i >= startIndex && i <= endIndex) {
                    var percent = void 0; // used to be = 0; but no good for pie chart
                    if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](value) && ksum > 0) {
                        percent = value / ksum * 100;
                        dataItem.setCalculatedValue(key, percent, "percent");
                    }
                }
            });
        });
        // calculate one before first (cant do that in cycle, as we don't know open yet
        // when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point
        // so we do startIndex - 1
        if (startIndex > 0) {
            var zeroItem_1 = dataItems.getIndex(startIndex - 1);
            __WEBPACK_IMPORTED_MODULE_15__core_utils_Object__["each"](zeroItem_1.values, function (key) {
                //for (let key in zeroItem.values) {
                var value = zeroItem_1.values[key].value;
                // change
                zeroItem_1.setCalculatedValue(key, value - open[key], "change");
                // change percent
                zeroItem_1.setCalculatedValue(key, (value - open[key]) / open[key] * 100, "changePercent");
                //}
            });
        }
        // we save various data like sum, average to dataPoint of the series
        var dataItem = this.dataItem;
        __WEBPACK_IMPORTED_MODULE_15__core_utils_Object__["each"](dataItem.values, function (key) {
            dataItem.setCalculatedValue(key, sum[key], "sum");
            dataItem.setCalculatedValue(key, sum[key] / count[key], "average");
            dataItem.setCalculatedValue(key, open[key], "open");
            dataItem.setCalculatedValue(key, close[key], "close");
            dataItem.setCalculatedValue(key, low[key], "low");
            dataItem.setCalculatedValue(key, high[key], "high");
            dataItem.setCalculatedValue(key, count[key], "count");
        });
    };
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.validate = function () {
        if (this.bulletsIterators) {
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.bulletsIterators.iterator(), function (a) {
                var iterator = a[1];
                iterator.reset();
            });
        }
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (axisRange) {
            //axisRange.contents.disposeChildren(); // not good for columns, as they are reused
            //			axisRange.appendChildren();
            axisRange.validate();
        });
        _super.prototype.validate.call(this);
        this.hideUnusedBullets();
        this.bulletsContainer.fill = this.fill;
        this.bulletsContainer.stroke = this.stroke;
        if (this.topParent) {
            this.tooltip.setBounds({ x: 0, y: 0, width: this.topParent.maxWidth, height: this.topParent.maxHeight });
        }
    };
    /**
     * Validates data item's element, effectively redrawing it.
     *
     * @ignore Exclude from docs
     * @param {SeriesDataItem}  dataItem  Data item
     */
    Series.prototype.validateDataElement = function (dataItem) {
        var _this = this;
        _super.prototype.validateDataElement.call(this, dataItem);
        if (this._showBullets) {
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.bullets.iterator(), function (bulletTemplate) {
                var iterator = _this.bulletsIterators.getKey(bulletTemplate.uid);
                // always better to use the same, this helps to avoid redrawing
                var bullet = dataItem.bullets.getKey(bulletTemplate.uid);
                if (!bullet) {
                    bullet = iterator.getFirst();
                }
                else {
                    iterator.removeItem(bullet);
                }
                var currentDataItem = bullet.dataItem;
                if (currentDataItem != dataItem) {
                    // set to undefined in order not to reuse
                    if (currentDataItem) {
                        currentDataItem.bullets.setKey(bulletTemplate.uid, undefined);
                    }
                    dataItem.addSprite(bullet);
                    if (bullet.isDynamic) {
                        dataItem.events.on("workingvaluechanged", bullet.deepInvalidate, bullet);
                        //dataItem.events.on("calculatedvaluechanged", bullet.deepInvalidate, bullet);
                        _this.dataItem.events.on("workingvaluechanged", bullet.deepInvalidate, bullet);
                    }
                    bullet.deepInvalidate();
                }
                bullet.parent = _this.bulletsContainer;
                bullet.visible = true;
                dataItem.bullets.setKey(bulletTemplate.uid, bullet);
                // Add accessibility to bullet
                var readerText = _this.itemReaderText || ("{" + bullet.xField + "}: {" + bullet.yField + "}");
                if (bullet.focusable) {
                    bullet.events.once("focus", function (ev) {
                        bullet.readerTitle = _this.populateString(readerText, bullet.dataItem);
                    });
                    bullet.events.once("blur", function (ev) {
                        bullet.readerTitle = "";
                    });
                }
                if (bullet.hoverable) {
                    bullet.events.once("over", function (ev) {
                        bullet.readerTitle = _this.populateString(readerText, bullet.dataItem);
                    });
                    bullet.events.once("out", function (ev) {
                        bullet.readerTitle = "";
                    });
                }
                // pass max w/h so we'd know if we should show/hide somethings
                bullet.maxWidth = dataItem.itemWidth;
                bullet.maxHeight = dataItem.itemHeight;
                _this.positionBullet(bullet);
            });
        }
    };
    /**
     * [handleDataItemWorkingValueChange description]
     *
     * @todo Description
     */
    Series.prototype.handleDataItemWorkingValueChange = function (event) {
        this.invalidateProcessedData();
    };
    Object.defineProperty(Series.prototype, "ignoreMinMax", {
        /**
         * @return {boolean} Exclude from calculations?
         */
        get: function () {
            return this._ignoreMinMax;
        },
        /**
         * Should this series excluded from the axis scale calculations?
         *
         * @default false
         * @param {boolean}  value  Exclude from calculations?
         */
        set: function (value) {
            this._ignoreMinMax = value;
            this.invalidateDataItems();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create a mask for the series.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.createMask = function () {
        // A placeholder method for extending classes to override.
    };
    /**
     * Process axis range after it has been added to the list.
     *
     * @param {IListEvents<AxisDataItem>["insert"]}  event  Event
     */
    Series.prototype.processAxisRange = function (event) {
        // create container if not existing
        if (!this.rangesContainer) {
            this.rangesContainer = this.createChild(__WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]);
            this.rangesContainer.shouldClone = false;
            this.rangesContainer.isMeasured = false;
        }
        var axisRange = event.newValue;
        if (axisRange) {
            axisRange.contents.parent = this.rangesContainer;
            axisRange.isRange = true;
        }
    };
    /**
     * [getAxisField description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {Axis}    axis  [description]
     * @return {string}        [description]
     */
    Series.prototype.getAxisField = function (axis) {
        return;
    };
    /**
     * Shows the tooltip at specific position.
     *
     * @ignore Exclude from docs
     * @param {number}  xPosition  X
     * @param {number}  yPosition  Y
     */
    Series.prototype.showTooltipAtPosition = function (xPosition, yPosition) {
        // Placeholder method for extending classes to override.
    };
    Object.defineProperty(Series.prototype, "minBulletDistance", {
        /**
         * @return {number} Distance (px)
         */
        get: function () {
            return this.getPropertyValue("minBulletDistance");
        },
        /**
         * Minimal distance between two adjacent bullets in pixels.
         *
         * If bullet is closer, it will be skipped and not shown.
         *
         * This allows to avoid crammed up graphs wil a lot of bullets.
         *
         * @default 50
         * @param {number}  value  Distance (px)
         */
        set: function (value) {
            this.setPropertyValue("minBulletDistance", value);
            this.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Series.prototype, "bullets", {
        /**
         * List of bullets that can be used for the series' purposes.
         *
         * @return {ListTemplate<Bullet>} [description]
         */
        get: function () {
            if (!this._bullets) {
                this._bullets = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_7__elements_Bullet__["a" /* Bullet */]());
                this._bullets.events.on("insert", this.processBullet, this);
                this.bulletsIterators = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
                this.bulletsLists = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._bullets;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Hides bullet elements that are currently not in use.
     * @ignore
     */
    Series.prototype.hideUnusedBullets = function () {
        // hide all unused
        var bulletsIterators = this.bulletsIterators;
        if (bulletsIterators) {
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](bulletsIterators.iterator(), function (a) {
                var iterator = a[1];
                iterator.createNewItems = false;
                __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](iterator.iterator(), function (bullet) {
                    bullet.visible = false;
                });
                iterator.clear();
                iterator.createNewItems = true;
            });
        }
    };
    /**
     * Destroys series and related elements.
     */
    Series.prototype.dispose = function () {
        if (!this._disposed) {
            _super.prototype.dispose.call(this);
            this.removeDispose(this.bulletsContainer);
        }
    };
    /**
     * Binds related legend data item's visual settings to this series' visual
     * settings.
     *
     * @ignore Exclude from docs
     * @param {Container}  marker  Legend item container
     */
    Series.prototype.createLegendMarker = function (marker) {
        // This is a placeholder method for extending classes to override.
    };
    Object.defineProperty(Series.prototype, "hiddenInLegend", {
        /**
         * @return {boolean} Hidden in legend?
         */
        get: function () {
            return this.getPropertyValue("hiddenInLegend");
        },
        /**
         * Should the series be hidden in legend?
         *
         * @param {boolean} value Hidden in legend?
         */
        set: function (value) {
            this.setPropertyValue("hiddenInLegend", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Series.prototype, "name", {
        /**
         * @return {string} Name
         */
        get: function () {
            return this.adapter.apply("name", this._title);
        },
        /**
         * Series' name.
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this._title = value;
            this.readerTitle = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Series.prototype, "itemReaderText", {
        /**
         * @return {string} Screen reader text template
         */
        get: function () {
            // Get explicitly set reader text
            var readerText = this._itemReaderText;
            // Not set? Let's try something else
            if (!readerText) {
                // Tooltip text?
                if (this.tooltipText) {
                    readerText = __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__["plainText"](this.tooltipText);
                }
                else if (this.tooltipHTML) {
                    readerText = __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__["plainText"](this.tooltipHTML);
                }
            }
            return this.adapter.apply("itemReaderText", readerText);
        },
        /**
         * Screen reader text to be applied to each individual data item, such
         * as bullets, columns or slices.
         *
         * The template can contain field reference meta codes, i.e. `{dateX}`,
         * `{valueY}`, etc.
         *
         * Any text formatting options, e.g. `[bold]` will be ignored.
         *
         * @param {string} value Screen reader text template
         */
        set: function (value) {
            this._itemReaderText = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns if number of data items in the series are beyond non-focusable
     * count and should not be available for TAB-through.
     *
     * @ignore Exclude from docs
     * @return {boolean} Items focusable?
     */
    Series.prototype.itemsFocusable = function () {
        return this.dataItems.length >= this.skipFocusThreshold ? false : true;
    };
    Object.defineProperty(Series.prototype, "legendDataItem", {
        /**
         * @return {LegendDataItem<Series, ISeriesEvents>} Data item
         */
        get: function () {
            return this._legendDataItem;
        },
        /**
         * Legend data item that corresponds to this series.
         *
         * @param {LegendDataItem<Series, ISeriesEvents>}  value  Data item
         */
        set: function (value) {
            this._legendDataItem = value;
            this._legendDataItem.itemContainer.deepInvalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates corresponding legend data item with current values.
     *
     * @ignore Exclude from docs
     * @param {this["_dataItem"]}  dataItem  Data item
     */
    Series.prototype.updateLegendValue = function (dataItem) {
        // if this series has legend item
        if (this.legendDataItem) {
            var legendSettings = this.legendSettings;
            var legendDataItem = this.legendDataItem;
            var label = legendDataItem.label;
            var valueLabel = legendDataItem.valueLabel;
            // update legend
            if (dataItem) {
                if (legendSettings.itemValueText) {
                    valueLabel.text = legendSettings.itemValueText;
                }
                if (legendSettings.itemLabelText) {
                    label.text = legendSettings.itemLabelText;
                }
                valueLabel.dataItem = dataItem;
                label.dataItem = this.dataItem;
            }
            else {
                // if itemLabelText is set, means we have to reset label even if labelText is not set
                if (legendSettings.labelText || legendSettings.itemLabelText != undefined) {
                    label.text = legendSettings.labelText;
                }
                if (legendSettings.valueText || legendSettings.itemValueText != undefined) {
                    valueLabel.text = legendSettings.valueText;
                }
                label.dataItem = this.dataItem;
                valueLabel.dataItem = this.dataItem;
            }
        }
    };
    /**
     * Copies all properties from another instance of [[Series]].
     *
     * @param {Series}  source  Source series
     */
    Series.prototype.copyFrom = function (source) {
        this.bullets.copyFrom(source.bullets);
        this.bulletsContainer.copyFrom(source.bulletsContainer);
        _super.prototype.copyFrom.call(this, source);
    };
    /**
     * Displays a modal or console message with error, and halts any further
     * processing of this element.
     *
     * @param {Error} e Error
     */
    Series.prototype.raiseCriticalError = function (e) {
        this._chart.modal.content = e.message;
        this._chart.modal.closable = false;
        this._chart.modal.show();
        this._chart.disabled = true;
        if (__WEBPACK_IMPORTED_MODULE_9__core_System__["b" /* system */].verbose) {
            console.log(e);
        }
    };
    /**
     * Applies filters to the element.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.applyFilters = function () {
        _super.prototype.applyFilters.call(this);
        this.bulletsContainer.filters.clear();
        this.bulletsContainer.filters.copyFrom(this.filters);
    };
    Object.defineProperty(Series.prototype, "heatRules", {
        /**
         * @todo Description
         */
        get: function () {
            var _this = this;
            if (!this._heatRules) {
                this._heatRules = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["b" /* List */]();
                this._heatRules.events.on("insert", function (event) {
                    var heatRule = event.newValue;
                    var target = heatRule.target;
                    if (target) {
                        var dataField_1 = heatRule.dataField;
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](dataField_1)) {
                            dataField_1 = "value";
                        }
                        var min_1 = heatRule.min;
                        var max_1 = heatRule.max;
                        var seriesDataItem_1 = _this.dataItem;
                        var property_1 = heatRule.property;
                        var minValue = __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["toNumber"](heatRule.minValue);
                        var maxValue = __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["toNumber"](heatRule.maxValue);
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](minValue) && !__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](maxValue)) {
                            _this.dataItem.events.on("calculatedvaluechanged", function (event) {
                                if (event.property == dataField_1) {
                                    __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](_this.dataItems.iterator(), function (dataItem) {
                                        var foundSprite = false;
                                        __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__["b" /* each */](dataItem.sprites, function (sprite) {
                                            if (sprite.clonedFrom == target) {
                                                var anySprite = sprite;
                                                anySprite[property_1] = anySprite[property_1];
                                                foundSprite = true;
                                            }
                                        });
                                        if (!foundSprite) {
                                            __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__["b" /* each */](dataItem.sprites, function (sprite) {
                                                if (sprite instanceof __WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]) {
                                                    __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](sprite.children.iterator(), function (child) {
                                                        if (child.className == target.className) {
                                                            var anyChild = child;
                                                            anyChild[property_1] = anyChild[property_1];
                                                        }
                                                        // givup here
                                                        else if (child instanceof __WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]) {
                                                            child.deepInvalidate();
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                        _this.dataItems.template.events.on("workingvaluechanged", function (event) {
                            if (event.property == dataField_1) {
                                var dataItem = event.target;
                                var foundSprite_1 = false;
                                __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__["b" /* each */](dataItem.sprites, function (sprite) {
                                    if (sprite.clonedFrom == target) {
                                        var anySprite = sprite;
                                        anySprite[property_1] = anySprite[property_1];
                                        foundSprite_1 = true;
                                    }
                                });
                                if (!foundSprite_1) {
                                    __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__["b" /* each */](dataItem.sprites, function (sprite) {
                                        if (sprite instanceof __WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]) {
                                            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](sprite.children.iterator(), function (child) {
                                                if (child.className == target.className) {
                                                    var anyChild = child;
                                                    anyChild[property_1] = anyChild[property_1];
                                                }
                                                // givup here
                                                else if (child instanceof __WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]) {
                                                    child.deepInvalidate();
                                                }
                                            });
                                        }
                                    });
                                }
                            }
                        });
                        target.adapter.add(property_1, function (value, ruleTarget) {
                            var minValue = __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["toNumber"](heatRule.minValue);
                            var maxValue = __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["toNumber"](heatRule.maxValue);
                            var dataItem = ruleTarget.dataItem;
                            if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](minValue)) {
                                minValue = seriesDataItem_1.values[dataField_1].low;
                            }
                            if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](maxValue)) {
                                maxValue = seriesDataItem_1.values[dataField_1].high;
                            }
                            if (dataItem) {
                                var workingValue = dataItem.values[dataField_1].workingValue;
                                if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](min_1) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](max_1) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](minValue) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](maxValue) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](workingValue)) {
                                    var percent = (workingValue - minValue) / (maxValue - minValue);
                                    if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](min_1)) {
                                        return min_1 + (max_1 - min_1) * percent;
                                    }
                                    else if (min_1 instanceof __WEBPACK_IMPORTED_MODULE_11__core_utils_Color__["a" /* Color */]) {
                                        return new __WEBPACK_IMPORTED_MODULE_11__core_utils_Color__["a" /* Color */](__WEBPACK_IMPORTED_MODULE_18__core_utils_Colors__["interpolate"](min_1.rgb, max_1.rgb, percent));
                                    }
                                }
                            }
                            return value;
                        });
                    }
                });
            }
            return this._heatRules;
        },
        enumerable: true,
        configurable: true
    });
    return Series;
}(__WEBPACK_IMPORTED_MODULE_0__core_Component__["a" /* Component */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_10__core_Registry__["a" /* registry */].registeredClasses["Series"] = Series;
__WEBPACK_IMPORTED_MODULE_10__core_Registry__["a" /* registry */].registeredClasses["SeriesDataItem"] = SeriesDataItem;
//# sourceMappingURL=Series.js.map

/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Circle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(3);
/**
 * Functionality for drawing circles.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to create a circle
 * @see {@link ICircleEvents} for a list of available events
 * @see {@link ICircleAdapters} for a list of available Adapters
 */
var Circle = /** @class */ (function (_super) {
    __extends(Circle, _super);
    /**
     * Constructor
     */
    function Circle() {
        var _this = _super.call(this) || this;
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_1__utils_Percent__["c" /* percent */])(100);
        _this.className = "Circle";
        _this.element = _this.paper.add("circle");
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the circle.
     */
    Circle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        this.element.attr({ "r": this.pixelRadius });
    };
    Object.defineProperty(Circle.prototype, "radius", {
        /**
         * @return {number} Radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Radius of the circle.
         *
         * Can be either absolute (pixels) or relative ([Percent]).
         *
         * @param {number | Percent}  value  Radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Circle.prototype, "pixelRadius", {
        /**
         * Radius of the circle in pixels.
         *
         * This is a read-only property. To set radius in pixels, use `radius`
         * property.
         *
         * @readonly
         * @return {number} Radius (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_2__utils_Utils__["relativeToValue"](this.radius, __WEBPACK_IMPORTED_MODULE_3__utils_Math__["min"](this.innerWidth / 2, this.innerHeight / 2));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates bounding box.
     *
     * @ignore Exclude from docs
     */
    Circle.prototype.measureElement = function () {
        this._bbox = {
            x: -this.pixelRadius,
            y: -this.pixelRadius,
            width: this.pixelRadius * 2,
            height: this.pixelRadius * 2
        };
    };
    return Circle;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Circle.js.map

/***/ }),
/* 85 */,
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(24).f;
var has = __webpack_require__(35);
var TAG = __webpack_require__(22)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var defined = __webpack_require__(47);
var fails = __webpack_require__(16);
var spaces = __webpack_require__(170);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),
/* 88 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(17);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Rectangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Math__ = __webpack_require__(3);
/**
 * Functionality for drawing rectangles.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw a rectangle.
 *
 * @see {@link IRectangleEvents} for a list of available events
 * @see {@link IRectangleAdapters} for a list of available Adapters
 */
var Rectangle = /** @class */ (function (_super) {
    __extends(Rectangle, _super);
    /**
     * Constructor
     * * Creates a `<rect>` element
     * * Creates default state
     */
    function Rectangle() {
        var _this = _super.call(this) || this;
        _this.className = "Rectangle";
        _this.element = _this.paper.add("rect");
        _this.pixelPerfect = true;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Rectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var precision = this._positionPrecision;
        if (this.pixelPerfect) {
            precision = 0;
        }
        var w = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](this.innerWidth, precision);
        var h = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["round"](this.innerHeight, precision);
        this.element.attr({
            "width": w,
            "height": h
        });
    };
    /**
     * Updates bounding box based on element dimension settings.
     *
     * @ignore Exclude from docs
     */
    Rectangle.prototype.measureElement = function () {
        this._bbox = {
            x: 0,
            y: 0,
            width: this.innerWidth,
            height: this.innerHeight
        };
    };
    return Rectangle;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Rectangle.js.map

/***/ }),
/* 91 */,
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["order"] = order;
/**
 * ============================================================================
 * COMPARING FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Comparing function used for ordering.
 *
 * @ignore Exclude from docs
 * @param  {number}    a  Number 1
 * @param  {number}    b  Number 2
 * @return {Ordering}     Result
 */
function order(a, b) {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
}
//# sourceMappingURL=Number.js.map

/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Slice; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_Path__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(2);
/**
 * Slice module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.
 *
 * @see {@link ISliceEvents} for a list of available events
 * @see {@link ISliceAdapters} for a list of available Adapters
 */
var Slice = /** @class */ (function (_super) {
    __extends(Slice, _super);
    /**
     * Constructor
     */
    function Slice() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Slice";
        // this is dumb container
        _this.layout = "none";
        // Set defaults
        // @todo Override `measureElement` method and calculate size using math
        _this.isMeasured = false;
        _this.cornerRadius = 0;
        _this.startAngle = 0;
        _this.innerRadius = 0;
        _this.radius = 0;
        _this.arc = 0;
        _this.shiftRadius = 0;
        _this.strokeOpacity = 1;
        // Create a slice wedge element
        _this.slice = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        _this.slice.isMeasured = false;
        _this.slice.element = _this.paper.add("path");
        _this._disposers.push(_this.slice);
        _this.element.attr({ "stroke-linejoin": "round" });
        _this.element.attr({ "stroke-linecap": "round" });
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Slice.prototype.draw = function () {
        _super.prototype.draw.call(this);
        this.slice.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["arc"](this.startAngle, this.arc, this.radius, this.innerRadius, this.radiusY, this.cornerRadius, this.innerCornerRadius) });
        this.shiftRadius = this.shiftRadius;
    };
    Object.defineProperty(Slice.prototype, "startAngle", {
        /**
         * @return {number} Angle (0-360)
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * The angle at which left edge of the slice is drawn. (0-360)
         *
         * 0 is to the right of the center.
         *
         * @param {number}  value  Angle (0-360)
         */
        set: function (value) {
            this.setPropertyValue("startAngle", __WEBPACK_IMPORTED_MODULE_2__utils_Math__["normalizeAngle"](value), true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "arc", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this.getPropertyValue("arc");
        },
        /**
         * [arc description]
         *
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("arc", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "radius", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            var radius = this.getPropertyValue("radius");
            if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](radius)) {
                radius = 0;
            }
            return radius;
        },
        /**
         * Radius of the slice in pixels.
         *
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "radiusY", {
        /**
         * @return {number} Vertical radius (0-1)
         */
        get: function () {
            var value = this.getPropertyValue("radiusY");
            if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
                value = this.radius;
            }
            return value;
        },
        /**
         * Vertical radius for creating skewed slices.
         *
         * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half
         * the `radius`.
         *
         * @param {number} value Vertical radius (0-1)
         */
        set: function (value) {
            this.setPropertyValue("radiusY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "innerRadius", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the slice for creating cut out (donut) slices.
         *
         * @default 0
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "cornerRadius", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadius");
        },
        /**
         * Radius of slice's outer corners in pixels.
         *
         * @default 0
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "innerCornerRadius", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("innerCornerRadius");
        },
        /**
         * Radius of slice's inner corners in pixels.
         *
         * @default 0
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("innerCornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "shiftRadius", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this.getPropertyValue("shiftRadius");
        },
        /**
         * [shiftRadius description]
         *
         * 0-1
         *
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
            this.setPropertyValue("shiftRadius", value);
            this.dx = value * this.radius * this.ix;
            this.dy = value * this.radiusY * this.iy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "ix", {
        /**
         * [ix description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_2__utils_Math__["cos"](this.middleAngle);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "iy", {
        /**
         * [iy description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            if (this.radius > 0) {
                return __WEBPACK_IMPORTED_MODULE_2__utils_Math__["sin"](this.middleAngle) * this.radiusY / this.radius;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "middleAngle", {
        /**
         * An angle of the slice's middle.
         *
         * @ignore Exclude from docs
         * @return {number} Angle
         */
        get: function () {
            return this.startAngle + this.arc / 2;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * X coordinate for the slice tooltip.
     *
     * @return {number} X
     */
    Slice.prototype.getTooltipX = function () {
        var value = this.getPropertyValue("tooltipX");
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
            value = this.ix * (this.innerRadius + (this.radius - this.innerRadius) / 2);
        }
        return value;
    };
    /**
     * Y coordinate for the slice tooltip.
     *
     * @return {number} Y
     */
    Slice.prototype.getTooltipY = function () {
        var value = this.getPropertyValue("tooltipY");
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
            value = this.iy * (this.innerRadius + (this.radius - this.innerRadius) / 2);
        }
        return value;
    };
    return Slice;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Slice.js.map

/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return Monotone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return MonotoneX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return MonotoneY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CatmullRom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return Tension; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Basis; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Path__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Math__ = __webpack_require__(3);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * [sign description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @todo Move this someplace else
 * @param {number} x [description]
 */
function sign(x) {
    return x < 0 ? -1 : 1;
}
/**
 * [slope2 description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number} x0 [description]
 * @param  {number} x1 [description]
 * @param  {number} y0 [description]
 * @param  {number} y1 [description]
 * @param  {number} t  [description]
 * @return {number}    [description]
 */
function slope2(x0, x1, y0, y1, t) {
    var h = x1 - x0;
    return h ? (3 * (y1 - y0) / h - t) / 2 : t;
}
/**
 * [slope3 description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number} x0 [description]
 * @param  {number} x1 [description]
 * @param  {number} y0 [description]
 * @param  {number} y1 [description]
 * @param  {number} x2 [description]
 * @param  {number} y2 [description]
 * @return {number}    [description]
 */
function slope3(x0, x1, y0, y1, x2, y2) {
    var h0 = x1 - x0;
    var h1 = x2 - x1;
    var s0 = (y1 - y0) / (h0 || h1 < 0 && -0);
    var s1 = (y2 - y1) / (h1 || h0 < 0 && -0);
    var p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
var Monotone = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {boolean}  reversed  [description]
     * @param {object}   info      [description]
     */
    function Monotone(reversed, info) {
        this._reversed = reversed;
        this._closed = info.closed;
    }
    /**
     * [_curve description]
     *
     * According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
     * "you can express cubic Hermite interpolation in terms of cubic Bézier curves
     * with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
     *
     * @todo Description
     * @param  {number} x0 [description]
     * @param  {number} x1 [description]
     * @param  {number} y0 [description]
     * @param  {number} y1 [description]
     * @param  {number} t0 [description]
     * @param  {number} t1 [description]
     * @return {string}    [description]
     */
    Monotone.prototype._curve = function (x0, x1, y0, y1, t0, t1) {
        var dx = (x1 - x0) / 3;
        if (this._reversed) {
            return __WEBPACK_IMPORTED_MODULE_0__Path__["cubicCurveTo"]({ x: y1, y: x1 }, { x: y0 + dx * t0, y: x0 + dx }, { x: y1 - dx * t1, y: x1 - dx });
        }
        else {
            return __WEBPACK_IMPORTED_MODULE_0__Path__["cubicCurveTo"]({ x: x1, y: y1 }, { x: x0 + dx, y: y0 + dx * t0 }, { x: x1 - dx, y: y1 - dx * t1 });
        }
    };
    /**
     * [smooth description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {Array<IPoint>} points [description]
     * @return {string}               [description]
     */
    Monotone.prototype.smooth = function (points) {
        var _this = this;
        var x0 = NaN;
        var x1 = NaN;
        var y0 = NaN;
        var y1 = NaN;
        var t0 = NaN;
        var point = 0;
        var output = "";
        __WEBPACK_IMPORTED_MODULE_1__utils_Array__["b" /* each */](points, function (_a) {
            var x = _a.x, y = _a.y;
            if (_this._reversed) {
                var temp = x;
                x = y;
                y = temp;
            }
            var t1 = NaN;
            if (!(x === x1 && y === y1)) {
                switch (point) {
                    case 0:
                        point = 1;
                        if (_this._reversed) {
                            output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: y, y: x });
                        }
                        else {
                            output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: x, y: y });
                        }
                        break;
                    case 1:
                        point = 2;
                        break;
                    case 2:
                        point = 3;
                        output += _this._curve(x0, x1, y0, y1, slope2(x0, x1, y0, y1, t1 = slope3(x0, x1, y0, y1, x, y)), t1);
                        break;
                    default:
                        output += _this._curve(x0, x1, y0, y1, t0, t1 = slope3(x0, x1, y0, y1, x, y));
                        break;
                }
                x0 = x1;
                x1 = x;
                y0 = y1;
                y1 = y;
                t0 = t1;
            }
        });
        switch (point) {
            case 2:
                if (this._reversed) {
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: y1, y: x1 });
                }
                else {
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: x1, y: y1 });
                }
                break;
            case 3:
                output += this._curve(x0, x1, y0, y1, t0, slope2(x0, x1, y0, y1, t0));
                break;
        }
        if (this._closed) {
            output += __WEBPACK_IMPORTED_MODULE_0__Path__["closePath"]();
        }
        return output;
    };
    return Monotone;
}());

/**
 * @ignore Exclude from docs
 * @todo Description
 */
var MonotoneX = /** @class */ (function (_super) {
    __extends(MonotoneX, _super);
    function MonotoneX(info) {
        return _super.call(this, false, info) || this;
    }
    return MonotoneX;
}(Monotone));

/**
 * @ignore Exclude from docs
 * @todo Description
 */
var MonotoneY = /** @class */ (function (_super) {
    __extends(MonotoneY, _super);
    function MonotoneY(info) {
        return _super.call(this, true, info) || this;
    }
    return MonotoneY;
}(Monotone));

/**
 * @ignore Exclude from docs
 * @todo Description
 * @type {Number}
 */
var epsilon = 1e-12;
/**
 * @ignore Exclude from docs
 * @todo Description
 */
var CatmullRom = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {object} info [description]
     */
    function CatmullRom(info) {
        this._alpha = info.alpha;
        this._closed = info.closed;
    }
    /**
     * [smooth description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {Array<IPoint>}  points  [description]
     * @return {string}                 [description]
     */
    CatmullRom.prototype.smooth = function (points) {
        var _this = this;
        var x0 = NaN;
        var x1 = NaN;
        var x2 = NaN;
        var x3 = NaN;
        var x4 = NaN;
        var x5 = NaN;
        var y0 = NaN;
        var y1 = NaN;
        var y2 = NaN;
        var y3 = NaN;
        var y4 = NaN;
        var y5 = NaN;
        var l01_a = 0;
        var l12_a = 0;
        var l23_a = 0;
        var l01_2a = 0;
        var l12_2a = 0;
        var l23_2a = 0;
        var point = 0;
        var output = "";
        var pushPoint = function (_a) {
            var x = _a.x, y = _a.y;
            if (point) {
                var x23 = x2 - x;
                var y23 = y2 - y;
                l23_a = Math.sqrt(l23_2a = Math.pow(x23 * x23 + y23 * y23, _this._alpha));
            }
            switch (point) {
                case 0:
                    point = 1;
                    if (_this._closed) {
                        x3 = x;
                        y3 = y;
                    }
                    else {
                        output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: x, y: y });
                    }
                    break;
                case 1:
                    point = 2;
                    if (_this._closed) {
                        x4 = x;
                        y4 = y;
                        output += __WEBPACK_IMPORTED_MODULE_0__Path__["moveTo"]({ x: x4, y: y4 });
                    }
                    break;
                case 2:
                    point = 3;
                    if (_this._closed) {
                        x5 = x;
                        y5 = y;
                        break;
                    }
                    else {
                        // fall-through
                    }
                default:
                    {
                        var _x1 = x1;
                        var _y1 = y1;
                        var _x2 = x2;
                        var _y2 = y2;
                        if (l01_a > epsilon) {
                            var a = 2 * l01_2a + 3 * l01_a * l12_a + l12_2a;
                            var n = 3 * l01_a * (l01_a + l12_a);
                            _x1 = (_x1 * a - x0 * l12_2a + x2 * l01_2a) / n;
                            _y1 = (_y1 * a - y0 * l12_2a + y2 * l01_2a) / n;
                        }
                        if (l23_a > epsilon) {
                            var b = 2 * l23_2a + 3 * l23_a * l12_a + l12_2a;
                            var m = 3 * l23_a * (l23_a + l12_a);
                            _x2 = (_x2 * b + x1 * l23_2a - x * l12_2a) / m;
                            _y2 = (_y2 * b + y1 * l23_2a - y * l12_2a) / m;
                        }
                        output += __WEBPACK_IMPORTED_MODULE_0__Path__["cubicCurveTo"]({ x: x2, y: y2 }, { x: _x1, y: _y1 }, { x: _x2, y: _y2 });
                    }
                    break;
            }
            l01_a = l12_a;
            l12_a = l23_a;
            l01_2a = l12_2a;
            l12_2a = l23_2a;
            x0 = x1;
            x1 = x2;
            x2 = x;
            y0 = y1;
            y1 = y2;
            y2 = y;
        };
        __WEBPACK_IMPORTED_MODULE_1__utils_Array__["b" /* each */](points, pushPoint);
        if (this._closed) {
            switch (point) {
                case 1:
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["moveTo"]({ x: x3, y: y3 });
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["closePath"]();
                    break;
                case 2:
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: x3, y: y3 });
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["closePath"]();
                    break;
                case 3:
                    pushPoint({ x: x3, y: y3 });
                    pushPoint({ x: x4, y: y4 });
                    pushPoint({ x: x5, y: y5 });
                    break;
            }
        }
        else {
            switch (point) {
                case 2:
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: x2, y: y2 });
                    break;
                case 3:
                    pushPoint({ x: x2, y: y2 });
                    break;
            }
            output += __WEBPACK_IMPORTED_MODULE_0__Path__["closePath"]();
        }
        return output;
    };
    return CatmullRom;
}());

/**
 * @ignore Exclude from docs
 * @todo Description
 */
var Tension = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {number} tensionX [description]
     * @param {number} tensionY [description]
     */
    function Tension(tensionX, tensionY) {
        this._tensionX = tensionX;
        this._tensionY = tensionY;
    }
    /**
     * [smooth description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {Array<IPoint>}  points  [description]
     * @return {string}                 [description]
     */
    Tension.prototype.smooth = function (points) {
        var tensionX = this._tensionX;
        var tensionY = this._tensionY;
        if (points.length < 3 || (tensionX >= 1 && tensionY >= 1)) {
            return __WEBPACK_IMPORTED_MODULE_0__Path__["polyline"](points);
        }
        var first = points[0];
        var last = points[points.length - 1];
        var closed = false;
        if (__WEBPACK_IMPORTED_MODULE_2__utils_Math__["round"](first.x, 3) == __WEBPACK_IMPORTED_MODULE_2__utils_Math__["round"](last.x) && __WEBPACK_IMPORTED_MODULE_2__utils_Math__["round"](first.y) == __WEBPACK_IMPORTED_MODULE_2__utils_Math__["round"](last.y)) {
            closed = true;
        }
        // Can't moveTo here, as it wont be possible to have fill then.
        var path = "";
        for (var i = 0; i < points.length - 1; i++) {
            var p0 = points[i - 1];
            var p1 = points[i];
            var p2 = points[i + 1];
            var p3 = points[i + 2];
            if (i === 0) {
                if (closed) {
                    p0 = points[points.length - 2];
                }
                else {
                    p0 = points[i];
                }
            }
            else if (i == points.length - 2) {
                if (closed) {
                    p3 = points[1];
                }
                else {
                    p3 = points[i + 1];
                }
            }
            var controlPointA = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["getCubicControlPointA"](p0, p1, p2, p3, tensionX, tensionY);
            var controlPointB = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["getCubicControlPointB"](p0, p1, p2, p3, tensionX, tensionY);
            path += __WEBPACK_IMPORTED_MODULE_0__Path__["cubicCurveTo"](p2, controlPointA, controlPointB);
        }
        return path;
    };
    return Tension;
}());

/**
 * @ignore Exclude from docs
 * @todo Description
 */
var Basis = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {object}  info  [description]
     */
    function Basis(info) {
        this._closed = info.closed;
    }
    /**
     * [smooth description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {Array<IPoint>}  points  [description]
     * @return {string}                 [description]
     */
    Basis.prototype.smooth = function (points) {
        var _this = this;
        var x0 = NaN;
        var x1 = NaN;
        var x2 = NaN;
        var x3 = NaN;
        var x4 = NaN;
        var y0 = NaN;
        var y1 = NaN;
        var y2 = NaN;
        var y3 = NaN;
        var y4 = NaN;
        var point = 0;
        var output = "";
        var pushCurve = function (x, y) {
            output += __WEBPACK_IMPORTED_MODULE_0__Path__["cubicCurveTo"]({
                x: (x0 + 4 * x1 + x) / 6,
                y: (y0 + 4 * y1 + y) / 6
            }, {
                x: (2 * x0 + x1) / 3,
                y: (2 * y0 + y1) / 3
            }, {
                x: (x0 + 2 * x1) / 3,
                y: (y0 + 2 * y1) / 3
            });
        };
        var pushPoint = function (_a) {
            var x = _a.x, y = _a.y;
            switch (point) {
                case 0:
                    point = 1;
                    if (_this._closed) {
                        x2 = x;
                        y2 = y;
                    }
                    else {
                        output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: x, y: y });
                    }
                    break;
                case 1:
                    point = 2;
                    if (_this._closed) {
                        x3 = x;
                        y3 = y;
                    }
                    break;
                case 2:
                    point = 3;
                    if (_this._closed) {
                        x4 = x;
                        y4 = y;
                        output += __WEBPACK_IMPORTED_MODULE_0__Path__["moveTo"]({ x: (x0 + 4 * x1 + x) / 6, y: (y0 + 4 * y1 + y) / 6 });
                        break;
                    }
                    else {
                        output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: (5 * x0 + x1) / 6, y: (5 * y0 + y1) / 6 });
                        // fall-through
                    }
                default:
                    pushCurve(x, y);
                    break;
            }
            x0 = x1;
            x1 = x;
            y0 = y1;
            y1 = y;
        };
        __WEBPACK_IMPORTED_MODULE_1__utils_Array__["b" /* each */](points, pushPoint);
        if (this._closed) {
            switch (point) {
                case 1:
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["moveTo"]({ x: x2, y: y2 });
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["closePath"]();
                    break;
                case 2:
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["moveTo"]({ x: (x2 + 2 * x3) / 3, y: (y2 + 2 * y3) / 3 });
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: (x3 + 2 * x2) / 3, y: (y3 + 2 * y2) / 3 });
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["closePath"]();
                    break;
                case 3:
                    pushPoint({ x: x2, y: y2 });
                    pushPoint({ x: x3, y: y3 });
                    pushPoint({ x: x4, y: y4 });
                    break;
            }
        }
        else {
            switch (point) {
                case 3:
                    pushCurve(x1, y1);
                // fall-through
                case 2:
                    output += __WEBPACK_IMPORTED_MODULE_0__Path__["lineTo"]({ x: x1, y: y1 });
                    break;
            }
            output += __WEBPACK_IMPORTED_MODULE_0__Path__["closePath"]();
        }
        return output;
    };
    return Basis;
}());

//# sourceMappingURL=Smoothing.js.map

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MouseCursorStyle; });
/**
 * Mouse-related functionality
 */
/**
 * Defines static methods that hold style list for various mouse cursor styles,
 * maintaining browser compatibility.
 */
var MouseCursorStyle = /** @class */ (function () {
    function MouseCursorStyle() {
    }
    /**
     * Styles for "grab" mouse cursor.
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.grab = [{
            "property": "cursor",
            "value": "move"
        }, {
            "property": "cursor",
            "value": "grab"
        }, {
            "property": "cursor",
            "value": "-moz-grab"
        }, {
            "property": "cursor",
            "value": "-webkit-grab"
        }];
    /**
     * Styles for "grabbing" mouse cursor.
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.grabbing = [{
            "property": "cursor",
            "value": "move"
        }, {
            "property": "cursor",
            "value": "grabbing"
        }, {
            "property": "cursor",
            "value": "-moz-grabbing"
        }, {
            "property": "cursor",
            "value": "-webkit-grabbing"
        }];
    /**
     * Styles for "pointer" mouse cursor. (usually used for links)
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.pointer = [{
            "property": "cursor",
            "value": "pointer"
        }];
    /**
     * Styles for default mouse cursor. (browser determines style)
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.default = [{
            "property": "cursor",
            "value": "default"
        }];
    /**
     * Styles for horizontal bi-directional resize mouse cursor.
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.horizontalResize = [{
            "property": "cursor",
            "value": "ew-resize"
        }];
    /**
     * Styles for vertical bi-directional mouse cursor.
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.verticalResize = [{
            "property": "cursor",
            "value": "ns-resize"
        }];
    return MouseCursorStyle;
}());

//# sourceMappingURL=Mouse.js.map

/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DateFormatter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Language__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Strings__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Type__ = __webpack_require__(2);
/**
 * Handles date and time formatting
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






/**
 * Handles date and time formatting.
 *
 * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting
 * @todo Better type casting of passed in date?
 * @todo Quarter support?
 * @todo When parsing named months make the search case-insensitive
 * @todo Escape a.m./p.m. properly when used in RegEx
 */
var DateFormatter = /** @class */ (function (_super) {
    __extends(DateFormatter, _super);
    /**
     * Constructor
     */
    function DateFormatter() {
        var _this = _super.call(this) || this;
        /**
         * Date format.
         *
         * @type {string}
         */
        _this._dateFormat = "yyyy-MM-dd";
        /**
         * Input date format.
         *
         * @type {string}
         */
        _this._inputDateFormat = "yyyy-MM-dd";
        /**
         * Assume UTC time zone.
         *
         * @type {boolean}
         */
        _this._utc = false;
        /**
         * First day of week.
         *
         * 0 - Sunday
         * 1 - Monday
         *
         * Etc.
         *
         * @type {number}
         */
        _this._firstDayOfWeek = 1;
        /**
         * A list of month names.
         *
         * @type {Array<MonthNames>}
         */
        _this._months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        /**
         * A list of short month names.
         *
         * @param {Array<ShortMonthNames>}
         */
        _this._monthsShort = ["Jan", "Feb", "Mar", "Apr", "May(short)", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        /**
         * A list of weekday names.
         *
         * @type {Array<Weekdays>}
         */
        _this._weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        /**
         * A list of short weekday names.
         *
         * @type {Array<ShortWeekdays>}
         */
        _this._weekdaysShort = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        /**
         * Output format to produce. If the format calls for applying color to the
         * formatted value, this setting will determine what markup to use: SVG or
         * HTML.
         *
         * Available options: svg, html.
         *
         * @default "svg"
         * @type {string}
         */
        _this._outputFormat = "svg";
        _this.className = "DateFormatter";
        _this.applyTheme();
        return _this;
    }
    /**
     * Formats the date value according to specified format.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting
     * @param  {any}     source  Date value
     * @param  {string}  format  Format
     * @return {string}          Formatted date string
     */
    DateFormatter.prototype.format = function (source, format) {
        // No language?
        if (!this.language) {
            if (this.sprite) {
                this.language = this.sprite.language;
            }
            else {
                this.language = new __WEBPACK_IMPORTED_MODULE_0__utils_Language__["a" /* Language */];
            }
        }
        // No format passed in or it's empty
        if (typeof format === "undefined" || format === "") {
            format = this._dateFormat;
        }
        // Clean format
        format = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["cleanFormat"](format);
        // get format info (it will also deal with parser caching)
        var info = this.parseFormat(format);
        // Do any casting if required
        // This will take care of timestamps as well as Date objects
        var date = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["anyToDate"](source);
        // Check if it's a valid date
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](date.getTime())) {
            return this.language.translate("Invalid date");
        }
        // Apply format
        var formatted = this.applyFormat(date, info);
        // We're done
        return formatted;
    };
    /**
     * Parses format into structured infromation.
     *
     * @param {string} format Format template
     */
    DateFormatter.prototype.parseFormat = function (format) {
        // Check cache
        if (typeof (this.getCache(format)) !== "undefined") {
            return this.getCache(format);
        }
        // Init format parse info holder
        var info = {
            "template": "",
            "parts": []
        };
        // Let TextFormatter split into chunks
        var chunks = __WEBPACK_IMPORTED_MODULE_2__System__["b" /* system */].textFormatter.chunk(format, true);
        for (var i = 0; i < chunks.length; i++) {
            var chunk = chunks[i];
            if (chunk.type === "value") {
                // Just "Date"?
                if (chunk.text.match(/^date$/i)) {
                    chunk.text = this._dateFormat;
                }
                // Find all possible parts
                var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);
                // Found?
                if (matches) {
                    // Populate template
                    for (var x = 0; x < matches.length; x++) {
                        info.parts.push(matches[x]);
                        chunk.text = chunk.text.replace(matches[x], __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */]);
                    }
                }
            }
            // Apply to template
            info.template += chunk.text;
        }
        // Apply style formatting
        //info.template = system.textFormatter.format(info.template, this.outputFormat);
        // Save cache
        this.setCache(format, info);
        return info;
    };
    /**
     * Applies format to Date.
     *
     * @param  {Date}            date  Date object
     * @param  {DateFormatInfo}  info  Parsed format information
     * @return {string}                Formatted date string
     */
    DateFormatter.prototype.applyFormat = function (date, info) {
        // Init return value
        var res = info.template;
        // Get values
        var fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, offset = date.getTimezoneOffset(), timestamp = date.getTime();
        if (this.utc) {
            fullYear = date.getUTCFullYear();
            month = date.getUTCMonth();
            weekday = date.getUTCDay();
            day = date.getUTCDate();
            hours = date.getUTCHours();
            minutes = date.getUTCMinutes();
            seconds = date.getUTCSeconds();
            milliseconds = date.getUTCMilliseconds();
        }
        else {
            fullYear = date.getFullYear();
            month = date.getMonth();
            weekday = date.getDay();
            day = date.getDate();
            hours = date.getHours();
            minutes = date.getMinutes();
            seconds = date.getSeconds();
            milliseconds = date.getMilliseconds();
        }
        // Go through each part and format/replace it in template
        for (var i = 0; i < info.parts.length; i++) {
            var value = "";
            switch (info.parts[i]) {
                case "G":
                    value = this.language.translate(fullYear < 0
                        ? "_era_bc"
                        : "_era_ad");
                    break;
                case "yyyy":
                    value = fullYear.toString();
                    break;
                case "yyy":
                case "yy":
                case "y":
                    value = fullYear.toString().substr(-info.parts[i].length);
                    break;
                case "YYYY":
                case "YYY":
                case "YY":
                case "Y":
                    var week = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getWeek"](date);
                    var year = fullYear;
                    if (week == 1 && weekday > 1) {
                        year++;
                    }
                    if (info.parts[i] == "YYYY") {
                        value = year.toString();
                    }
                    else {
                        value = year.toString().substr(-info.parts[i].length);
                    }
                    break;
                case "u":
                    // @todo
                    break;
                case "MMMMM":
                    value = this.language.translate(this._months[month]).substr(0, 1);
                    break;
                case "MMMM":
                    value = this.language.translate(this._months[month]);
                    break;
                case "MMM":
                    value = this.language.translate(this._monthsShort[month]);
                    break;
                case "MM":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](month + 1, 2, "0");
                    break;
                case "M":
                    value = (month + 1).toString();
                    break;
                case "ww":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](__WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getWeek"](date, this.utc), 2, "0");
                    break;
                case "w":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getWeek"](date, this.utc).toString();
                    break;
                case "W":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getMonthWeek"](date, this.utc).toString();
                    break;
                case "dd":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](day, 2, "0");
                    break;
                case "d":
                    value = day.toString();
                    break;
                case "DD":
                case "DDD":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](__WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getYearDay"](date, this.utc).toString(), info.parts[i].length, "0");
                    break;
                case "D":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getYearDay"](date, this.utc).toString();
                    break;
                case "F":
                    // @todo
                    break;
                case "g":
                    // @todo
                    break;
                case "t":
                    value = this.language.translateFunc("_dateOrd").call(this, day);
                    break;
                case "E":
                    value = (weekday || 7).toString();
                    break;
                case "EE":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"]((weekday || 7).toString(), 2, "0");
                    break;
                case "EEE":
                case "eee":
                    value = this.language.translate(this._weekdaysShort[weekday]);
                    break;
                case "EEEE":
                case "eeee":
                    value = this.language.translate(this._weekdays[weekday]);
                    break;
                case "EEEEE":
                case "eeeee":
                    value = this.language.translate(this._weekdays[weekday]).substr(0, 1);
                    break;
                case "e":
                case "ee":
                    value = (weekday - this.firstDayOfWeek + 1).toString();
                    if (info.parts[i] == "ee") {
                        value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](value, 2, "0");
                    }
                    break;
                case "a":
                    if (hours > 12) {
                        value = this.language.translate("PM");
                    }
                    else if (hours === 12 && (minutes > 0)) {
                        value = this.language.translate("PM");
                    }
                    else {
                        value = this.language.translate("AM");
                    }
                    break;
                case "aa":
                    if (hours > 12) {
                        value = this.language.translate("P.M.");
                    }
                    else if (hours === 12 && (minutes > 0)) {
                        value = this.language.translate("P.M.");
                    }
                    else {
                        value = this.language.translate("A.M.");
                    }
                    break;
                case "aaa":
                    if (hours > 12) {
                        value = this.language.translate("P");
                    }
                    else if (hours === 12 && (minutes > 0)) {
                        value = this.language.translate("P");
                    }
                    else {
                        value = this.language.translate("A");
                    }
                    break;
                case "h":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["get12Hours"](hours).toString();
                    break;
                case "hh":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](__WEBPACK_IMPORTED_MODULE_4__utils_Utils__["get12Hours"](hours), 2, "0");
                    break;
                case "H":
                    value = hours.toString();
                    break;
                case "HH":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](hours, 2, "0");
                    break;
                case "K":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["get12Hours"](hours, 0).toString();
                    break;
                case "KK":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](__WEBPACK_IMPORTED_MODULE_4__utils_Utils__["get12Hours"](hours, 0), 2, "0");
                    break;
                case "k":
                    value = (hours + 1).toString();
                    break;
                case "kk":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](hours + 1, 2, "0");
                    break;
                case "m":
                    value = minutes.toString();
                    break;
                case "mm":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](minutes, 2, "0");
                    break;
                case "s":
                    value = seconds.toString();
                    break;
                case "ss":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](seconds, 2, "0");
                    break;
                case "S":
                case "SS":
                case "SSS":
                    value = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();
                    break;
                case "x":
                    value = timestamp.toString();
                    break;
                case "n":
                case "nn":
                case "nnn":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](milliseconds, info.parts[i].length, "0");
                    break;
                case "z":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getTimeZone"](date, false, false);
                    break;
                case "zz":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getTimeZone"](date, true, false);
                    break;
                case "zzz":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getTimeZone"](date, false, true);
                    break;
                case "zzzz":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getTimeZone"](date, true, true);
                    break;
                case "Z":
                case "ZZ":
                    var tz = Math.abs(offset) / 60;
                    var tzh = Math.floor(tz);
                    var tzm = tz * 60 - tzh * 60;
                    if (info.parts[i] == "Z") {
                        value = "GMT";
                        value += offset > 0 ? "-" : "+";
                        value += __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](tzh, 2) + ":" + __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](tzm, 2);
                    }
                    else {
                        value = offset > 0 ? "-" : "+";
                        value += __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](tzh, 2) + __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](tzm, 2);
                    }
                    break;
                case "i":
                    value = date.toISOString();
                    break;
                case "I":
                    value = date.toUTCString();
                    break;
            }
            res = res.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */], value);
        }
        return res;
    };
    /**
     * Parses any input value into Date object.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing
     * @param  {any}     source  Source value
     * @param  {string}  format  Source format
     * @return {Date}            Date object
     */
    DateFormatter.prototype.parse = function (source, format) {
        // Format set?
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](format)) {
            format = this.inputDateFormat;
        }
        // Is it already a Date
        if (source instanceof Date) {
            return source;
        }
        // Is it a numeric timestamp
        if (typeof source === "number") {
            return new Date(source);
        }
        // No? Let's check if it's string, and try converting to it if nec
        if (typeof source !== "string") {
            source = source.toString();
        }
        // no language?
        if (!this.language) {
            if (this.sprite) {
                this.language = this.sprite.language;
            }
            else {
                this.language = new __WEBPACK_IMPORTED_MODULE_0__utils_Language__["a" /* Language */];
            }
        }
        // Init return value
        var res = new Date(0);
        // Init RegEx for parsing
        var reg = "";
        // Clean format
        format = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["cleanFormat"](format);
        // Parse format
        var info = this.parseFormat(format);
        // Init parsed items holder
        var parsedIndexes = {
            "year": -1,
            "year3": -1,
            "year2": -1,
            "year1": -1,
            "month": -1,
            "monthShort": -1,
            "monthLong": -1,
            "weekdayShort": -1,
            "weekdayLong": -1,
            "day": -1,
            "yearDay": -1,
            "week": -1,
            "hourBase0": -1,
            "hour12Base0": -1,
            "hourBase1": -1,
            "hour12Base1": -1,
            "minute": -1,
            "second": -1,
            "millisecond": -1,
            "millisecondDigits": -1,
            "am": -1,
            "zone": -1,
            "timestamp": -1,
            "iso": -1
        };
        // Index adjuster
        var indexAdjust = 0, index = 0;
        // Iterate through all of the parts
        for (var i = 0; i < info.parts.length; i++) {
            // Set current match index
            index = i + indexAdjust + 1;
            switch (info.parts[i]) {
                case "yyyy":
                case "YYYY":
                    reg += "([0-9]{4,})";
                    parsedIndexes.year = index;
                    break;
                case "yyy":
                case "YYY":
                    reg += "([0-9]{3})";
                    parsedIndexes.year3 = index;
                    break;
                case "yy":
                case "YY":
                    reg += "([0-9]{2})";
                    parsedIndexes.year2 = index;
                    break;
                case "y":
                case "Y":
                    reg += "([0-9]{1})";
                    parsedIndexes.year1 = index;
                    break;
                case "MMMM":
                    reg += "(" + this.getStringList(this._months).join("|") + ")";
                    parsedIndexes.monthLong = index;
                    break;
                case "MMM":
                    reg += "(" + this.getStringList(this._monthsShort).join("|") + ")";
                    parsedIndexes.monthShort = index;
                    break;
                case "MM":
                case "M":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.month = index;
                    break;
                case "ww":
                case "w":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.week = index;
                    break;
                case "dd":
                case "d":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.day = index;
                    break;
                case "DDD":
                case "DD":
                case "D":
                    reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                    parsedIndexes.yearDay = index;
                    break;
                case "dddd":
                    reg += "(" + this.getStringList(this._weekdays).join("|") + ")";
                    parsedIndexes.weekdayLong = index;
                    break;
                case "ddd":
                    reg += "(" + this.getStringList(this._weekdaysShort).join("|") + ")";
                    parsedIndexes.weekdayShort = index;
                    break;
                case "aaa":
                case "aa":
                case "a":
                    // TODO: fix (escape regex)
                    reg += "(" + this.getStringList(["AM", "PM", "A.M.", "P.M.", "A", "P"]).join("|") + ")";
                    parsedIndexes.am = index;
                    break;
                case "hh":
                case "h":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hour12Base1 = index;
                    break;
                case "HH":
                case "H":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hourBase0 = index;
                    break;
                case "KK":
                case "K":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hour12Base0 = index;
                    break;
                case "kk":
                case "k":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hourBase1 = index;
                    break;
                case "mm":
                case "m":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.minute = index;
                    break;
                case "ss":
                case "s":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.second = index;
                    break;
                case "SSS":
                case "SS":
                case "S":
                    reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                    parsedIndexes.millisecond = index;
                    parsedIndexes.millisecondDigits = info.parts[i].length;
                    break;
                case "nnn":
                case "nn":
                case "n":
                    reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                    parsedIndexes.millisecond = index;
                    break;
                case "x":
                    reg += "([0-9]{1,})";
                    parsedIndexes.timestamp = index;
                    break;
                case "Z":
                    reg += "GMT([-+]+[0-9]{2}:[0-9]{2})";
                    parsedIndexes.zone = index;
                    break;
                case "ZZ":
                    reg += "([\\-+]+[0-9]{2}[0-9]{2})";
                    parsedIndexes.zone = index;
                    break;
                case "i":
                    reg += "([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z)";
                    parsedIndexes.iso = index;
                    break;
                case "G":
                case "YYYY":
                case "YYY":
                case "YY":
                case "Y":
                case "MMMMM":
                case "W":
                case "EEEEE":
                case "EEEE":
                case "EEE":
                case "EE":
                case "E":
                case "eeeee":
                case "eeee":
                case "eee":
                case "ee":
                case "e":
                case "zzzz":
                case "zzz":
                case "zz":
                case "z":
                case "t":
                    // Ignore
                    indexAdjust--;
                    break;
            }
            reg += "[^0-9]*";
        }
        // Try matching
        var regex = new RegExp(reg);
        var matches;
        if (matches = source.match(regex)) {
            // Populate the date object
            // Full year
            if (parsedIndexes.year > -1) {
                var val = parseInt(matches[parsedIndexes.year]);
                if (this.utc) {
                    res.setUTCFullYear(val);
                }
                else {
                    res.setFullYear(val);
                }
            }
            // 3-digit year
            if (parsedIndexes.year3 > -1) {
                var val = parseInt(matches[parsedIndexes.year3]);
                val += 1000;
                if (this.utc) {
                    res.setUTCFullYear(val);
                }
                else {
                    res.setFullYear(val);
                }
            }
            // 2-digit year
            if (parsedIndexes.year2 > -1) {
                var val = parseInt(matches[parsedIndexes.year2]);
                if (val > 50) {
                    val += 1000;
                }
                else {
                    val += 2000;
                }
                if (this.utc) {
                    res.setUTCFullYear(val);
                }
                else {
                    res.setFullYear(val);
                }
            }
            // 1-digit year
            if (parsedIndexes.year1 > -1) {
                var val = parseInt(matches[parsedIndexes.year1]);
                val = Math.floor((new Date().getFullYear()) / 10) * 10 + val;
                if (this.utc) {
                    res.setUTCFullYear(val);
                }
                else {
                    res.setFullYear(val);
                }
            }
            // Full month
            if (parsedIndexes.monthLong > -1) {
                var val = this.resolveMonth(matches[parsedIndexes.monthLong]);
                if (this.utc) {
                    res.setUTCMonth(val);
                }
                else {
                    res.setMonth(val);
                }
            }
            // Short month
            if (parsedIndexes.monthShort > -1) {
                var val = this.resolveShortMonth(matches[parsedIndexes.monthShort]);
                if (this.utc) {
                    res.setUTCMonth(val);
                }
                else {
                    res.setMonth(val);
                }
            }
            // Numeric month
            if (parsedIndexes.month > -1) {
                var val = parseInt(matches[parsedIndexes.month]) - 1;
                if (this.utc) {
                    res.setUTCMonth(val);
                }
                else {
                    res.setMonth(val);
                }
            }
            // Weekday
            // @todo
            // Week
            if ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {
                // We parse weeks ONLY if day is not explicitly set
                // TODO: this needs work
                // (but maybe later - I can hardly imagine anyone passing their dates in weeks)
                var val = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getDayFromWeek"](parseInt(matches[parsedIndexes.week]), this.utc ? res.getUTCFullYear() : res.getFullYear(), 1, this.utc);
                if (this.utc) {
                    res.setUTCMonth(0);
                    res.setUTCDate(val);
                }
                else {
                    res.setMonth(0);
                    res.setDate(val);
                }
            }
            // Day
            if (parsedIndexes.day > -1) {
                var val = parseInt(matches[parsedIndexes.day]);
                if (this.utc) {
                    res.setUTCDate(val);
                }
                else {
                    res.setDate(val);
                }
            }
            // Year day
            if (parsedIndexes.yearDay > -1) {
                var val = parseInt(matches[parsedIndexes.yearDay]);
                if (this.utc) {
                    res.setUTCMonth(0);
                    res.setUTCDate(val);
                }
                else {
                    res.setMonth(0);
                    res.setDate(val);
                }
            }
            // 24 Hour (0-23)
            if (parsedIndexes.hourBase0 > -1) {
                var val = parseInt(matches[parsedIndexes.hourBase0]);
                if (this.utc) {
                    res.setUTCHours(val);
                }
                else {
                    res.setHours(val);
                }
            }
            // 24 Hour (1-24)
            if (parsedIndexes.hourBase1 > -1) {
                var val = parseInt(matches[parsedIndexes.hourBase1]) - 1;
                if (this.utc) {
                    res.setUTCHours(val);
                }
                else {
                    res.setHours(val);
                }
            }
            // 12 Hour (0-11)
            if (parsedIndexes.hour12Base0 > -1) {
                var val = parseInt(matches[parsedIndexes.hour12Base0]);
                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                    val += 12;
                }
                if (this.utc) {
                    res.setUTCHours(val);
                }
                else {
                    res.setHours(val);
                }
            }
            // 12 Hour (1-12)
            if (parsedIndexes.hour12Base1 > -1) {
                var val = parseInt(matches[parsedIndexes.hour12Base1]) - 1;
                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                    val += 12;
                }
                if (this.utc) {
                    res.setUTCHours(val);
                }
                else {
                    res.setHours(val);
                }
            }
            // Minute
            if (parsedIndexes.minute > -1) {
                var val = parseInt(matches[parsedIndexes.minute]);
                if (this.utc) {
                    res.setUTCMinutes(val);
                }
                else {
                    res.setMinutes(val);
                }
            }
            // Second
            if (parsedIndexes.second > -1) {
                var val = parseInt(matches[parsedIndexes.second]);
                if (this.utc) {
                    res.setUTCSeconds(val);
                }
                else {
                    res.setSeconds(val);
                }
            }
            // Millisecond
            if (parsedIndexes.millisecond > -1) {
                var val = parseInt(matches[parsedIndexes.millisecond]);
                if (parsedIndexes.millisecondDigits == 2) {
                    val *= 10;
                }
                else if (parsedIndexes.millisecondDigits == 1) {
                    val *= 100;
                }
                if (this.utc) {
                    res.setUTCMilliseconds(val);
                }
                else {
                    res.setMilliseconds(val);
                }
            }
            // Timestamp
            if (parsedIndexes.timestamp > -1) {
                res.setTime(parseInt(matches[parsedIndexes.timestamp]));
            }
            // Adjust time zone
            if (parsedIndexes.zone > -1) {
                var zone = matches[parsedIndexes.zone].replace(/:/, "");
                var match = zone.match(/([+\-]?)([0-9]{2})([0-9]{2})/);
                var dir = match[1];
                var hour = match[2];
                var minute = match[3];
                var offset = parseInt(hour) * 60 + parseInt(minute);
                // Adjust offset
                // Making it negative does not seem to make sense, but it's right
                // because of how JavaScript calculates GTM offsets
                if (dir == "+") {
                    offset *= -1;
                }
                // Check the difference in offset
                var originalOffset = res.getTimezoneOffset();
                var diff = offset - originalOffset;
                if (diff != 0) {
                    res.setMinutes(res.getMinutes() + diff);
                }
            }
            // ISO
            if (parsedIndexes.iso > -1) {
                res = new Date(matches[parsedIndexes.iso]);
            }
        }
        else {
            // Didn't match anything
            // Let's try dropping it into Date constructor and hope for the best
            res = new Date(source);
        }
        return res;
    };
    /**
     * Resolves month name (i.e. "December") into a month number (11).
     *
     * @param  {MonthNames}  value  Month name
     * @return {number}             Month number
     */
    DateFormatter.prototype.resolveMonth = function (value) {
        // Let's try English first
        var month = this._months.indexOf(value);
        if (month > -1) {
            return month;
        }
        // Try the translation
        if (this.language && !this.language.isDefault()) {
            month = this.language.translateAll(this._months).indexOf(value);
            if (month > -1) {
                return month;
            }
        }
        return 0;
    };
    /**
     * Resolves short month name (i.e. "Dec") into a month number.
     *
     * @param  {ShortMonthNames}  value  Short month name
     * @return {number}                  Month number
     */
    DateFormatter.prototype.resolveShortMonth = function (value) {
        // Let's try English first
        var month = this._monthsShort.indexOf(value);
        if (month > -1) {
            return month;
        }
        // Try the translation
        if (this.language && !this.language.isDefault()) {
            month = this.language.translateAll(this._monthsShort).indexOf(value);
            if (month > -1) {
                return month;
            }
        }
        return 0;
    };
    /**
     * Checks if passed in string represents AM/PM notation in many of its
     * versions.
     *
     * @param  {string}   value  Source string
     * @return {boolean}         Is it AM/PM?
     */
    DateFormatter.prototype.isAm = function (value) {
        var list = this.getStringList(["AM", "A.M.", "A"]);
        return list.indexOf(value.toUpperCase()) > -1;
    };
    /**
     * Invalidates related [[Sprite]] causing it to redraw.
     */
    DateFormatter.prototype.invalidateSprite = function () {
        if (this.sprite) {
            this.sprite.invalidate();
        }
    };
    /**
     * Translates list of strings.
     *
     * @param  {Array<keyof ILocaleProperties>}  list  Source strings
     * @return {Array<string>}                         Translated strings
     */
    DateFormatter.prototype.getStringList = function (list) {
        var res = [];
        for (var i = 0; i < list.length; i++) {
            res.push(list[i]);
            // translate?
            if (this.language && !this.language.isDefault()) {
                res.push(this.language.translate(list[i]));
            }
        }
        return res;
    };
    Object.defineProperty(DateFormatter.prototype, "dateFormat", {
        /**
         * @return {string} Date format
         */
        get: function () {
            return this._dateFormat;
        },
        /**
         * Date format to use.
         *
         * If format is not supplied in-line in the string, this setting will be
         * used.
         *
         * @default "yyyy-MM-dd"
         * @param {string} value Date format
         */
        set: function (value) {
            this._dateFormat = value;
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateFormatter.prototype, "inputDateFormat", {
        /**
         * @return {string} Date format
         */
        get: function () {
            return this._inputDateFormat;
        },
        /**
         * Date format to use when parsing dates.
         *
         * @default "yyyy-MM-dd"
         * @param {string} value Date format
         */
        set: function (value) {
            this._inputDateFormat = value;
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateFormatter.prototype, "utc", {
        /**
         * @return {boolean} Use UTC?
         */
        get: function () {
            return this._utc;
        },
        /**
         * Should formatter use UTC functions?
         *
         * If UTC is used, all date/time values will be independent on client's
         * time zone.
         *
         * @param {boolean} value Use UTC?
         */
        set: function (value) {
            this._utc = value;
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateFormatter.prototype, "firstDayOfWeek", {
        /**
         * @return {number} First day of week
         */
        get: function () {
            return this._firstDayOfWeek;
        },
        /**
         * Dirst day of the week:
         *
         * * 0 - Sunday
         * * 1 - Monday
         * * 2 - Tuesday
         *
         * Etc.
         *
         * @param {number} value First day of week
         */
        set: function (value) {
            this._firstDayOfWeek = value;
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateFormatter.prototype, "outputFormat", {
        /**
         * @ignore Exclude from docs
         * @return {string} Format
         */
        get: function () {
            return this._outputFormat;
        },
        /**
         * Output format for the formatted date.
         *
         * @ignore Exclude from docs
         * @param {string}  value  Format
         */
        set: function (value) {
            this._outputFormat = value.toLowerCase();
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    return DateFormatter;
}(__WEBPACK_IMPORTED_MODULE_1__Base__["a" /* BaseObject */]));

//# sourceMappingURL=DateFormatter.js.map

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Bullet; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(1);
/**
 * Module that defines everything related to building bullets.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Class used to creates bullets.
 *
 * @see {@link IBulletEvents} for a list of available events
 * @see {@link IBulletAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var Bullet = /** @class */ (function (_super) {
    __extends(Bullet, _super);
    /**
     * Constructor
     */
    function Bullet() {
        var _this = _super.call(this) || this;
        _this.className = "Bullet";
        _this.isMeasured = false;
        _this.tooltipX = 0;
        _this.tooltipY = 0;
        _this.layout = "none";
        _this.copyToLegendMarker = true;
        return _this;
    }
    Object.defineProperty(Bullet.prototype, "locationX", {
        /**
         * @return {number} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("locationX");
        },
        /**
         * Relative horizontal location within cell. (0-1)
         *
         * @param {number}  value  Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("locationX", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "locationY", {
        /**
         * @return {number} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("locationY");
        },
        /**
         * Relative vertical location within cell. (0-1)
         *
         * @param {number}  value  Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("locationY", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "xField", {
        /**
         * @return {string} [description]
         */
        get: function () {
            return this.getPropertyValue("xField");
        },
        /**
         * [xField description]
         *
         * @todo Description
         * @param {string}  value  [description]
         */
        set: function (value) {
            this.setPropertyValue("xField", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "yField", {
        /**
         * @return {string} [description]
         */
        get: function () {
            return this.getPropertyValue("yField");
        },
        /**
         * [yField description]
         *
         * Description
         * @param {string}  value  [description]
         */
        set: function (value) {
            this.setPropertyValue("yField", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "isDynamic", {
        /**
         * @return {boolean} Redraw on data change?
         */
        get: function () {
            return this.getPropertyValue("isDynamic");
        },
        /**
         * Indicates if the bullet is "dynamic".
         *
         * In most cases the bullets remain the same, even if the underlying data
         * changes.
         *
         * However, in cases where bullet also displays a label, or its size depends
         * on data, it also needs to be redrawn when the underlying data changes.
         *
         * Only those bullets that have set `isDynamic = true` will be redrawn each
         * time data changes. Regular bullets will be reused as they are.
         *
         * @default false
         * @param {boolean}  value  Redraw on data change?
         */
        set: function (value) {
            this.setPropertyValue("isDynamic", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "copyToLegendMarker", {
        /**
         * @return {boolean} Redraw on data change?
         */
        get: function () {
            return this.getPropertyValue("copyToLegendMarker");
        },
        /**
         * Indicates if the bullet should be copied to legend marker
         *
         * @default false
         * @param {boolean}  value  Redraw on data change?
         */
        set: function (value) {
            this.setPropertyValue("copyToLegendMarker", value);
        },
        enumerable: true,
        configurable: true
    });
    return Bullet;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["a" /* registry */].registeredClasses["Bullet"] = Bullet;
//# sourceMappingURL=Bullet.js.map

/***/ }),
/* 98 */,
/* 99 */,
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Scrollbar; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__elements_ResizeButton__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_Button__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__elements_RoundedRectangle__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Keyboard__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Ease__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Type__ = __webpack_require__(2);
/**
 * Provides functionality used to build scrollbars.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */













;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Scrollbar is a generic control allowing to select a range of values or pan
 * the selection.
 *
 * @see {@link IScrollbarEvents} for a list of available events
 * @see {@link IScrollbarAdapters} for a list of available Adapters
 */
var Scrollbar = /** @class */ (function (_super) {
    __extends(Scrollbar, _super);
    /**
     * Construtor
     */
    function Scrollbar() {
        var _this = _super.call(this) || this;
        /**
         * A value of previously selected lower value, used for doubleclick function.
         *
         * @type {number}
         */
        _this._prevStart = 0;
        /**
         * A value of previously selected upper value, used for doubleclick function.
         *
         * @type {number}
         */
        _this._prevEnd = 1;
        /**
         * Indicates if the Scrollbar is currently "busy" (animating and or
         * performing zoom by user interaction).
         *
         * @type {boolean}
         */
        _this._isBusy = false;
        /**
         * [_skipRangeEvents description]
         *
         * @todo Description
         * @type {boolean}
         */
        _this._skipRangeEvents = false;
        /**
         * Update the selection when dragging the grips.
         *
         * If set to `false` selection will be updated only when the grip is
         * released.
         *
         * @default true
         * @type {boolean}
         */
        _this.updateWhileMoving = true;
        _this.className = "Scrollbar";
        _this.minHeight = 12;
        _this.minWidth = 12;
        _this.animationDuration = 0;
        _this.animationEasing = __WEBPACK_IMPORTED_MODULE_11__utils_Ease__["cubicOut"];
        _this.margin(10, 10, 10, 10);
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // background is also container as it might contain graphs, grid, etc
        var background = _this.background;
        background.cornerRadius(10, 10, 10, 10);
        background.fill = interfaceColors.getFor("fill");
        background.fillOpacity = 0.5;
        _this.startGrip = new __WEBPACK_IMPORTED_MODULE_1__elements_ResizeButton__["a" /* ResizeButton */]();
        _this.endGrip = new __WEBPACK_IMPORTED_MODULE_1__elements_ResizeButton__["a" /* ResizeButton */]();
        // Set button defaults
        _this.startGrip.showSystemTooltip = true;
        _this.endGrip.showSystemTooltip = true;
        _this.startGrip.zIndex = 100;
        _this.endGrip.zIndex = 100;
        // Default orientation...
        // ... is set in `applyInternalDefaults()` because it accesses `language`
        // and should only be started to access when parent is set
        // Set events
        _this.events.on("transformed", _this.updateThumb, _this);
        // Initial positions
        _this.start = 0;
        _this.end = 1;
        // Set roles
        _this.role = "scrollbar";
        _this.thumb.role = "slider";
        _this.thumb.readerLive = "polite";
        _this.startGrip.role = "slider";
        _this.endGrip.role = "slider";
        // otherwise range changed wont' be registered
        _this.events.once("inited", function () {
            _this._previousStart = undefined;
            _this.dispatchRangeChange();
        });
        _this.hideGrips = false;
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    Scrollbar.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!this._orientation) {
            this.orientation = "horizontal";
        }
        // Set screen reader tetxt accordingly
        if (this.orientation === "horizontal") {
            this.readerTitle = this.language.translate("Use TAB to select grip buttons or left and right arrows to change selection");
            this.thumb.readerDescription = this.language.translate("Use left and right arrows to move selection");
            this.startGrip.readerDescription = this.language.translate("Use left and right arrows to move left selection");
            this.endGrip.readerDescription = this.language.translate("Use left and right arrows to move right selection");
        }
        else {
            this.readerTitle = this.language.translate("Use TAB select grip buttons or up and down arrows to change selection");
            this.thumb.readerDescription = this.language.translate("Use up and down arrows to move selection");
            this.startGrip.readerDescription = this.language.translate("Use up and down arrows to move upper selection");
            this.endGrip.readerDescription = this.language.translate("Use up and down arrows to move lower selection");
        }
    };
    /**
     * Validates the layout of the scrollbar's elements.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.validateLayout = function () {
        this.updateSize();
        _super.prototype.validateLayout.call(this);
        //this.background.paddingTop = this.paddingTop;
        //this.background.paddingBottom = this.paddingBottom;
        //this.background.paddingLeft = this.paddingLeft;
        //this.background.paddingRight = this.paddingRight;
        // when size changes, need to update extremes
        this.updateExtremes();
    };
    /**
     * Update background for the scrollbar.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.processBackground = function () {
        _super.prototype.processBackground.call(this);
        var background = this.background;
        background.clickable = true;
        background.events.on("hit", this.handleBgHit, this);
    };
    /**
     * Zooms to the particular place when clicked/tapped on the scrollbar
     * background.
     *
     * @ignore Exclude from docs
     * @param {ISpriteEvents["hit"]}  event  Event
     */
    Scrollbar.prototype.handleBgHit = function (event) {
        this.makeBusy();
        var point = event.spritePoint;
        var thumb = this.thumb;
        if (this.orientation == "horizontal") {
            var thumbX = point.x - thumb.pixelWidth / 2;
            thumbX = __WEBPACK_IMPORTED_MODULE_10__utils_Math__["fitToRange"](thumbX, 0, this.innerWidth - thumb.pixelWidth);
            this._thumbAnimation = thumb.animate({ property: "x", to: thumbX }, this.animationDuration, this.animationEasing);
        }
        else {
            var thumbY = point.y - thumb.pixelHeight / 2;
            thumbY = __WEBPACK_IMPORTED_MODULE_10__utils_Math__["fitToRange"](thumbY, 0, this.innerHeight - thumb.pixelHeight);
            this._thumbAnimation = thumb.animate({ property: "y", to: thumbY }, this.animationDuration, this.animationEasing);
        }
        if (this.animationDuration > 0) {
            this._thumbAnimation.events.on("animationend", this.makeUnbusy, this);
        }
        else {
            this._thumb.validate();
            this.makeUnbusy();
        }
    };
    /**
     * Set scrollbar as busy. (currently zooming)
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.makeBusy = function () {
        this._isBusy = true;
        this._skipRangeEvents = false;
        if (this._unbusyTimeout) {
            this.removeDispose(this._unbusyTimeout);
        }
        this._unbusyTimeout = null;
        this.stopAnimations();
    };
    /**
     * Stops all animations, currently playing for the scrollbar.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.stopAnimations = function () {
        if (this._thumbAnimation) {
            this._thumbAnimation.stop(true);
        }
        if (this._zoomAnimation) {
            this._zoomAnimation.stop(true);
        }
    };
    /**
     * Cancels "busy" status of the Scrollbar.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.makeUnbusy = function () {
        /**
         * We cannot make Scrollbar not busy right after release, because then axes
         * will take over controll and Scrollbar will start to animate.
         * Theorethically, it's not right to set timeout by `animationDuration`,
         * however we can not know all the durations of elements we scroll, so we
         * assume that animation duration will be the same as
         * `interpolationDuration` or `rangeChange` duration.
         */
        this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);
    };
    /**
     * [makeUnbusyReal description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.makeUnbusyReal = function () {
        this._usingGrip = undefined;
        this._isBusy = false;
        if (!this.updateWhileMoving) {
            this.dispatchRangeChange();
        }
    };
    /**
     * Disptatches rangechanged event if it really changed
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.dispatchRangeChange = function () {
        if (this._previousEnd != this.end || this._previousStart != this.start) {
            this._previousStart = this.start;
            this._previousEnd = this.end;
            this.dispatch("rangechanged");
        }
    };
    /**
     * Updates the "thumb" element. A draggable element between the grips.
     */
    Scrollbar.prototype.updateThumb = function () {
        if (!this.parent) {
            return;
        }
        var thumb = this.thumb;
        var start = this.start;
        var end = this.end;
        var startGrip = this.startGrip;
        var endGrip = this.endGrip;
        if (this.orientation == "horizontal") {
            var innerWidth_1 = this.innerWidth;
            thumb.width = innerWidth_1 * (end - start);
            thumb.maxX = innerWidth_1 - thumb.pixelWidth;
            thumb.x = start * innerWidth_1;
            startGrip.moveTo({ x: thumb.x, y: 0 }, undefined, undefined, true); // overrides dragging
            endGrip.moveTo({ x: thumb.x + thumb.innerWidth, y: 0 }, undefined, undefined, true);
            startGrip.readerTitle = this.language.translate("From %1", undefined, this.adapter.apply("positionValue", {
                value: Math.round(start * 100) + "%",
                position: start
            }).value);
            endGrip.readerTitle = this.language.translate("To %1", undefined, this.adapter.apply("positionValue", {
                value: Math.round(end * 100) + "%",
                position: end
            }).value);
        }
        else {
            var innerHeight_1 = this.innerHeight;
            thumb.height = innerHeight_1 * (end - start);
            thumb.maxY = innerHeight_1 - thumb.pixelHeight;
            thumb.y = (1 - end) * innerHeight_1;
            startGrip.moveTo({ x: 0, y: thumb.y + thumb.innerHeight }, undefined, undefined, true);
            endGrip.moveTo({ x: 0, y: thumb.y }, undefined, undefined, true);
            startGrip.readerTitle = this.language.translate("To %1", undefined, this.adapter.apply("positionValue", {
                value: Math.round((1 - start) * 100) + "%",
                position: (1 - start)
            }).value);
            endGrip.readerTitle = this.language.translate("From %1", undefined, this.adapter.apply("positionValue", {
                value: Math.round((1 - end) * 100) + "%",
                position: (1 - end)
            }).value);
        }
        // Add accessibility
        thumb.readerTitle = this.language.translate("From %1 to %2", undefined, this.adapter.apply("positionValue", {
            value: Math.round(start * 100) + "%",
            position: start
        }).value, this.adapter.apply("positionValue", {
            value: Math.round(end * 100) + "%",
            position: end
        }).value);
        if (!this._skipRangeEvents && this.updateWhileMoving) {
            this.dispatchRangeChange();
        }
    };
    /**
     * Updates extremes of the scrollbar.
     */
    Scrollbar.prototype.updateExtremes = function () {
        var orientation = this.orientation;
        var minX = 0;
        var minY = 0;
        var maxX = 0;
        var maxY = 0;
        if (orientation == "horizontal") {
            maxX = this.innerWidth;
            minY = maxY = this.innerHeight / 2;
        }
        else {
            maxY = this.innerHeight;
            minX = maxX = this.innerWidth / 2;
        }
        var startGrip = this.startGrip;
        startGrip.minX = minX;
        startGrip.maxX = maxX;
        startGrip.minY = minY;
        startGrip.maxY = maxY;
        var endGrip = this.endGrip;
        endGrip.minX = minX;
        endGrip.maxX = maxX;
        endGrip.minY = minY;
        endGrip.maxY = maxY;
        var thumb = this.thumb;
        thumb.minX = minX;
        thumb.maxX = maxX;
        thumb.minY = minY;
        thumb.maxY = maxY;
    };
    /**
     * Updates size of the scrollbar.
     */
    Scrollbar.prototype.updateSize = function () {
        var orientation = this.orientation;
        var startGrip = this.startGrip;
        if (startGrip) {
            startGrip.orientation = orientation;
        }
        if (this.endGrip) {
            this.endGrip.orientation = orientation;
        }
        var thumb = this.thumb;
        if (thumb) {
            if (orientation == "horizontal") {
                if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["isNumber"](this._pixelWidth)) {
                    this.width = Object(__WEBPACK_IMPORTED_MODULE_9__utils_Percent__["c" /* percent */])(100);
                }
                // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent
                // however without this height might be equal to 100% if previous orientation was set to horizontal
                // so this is ok solution, in case user really wants to have scrollbar height set in percent,
                // he should do this after orientation.
                if (__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.percentHeight)) {
                    this.height = this.minHeight;
                }
                thumb.height = this.innerHeight;
                thumb.verticalCenter = "middle";
                thumb.horizontalCenter = "left";
            }
            else {
                if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["isNumber"](this._pixelHeight)) {
                    this.height = Object(__WEBPACK_IMPORTED_MODULE_9__utils_Percent__["c" /* percent */])(100);
                }
                // same as above with percentHeight
                if (__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.percentWidth)) {
                    this.width = this.minWidth;
                }
                thumb.width = this.innerWidth;
                thumb.verticalCenter = "top";
                thumb.horizontalCenter = "middle";
            }
        }
    };
    Object.defineProperty(Scrollbar.prototype, "start", {
        /**
         * @return {number} Position (0-1)
         */
        get: function () {
            return Math.min(this.getPosition(this._start), this.getPosition(this._end));
        },
        /**
         * ==========================================================================
         * POSITIONS
         * ==========================================================================
         * @hidden
         */
        /**
         * Relative position (0-1) of the start grip.
         *
         * @param {number}  position  Position (0-1)
         */
        set: function (position) {
            if (!this._isBusy) {
                this.__start = position;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "__start", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this._start;
        },
        /**
         * [__start description]
         *
         * @todo Description
         * @param {number} position [description]
         */
        set: function (position) {
            this._start = this.getPosition(position);
            this.updateThumb();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "end", {
        /**
         * @return {number} Position (0-1)
         */
        get: function () {
            return Math.max(this.getPosition(this._start), this.getPosition(this._end));
        },
        /**
         * Relative position (0-1) of the end grip.
         *
         * @param {number}  position  Position (0-1)
         */
        set: function (position) {
            if (!this._isBusy) {
                this.__end = position;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "__end", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this._end;
        },
        /**
         * [__end description]
         *
         * @todo Description
         * @param {number} position [description]
         */
        set: function (position) {
            this._end = this.getPosition(position);
            this.updateThumb();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "range", {
        /**
         * Current selection range.
         *
         * @readonly
         * @return {IRange} Range
         */
        get: function () {
            return { start: this.start, end: this.end, priority: this._usingGrip };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Disables range change events.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.skipRangeEvents = function () {
        if (!this._isBusy) {
            this._skipRangeEvents = true;
        }
    };
    /**
     * [fixRange description]
     *
     * @todo Description
     * @ignore Exclude from docs
     * @param {IRange}  range  Range
     */
    Scrollbar.prototype.fixRange = function (range) {
        if (range.start != __WEBPACK_IMPORTED_MODULE_10__utils_Math__["round"](this._start, 2) || range.end != __WEBPACK_IMPORTED_MODULE_10__utils_Math__["round"](this._end, 2)) {
            this._start = range.start;
            this._end = range.end;
            this._skipRangeEvents = true;
            this.updateThumb();
            this._skipRangeEvents = false;
            this.thumb.validate();
        }
    };
    /**
     * [getPosition description]
     *
     * @todo Description
     * @param  {number}  position  [description]
     * @return {number}            [description]
     */
    Scrollbar.prototype.getPosition = function (position) {
        return __WEBPACK_IMPORTED_MODULE_10__utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_10__utils_Math__["round"](position, 4), 0, 1);
    };
    Object.defineProperty(Scrollbar.prototype, "orientation", {
        /**
         * @return {Orientation} Orientation
         */
        get: function () {
            return this._orientation;
        },
        /**
         * ==========================================================================
         * MISC
         * ==========================================================================
         * @hidden
         */
        /**
         * Orientation of the scrollbar.
         *
         * Available options: "horizontal" (default) and "vertical".
         *
         * @default "horizontal"
         * @param {Orientation}  value  Orientation
         */
        set: function (value) {
            this._orientation = value;
            // Set mouse cursors and screen reader tetxt accordingly
            if (value === "horizontal") {
                // Mouse styles
                this.startGrip.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].horizontalResize;
                this.endGrip.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].horizontalResize;
                // Reader text
                /*this.readerTitle = this.language.translate("Use TAB to select grip buttons or left and right arrows to change selection");
                this.thumb.readerDescription = this.language.translate("Use left and right arrows to move selection");
                this.startGrip.readerDescription = this.language.translate("Use left and right arrows to move left selection");
                this.endGrip.readerDescription = this.language.translate("Use left and right arrows to move right selection");*/
            }
            else {
                // Mouse styles
                this.startGrip.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].verticalResize;
                this.endGrip.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].verticalResize;
                // Reader text
                /*this.readerTitle = this.language.translate("Use TAB select grip buttons or up and down arrows to change selection");
                this.thumb.readerDescription = this.language.translate("Use up and down arrows to move selection");
                this.startGrip.readerDescription = this.language.translate("Use up and down arrows to move upper selection");
                this.endGrip.readerDescription = this.language.translate("Use up and down arrows to move lower selection");*/
            }
            this.updateByOrientation();
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ignore
     */
    Scrollbar.prototype.updateByOrientation = function () {
    };
    Object.defineProperty(Scrollbar.prototype, "startGrip", {
        /**
         * @return {ResizeButton} Grip element
         */
        get: function () {
            return this._startGrip;
        },
        /**
         * ==========================================================================
         * GRIPS
         * ==========================================================================
         * @hidden
         */
        /**
         * Start grip element. (button)
         *
         * @param {ResizeButton}  button  Grip element
         */
        set: function (button) {
            if (this._startGrip) {
                this.removeDispose(this._startGrip);
            }
            this._startGrip = button;
            this.processGrip(button);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "endGrip", {
        /**
         * @return {ResizeButton} Grip element
         */
        get: function () {
            return this._endGrip;
        },
        /**
         * End grip element. (button)
         *
         * @param {ResizeButton}  button  Grip element
         */
        set: function (button) {
            if (this._endGrip) {
                this.removeDispose(this._endGrip);
            }
            this._endGrip = button;
            this.processGrip(button);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Decorates the grip button with properties and events.
     *
     * @ignore Exclude from docs
     * @param {ResizeButton} button Grip button
     */
    Scrollbar.prototype.processGrip = function (button) {
        button.parent = this;
        button.horizontalCenter = "middle";
        button.verticalCenter = "middle";
        button.isMeasured = false;
        button.hoverable = true;
        button.focusable = true;
        button.events.on("drag", this.handleGripDrag, this);
        button.events.on("dragstop", this.makeUnbusy, this);
        button.events.on("down", this.makeBusy, this);
        this._disposers.push(button);
    };
    /**
     * Updates positions of related elements after grip element is dragged.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<ResizeButton, ISpriteEvents>["drag"]}  event  Event
     */
    Scrollbar.prototype.handleGripDrag = function (event) {
        this.makeBusy();
        if (event.target === this._startGrip) {
            this._usingGrip = "start";
        }
        else {
            this._usingGrip = "end";
        }
        if (this.orientation == "horizontal") {
            this._start = this.startGrip.pixelX / this.innerWidth;
            this._end = this.endGrip.pixelX / this.innerWidth;
        }
        else {
            this._start = 1 - this.startGrip.pixelY / this.innerHeight;
            this._end = 1 - this.endGrip.pixelY / this.innerHeight;
        }
        this.updateThumb();
    };
    Object.defineProperty(Scrollbar.prototype, "thumb", {
        /**
         * @return {RoundedRectangle} Thumb element
         */
        get: function () {
            if (!this._thumb) {
                // Create scrollbar controls (setters will handle adding disposers)
                var thumb = new __WEBPACK_IMPORTED_MODULE_2__elements_Button__["a" /* Button */]();
                thumb.background.cornerRadius(10, 10, 10, 10);
                thumb.padding(0, 0, 0, 0);
                thumb.background.strokeOpacity = 0;
                this.thumb = thumb;
            }
            return this._thumb;
        },
        /**
         * A "thumb" element.
         *
         * It's a draggable square space between the grips, that can be used to
         * pan the seleciton.
         *
         * @param {RoundedRectangle}  thumb  Thumb element
         */
        set: function (thumb) {
            var _this = this;
            if (thumb) {
                if (this._thumb) {
                    this.removeDispose(this._thumb);
                }
                this._thumb = thumb;
                thumb.parent = this;
                thumb.isMeasured = false;
                thumb.inert = true;
                thumb.draggable = true;
                thumb.clickable = true;
                thumb.hoverable = true;
                thumb.focusable = true;
                // TODO remove closures ?
                // Add events
                // Add cursor styles to thumb
                thumb.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].grab;
                thumb.cursorDownStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].grabbing;
                thumb.events.on("dragstart", this.makeBusy, this);
                thumb.events.on("dragstop", this.makeUnbusy, this);
                thumb.events.on("positionchanged", this.handleThumbPosition, this);
                thumb.events.on("sizechanged", this.handleThumbPosition, this);
                thumb.events.on("doublehit", this.handleDoubleClick, this);
                // Add event for space and ENTER to toggle full zoom out and back
                // (same as doubleclick)
                __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* interaction */].body.events.on("keyup", function (ev) {
                    if (__WEBPACK_IMPORTED_MODULE_7__utils_Keyboard__["b" /* keyboard */].isKey(ev.event, ["space", "enter"]) && _this.thumb.isFocused) {
                        ev.event.preventDefault();
                        _this.handleDoubleClick();
                    }
                });
                this._disposers.push(this._thumb);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Zooms-in and out the selection on double-click of the thumb.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.handleDoubleClick = function () {
        this.makeBusy();
        var newStart = 0;
        var newEnd = 1;
        if (this.start != 0 || this.end != 1) {
            this._prevStart = this.start;
            this._prevEnd = this.end;
        }
        else {
            newStart = this._prevStart;
            newEnd = this._prevEnd;
        }
        this._zoomAnimation = this.animate([{ property: "__start", to: newStart }, { property: "__end", to: newEnd }], this.animationDuration, this.animationEasing);
        if (this.animationDuration > 0) {
            this._zoomAnimation.events.on("animationend", this.makeUnbusy, this);
        }
        else {
            this.makeUnbusy();
        }
    };
    /**
     * Updates positions of other elements when thumb is moved.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.handleThumbPosition = function () {
        var thumb = this.thumb;
        if (this.orientation == "horizontal") {
            var innerWidth_2 = this.innerWidth;
            var w = thumb.innerWidth;
            var x = thumb.pixelX;
            this._start = x / innerWidth_2;
            this._end = (x + w) / innerWidth_2;
            this.updateThumb();
        }
        else {
            var innerHeight_2 = this.innerHeight;
            var h = thumb.innerHeight;
            var y = thumb.pixelY;
            this._start = 1 - (y + h) / innerHeight_2;
            this._end = 1 - y / innerHeight_2;
            this.updateThumb();
        }
    };
    /**
     * Creates a background element for the scrollbar.
     *
     * @ignore Exclude from docs
     * @return {RoundedRectangle} Background
     */
    Scrollbar.prototype.createBackground = function () {
        return new __WEBPACK_IMPORTED_MODULE_5__elements_RoundedRectangle__["a" /* RoundedRectangle */]();
    };
    Object.defineProperty(Scrollbar.prototype, "hideGrips", {
        /**
         * @return {boolean} Show only on hover?
         */
        get: function () {
            return this._hideGrips;
        },
        /**
         * Use this property to set whether grips should be always visible (`false`),
         * or they should just appear on scrollbar hover (`true`).
         *
         * @param {boolean}  value  Show only on hover?
         */
        set: function (value) {
            var _this = this;
            this._hideGrips = value;
            if (this._overDisposer) {
                this.removeDispose(this._overDisposer);
            }
            if (this._outDisposer) {
                this.removeDispose(this._outDisposer);
            }
            if (value) {
                this._overDisposer = this.events.on("over", function () {
                    _this.startGrip.show();
                    _this.endGrip.show();
                });
                this._outDisposer = this.events.on("out", function () {
                    _this.startGrip.hide();
                    _this.endGrip.hide();
                });
                this.startGrip.hide();
                this.endGrip.hide();
            }
            else {
                this.startGrip.show();
                this.endGrip.show();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "animationDuration", {
        /**
         * @return {PointerOrientation} Orientation
         */
        get: function () {
            return this.getPropertyValue("animationDuration");
        },
        /**
         * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)
         * @default 0
         * @param {number} value number
         */
        set: function (value) {
            this.setPropertyValue("animationDuration", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "animationEasing", {
        /**
         * @return {Function}
         */
        get: function () {
            return this.getPropertyValue("animationEasing");
        },
        /**
         * Animation easing function.
         * @todo: review description and default
         * @default $ease.cubicOut
         * @param {Function}  value (value: number) => number
         */
        set: function (value) {
            this.setPropertyValue("animationEasing", value);
        },
        enumerable: true,
        configurable: true
    });
    return Scrollbar;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_6__Registry__["a" /* registry */].registeredClasses["Scrollbar"] = Scrollbar;
//# sourceMappingURL=Scrollbar.js.map

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(42);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 102 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(42);
var TAG = __webpack_require__(22)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 104 */,
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRenderer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AxisLine__ = __webpack_require__(222);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AxisFill__ = __webpack_require__(143);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Grid__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__AxisLabel__ = __webpack_require__(145);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__AxisTick__ = __webpack_require__(223);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Math__ = __webpack_require__(3);
/**
 * Module, defining base Axis Renderer.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */











/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all axis renderers.
 *
 * @see {@link IAxisRendererEvents} for a list of available events
 * @see {@link IAxisRendererAdapters} for a list of available Adapters
 */
var AxisRenderer = /** @class */ (function (_super) {
    __extends(AxisRenderer, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRenderer(axis) {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A related chart.
         *
         * @todo Description
         * @type {MutableValueDisposer}
         */
        _this._chart = new __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        _this.className = "AxisRenderer";
        // Set defaults
        _this.minGridDistance = 50;
        _this.inside = false;
        _this.inversed = false;
        _this.tooltipLocation = 0.5;
        _this.fullWidthTooltip = false;
        _this.cellStartLocation = 0;
        _this.cellEndLocation = 1;
        _this.minLabelPosition = 0;
        _this.maxLabelPosition = 1;
        _this.shouldClone = false;
        // Set axis
        _this.axis = axis;
        var gridContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]);
        gridContainer.shouldClone = false;
        gridContainer.layout = "none";
        gridContainer.isMeasured = false;
        gridContainer.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        gridContainer.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        _this.gridContainer = gridContainer;
        var breakContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]);
        breakContainer.shouldClone = false;
        breakContainer.isMeasured = false;
        breakContainer.layout = "none";
        breakContainer.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        breakContainer.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        _this.breakContainer = breakContainer;
        _this.line = axis.createChild(__WEBPACK_IMPORTED_MODULE_2__AxisLine__["a" /* AxisLine */]); // yes, to axis, not to renderer
        _this.line.shouldClone = false;
        _this.line.strokeOpacity = 0;
        _this.ticks.template.strokeOpacity = 0;
        //this.ticks.template.disabled = true;
        //this.axisFills.template.disabled = true;
        var baseGrid = axis.createChild(__WEBPACK_IMPORTED_MODULE_4__Grid__["a" /* Grid */]);
        baseGrid.shouldClone = false;
        _this.baseGrid = baseGrid;
        _this.gridContainer.events.on("maxsizechanged", _this.invalidateAxisItems, _this);
        // Make elements disposable
        var disposers = _this._disposers;
        disposers.push(baseGrid);
        disposers.push(_this.line);
        disposers.push(gridContainer);
        disposers.push(breakContainer);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Called when rendered is attached to an Axis, as well as a property of
     * Axis that might affect the appearance is updated.
     *
     * E.g. `axis.opposite`, `axis.inside`, etc.
     *
     * This method is called **before** draw, so that any related setting
     * changed in this method can be changed.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRenderer.prototype.processRenderer = function () {
        this.events.on("sizechanged", this.updateTooltip, this);
        this.labels.template.inside = this.inside;
        this.ticks.template.inside = this.inside;
    };
    /**
     * Updates Axis' tooltip.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRenderer.prototype.updateTooltip = function () {
        // This is a placeholder method for extending classes to override.
    };
    Object.defineProperty(AxisRenderer.prototype, "axisLength", {
        /**
         * Returns actual length of the Axis, in pixels.
         *
         * @return {number} Length (px)
         */
        get: function () {
            // This is a placeholder method for extending classes to override.
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Re-positions an element to new coordinates.
     *
     * @ignore Exclude from docs
     * @param {Sprite}  item   A target element
     * @param {IPoint}  point  New coordinates
     */
    AxisRenderer.prototype.positionItem = function (item, point) {
        if (item) {
            item.moveTo(point);
            //item.visible = this.fitsToBounds(point);
        }
    };
    /**
     * Converts relative position on axis to point coordinates.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position (0-1)
     * @return {IPoint}            Point
     */
    AxisRenderer.prototype.positionToPoint = function (position) {
        // This is a placeholder method for extending classes to override.
        return { x: 0, y: 0 };
    };
    /**
     * Converts relative position on axis to angle.
     *
     * @ignore Exclude from docs
     * @todo Description (review / units)
     * @param  {number}  position  Position (0-1)
     * @return {number}            Angle
     */
    AxisRenderer.prototype.positionToAngle = function (position) {
        // This is a placeholder method for extending classes to override.
        return 0;
    };
    /**
     * Converts relative position (0-1) on axis to a pixel coordinate.
     *
     * @todo Description (review)
     * @param  {number}  position  Position (0-1)
     * @return {number}            Coordinate (px)
     */
    AxisRenderer.prototype.positionToCoordinate = function (position) {
        var coordinate;
        var axis = this.axis;
        var axisFullLength = axis.axisFullLength;
        if (axis.renderer.inversed) {
            coordinate = (axis.end - position) * axisFullLength;
        }
        else {
            coordinate = (position - axis.start) * axisFullLength;
        }
        return __WEBPACK_IMPORTED_MODULE_10__core_utils_Math__["round"](coordinate, 1);
    };
    /**
     * Converts a coordinate in pixels to a relative position. (0-1)
     *
     * @todo Description (review)
     * @param  {number}  coordinate  Coordinate (px)
     * @return {number}              Position (0-1)
     */
    AxisRenderer.prototype.coordinateToPosition = function (coordinate) {
        var position;
        var axis = this.axis;
        var axisFullLength = axis.axisFullLength;
        if (axis.renderer.inversed) {
            position = axis.end - coordinate / axisFullLength;
        }
        else {
            position = coordinate / axisFullLength + axis.start;
        }
        return __WEBPACK_IMPORTED_MODULE_10__core_utils_Math__["round"](position, 5);
    };
    /**
     * Converts a point at specific coordinates to a relative position (0-1)
     * on the axis.
     *
     * @ignore Exclude from docs
     * @param  {IPoint}  point  Point
     * @return {number}         Position (0-1)
     */
    AxisRenderer.prototype.pointToPosition = function (point) {
        // This is a placeholder method for extending classes to override.
        return 0;
    };
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  startPosition  Starting position
     * @param  {number}  endPosition    End position
     * @return {string}                 SVG path
     */
    AxisRenderer.prototype.getPositionRangePath = function (startPosition, endPosition) {
        return "";
    };
    /**
     * Invalidates all axis data items, effectively causing them re-evaluated.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    AxisRenderer.prototype.invalidateAxisItems = function () {
        var axis = this.axis;
        if (axis) {
            axis.invalidateDataItems();
        }
    };
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRenderer.prototype.updateGridElement = function (grid, position, endPosition) {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions a tick element.
     *
     * @ignore Exclude from docs
     * @param {AxisTick}  tick         Tick element
     * @param {number}    position     Starting position
     * @param {number}    endPosition  End position
     */
    AxisRenderer.prototype.updateTickElement = function (tick, position, endPosition) {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions a label element.
     *
     * @ignore Exclude from docs
     * @param {AxisLabel}  label        Label element
     * @param {number}     position     Starting position
     * @param {number}     endPosition  Ending position
     */
    AxisRenderer.prototype.updateLabelElement = function (label, position, endPosition) {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     * @param {AxisFill}  fill         Fill element
     * @param {number}    position     Starting position
     * @param {number}    endPosition  Ending position
     */
    AxisRenderer.prototype.updateFillElement = function (fill, position, endPosition) {
        fill.startPosition = position;
        fill.endPosition = endPosition;
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     */
    AxisRenderer.prototype.updateAxisLine = function () {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions the base grid element.
     *
     * @ignore Exclude from docs
     */
    AxisRenderer.prototype.updateBaseGridElement = function () {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions an axis break element.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Break element
     */
    AxisRenderer.prototype.updateBreakElement = function (axisBreak) {
        this.positionItem(axisBreak.startLine, axisBreak.startPoint);
        this.positionItem(axisBreak.endLine, axisBreak.endPoint);
    };
    Object.defineProperty(AxisRenderer.prototype, "minGridDistance", {
        /**
         * Returns currently set minimum distance.
         *
         * @return {number} Min distance (px)
         */
        get: function () {
            return this.getPropertyValue("minGridDistance");
        },
        /**
         * Sets mMinimum distance in pixels between grid elements.
         *
         * @param {number} value Min distance (px)
         */
        set: function (value) {
            if (this.setPropertyValue("minGridDistance", value)) {
                if (this.axis) {
                    this.axis.invalidateLayout();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "chart", {
        /**
         * Returns currently set associated chart.
         *
         * @ignore Exclude from docs
         * @return {Chart} Chart
         */
        get: function () {
            return this._chart.get();
        },
        /**
         * Sets a chart, associated with the Axis.
         *
         * @ignore Exclude from docs
         * @param {Chart} value Chart
         */
        set: function (value) {
            this._chart.set(value, null);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Toggles visibility of an element, based on its current position and
     * min/max position settings.
     *
     * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.
     *
     * @ignore Exclude from docs
     * @param {Sprite}  sprite       An element to toggle
     * @param {number}  position     Elements current position
     * @param {number}  minPosition  Min position setting
     * @param {number}  maxPosition  Max position setting
     */
    AxisRenderer.prototype.toggleVisibility = function (sprite, position, minPosition, maxPosition) {
        var axis = this.axis;
        var updatedStart = axis.start + (axis.end - axis.start) * minPosition;
        var updatedEnd = axis.start + (axis.end - axis.start) * maxPosition;
        if (position < updatedStart || position > updatedEnd) {
            sprite.__disabled = true;
        }
        else {
            sprite.__disabled = false;
        }
    };
    /**
     * Creates visual elements for and axis break.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Axis break
     */
    AxisRenderer.prototype.createBreakSprites = function (axisBreak) {
        // This is a placeholder method for extending classes to override.
    };
    Object.defineProperty(AxisRenderer.prototype, "axisFills", {
        /**
         * A list of Axis' Fill elements.
         *
         * @return {ListTemplate} Fill elements
         */
        get: function () {
            if (!this._axisFills) {
                this._axisFills = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](this.createFill(this.axis));
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._axisFills));
            }
            return this._axisFills;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a new fill element, suitable for this Axis Renderer type.
     *
     * @return {AxisFill} Fill element
     */
    AxisRenderer.prototype.createFill = function (axis) {
        return new __WEBPACK_IMPORTED_MODULE_3__AxisFill__["a" /* AxisFill */](axis);
    };
    Object.defineProperty(AxisRenderer.prototype, "grid", {
        /**
         * A list of Axis' Grid elements.
         *
         * @return {ListTemplate} Grid elements
         */
        get: function () {
            if (!this._grid) {
                this._grid = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](this.createGrid());
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._grid));
            }
            return this._grid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a new grid element, suitable for this Axis Renderer type.
     *
     * @return {Grid} Grid element
     */
    AxisRenderer.prototype.createGrid = function () {
        return new __WEBPACK_IMPORTED_MODULE_4__Grid__["a" /* Grid */]();
    };
    Object.defineProperty(AxisRenderer.prototype, "ticks", {
        /**
         * A list of Axis' Tick elements.
         *
         * @return {ListTemplate} Tick elements
         */
        get: function () {
            if (!this._ticks) {
                var tick = this.createTick();
                tick.isMeasured = false;
                this._ticks = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](tick);
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._ticks));
            }
            return this._ticks;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a new tick element, suitable for this Axis Renderer type.
     *
     * @return {AxisTick} Tick element
     */
    AxisRenderer.prototype.createTick = function () {
        return new __WEBPACK_IMPORTED_MODULE_6__AxisTick__["a" /* AxisTick */]();
    };
    Object.defineProperty(AxisRenderer.prototype, "labels", {
        /**
         * A list of Axis' Label elements.
         *
         * @return {ListTemplate} Label elements
         */
        get: function () {
            if (!this._labels) {
                this._labels = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](this.createLabel());
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._labels));
            }
            return this._labels;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a new label element, suitable for this Axis Renderer type.
     *
     * @return {AxisLabel} Label element
     */
    AxisRenderer.prototype.createLabel = function () {
        return new __WEBPACK_IMPORTED_MODULE_5__AxisLabel__["a" /* AxisLabel */]();
    };
    Object.defineProperty(AxisRenderer.prototype, "inside", {
        /**
         * Returns current setting for `inside`.
         *
         * @return {boolean} Labels inside?
         */
        get: function () {
            return this.getPropertyValue("inside");
        },
        /**
         * Sets if Axis labels and ticks should be drawn inside Plot area, does not work with all renderers, like AxisRendererRadial.
         *
         * @param {boolean} value Labels inside?
         */
        set: function (value) {
            this.setPropertyValue("inside", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "opposite", {
        /**
         * Returns current setting for `opposite`.
         *
         * @return {boolean} Draw axis on opposite side?
         */
        get: function () {
            return this.getPropertyValue("opposite");
        },
        /**
         * Sets whether axis should be drawn on the opposite side of the plot area,
         * than it would normally be drawn base on chart's settings. Does not work with all renderers, like AxisRendererRadial and AxisRenderer Circular.
         *
         * @param {boolean} value Draw axis on opposite side?
         */
        set: function (value) {
            this.setPropertyValue("opposite", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "fullWidthTooltip", {
        /**
         * Returns current setting for full-width tooltips.
         *
         * @return {boolean} Full width tooltip?
         */
        get: function () {
            return this.getPropertyValue("fullWidthTooltip");
        },
        /**
         * Sets if Axis tooltip should take the whole width of the axis cell.
         * (between two grid lines)
         *
         * NOTE: this setting is ignored on circular axis types.
         *
         * @param {boolean} value Full width tooltip?
         */
        set: function (value) {
            this.setPropertyValue("fullWidthTooltip", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "tooltipLocation", {
        /**
         * Returns current axis tooltip location.
         *
         * @return {number} Tooltip location
         */
        get: function () {
            return this.getPropertyValue("tooltipLocation");
        },
        /**
         * Sets location within axis cell to show tooltip on. (0-1)
         *
         * 0 - show at the start
         * 0.5 - show right in the middle
         * 1 - show at the end
         *
         * @param {number} value Tooltip location
         */
        set: function (value) {
            this.setPropertyValue("tooltipLocation", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "cellStartLocation", {
        /**
         * Returns currently set cell start location.
         *
         * @return {number} Cell start (0-1)
         */
        get: function () {
            return this.getPropertyValue("cellStartLocation");
        },
        /**
         * Sets location for the cell start.
         *
         * Normally a "cell" is the whole available width in a category.
         *
         * If there are several clustered column-like series available, the whole
         * space is divided between each clustered column, or column stacks.
         *
         * `cellStartLocation` identifies where, within available space, the actual
         * cell starts.
         *
         * This, together with column series' `width` will affect actual width of
         * columns, and thus gaps between them.
         *
         * This will affect category-like axes only, like [[DateAxis]], or
         * [[CategoryAxis]].
         *
         * This is used to limit a space occupied by series like column.
         *
         * @todo Description (review)
         * @param {number} value Cell start (0-1)
         */
        set: function (value) {
            this.setPropertyValue("cellStartLocation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "cellEndLocation", {
        /**
         * Returns currently set cell end location.
         *
         * @return {number} Cell end (0-1)
         */
        get: function () {
            return this.getPropertyValue("cellEndLocation");
        },
        /**
         * Sets location for the cell end.
         *
         * Normally a "cell" is the whole available width in a category.
         *
         * If there are several clustered column-like series available, the whole
         * space is divided between each clustered column, or column stacks.
         *
         * `cellEndLocation` identifies where, within available space, the actual
         * cell ends.
         *
         * This, together with column series' `width` will affect actual width of
         * columns, and thus gaps between them.
         *
         * This will affect category-like axes only, like [[DateAxis]], or
         * [[CategoryAxis]].
         *
         * This is used to limit a space occupied by series like column.
         *
         * @todo Description (review)
         * @param {number} value Cell end (0-1)
         */
        set: function (value) {
            this.setPropertyValue("cellEndLocation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "inversed", {
        /**
         * Returns currently set `inversed` setting.
         *
         * @return {boolean} Flip axis?
         */
        get: function () {
            return this.getPropertyValue("inversed");
        },
        /**
         * Sets if the scale of the axis should be flipped.
         *
         * @param {boolean} value Flip axis?
         */
        set: function (value) {
            this.setPropertyValue("inversed", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "minLabelPosition", {
        /**
         * Returns currently set min label position.
         *
         * @return {number} Min label position (0-1)
         */
        get: function () {
            return this.getPropertyValue("minLabelPosition");
        },
        /**
         * Sets a minimum position along the Axis, for labels.
         *
         * Labels, which have their position closer to the start of the Axis, will be
         * automatically hidden.
         *
         * E.g., setting this to 0.05 (5% of total axis length) would hide labels,
         * that would otherwise be drawn very near start of the Axis.
         *
         * This is especially usefull with `inside = true`, or if the chart hasn't
         * got any extra margins.
         *
         * @param {number} value Min label position (0-1)
         */
        set: function (value) {
            this.setPropertyValue("minLabelPosition", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "maxLabelPosition", {
        /**
         * Returns currently set max label position.
         *
         * @return {number} Max label position (0-1)
         */
        get: function () {
            return this.getPropertyValue("maxLabelPosition");
        },
        /**
         * Sets a maximum position along the Axis, for labels.
         *
         * Labels, which have their position closer to the and of the Axis, will be
         * automatically hidden.
         *
         * E.g., setting this to 0.95 (95% of total axis length) would hide labels,
         * that would otherwise be drawn very near end of the Axis.
         *
         * This is especially usefull with `inside = true`, or if the chart hasn't
         * got any extra margins.
         *
         * @param {number} value Max label position (0-1)
         */
        set: function (value) {
            this.setPropertyValue("maxLabelPosition", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all settings and related items from another object of the same
     * type.
     *
     * @param {this}  source  Source object
     */
    AxisRenderer.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.grid.template.copyFrom(source.grid.template);
        this.ticks.template.copyFrom(source.ticks.template);
        this.labels.template.copyFrom(source.labels.template);
        this.axisFills.template.copyFrom(source.axisFills.template);
        this.line.copyFrom(source.line);
        this.baseGrid.copyFrom(source.baseGrid);
    };
    return AxisRenderer;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_8__core_Registry__["a" /* registry */].registeredClasses["AxisRenderer"] = AxisRenderer;
//# sourceMappingURL=AxisRenderer.js.map

/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRendererX; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisRenderer__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedRectangle__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__ = __webpack_require__(5);
/**
 * Module, defining Axis Renderer for vertical axes.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A renderer for horizontal axis.
 *
 * @see {@link IAxisRendererEvents} for a list of available events
 * @see {@link IAxisRendererAdapters} for a list of available Adapters
 */
var AxisRendererX = /** @class */ (function (_super) {
    __extends(AxisRendererX, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRendererX(axis) {
        var _this = _super.call(this, axis) || this;
        _this.className = "AxisRendererX";
        _this.minGridDistance = 120;
        _this.opposite = false;
        _this.rotation = 0;
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        axis.layout = "vertical"; // in order to properly position title, as title goes to axis, not renderer
        _this.labels.template.horizontalCenter = "middle";
        _this.applyTheme();
        return _this;
    }
    /**
     * Called when rendered is attached to an Axis, as well as a property of
     * Axis that might affect the appearance is updated.
     *
     * E.g. `axis.opposite`, `axis.inside`, etc.
     *
     * This method is called **before** draw, so that any related setting
     * changed in this method can be changed.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRendererX.prototype.processRenderer = function () {
        _super.prototype.processRenderer.call(this);
        // can not do this in init, as axis is set later
        var axis = this.axis;
        if (axis) {
            axis.width = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
            // @todo Is thi sneeded?
            this.line;
            var title = axis.title;
            title.rotation = 0;
            title.align = "center";
            if (this.opposite) {
                this.line.toFront();
                title.toBack();
            }
            else {
                title.toFront();
                this.line.toBack();
            }
        }
    };
    /**
     * Updates some of the Axis tooltip's visual properties, related to
     * rendering of the Axis.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRendererX.prototype.updateTooltip = function () {
        var axis = this.axis;
        if (axis) {
            var bigNum = 1000;
            var bbx = this.line.pixelX;
            var bby = this.line.pixelY;
            var bbw = this.pixelWidth;
            var bbh = bigNum;
            // top
            if (this.opposite) {
                if (!this.inside) {
                    bby = -bigNum;
                    bbh = bigNum;
                }
            }
            // bottom
            else {
                if (this.inside) {
                    bby = -bigNum;
                    bbh = bigNum;
                }
            }
            this.axis.updateTooltip("vertical", { x: bbx, y: bby, width: bbw, height: bbh });
        }
    };
    /**
     * Updates and positions a label element.
     *
     * @ignore Exclude from docs
     * @param {AxisLabel}  label        Label element
     * @param {number}     position     Starting position
     * @param {number}     endPosition  Ending position
     */
    AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition) {
        position = position + (endPosition - position) * label.location;
        var point = this.positionToPoint(position);
        label.isMeasured = !label.inside;
        if (!this.opposite && label.inside) {
            label.verticalCenter = "bottom";
        }
        this.positionItem(label, point);
        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);
    };
    Object.defineProperty(AxisRendererX.prototype, "axisLength", {
        /**
         * Returns actual length of the Axis, in pixels.
         *
         * @return {number} Length (px)
         */
        get: function () {
            var axis = this.axis;
            return axis.pixelWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position on axis to point coordinates.
     *
     * @param  {number}  position  Position (0-1)
     * @return {IPoint}            Point
     */
    AxisRendererX.prototype.positionToPoint = function (position) {
        return { x: this.positionToCoordinate(position), y: 0 };
    };
    /**
     * Converts a point at specific coordinates to a relative position (0-1)
     * on the axis.
     *
     * @param  {IPoint}  point  Point
     * @return {number}         Position (0-1)
     */
    AxisRendererX.prototype.pointToPosition = function (point) {
        return this.coordinateToPosition(point.x);
    };
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  startPosition  Starting position
     * @param  {number}  endPosition    End position
     * @return {string}                 SVG path
     */
    AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {
        var x1 = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](this.positionToCoordinate(startPosition), 0, this.axisLength);
        var x2 = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](this.positionToCoordinate(endPosition), 0, this.axisLength);
        var w = Math.abs(x2 - x1);
        var h = this.gridContainer.pixelHeight;
        var x = Math.min(x1, x2);
        var y = 0;
        return __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["rectToPath"]({
            x: x,
            y: y,
            width: w,
            height: h
        }, true);
    };
    /**
     * Updates and positions an axis break element.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Break element
     */
    AxisRendererX.prototype.updateBreakElement = function (axisBreak) {
        _super.prototype.updateBreakElement.call(this, axisBreak);
        var startLine = axisBreak.startLine;
        var endLine = axisBreak.endLine;
        var fillShape = axisBreak.fillShape;
        var startPoint = axisBreak.startPoint;
        var endPoint = axisBreak.endPoint;
        var y1 = axisBreak.pixelMarginLeft;
        var y2 = this.gridContainer.pixelHeight - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;
        startLine.y = y1;
        startLine.width = 0;
        startLine.height = y2;
        endLine.y = y1;
        endLine.width = 0;
        endLine.height = y2;
        fillShape.height = Math.abs(y2 - y1);
        fillShape.width = Math.abs(endPoint.x - startPoint.x);
        fillShape.y = y1;
        fillShape.x = startPoint.x;
    };
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {
        position = position + (endPosition - position) * grid.location;
        var point = this.positionToPoint(position);
        if (grid.element) {
            grid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: 0, y: this.gridContainer.pixelHeight }) });
        }
        this.positionItem(grid, point);
        this.toggleVisibility(grid, position, 0, 1);
    };
    /**
     * Updates and positions a tick element.
     *
     * @ignore Exclude from docs
     * @param {AxisTick}  tick         Tick element
     * @param {number}    position     Starting position
     * @param {number}    endPosition  End position
     */
    AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {
        position = position + (endPosition - position) * tick.location;
        var point = this.positionToPoint(position);
        var tickLength = tick.length;
        if (this.opposite) {
            point.y = this.pixelHeight;
            tickLength *= (tick.inside ? 1 : -1);
        }
        else {
            tickLength *= (tick.inside ? -1 : 1);
        }
        tick.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: 0, y: tickLength }) });
        this.positionItem(tick, point);
        this.toggleVisibility(tick, position, 0, 1);
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererX.prototype.updateAxisLine = function () {
        var element = this.line.element;
        if (element) {
            element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: this.axisLength, y: 0 }) });
        }
    };
    /**
     * Updates and positions the base grid element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererX.prototype.updateBaseGridElement = function () {
        _super.prototype.updateBaseGridElement.call(this);
        var axis = this.axis;
        var h = this.gridContainer.pixelHeight;
        var w = this.gridContainer.pixelWidth;
        var baseGrid = this.baseGrid;
        var x = axis.basePoint.x;
        if (x < 0 || x > w) {
            baseGrid.hide(0);
        }
        else {
            var y = __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__["spritePointToSprite"]({ x: 0, y: 0 }, this.gridContainer, this).y;
            baseGrid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: 0, y: h }) });
            baseGrid.moveTo({ x: x, y: y });
            baseGrid.show(0);
        }
    };
    /**
     * Creates visual elements for and axis break.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Axis break
     */
    AxisRendererX.prototype.createBreakSprites = function (axisBreak) {
        axisBreak.startLine = new __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__["a" /* WavedLine */]();
        axisBreak.endLine = new __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__["a" /* WavedLine */]();
        var wavedRectangle = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedRectangle__["a" /* WavedRectangle */]();
        wavedRectangle.setWavedSides(false, true, false, true);
        axisBreak.fillShape = wavedRectangle;
    };
    Object.defineProperty(AxisRendererX.prototype, "inside", {
        /**
         * Returns current setting for `inside`.
         *
         * @return {boolean} Labels inside?
         */
        get: function () {
            return this.getPropertyValue("inside");
        },
        /**
         * Sets if Axis labels should be drawn inside Axis.
         *
         * @param {boolean} value Labels inside?
         */
        set: function (value) {
            this.setPropertyValue("inside", value);
            this.minHeight = value ? undefined : 40;
        },
        enumerable: true,
        configurable: true
    });
    return AxisRendererX;
}(__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__["a" /* AxisRenderer */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["a" /* registry */].registeredClasses["AxisRendererX"] = AxisRendererX;
//# sourceMappingURL=AxisRendererX.js.map

/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SerialChartDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SerialChart; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Chart__ = __webpack_require__(142);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__series_Series__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__ = __webpack_require__(4);
/**
 * Serial chart module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[SerialChart]].
 *
 * @see {@link DataItem}
 */
var SerialChartDataItem = /** @class */ (function (_super) {
    __extends(SerialChartDataItem, _super);
    /**
     * Constructor
     */
    function SerialChartDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "SerialChartDataItem";
        _this.applyTheme();
        return _this;
    }
    return SerialChartDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Chart__["b" /* ChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all series-based charts, like XY, Pie, etc.
 *
 * Is not useful on its own.
 *
 * @see {@link ISerialChartEvents} for a list of available Events
 * @see {@link ISerialChartAdapters} for a list of available Adapters
 */
var SerialChart = /** @class */ (function (_super) {
    __extends(SerialChart, _super);
    /**
     * Constructor
     */
    function SerialChart() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "SerialChart";
        _this.colors = new __WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__["a" /* ColorSet */]();
        // Create a container for series
        var seriesContainer = _this.chartContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__core_Container__["a" /* Container */]);
        seriesContainer.shouldClone = false;
        seriesContainer.width = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        seriesContainer.height = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        seriesContainer.isMeasured = false;
        seriesContainer.layout = "none";
        _this.seriesContainer = seriesContainer;
        // Create a container for bullets
        var bulletsContainer = _this.chartContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__core_Container__["a" /* Container */]);
        bulletsContainer.shouldClone = false;
        bulletsContainer.width = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        bulletsContainer.height = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        bulletsContainer.isMeasured = false;
        bulletsContainer.layout = "none";
        _this.bulletsContainer = bulletsContainer;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor
     */
    SerialChart.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        this.readerTitle = this.language.translate("Serial chart");
    };
    Object.defineProperty(SerialChart.prototype, "series", {
        /**
         * A list of chart's series.
         *
         * @return {List} Chart's series
         */
        get: function () {
            if (!this._series) {
                this._series = new __WEBPACK_IMPORTED_MODULE_1__core_utils_List__["e" /* ListTemplate */](this.createSeries());
                this._series.events.on("insert", this.processSeries, this);
            }
            return this._series;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Decorates a new [[Series]] object with required parameters when it is
     * added to the chart.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Series>["insert"]}  event  Event
     * @todo Consider renaming to "handle*" as it would suit event handler better
     */
    SerialChart.prototype.processSeries = function (event) {
        var series = event.newValue;
        series.chart = this;
        series.parent = this.seriesContainer;
        series.bulletsContainer.parent = this.bulletsContainer;
        this._dataUsers.moveValue(series);
    };
    /**
     * Setups the legend to use the chart's data.
     */
    SerialChart.prototype.feedLegend = function () {
        var legend = this.legend;
        if (legend) {
            var legendData_1 = [];
            __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
                legendData_1.push(series);
            });
            legend.dataFields.name = "name";
            legend.itemContainers.template.propertyFields.disabled = "hiddenInLegend";
            legend.data = legendData_1;
        }
    };
    /**
     * Creates and returns a new Series, suitable for this chart type.
     *
     * @return {this} New series
     */
    SerialChart.prototype.createSeries = function () {
        return new __WEBPACK_IMPORTED_MODULE_3__series_Series__["a" /* Series */]();
    };
    Object.defineProperty(SerialChart.prototype, "colors", {
        /**
         * @return {ColorSet} Color list
         */
        get: function () {
            return this.getPropertyValue("colors");
        },
        /**
         * Chart's color list.
         *
         * This list can be used by a number of serial items, like applying a new
         * color for each Series added. Or, applying a new color for each slice
         * of a Pie chart.
         *
         * Please see [[ColorSet]] for information on how you can set up to generate
         * unique colors.
         *
         * A theme you are using may override default pre-defined colors.
         *
         * @param {ColorSet} value Color list
         */
        set: function (value) {
            this.setPropertyValue("colors", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all parameters from another [[SerialChart]].
     *
     * @param {SerialChart} source Source SerialChart
     */
    SerialChart.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.series.copyFrom(source.series);
    };
    return SerialChart;
}(__WEBPACK_IMPORTED_MODULE_0__Chart__["a" /* Chart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_6__core_Registry__["a" /* registry */].registeredClasses["SerialChart"] = SerialChart;
//# sourceMappingURL=SerialChart.js.map

/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SpriteState; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_filters_Filter__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Ease__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Type__ = __webpack_require__(2);
/**
 * Module contains functionality related to [[Sprite]] states.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * Defines a state for [[Sprite]].
 *
 * A "state" is a special object that has all the same properties as the
 * [[Sprite]] of the same type, and which can be used to quickly apply a set
 * of property values. (set state)
 *
 * When [[Sprite]] (or any object that extends Sprite) is created it creates a
 * "default" state. You can modify the "default" state so that when the Sprite
 * returns to default state certain properties are added.
 *
 * Default state can be accessed using Sprite's `defaultState` getter.
 *
 * ```
 * sprite.defaultState.fillOpacity = 0.5;
 * ```
 *
 * If Sprite is "hoverable", it automatically adds a "hover" state, which is
 * applied when it has a cursor over it.
 *
 * ```
 * let hoverstate = sprite.states.create("hover");
 * hoverstate.fillOpacity = 1;
 * ```
 *
 * The above will automatically apply "hover" state when the Sprite is hovered,
 * thus will set its `fillOpacity` property to 1, and will reset it to 0.5 when
 * it's no longer hovered.
 *
 * Every object that inherits from [[Sprite]] can and will add their own
 * properties to the available list.
 *
 * User can create their own states, and apply them as needed:
 *
 * ```
 * let myCustomState = sprite.states.create("mystate");
 * myCustomState.fillOpacity = 0.5;
 * myCustomState.strokeOpacity = 0.8;
 * sprite.setState("mystate");
 * ```
 *
 * @see {@link SpriteState}
 * @important
 */
var SpriteState = /** @class */ (function (_super) {
    __extends(SpriteState, _super);
    /**
     * Constructor
     */
    function SpriteState() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds Adapter.
         *
         * @type {Adapter<Sprite, SpriteAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Duration of the transition to this state. 0 means instantenous transition.
         * Any number means the [[Sprite]] will transit smoothly to this state,
         * animating all animatable properties.
         *
         * @type {number}
         */
        _this.transitionDuration = 0;
        /**
         * Easing function to use when transitioning to this state.
         *
         * @see {@link Ease}
         * @type {(number) => number}
         */
        _this.easing = __WEBPACK_IMPORTED_MODULE_6__utils_Ease__["cubicOut"];
        /**
         * Collection of properties and their values that should be applied to [[Sprite]]
         * when switching to this State.
         *
         * The property values set on a [[SpriteState]] will override the ones set
         * directly on a [[Sprite]].
         *
         * @type {Dictionary<string, any>}
         */
        _this.properties = {};
        /**
         * A collection of key/value pairs that can be used to bind specific Sprite
         * properties to [[DataItem]].
         *
         * For example: `fill` property can be bound to `myCustomColor` field in
         * DataItem. The Sprite will automatically get the value for `fill` from its
         * DataItem.
         *
         * SpriteState-specific binding will override binding set directly on
         * [[Sprite]]. I.e. you can make Sprite use different fill color on hover by
         * adding a `fill` binding to a different DataItem key for Sprite's "hover"
         * state object.
         *
         * @see {@link Sprite}
         * @type {Object}
         */
        _this.propertyFields = {};
        //public propertyFields: Dictionary<keyof this["_properties"], string> = new Dictionary<keyof this["_properties"], string>();;
        /**
         * A list of [[Filter]] elements to be applied to the relative [[Sprite]]
         * when switching to this State.
         *
         * @param {ListTemplate<Filter>}
         */
        _this.filters = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_3__rendering_filters_Filter__["a" /* Filter */]());
        _this.className = "SpriteState";
        // Make filter list disposable
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_2__utils_List__["c" /* ListDisposer */](_this.filters));
        // Decorate adapter with events so that we can apply its settings whenever
        // it is modified
        _this.adapter.events.on("insert", function (ev) {
            _this[ev.newValue.key] = _this[ev.newValue.key];
        });
        _this.adapter.events.on("remove", function (ev) {
            _this[ev.newValue.key] = _this[ev.newValue.key];
        });
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns [[Sprite]] element's property value.
     *
     * Will check if there are any bindings with [[DataItem]] and if there are
     * any method callbacks set up for the specific property.
     *
     * @param  {Properties}  propertyName  Property name
     * @return {any}                       Property value
     */
    SpriteState.prototype.getPropertyValue = function (propertyName) {
        var propValue = this.properties[propertyName];
        var sprite = this.sprite;
        var fieldName = this.propertyFields[propertyName];
        if (sprite) {
            if (__WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](fieldName)) {
                if (sprite.dataItem) {
                    propValue = sprite.dataItem.dataContext[fieldName];
                }
            }
            // Apply adapters
            // If the value itself is undefined, we're going to pass in Sprite's
            // value to adapters
            // @todo get rid of <any>
            if (!__WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](propValue)) {
                var spriteValue = sprite.getPropertyValue(propertyName);
                propValue = this.adapter.apply(propertyName, sprite.getPropertyValue(propertyName));
                if (propValue == spriteValue) {
                    propValue = undefined;
                }
            }
            else {
                propValue = this.adapter.apply(propertyName, propValue);
            }
            /*let method = this.propertyMethods.getKey(propertyName);
            if (method) {
                propValue = method(sprite, propertyName);
            }*/
        }
        return propValue;
    };
    /**
     * Copies all property and style values from another [[SpriteState]] object.
     *
     * @param {SpriteState}  source  Source [[SpriteState]]
     */
    SpriteState.prototype.copyFrom = function (source) {
        if (source != this) {
            this.transitionDuration = source.transitionDuration;
            this.easing = source.easing;
            __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["copyProperties"](source.properties, this.properties);
            __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["copyProperties"](source.propertyFields, this.propertyFields);
            this.filters.copyFrom(source.filters);
            this.adapter.copyFrom(source.adapter);
        }
    };
    Object.defineProperty(SpriteState.prototype, "allValues", {
        /**
         * Returns all values that should be applied by the SpriteState.
         *
         * It takes adapters into account.
         *
         * @ignore Exclude from docs
         * @return {ISpriteProperties} Properties
         * @todo Add adapter values
         * @todo proper type this["_properties"]
         */
        get: function () {
            var _this = this;
            // Init return value
            var res = {};
            // Apply adapters to all values
            __WEBPACK_IMPORTED_MODULE_7__utils_Object__["each"](this.properties, function (prop, value) {
                res[prop] = _this.getPropertyValue(prop);
            });
            // Cycle through all adapters and add values for missing properties
            var keys = this.adapter.keys;
            for (var x in keys) {
                var prop = keys[x];
                var value = this.getPropertyValue(prop);
                res[prop] = value;
            }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the State to initial state - no values or Filters applied.
     */
    SpriteState.prototype.reset = function () {
        this.properties = {};
        this.filters.clear();
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    SpriteState.prototype.processConfig = function (config) {
        if (__WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](config) && __WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](config["properties"])) {
            __WEBPACK_IMPORTED_MODULE_7__utils_Object__["each"](config["properties"], function (key, value) {
                if (__WEBPACK_IMPORTED_MODULE_8__utils_Type__["isString"](value)) {
                    if (value.match(/^[0-9.\-]+\%$/)) {
                        config["properties"][key] = __WEBPACK_IMPORTED_MODULE_8__utils_Type__["percent"](__WEBPACK_IMPORTED_MODULE_8__utils_Type__["toNumber"](value));
                    }
                    else if (value.match(/^\#[0-9abcdef]{3,}$/i)) {
                        config["properties"][key] = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Color__["e" /* toColor */])(value);
                    }
                }
            });
        }
        _super.prototype.processConfig.call(this, config);
    };
    return SpriteState;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=SpriteState.js.map

/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["order"] = order;
/* harmony export (immutable) */ __webpack_exports__["repeat"] = repeat;
/**
 * ============================================================================
 * COMPARING FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Comparing function used for ordering.
 *
 * @ignore Exclude from docs
 * @todo Use localeCompare
 * @param  {string}    a  Item 1
 * @param  {string}    b  Item 2
 * @return {Ordering}     Result
 */
function order(a, b) {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
}
/**
 * ============================================================================
 * OTHER FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Repeats a `string` number of times as set in `amount`.
 *
 * @ignore Exclude from docs
 * @todo Make this faster
 * @param  {string}  string  Source string
 * @param  {number}  amount  Number of times to repeat string
 * @return {string}          New string
 */
function repeat(string, amount) {
    return new Array(amount + 1).join(string);
}
//# sourceMappingURL=String.js.map

/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OrderedList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SortedList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return OrderedListTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SortedListTemplate; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Type__ = __webpack_require__(2);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * Ordered list contains values of any type in an indexed array.
 */
var OrderedList = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param {Array<T>}  initial  Inital list of values to add to list
     */
    function OrderedList(initial) {
        /**
         * Holds list values.
         *
         * @type {Array<T>}
         */
        this._values = [];
        /**
         * Event dispatcher.
         *
         * @type {EventDispatcher<AMEvent<OrderedList<T>, ISortedListEvents<T>>>}
         */
        this.events = new __WEBPACK_IMPORTED_MODULE_0__EventDispatcher__["a" /* EventDispatcher */]();
        if (initial != null) {
            this.setAll(initial);
        }
    }
    Object.defineProperty(OrderedList.prototype, "values", {
        /**
         * All items of the list.
         *
         * Do not modify the list directly. Rather use `insert()` and `remove()`
         * methods.
         *
         * @return {Array<T>} List values
         */
        get: function () {
            return this._values;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Inserts a value into list item array.
     *
     * @param {T}  value  Value
     */
    OrderedList.prototype._insert = function (value) {
        this._values.push(value);
    };
    Object.defineProperty(OrderedList.prototype, "length", {
        /**
         * Number of items in the list.
         *
         * @readonly
         * @return {number} Length
         */
        get: function () {
            return this._values.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the index of the specific `value`.
     *
     * -1 if not found.
     *
     * @param  {T}       value  Value
     * @return {number}        Index
     */
    OrderedList.prototype.indexOf = function (value) {
        return __WEBPACK_IMPORTED_MODULE_1__Array__["g" /* indexOf */](this._values, value);
    };
    /**
     * Checks if list contains the `value`.
     *
     * @param  {T}        value  Value
     * @return {boolean}         In the list?
     */
    OrderedList.prototype.contains = function (value) {
        return this.indexOf(value) !== -1;
    };
    /**
     * Returns an item at specific `index`.
     *
     * @param  {number}  index  Index
     * @return {T}              Item
     */
    OrderedList.prototype.getIndex = function (index) {
        return this._values[index];
    };
    Object.defineProperty(OrderedList.prototype, "first", {
        /**
         * First item in the list.
         *
         * @return {T} Item
         */
        get: function () {
            return this._values[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OrderedList.prototype, "last", {
        /**
         * Last item in the list.
         *
         * @return {T} Item
         */
        get: function () {
            return this._values[this._values.length - 1];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Inserts a value into list.
     *
     * @param {T}  value  Value
     */
    OrderedList.prototype.insert = function (value) {
        this._insert(value);
        if (this.events.isEnabled("insert")) {
            this.events.dispatchImmediately("insert", {
                type: "insert",
                target: this,
                newValue: value
            });
        }
    };
    /**
     * Removes an item with the `value` from the list.
     *
     * @param {T}  value  Value
     */
    OrderedList.prototype.remove = function (value) {
        var index = this.indexOf(value);
        if (index !== -1) {
            var oldValue = this._values[index];
            __WEBPACK_IMPORTED_MODULE_1__Array__["l" /* removeIndex */](this._values, index);
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
        }
    };
    /**
     * Sets multiple items to the list.
     *
     * All current items are removed.
     *
     * @param {Array<T>}  newArray  New items
     */
    OrderedList.prototype.setAll = function (newArray) {
        var _this = this;
        var oldArray = __WEBPACK_IMPORTED_MODULE_1__Array__["a" /* copy */](this._values);
        this._values.length = 0;
        __WEBPACK_IMPORTED_MODULE_1__Array__["b" /* each */](newArray, function (value) {
            _this._insert(value);
        });
        if (this.events.isEnabled("remove")) {
            __WEBPACK_IMPORTED_MODULE_1__Array__["b" /* each */](oldArray, function (x) {
                _this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: _this,
                    oldValue: x
                });
            });
        }
        if (this.events.isEnabled("insert")) {
            __WEBPACK_IMPORTED_MODULE_1__Array__["b" /* each */](this._values, function (x) {
                _this.events.dispatchImmediately("insert", {
                    type: "insert",
                    target: _this,
                    newValue: x
                });
            });
        }
    };
    /**
     * Removes all items from the list.
     */
    OrderedList.prototype.clear = function () {
        this.setAll([]);
    };
    /**
     * Returns part of the list between `start` and `end` indexes, as a new
     * [[OrderedList]].
     *
     * @param  {number}          start  Start index
     * @param  {number}          end    End index
     * @return {OrderedList<T>}         Items in range
     */
    OrderedList.prototype.slice = function (start, end) {
        var out = new OrderedList();
        out._values = this._values.slice(start, end);
        return out;
    };
    /**
     * Finds a closest available index to the `value` in specified direction.
     *
     * @ignore exclude from docs
     * @param  {number}                      value      value to search for
     * @param  {function}                    fn         A callback function that returns value of the item
     * @param  {"left" | "right" |  "any" }  direction  Direciton
     * @return {number}                                 Index
     */
    OrderedList.prototype.findClosestIndex = function (value, fn, direction) {
        if (direction === void 0) { direction = "any"; }
        // Init temporary values
        var closestIndex = -1;
        var closestValue;
        var closestDifference;
        var i = 0;
        __WEBPACK_IMPORTED_MODULE_2__Iterator__["eachContinue"](this.iterator(), function (element) {
            var item = fn(element);
            // Exact match?
            if (item === value) {
                // Found exact value - don't bother searching further
                closestIndex = i;
                return false;
            }
            // Calc difference
            if (direction === "any") {
                var difference = Math.abs(value - item);
                if (!__WEBPACK_IMPORTED_MODULE_3__Type__["hasValue"](closestDifference) || (closestDifference > difference)) {
                    closestIndex = i;
                    closestValue = item;
                    closestDifference = difference;
                }
            }
            else if (direction === "left" && (item < value)) {
                if (!__WEBPACK_IMPORTED_MODULE_3__Type__["hasValue"](closestValue) || (closestValue < item)) {
                    closestIndex = i;
                    closestValue = item;
                }
            }
            else if (direction === "right" && (item > value)) {
                if (!__WEBPACK_IMPORTED_MODULE_3__Type__["hasValue"](closestValue) || (closestValue > item)) {
                    closestIndex = i;
                    closestValue = item;
                }
            }
            ++i;
            return true;
        });
        // Found nothing?
        if (closestIndex === -1) {
            if (direction === "left") {
                // Use First one
                closestIndex = 0;
            }
            else if (direction === "right") {
                // Use last item
                closestIndex = this.length - 1;
            }
        }
        return closestIndex;
    };
    /**
     * Returns a list iterator.
     *
     * @return {Iterator} Iterator
     */
    OrderedList.prototype.iterator = function () {
        return __WEBPACK_IMPORTED_MODULE_2__Iterator__["fromArray"](this._values);
    };
    return OrderedList;
}());

/**
 * A list where all items are ordered according to specific ordering function,
 * which is passed in via constructor parameter, when creating an instance of
 * [[SortedList]].
 */
var SortedList = /** @class */ (function (_super) {
    __extends(SortedList, _super);
    /**
     * Constructor.
     *
     * @param {T) => Ordering}  sort  Ordering function
     */
    function SortedList(sort) {
        var _this = _super.call(this) || this;
        _this._ordering = sort;
        return _this;
    }
    /**
     * Inserts item into the list.
     *
     * @param {T}  value  Item
     */
    SortedList.prototype._insert = function (value) {
        var _a = __WEBPACK_IMPORTED_MODULE_1__Array__["f" /* getSortedIndex */](this._values, this._ordering, value), found = _a.found, index = _a.index;
        // @todo maybe allow for multiple items which are equal ?
        if (found) {
            // @todo pretty printing
            throw new Error("Value already exists: " + value);
        }
        else {
            __WEBPACK_IMPORTED_MODULE_1__Array__["h" /* insertIndex */](this._values, index, value);
        }
    };
    /**
     * Returns index of the item in list if found.
     *
     * -1 if item is not in the list.
     *
     * @param  {T}       value  Item to search for
     * @return {number}         Index
     */
    SortedList.prototype.indexOf = function (value) {
        var _a = __WEBPACK_IMPORTED_MODULE_1__Array__["f" /* getSortedIndex */](this._values, this._ordering, value), found = _a.found, index = _a.index;
        if (found) {
            return index;
        }
        else {
            return -1;
        }
    };
    /**
     * [udpate description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {T} value [description]
     */
    SortedList.prototype.update = function (value) {
        // @todo test this
        var index = __WEBPACK_IMPORTED_MODULE_1__Array__["g" /* indexOf */](this._values, value);
        // @todo throw an error if it doesn't exist ?
        if (index !== -1) {
            var last = this._values.length - 1;
            // Check if the current ordering is correct
            if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) &&
                (index === last || this._ordering(value, this._values[index + 1]) < 0))) {
                __WEBPACK_IMPORTED_MODULE_1__Array__["l" /* removeIndex */](this._values, index);
                this._insert(value);
            }
        }
    };
    return SortedList;
}(OrderedList));

/**
 * A version of a [[OrderedList]] that has a "template".
 *
 * A template is an instance of an object, that can be used to create new
 * elements in the list without actually needing to create instances for those.
 *
 * When new element is created in the list, e.g. by calling its `create()`
 * method, an exact copy of the element is created (including properties and
 * other attributes), inserted into the list and returned.
 */
var OrderedListTemplate = /** @class */ (function (_super) {
    __extends(OrderedListTemplate, _super);
    /**
     * Constructor
     *
     * @param {T} t Template object
     */
    function OrderedListTemplate(t) {
        var _this = _super.call(this) || this;
        _this.template = t;
        return _this;
    }
    Object.defineProperty(OrderedListTemplate.prototype, "template", {
        /**
         * @return {T} Template object
         */
        get: function () {
            return this._template;
        },
        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param {T}  v  Template object
         */
        set: function (v) {
            v.isTemplate = true;
            this._template = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all elements from other list.
     *
     * @param {OrderedListTemplate}  source  Source list
     */
    OrderedListTemplate.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_2__Iterator__["each"](source.iterator(), function (value) {
            _this.insert(value.clone());
        });
    };
    /**
     * Returns part of the list, starting at `start` and ending at `end` indexes,
     * as a new [[OrderedListTemplate]].
     *
     * @param  {number}                  start  Start index
     * @param  {number}                  end    End index
     * @return {OrderedListTemplate<T>}         New list
     */
    OrderedListTemplate.prototype.slice = function (start, end) {
        var out = new OrderedListTemplate(this.template);
        out._values = this._values.slice(start, end);
        return out;
    };
    OrderedListTemplate.prototype.create = function (make) {
        var clone = (make != null
            ? new make()
            : this.template.clone());
        this.insert(clone);
        return clone;
    };
    return OrderedListTemplate;
}(OrderedList));

/**
 * A version of a [[SortedList]] that has a "template".
 *
 * A template is an instance of an object, that can be used to create new
 * elements in the list without actually needing to create instances for those.
 *
 * When new element is created in the list, e.g. by calling its `create()`
 * method, an exact copy of the element is created (including properties and
 * other attributes), inserted into the list and returned.
 */
var SortedListTemplate = /** @class */ (function (_super) {
    __extends(SortedListTemplate, _super);
    /**
     * Constructor
     *
     * @param {T}         t     Template object
     * @param {function}  sort  Ordering function
     */
    function SortedListTemplate(t, sort) {
        var _this = _super.call(this, sort) || this;
        _this.template = t;
        return _this;
    }
    Object.defineProperty(SortedListTemplate.prototype, "template", {
        /**
         * @return {T} Template object
         */
        get: function () {
            return this._template;
        },
        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param {T}  v  Template object
         */
        set: function (v) {
            v.isTemplate = true;
            this._template = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all elements from other list.
     *
     * @param {SortedListTemplate}  source  Source list
     */
    SortedListTemplate.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_2__Iterator__["each"](source.iterator(), function (value) {
            _this.insert(value.clone());
        });
    };
    SortedListTemplate.prototype.create = function (make) {
        var clone = (make != null
            ? new make()
            : this.template.clone());
        this.insert(clone);
        return clone;
    };
    return SortedListTemplate;
}(SortedList));

//# sourceMappingURL=SortedList.js.map

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = reverse;
/* harmony export (immutable) */ __webpack_exports__["a"] = or;
/**
 * A collection of functions for ordering.
 */
/**
 * [reverse description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {Ordering}  a  [description]
 * @return {Ordering}     [description]
 */
function reverse(a) {
    switch (a) {
        case 0:
            return 0;
        case -1:
            return 1;
        case 1:
            return -1;
    }
}
/**
 * [or description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {Ordering}  a  Item 1
 * @param  {Ordering}  b  Item 2
 * @return {Ordering}     [description]
 */
function or(a, b) {
    if (a === 0) {
        return b;
    }
    else {
        return a;
    }
}
//# sourceMappingURL=Order.js.map

/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Paper; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AMElement__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Group__ = __webpack_require__(201);
/**
 * Paper class just like the white sheet of pressed fiber it draws its name
 * inspiration from is used as a starting point to start a drawing.
 *
 * Before we can start adding elements (drawing) we need to take out a new sheet
 * of paper, or in this instance create a blank SVG element.
 *
 * This class creates such element, as well as implements methods needed to
 * start adding elements to it.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Paper class which when instantiated will create an SVG element as well as
 * some of the sub-elements like `<desc>`, `<defs>`.
 *
 * Use its methods like `addGroup` and `append` to add elements to the paper.
 */
var Paper = /** @class */ (function () {
    /**
     * Creates main `<svg>` container and related elements.
     *
     * @param {HTMLElement} container A reference to HTML element to create `<svg>` in
     */
    function Paper(container) {
        // Store container reference
        this.container = container;
        // Create SVG element
        var svg = document.createElementNS(Paper.SVGNS, "svg");
        svg.setAttribute("version", "1.1");
        svg.setAttributeNS(Paper.XMLNS, "xmlns", Paper.SVGNS);
        svg.setAttributeNS(Paper.XMLNS, "xmlns:xlink", Paper.XLINK);
        svg.setAttribute("role", "group");
        this.container.appendChild(svg);
        // Add description
        var desc = document.createElementNS(Paper.SVGNS, "desc");
        desc.appendChild(document.createTextNode("JavaScript chart by amCharts"));
        svg.appendChild(desc);
        // Add defs
        this.defs = document.createElementNS(Paper.SVGNS, "defs");
        svg.appendChild(this.defs);
        // Set width and height to fit container
        svg.style.width = "100%";
        svg.style.height = "100%";
        svg.style.overflow = "visible";
        // Store variable
        this.svg = svg;
    }
    /**
     * Creates and returns a new element. Does not attach it to Paper yet.
     *
     * @param  {SVGElementNames}  elementName  Element name
     * @return {AMElement}                     New element
     */
    Paper.prototype.add = function (elementName) {
        return new __WEBPACK_IMPORTED_MODULE_0__AMElement__["a" /* AMElement */](elementName);
    };
    /**
     * Creates and returns a new Group element. Does not attach it to Paper.
     *
     * @param  {SVGElementNames}  groupName  Element name
     * @return {Group}                       New Group
     */
    Paper.prototype.addGroup = function (groupName) {
        return new __WEBPACK_IMPORTED_MODULE_1__Group__["a" /* Group */](groupName);
    };
    /**
     * Appends an element to Paper.
     *
     * @param {AMElement} element Element to append
     */
    Paper.prototype.append = function (element) {
        if (element) {
            this.svg.appendChild(element.node);
        }
    };
    /**
     * Appends an element to `<defs>` block of the Paper.
     *
     * @param {AMElement}  element  Element
     */
    Paper.prototype.appendDef = function (element) {
        if (element) {
            this.defs.appendChild(element.node);
        }
    };
    /**
     * Creates and returns new `<foreignObject>` element. Does not append it to
     * Paper.
     *
     * @return {AMElement} A foreignObject element
     */
    Paper.prototype.foreignObject = function () {
        var element = new __WEBPACK_IMPORTED_MODULE_0__AMElement__["a" /* AMElement */]("foreignObject");
        //this.append(element);
        return element;
    };
    /**
     * Checks if browser supports `<foreignObject>` elements.
     *
     * @return {boolean} Supports `foreignObject`?
     */
    Paper.prototype.supportsForeignObject = function () {
        return document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Extensibility", "1.1");
    };
    /**
     * SVG namespace.
     *
     * @ignore Exclude from docs
     * @type {string}
     */
    Paper.SVGNS = "http://www.w3.org/2000/svg";
    /**
     * XML namespace.
     *
     * @ignore Exclude from docs
     * @type {string}
     */
    Paper.XMLNS = "http://www.w3.org/2000/xmlns/";
    /**
     * XLING namespace.
     *
     * @ignore Exclude from docs
     * @type {string}
     */
    Paper.XLINK = "http://www.w3.org/1999/xlink";
    return Paper;
}());

//# sourceMappingURL=Paper.js.map

/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AMElement; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Paper__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_DOM__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Type__ = __webpack_require__(2);
/**
 * [[AMElement]] represents any SVG element and related functionality.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all SVG elements. Provides low-level DOM functionality.
 *
 * All visual elements extend this class.
 */
var AMElement = /** @class */ (function () {
    /**
     * Constructor creates a new element or uses the one that was passed in.
     *
     * @param {string | SVGSVGElement} element Element reference node type
     */
    function AMElement(element) {
        /**
         * Indicates if the element was already disposed.
         *
         * @type {boolean}
         */
        this._isDisposed = false;
        /**
         * Current X coordinate.
         *
         * @type {number}
         */
        this._x = 0;
        /**
         * Current Y coordinate.
         *
         * @type {number}
         */
        this._y = 0;
        /**
         * Current rotation.
         *
         * @type {number}
         */
        this._rotation = 0;
        /**
         * Current scale.
         *
         * @type {number}
         */
        this._scale = 1;
        if (typeof element === "string") {
            this.node = document.createElementNS(__WEBPACK_IMPORTED_MODULE_0__Paper__["a" /* Paper */].SVGNS, element);
        }
        else {
            this.node = element;
        }
    }
    /**
     * Removes element's node from DOM.
     */
    AMElement.prototype.removeNode = function () {
        if (this.node) {
            if (this.node.parentNode) {
                this.node.parentNode.removeChild(this.node);
            }
        }
    };
    Object.defineProperty(AMElement.prototype, "transformString", {
        /**
         * Returns `transform` attribute of the element.
         *
         * @ignore Exclude from docs
         * @return {string} Transform attribute value
         */
        get: function () {
            if (this.node) {
                return this.node.getAttribute("transform");
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Appply position, rotation and scale properties via elemen's `transform`
     * property
     *
     * @ignore Exclude from docs
     */
    AMElement.prototype.transform = function () {
        var transfromString = "";
        transfromString += "translate(" + this._x + "," + this._y + ")";
        if (this._scale != 1) {
            transfromString += ((transfromString ? " " : "") + "scale(" + this._scale + ")");
        }
        if (this._rotation != 0) {
            transfromString += ((transfromString ? " " : "") + "rotate(" + this._rotation + ")");
        }
        this.node.setAttribute("transform", transfromString);
    };
    /**
     * Returns bounding box of the element.
     *
     * ATTENTION: Bounding box calculations are extremely costly so should be
     * used sparingly and cached whenever possible.
     *
     * @return {IRectangle} Bounding rectangle
     */
    AMElement.prototype.getBBox = function () {
        var bbox = {
            width: 0,
            height: 0,
            x: 0,
            y: 0
        };
        if (this.node) {
            // FF would fail if getBBox() is called without node added to parent
            if (this.node.parentNode) {
                try { // again for ff. TODO: check if this doesn't slow down
                    var svgbbox = this.node.getBBox();
                    bbox.x = svgbbox.x;
                    bbox.y = svgbbox.y;
                    bbox.width = svgbbox.width;
                    bbox.height = svgbbox.height;
                }
                catch (err) {
                }
            }
        }
        return bbox;
    };
    /**
     * Moves the element to new coordinates.
     *
     * @param {number}  x  Target X
     * @param {number}  y  Target Y
     */
    AMElement.prototype.moveTo = function (point) {
        if (point) {
            var x = point.x;
            var y = point.y;
            if ((this._x != x && __WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](x)) || (this._y != y && __WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](y))) {
                this._x = x;
                this._y = y;
                this.transform();
            }
        }
    };
    Object.defineProperty(AMElement.prototype, "content", {
        /**
         * Returns element's contents as SVG markup.
         *
         * @return {string} Contents
         */
        get: function () {
            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers
            return this.node.innerHTML || "";
        },
        /**
         * Element's SVG contents.
         *
         * @param {string} value Contents
         */
        set: function (value) {
            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers
            this.node.innerHTML = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "textContent", {
        /**
         * @return {string} Text contents
         */
        get: function () {
            return this.node.textContent || "";
        },
        /**
         * Text contents of the SVG element.
         *
         * @param {string} value Text contents
         */
        set: function (value) {
            this.node.textContent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "x", {
        /**
         * @return {number} X coordinate (px)
         */
        get: function () {
            return this._x;
        },
        /**
         * Element's X position in pixels.
         *
         * @param {number}  value  X coordinate (px)
         */
        set: function (value) {
            if (this._x != value && __WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
                this._x = value;
                this.transform();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "y", {
        /**
         * @return {number} Y coordinate (px)
         */
        get: function () {
            return this._y;
        },
        /**
         * Element's Y position in pixels.
         *
         * @param {number} value Y coordinate (px)
         */
        set: function (value) {
            if (this._y != value && __WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
                this._y = value;
                this.transform();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "rotation", {
        /**
         * @return {number} Rotation
         */
        get: function () {
            return this._rotation;
        },
        /**
         * Element's rotation in degrees.
         *
         * @param {number} value Rotation
         */
        set: function (angle) {
            if (this._rotation != angle) {
                this._rotation = angle;
                this.transform();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "scale", {
        /**
         * @return {number} Scale
         */
        get: function () {
            return this._scale;
        },
        /**
         * Element's scale where 1 is original size.
         *
         * Setting to 0.5 will reduce element's size by 50%, 2 will make element
         * twice as large, etc.
         *
         * @param {number} value Scale
         */
        set: function (value) {
            if (this._scale != value) {
                this._scale = value;
                this.transform();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Removes an attribute from element.
     *
     * @param {string}  attribute  Attribute to remove
     */
    AMElement.prototype.removeAttr = function (attribute) {
        this.node.removeAttribute(attribute);
    };
    /**
     * Sets a set of attributes on a element.
     *
     * @param  {ISVGAttribute}  attributes  An object with attribute names (key) and values
     * @return {AMElement}                  The same element
     */
    AMElement.prototype.attr = function (attributes) {
        for (var attributeName in attributes) {
            if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](attributes[attributeName])) {
                this.node.removeAttribute(attributeName);
            }
            else {
                this.node.setAttribute(attributeName, attributes[attributeName]);
            }
        }
        return this;
    };
    /**
     * Returns a value of a node attribute.
     *
     * @param  {string}  attribute  Attribute name
     * @return {string}             Attribute value
     */
    AMElement.prototype.getAttr = function (attribute) {
        return this.node.getAttribute(attribute);
    };
    /**
     * Sets a single attribute of the element's node using namesspace.
     *
     * @param  {string}     ns         Namespace
     * @param  {string}     attribute  Attribute
     * @param  {string}     value      Value
     * @return {AMElement}             The same element
     */
    AMElement.prototype.attrNS = function (ns, attribute, value) {
        this.node.setAttributeNS(ns, attribute, value);
        return this;
    };
    /**
     * Returns a namespaced attribute value from node.
     *
     * @param  {string}  ns         Namespace
     * @param  {string}  attribute  Attribute
     * @return {string}             Attribute value
     */
    AMElement.prototype.getAttrNS = function (ns, attribute) {
        return this.node.getAttributeNS(ns, attribute);
    };
    /**
     * Removes `style` attribute from node.
     *
     * @param {string}  attribute  Attribute to remove
     */
    AMElement.prototype.removeStyle = function (attribute) {
        // @todo Review because it's a bit messy and maybe not needed (pratically not used)
        delete this.node.style[attribute];
    };
    /**
     * Returns style attribute value.
     *
     * @param  {string}  attribute  Style attribute value
     * @return {string}             Attribute value
     */
    AMElement.prototype.getStyle = function (attribute) {
        // @todo Review because it's a bit messy and maybe not needed (pratically not used)
        return this.node.style[attribute];
    };
    /**
     * Adds style attributes to element's node.
     *
     * @param  {Object}     attributes  Object containing attribute: value pairs
     * @return {AMElement}              The same element
     */
    AMElement.prototype.addStyle = function (attributes) {
        // @todo Review because it's a bit messy and maybe not needed (pratically not used)
        for (var attributeName in attributes) {
            if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](attributes[attributeName])) {
                this.removeStyle(attributeName);
            }
            else {
                this.node.style[attributeName] = attributes[attributeName];
            }
        }
        return this;
    };
    /**
     * Adds a class to element.
     *
     * @param {string}  name  Class name
     */
    AMElement.prototype.addClass = function (name) {
        __WEBPACK_IMPORTED_MODULE_1__utils_DOM__["c" /* addClass */](this.node, name);
    };
    /**
     * Removes a class from element.
     *
     * @param {string} name Class name
     */
    AMElement.prototype.removeClass = function (name) {
        __WEBPACK_IMPORTED_MODULE_1__utils_DOM__["l" /* removeClass */](this.node, name);
    };
    /**
     * Sets a class name on element.
     *
     * @param {string}  name  Class name
     */
    AMElement.prototype.setClass = function (name) {
        this.node.setAttribute("class", name);
    };
    /**
     * Removes all element's child nodes, basically leaving it empty.
     */
    AMElement.prototype.removeChildNodes = function () {
        // remove all children
        while (this.node.childNodes.length > 0) {
            this.node.removeChild(this.node.firstChild);
        }
    };
    /**
     * Was this element already been disposed?
     *
     * @return {boolean} Disposed?
     */
    AMElement.prototype.isDisposed = function () {
        return this._isDisposed;
    };
    /**
     * Disposes element.
     */
    AMElement.prototype.dispose = function () {
        this.removeNode();
    };
    return AMElement;
}());

//# sourceMappingURL=AMElement.js.map

/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Polyspline; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Polyline__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__ = __webpack_require__(12);
/**
 * Polyspline (smoothed line) module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a polysline. (smoothed multi-sigment line)
 *
 * @see {@link IPolysplineEvents} for a list of available events
 * @see {@link IPolysplineAdapters} for a list of available Adapters
 */
var Polyspline = /** @class */ (function (_super) {
    __extends(Polyspline, _super);
    /**
     * Constructor
     */
    function Polyspline() {
        var _this = _super.call(this) || this;
        _this.className = "Polyspline";
        _this.tensionX = 0.5;
        _this.tensionY = 0.5;
        _this.applyTheme();
        return _this;
    }
    /**
     * Creats and adds an SVG path for the arc.
     *
     * @ignore Exclude from docs
     */
    Polyspline.prototype.makePath = function () {
        this._distance = 0;
        var segments = this.segments;
        var tensionX = this.tensionX;
        var tensionY = this.tensionY;
        if (segments && segments.length > 0) {
            var path = "";
            this._realSegments = [];
            for (var i = 0; i < segments.length; i++) {
                var points = segments[i];
                var realPoints = [];
                this._realSegments.push(realPoints);
                if (points.length > 0) {
                    path += __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["moveTo"](points[0]);
                    for (var p = 0; p < points.length - 1; p++) {
                        var p0 = points[p - 1];
                        var p1 = points[p];
                        var p2 = points[p + 1];
                        var p3 = points[p + 2];
                        if (p === 0) {
                            p0 = points[p];
                        }
                        else if (p == points.length - 2) {
                            p3 = points[p + 1];
                        }
                        if (!p3) {
                            p3 = p2;
                        }
                        var controlPointA = __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["getCubicControlPointA"](p0, p1, p2, p3, tensionX, tensionY);
                        var controlPointB = __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["getCubicControlPointB"](p0, p1, p2, p3, tensionX, tensionY);
                        path += __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["cubicCurveTo"](p2, controlPointA, controlPointB);
                        // now split to small segments so that we could have positionToPoint later
                        var stepCount = Math.ceil(__WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["getDistance"](p1, p2)) / 2;
                        var prevPoint = p1;
                        for (var s = 0; s <= stepCount; s++) {
                            var point = __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["getPointOnCubicCurve"](p1, p2, controlPointA, controlPointB, s / stepCount);
                            realPoints.push(point);
                            this._distance += __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["getDistance"](prevPoint, point);
                            //path += $path.lineTo(point);
                            prevPoint = point;
                        }
                    }
                }
            }
            this.element.attr({ "d": path });
        }
    };
    Object.defineProperty(Polyspline.prototype, "tensionX", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tensionX");
        },
        /**
         * Horizontal tension for the spline.
         *
         * Used by the line smoothing algorithm.
         *
         * @default 0.5
         * @param {number}  value  Tension
         */
        set: function (value) {
            this.setPropertyValue("tensionX", value);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polyspline.prototype, "tensionY", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tensionY");
        },
        /**
         * Vertical tension for the spline.
         *
         * Used by the line smoothing algorithm.
         *
         * @default 0.5
         * @param {number}  value  Tensions
         */
        set: function (value) {
            this.setPropertyValue("tensionY", value, true);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    return Polyspline;
}(__WEBPACK_IMPORTED_MODULE_0__Polyline__["a" /* Polyline */]));

//# sourceMappingURL=Polyspline.js.map

/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Polyline; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_Path__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(3);
/**
 * Polyline module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a polyline.
 *
 * @see {@link IPolylineEvents} for a list of available events
 * @see {@link IPolylineAdapters} for a list of available Adapters
 */
var Polyline = /** @class */ (function (_super) {
    __extends(Polyline, _super);
    /**
     * Constructor
     */
    function Polyline() {
        var _this = _super.call(this) || this;
        _this.className = "Polyline";
        _this.element = _this.paper.add("path");
        _this.shapeRendering = "auto";
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_1__utils_Color__["c" /* color */])();
        _this.strokeOpacity = 1;
        _this.applyTheme();
        return _this;
    }
    /**
     * Creats and adds an SVG path for the arc.
     *
     * @ignore Exclude from docs
     */
    Polyline.prototype.makePath = function () {
        this._distance = 0;
        var segments = this.segments;
        if (segments && segments.length > 0) {
            var path = "";
            for (var i = 0; i < segments.length; i++) {
                var points = segments[i];
                if (points.length > 0) {
                    path += __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"](points[0]);
                    for (var p = 1; p < points.length; p++) {
                        var point = points[p];
                        path += __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"](point);
                        this._distance += __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getDistance"](points[p - 1], point);
                    }
                }
            }
            this.element.attr({ "d": path });
        }
        this._realSegments = segments;
    };
    Object.defineProperty(Polyline.prototype, "segments", {
        /**
         * @return {IPoint[]} Segments
         */
        get: function () {
            return this.getPropertyValue("segments");
        },
        /**
         * A list of segment coordinates for the multi-part line.
         *
         * @todo Example
         * @param {IPoint[][]}  segments  Segments
         */
        set: function (segments) {
            this.setPropertyValue("segments", segments);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polyline.prototype, "distance", {
        /**
         * [distance description]
         *
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            return this._distance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position along the line (0-1) into pixel coordinates.
     *
     * @param  {number}             position  Position (0-1)
     * @return {IOrientationPoint}            Coordinates
     */
    Polyline.prototype.positionToPoint = function (position) {
        var deltaAngle = 0;
        if (position < 0) {
            position = Math.abs(position);
            deltaAngle = 180;
        }
        var segments = this._realSegments;
        if (segments) {
            var totalDistance = this.distance;
            var currentDistance = 0;
            var distanceAB = void 0;
            var positionA = 0;
            var positionB = 0;
            var pointA = void 0;
            var pointB = void 0;
            for (var s = 0; s < segments.length; s++) {
                var points = segments[s];
                if (points.length > 1) {
                    for (var p = 1; p < points.length; p++) {
                        pointA = points[p - 1];
                        pointB = points[p];
                        positionA = currentDistance / totalDistance;
                        distanceAB = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getDistance"](pointA, pointB);
                        currentDistance += distanceAB;
                        positionB = currentDistance / totalDistance;
                        if (positionA <= position && positionB > position) {
                            s = segments.length;
                            break;
                        }
                    }
                }
            }
            var positionAB = (position - positionA) / (positionB - positionA);
            var midPoint = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getMidPoint"](pointA, pointB, positionAB);
            return { x: midPoint.x, y: midPoint.y, angle: deltaAngle + __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getAngle"](pointA, pointB) };
        }
        return { x: 0, y: 0, angle: 0 };
    };
    return Polyline;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Polyline.js.map

/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Pattern; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Animation__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Object__ = __webpack_require__(20);
/**
 * Pattern module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base class to define patterns.
 */
var Pattern = /** @class */ (function (_super) {
    __extends(Pattern, _super);
    //public propertyValues = new Dictionary<PatternProperties, any>();
    /**
     * Constructor
     */
    function Pattern() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * List of elements the pattern consists of.
         *
         * @type {List<AMElement>}
         */
        _this._elements = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * A storage for Filter property/value pairs.
         *
         * @ignore Exclude from docs
         * @see {@link PatternProperties}
         * @type {PatternProperties}
         */
        _this.properties = {};
        _this.className = "Pattern";
        // Set defaults
        _this.width = 10;
        _this.height = 10;
        _this.x = 0;
        _this.y = 0;
        _this.patternUnits = "userSpaceOnUse";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_6__utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.backgroundFill = interfaceColors.getFor("background");
        _this.backgroundOpacity = 0;
        _this.fillOpacity = 1;
        _this.fill = interfaceColors.getFor("alternativeBackground");
        _this.stroke = interfaceColors.getFor("alternativeBackground");
        _this.strokeOpacity = 1;
        _this.strokeWidth = 1;
        _this.shapeRendering = "crispEdges";
        _this.rotation = 0;
        // Create main group to store pattern elements inelements
        _this.element = _this.paper.addGroup("pattern");
        _this.id = "pattern-" + __WEBPACK_IMPORTED_MODULE_5__Registry__["a" /* registry */].getUniqueId();
        _this.element.attr({ "id": _this.id });
        _this._disposers.push(_this.element);
        // Make elements disposable
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_1__utils_List__["c" /* ListDisposer */](_this._elements));
        // Request again to trigger getter/setter code
        _this.patternUnits = _this.patternUnits;
        _this.width = _this.width;
        _this.height = _this.height;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the pattern.
     */
    Pattern.prototype.draw = function () {
        var _this = this;
        var patternElement = this.element;
        if (patternElement) {
            patternElement.removeChildNodes();
            var background = this.paper.add("rect");
            background.attr({ "width": this.width, "height": this.height, "shape-rendering": "crispEdges", "fill": this.backgroundFill.hex, "fill-opacity": this.backgroundOpacity, "stroke": this.backgroundFill.hex, "stroke-opacity": this.backgroundOpacity });
            patternElement.add(background);
            patternElement.attr({ "x": this.x, "y": this.y, "width": this.width, "height": this.height, "stroke": this.stroke.hex, "fill": this.fill.hex, "fill-opacity": this.fillOpacity, "stroke-opacity": this.strokeOpacity, "stroke-width": this.strokeWidth, "shape-rendering": this.shapeRendering, "patternUnits": this.patternUnits });
            __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](this._elements.iterator(), function (element) {
                element.rotation = _this.rotation;
                _this.element.add(element);
            });
        }
    };
    /**
     * Animate pattern properties.
     *
     * @see {@link Animation}
     * @param  {IAnimationOptions[] | IAnimationOptions}  animationOptions  Animation options
     * @param  {number}                                   duration          Duration (ms)
     * @param  {(number) => number}                       easing            Easing function
     * @return {Animation}                                                  Animation instance
     */
    Pattern.prototype.animate = function (animationOptions, duration, easing) {
        return new __WEBPACK_IMPORTED_MODULE_3__utils_Animation__["a" /* Animation */](this, animationOptions, duration, easing).start();
    };
    /**
     * Adds an element to the pattern.
     *
     * @param {AMElement}  element  Element
     */
    Pattern.prototype.addElement = function (element) {
        this._elements.push(element);
        this._disposers.push(element);
    };
    /**
     * Remove an element from the pattern.
     *
     * @param {AMElement}  element  Element
     */
    Pattern.prototype.removeElement = function (element) {
        this._elements.removeValue(element);
        this.removeDispose(element);
    };
    Object.defineProperty(Pattern.prototype, "fillOpacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.properties["fillOpacity"];
        },
        /**
         * Pattern fill opacity. (0-1)
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            this.properties["fillOpacity"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "fill", {
        /**
         * @return {Color} Fill color
         */
        get: function () {
            return this.properties["fill"];
        },
        /**
         * Fill color of the pattern.
         *
         * @param {Color}  value  Fill color
         */
        set: function (value) {
            this.properties["fill"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "backgroundFill", {
        /**
         * @return {Color} Background color
         */
        get: function () {
            return this.properties["backgroundFill"];
        },
        /**
         * Pattern background fill color.
         *
         * @param {Color}  value  Background color
         */
        set: function (value) {
            this.properties["backgroundFill"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "backgroundOpacity", {
        /**
         * @return {number} Background opacity (0-1)
         */
        get: function () {
            return this.properties["backgroundOpacity"];
        },
        /**
         * Pattern backgorund opacity. (0-1)
         *
         * @param {number}  value  Background opacity (0-1)
         */
        set: function (value) {
            this.properties["backgroundOpacity"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "stroke", {
        /**
         * @return {Color} Color
         */
        get: function () {
            return this.properties["stroke"];
        },
        /**
         * Pattern stroke (border) color.
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.properties["stroke"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "strokeOpacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.properties["strokeOpacity"];
        },
        /**
         * Pattern stroke opacity. (0-1)
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            this.properties["strokeOpacity"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "strokeWidth", {
        /**
         * @return {number} Stroke thickness (px)
         */
        get: function () {
            return this.properties["strokeWidth"];
        },
        /**
         * Pattern stroke thickness in pixels.
         *
         * @param {number}  value  Stroke thickness (px)
         */
        set: function (value) {
            this.properties["strokeWidth"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "shapeRendering", {
        get: function () {
            return this.properties["shapeRendering"];
        },
        /**
         * Shape rendering
         * @param {ShapeRendering} value [description]
         */
        set: function (value) {
            this.properties["shapeRendering"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "rotation", {
        /**
         * @return {number} Rotation
         */
        get: function () {
            return this.properties["rotation"];
        },
        /**
         * Pattern rotation in degrees.
         *
         * @param {number}  value  Rotation
         */
        set: function (value) {
            this.properties["rotation"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "patternUnits", {
        /**
         * @return {"userSpaceOnUse" | "objectBoundingBox"} Units
         */
        get: function () {
            return this.properties["patternUnits"];
        },
        /**
         * Pattern measuring units.
         *
         * Available options: "userSpaceOnUse" | "objectBoundingBox".
         *
         * @param {"userSpaceOnUse" | "objectBoundingBox"}  value  Units
         */
        set: function (value) {
            this.properties["patternUnits"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "width", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.properties["width"];
        },
        /**
         * Pattern width in pixels.
         *
         * @param {number}  value  Width (px)
         */
        set: function (value) {
            this.properties["width"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "height", {
        /**
         * @return {number} Height (px)
         */
        get: function () {
            return this.properties["height"];
        },
        /**
         * Pattern height in pixels.
         *
         * @param {number} value Height (px)
         */
        set: function (value) {
            this.properties["height"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "x", {
        /**
         * @return {number} X (px)
         */
        get: function () {
            return this.properties["x"];
        },
        /**
         * X position. (pixels)
         *
         * @param {number} value X (px)
         */
        set: function (value) {
            this.properties["x"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "y", {
        /**
         * @return {number} Y (px)
         */
        get: function () {
            return this.properties["y"];
        },
        /**
         * Y position. (px)
         *
         * @param {number} value Y (px)
         */
        set: function (value) {
            this.properties["y"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            return __WEBPACK_IMPORTED_MODULE_4__System__["b" /* system */].ghostPaper;
        },
        /**
         * [[Paper]] instance to draw pattern in.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            if (this._paper != paper) {
                this._paper = paper;
                this.draw();
                paper.appendDef(this.element);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies properties from another Pattern instance.
     *
     * @param {this}  source  Source pattern
     */
    Pattern.prototype.copyFrom = function (source) {
        var _this = this;
        _super.prototype.copyFrom.call(this, source);
        __WEBPACK_IMPORTED_MODULE_8__utils_Object__["each"](source.properties, function (key, value) {
            _this[key] = value;
        });
    };
    Object.defineProperty(Pattern.prototype, "animations", {
        /**
         * A list of animations currently running on the patter.
         *
         * @ignore Exclude from docs
         * @return {Array<Animation>} Animation list
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["c" /* MultiDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    return Pattern;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Pattern.js.map

/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WavedLine; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Line__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_Path__ = __webpack_require__(12);
/**
 * Functionality for drawing waved lines.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a waved line.
 *
 * @see {@link IWavedLineEvents} for a list of available events
 * @see {@link IWavedLineAdapters} for a list of available Adapters
 */
var WavedLine = /** @class */ (function (_super) {
    __extends(WavedLine, _super);
    /**
     * Constructor
     */
    function WavedLine() {
        var _this = _super.call(this) || this;
        _this.className = "WavedLine";
        _this.element = _this.paper.add("path");
        _this.waveLength = 16;
        _this.waveHeight = 4;
        _this.tension = 0.8;
        _this.pixelPerfect = false;
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_1__utils_Color__["c" /* color */])();
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the waved line.
     *
     * @ignore Exclude from docs
     */
    WavedLine.prototype.draw = function () {
        //super.draw();
        var p1 = { x: this.x1, y: this.y1 };
        var p2 = { x: this.x2, y: this.y2 };
        var d = __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"](p1) + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["wavedLine"](p1, p2, this.waveLength, this.waveHeight, this.tension, true);
        this.element.attr({ "d": d });
    };
    Object.defineProperty(WavedLine.prototype, "waveLength", {
        /**
         * @return {number} Wave length (px)
         */
        get: function () {
            return this.getPropertyValue("waveLength");
        },
        /**
         * Wave length in pixels.
         *
         * @default 16
         * @param {number}  value  Wave length (px)
         */
        set: function (value) {
            this.setPropertyValue("waveLength", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedLine.prototype, "waveHeight", {
        /**
         * @return {number} Wave height (px)
         */
        get: function () {
            return this.getPropertyValue("waveHeight");
        },
        /**
         * Wave height in pixels.
         *
         * @default 4
         * @param {number}  value  Wave height (px)
         */
        set: function (value) {
            this.setPropertyValue("waveHeight", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedLine.prototype, "tension", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tension");
        },
        /**
         * Tension of the wave.
         *
         * @default 0.8
         * @param {number}  value  Tension
         */
        set: function (value) {
            this.setPropertyValue("tension", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    return WavedLine;
}(__WEBPACK_IMPORTED_MODULE_0__Line__["a" /* Line */]));

//# sourceMappingURL=WavedLine.js.map

/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Line; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Type__ = __webpack_require__(2);
/**
 * Line drawing functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a line.
 *
 * @see {@link ILineEvents} for a list of available events
 * @see {@link ILineAdapters} for a list of available Adapters
 */
var Line = /** @class */ (function (_super) {
    __extends(Line, _super);
    /**
     * Constructor
     */
    function Line() {
        var _this = _super.call(this) || this;
        _this.className = "Line";
        _this.element = _this.paper.add("line");
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_1__utils_Color__["c" /* color */])(); //"none";
        _this.x1 = 0;
        _this.y1 = 0;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the line.
     *
     * @ignore Exclude from docs
     */
    Line.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (this.x1 == this.x2 || this.y1 == this.y2) {
            this.pixelPerfect = true;
        }
        else {
            this.pixelPerfect = false;
        }
        this.x1 = this.x1;
        this.x2 = this.x2;
        this.y1 = this.y1;
        this.y2 = this.y2;
    };
    Object.defineProperty(Line.prototype, "x1", {
        /**
         * @return {number} X
         */
        get: function () {
            return this.getPropertyValue("x1");
        },
        /**
         * X coordinate of first end.
         *
         * @param {number} value X
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("x1", value);
            this.element.attr({ "x1": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "x2", {
        /**
         * @return {number} X
         */
        get: function () {
            var value = this.getPropertyValue("x2");
            if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
                value = this.pixelWidth;
            }
            return value;
        },
        /**
         * X coordinate of second end.
         *
         * @param {number} value X
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("x2", value);
            this.element.attr({ "x2": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "y1", {
        /**
         * @return {number} Y
         */
        get: function () {
            return this.getPropertyValue("y1");
        },
        /**
         * Y coordinate of first end.
         *
         * @param {number} value Y
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("y1", value);
            this.element.attr({ "y1": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "y2", {
        /**
         * @return {number} Y
         */
        get: function () {
            var value = this.getPropertyValue("y2");
            if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
                value = this.pixelHeight;
            }
            return value;
        },
        /**
         * Y coordinate of second end.
         *
         * @param {number} value Y
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("y2", value);
            this.element.attr({ "y2": value });
        },
        enumerable: true,
        configurable: true
    });
    return Line;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Line.js.map

/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return AxisDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return AxisItemLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Axis; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Component__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_DataItem__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AxisBreak__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_elements_Label__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_elements_Tooltip__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_SortedList__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__core_utils_Number__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__ = __webpack_require__(2);
/**
 * Base class for all Axis
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

















/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[Axis]].
 *
 * @see {@link DataItem}
 */
var AxisDataItem = /** @class */ (function (_super) {
    __extends(AxisDataItem, _super);
    /**
     * Constructor
     */
    function AxisDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "AxisDataItem";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisDataItem.prototype, "grid", {
        /**
         * Returns currently associated [[Grid]] element.
         *
         * If there is no grid element associated with data item, a new one is
         * created and returned.
         *
         * @return {Grid} Grid element
         */
        get: function () {
            if (!this._grid) {
                var component = this.component;
                if (component) {
                    this.grid = component.renderer.grid.create();
                }
            }
            return this._grid;
        },
        /**
         * Associates a [[Grid]] element with this data item.
         *
         * @param {Grid} grid Grid element
         */
        set: function (grid) {
            if (this._grid && this._grid != grid) {
                __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](this.sprites, this._grid);
                this._grid.dataItem = undefined;
            }
            if (grid) {
                if (grid.dataItem && grid.dataItem != this) {
                    __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](grid.dataItem.sprites, grid);
                    grid.dataItem.grid = undefined;
                }
                grid.__disabled = false;
                this.addSprite(grid);
            }
            this._grid = grid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Override to cancel super call for data element validation.
     */
    AxisDataItem.prototype.validateDataElements = function () {
    };
    Object.defineProperty(AxisDataItem.prototype, "tick", {
        /**
         * Returns currently associated [[AxisTick]] element.
         *
         * If there is no tick element associated with data item, a new one is
         * created and returned.
         *
         * @return {AxisTick} Tick element
         */
        get: function () {
            if (!this._tick) {
                var component = this.component;
                if (component) {
                    this.tick = component.renderer.ticks.create();
                }
            }
            return this._tick;
        },
        /**
         * Associates an [[AxisTick]] element with this data item.
         *
         * @param {AxisTick} tick Tick element
         */
        set: function (tick) {
            if (this._tick && this._tick != tick) {
                __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](this.sprites, this._tick);
                this._tick.dataItem = undefined;
            }
            if (tick) {
                if (tick.dataItem && tick.dataItem != this) {
                    __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](tick.dataItem.sprites, tick);
                    tick.dataItem.tick = undefined;
                }
                tick.__disabled = false;
                this.addSprite(tick);
            }
            this._tick = tick;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "label", {
        /**
         * Returns currently associated [[AxisLabel]] element.
         *
         * If there is no label element associated with data item, a new one is
         * created and returned.
         *
         * @return {AxisLabel} Label element
         */
        get: function () {
            if (!this._label) {
                var component = this.component;
                if (component) {
                    this.label = component.renderer.labels.create();
                }
            }
            return this._label;
        },
        /**
         * Associates an [[AxisLabel]] element with this data item.
         *
         * @param {AxisLabel} label Label element
         */
        set: function (label) {
            if (this._label && this._label != label) {
                __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](this.sprites, this._label);
                this._label.dataItem = undefined;
            }
            if (label) {
                if (label.dataItem && label.dataItem != this) {
                    __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](label.dataItem.sprites, label);
                    label.dataItem.label = undefined;
                }
                label.__disabled = false;
                this.addSprite(label);
            }
            this._label = label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "axisFill", {
        /**
         * Returns currently associated [[AxisFill]] element.
         *
         * If there is no fill element associated with data item, a new one is
         * created and returned.
         *
         * @return {AxisFill} Label element
         */
        get: function () {
            if (!this._axisFill) {
                var component = this.component;
                if (component) {
                    this.axisFill = component.renderer.axisFills.create();
                }
            }
            return this._axisFill;
        },
        /**
         * Associates an [[AxisFill]] element with this data item.
         *
         * @param {AxisFill} label Label element
         */
        set: function (axisFill) {
            if (this._axisFill && this._axisFill != axisFill) {
                __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](this.sprites, this._axisFill);
                this._axisFill.dataItem = undefined;
            }
            if (axisFill) {
                if (axisFill.dataItem && axisFill.dataItem != this) {
                    __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](axisFill.dataItem.sprites, axisFill);
                    axisFill.dataItem.axisFill = undefined;
                }
                axisFill.__disabled = false;
                axisFill.axis = this.component;
                this.addSprite(axisFill);
            }
            this._axisFill = axisFill;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "text", {
        /**
         * Returns data item's current label.
         *
         * @return {string} Text label
         */
        get: function () {
            return this._text;
        },
        /**
         * Sets text to be used as data item's label.
         *
         * @param {string} text Text label
         */
        set: function (text) {
            this._text = text;
            if (this._label) { // do not use getter, it will create unwanted instances!
                this._label.text = text;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "mask", {
        /**
         * Data item's mask.
         *
         * @return {AxisFill} Mask
         */
        get: function () {
            return this._mask;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "contents", {
        /**
         * Returns a [[Container]] to place all visual elements, related to data item
         * in.
         *
         * If there is no Container, a new one is created.
         *
         * @return {Container} Contents container
         */
        get: function () {
            if (!this._contents) {
                var contents = new __WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]();
                this.addSprite(contents);
                contents.isMeasured = false;
                this._contents = contents;
                var component = this.component;
                if (component) {
                    var mask = component.renderer.axisFills.create();
                    mask.axis = component;
                    this.addSprite(mask);
                    this._mask = mask;
                    contents.mask = mask;
                }
            }
            return this._contents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "axisBreak", {
        /**
         * Returns currently set [[AxisBreak]].
         *
         * @return {AxisBreak} Axis break
         */
        get: function () {
            return this._axisBreak;
        },
        /**
         * Sets an [[AxisBreak]] this data item falls within.
         *
         * @param {AxisBreak} axisBreak Axis break
         */
        set: function (axisBreak) {
            if (this._axisBreak) {
                this._axisBreak.dataItems.removeValue(this);
            }
            if (axisBreak) {
                axisBreak.dataItems.push(this);
            }
            this._axisBreak = axisBreak;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Re-draws the element.
     *
     * @ignore Exclude from docs
     */
    AxisDataItem.prototype.validate = function () {
        if (this.component) {
            this.component.validateDataElement(this);
        }
    };
    /**
     * Appends data item's elements to the parent [[Container]].
     *
     * @ignore Exclude from docs
     */
    AxisDataItem.prototype.appendChildren = function () {
        if (this.component) {
            this.component.appendDataItem(this);
        }
    };
    /**
     * Ordering function used in JSON setup.
     *
     * @param  {string}  a  Item A
     * @param  {string}  b  Item B
     * @return {Ordering}   Order
     */
    AxisDataItem.prototype.configOrder = function (a, b) {
        if (a == b) {
            return 0;
        }
        else if (a == "language") {
            return -1;
        }
        else if (b == "language") {
            return 1;
        }
        else if (a == "component") {
            return -1;
        }
        else if (b == "component") {
            return 1;
        }
        else {
            return 0;
        }
    };
    /**
     * Checks if data item has particular property set.
     *
     * @param  {string}   prop  Property name
     * @return {boolean}        Property set?
     */
    AxisDataItem.prototype.hasProperty = function (prop) {
        return prop == "component" ? true : _super.prototype.hasProperty.call(this, prop);
    };
    return AxisDataItem;
}(__WEBPACK_IMPORTED_MODULE_2__core_DataItem__["a" /* DataItem */]));

/**
 * ============================================================================
 * REQUISITES
 * ============================================================================
 * @hidden
 */
/**
 * Defines named positions for data item's location within [[Axis]].
 */
var AxisItemLocation;
(function (AxisItemLocation) {
    AxisItemLocation[AxisItemLocation["Start"] = 0] = "Start";
    AxisItemLocation[AxisItemLocation["Middle"] = 0.5] = "Middle";
    AxisItemLocation[AxisItemLocation["End"] = 1] = "End";
})(AxisItemLocation || (AxisItemLocation = {}));
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all Axis elements.
 *
 * @see {@link IAxisEvents} for a list of available Events
 * @see {@link IAxisAdapters} for a list of available Adapters
 */
var Axis = /** @class */ (function (_super) {
    __extends(Axis, _super);
    /**
     * Constructor
     */
    function Axis() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Number of Grid elements on the axis.
         *
         * @type {number}
         */
        _this._gridCount = 5;
        /**
         * A list of [[XYSeries]] that are using this Axis.
         *
         * @type {List<XYSeries>}
         */
        _this._series = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["b" /* List */]();
        /**
         * Holds reference to a function that accepts a DataItem and its index as
         * parameters.
         *
         * It can either return a fill opacity for a fill, or manipulate data item
         * directly, to create various highlighting scenarios.
         *
         * For example, you can set it up to highlight only weekends on a
         * [[DateAxis]].
         *
         * @param {AxisDataItem} dataItem [description]
         * @param {number}       index    [description]
         */
        _this.fillRule = function (dataItem, index) {
            if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](index)) {
                index = dataItem.index;
            }
            if (index / 2 == Math.round(index / 2)) {
                dataItem.axisFill.__disabled = true;
                dataItem.axisFill.opacity = 0;
            }
            else {
                dataItem.axisFill.opacity = 1;
                dataItem.axisFill.__disabled = false;
            }
        };
        _this.className = "Axis";
        _this.shouldClone = false;
        _this.cursorTooltipEnabled = true;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_10__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create title
        _this.title = new __WEBPACK_IMPORTED_MODULE_4__core_elements_Label__["a" /* Label */]();
        _this.title.shouldClone = false;
        _this._disposers.push(_this.title);
        // Data item iterator
        _this._dataItemsIterator = new __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["ListIterator"](_this.dataItems, function () { return _this.dataItems.create(); });
        _this._dataItemsIterator.createNewItems = true;
        // Create tooltip
        var tooltip = new __WEBPACK_IMPORTED_MODULE_5__core_elements_Tooltip__["a" /* Tooltip */]();
        tooltip.label.padding(5, 10, 5, 10);
        tooltip.background.pointerLength = 5;
        tooltip.fitPointerToBounds = true;
        tooltip.filters.clear();
        // Create background element for the tooltip
        var background = tooltip.background;
        background.cornerRadius = 0;
        background.fill = interfaceColors.getFor("alternativeBackground");
        background.stroke = background.fill;
        background.strokeWidth = 1;
        background.fillOpacity = 1;
        tooltip.label.fill = interfaceColors.getFor("alternativeText");
        _this.tooltip = tooltip;
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {AxisDataItem} Data Item
     */
    Axis.prototype.createDataItem = function () {
        return new AxisDataItem();
    };
    /**
     * Invalidates layout.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.invalidateLayout = function () {
        _super.prototype.invalidateLayout.call(this);
        // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            series.invalidateLayout();
        });
    };
    /**
     * Recalculates the number of grid items on the axis.
     */
    Axis.prototype.updateGridCount = function () {
        if (this.renderer) {
            this._gridCount = this.axisLength / this.renderer.minGridDistance;
        }
    };
    /**
     * Redraws the element.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.validateLayout = function () {
        this.axisFullLength = this.axisLength / (this.end - this.start);
        _super.prototype.validateLayout.call(this);
        this.updateGridCount();
        this.renderer.updateAxisLine();
        this.renderer.updateBaseGridElement();
        if (this._prevLength != this.axisLength) {
            this.dispatchImmediately("lengthchanged");
            this._prevLength = this.axisLength;
        }
    };
    /**
     * Initializes Axis' renderer.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.initRenderer = function () {
        if (this.renderer) {
            this.renderer.processRenderer();
        }
    };
    /**
     * Appends data items.
     *
     * Does nothing on a base Axis.
     */
    Axis.prototype.appendDataItems = function () {
        // void
    };
    /**
     * Adds a data item to the Axis.
     *
     * @param {this["_dataItem"]} dataItem Data item
     */
    Axis.prototype.appendDataItem = function (dataItem) {
        _super.prototype.appendDataItem.call(this, dataItem);
        var renderer = this.renderer;
        dataItem.tick.parent = renderer;
        dataItem.label.parent = renderer;
        dataItem.grid.parent = renderer.gridContainer;
        dataItem.axisFill.parent = renderer.gridContainer;
    };
    /**
     * Redraws Axis' related items.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.validate = function () {
        _super.prototype.validate.call(this);
        this.axisFullLength = this.axisLength / (this.end - this.start);
        this.validateAxisRanges();
        this.validateBreaks();
    };
    /**
     * Redars Axis ranges.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.validateAxisRanges = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (axisRange) {
            _this.appendDataItem(axisRange);
            _this.validateDataElement(axisRange);
            axisRange.grid.invalidate();
            axisRange.label.deepInvalidate();
            axisRange.tick.invalidate();
            axisRange.axisFill.invalidate();
        });
    };
    /**
     * Invalidates all axis breaks, so they are redrawn.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.validateBreaks = function () {
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.axisBreaks.iterator(), function (axisBreak) {
            axisBreak.invalidate();
        });
    };
    /**
     * Associates an Axis break with this Axis, after it is inserted into
     * `axisBreaks`.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<AxisBreak>["insert"]} event Event
     */
    Axis.prototype.processBreak = function (event) {
        var axisBreak = event.newValue;
        axisBreak.parent = this.renderer.breakContainer;
        axisBreak.axis = this;
    };
    /**
     * Registers a [[XYSeries]] element with this Axis.
     *
     * Returns a [[Disposer]] for all events, added to Series for watching
     * changes in Axis, and vice versa.
     * @ignore
     * @param  {XYSeries}     series  Series
     * @return {IDisposer}          Event disposer
     */
    Axis.prototype.registerSeries = function (series) {
        var _this = this;
        this.series.moveValue(series);
        return new __WEBPACK_IMPORTED_MODULE_8__core_utils_Disposer__["c" /* MultiDisposer */]([
            new __WEBPACK_IMPORTED_MODULE_8__core_utils_Disposer__["b" /* Disposer */](function () {
                _this.series.removeValue(series);
            }),
            this.events.on("lengthchanged", series.invalidate, series) //,
            // TODO should these be disposed of ?
            //series.events.on("datavalidated", this.processSeriesDataItems, this),
            //series.events.on("visibilitychanged", this.processSeriesDataItems, this),
            //series.events.on("hide", this.processSeriesDataItems, this)
        ]);
    };
    Object.defineProperty(Axis.prototype, "renderer", {
        /**
         * Returns currently set [[AxisRenderer]].
         *
         * Please note that most of the settings, related to Axis' appearance are set
         * via its renderer. Not directly on the Axis.
         *
         * E.g.:
         *
         * ```TypeScript
         * axis.renderer.inside = true;
         * axis.renderer.minLabelPosition = 0.1;
         * axis.renderer.maxLabelPosition = 0.9;
         * ```
         * ```JavaScript
         * axis.renderer.inside = true;
         * axis.renderer.minLabelPosition = 0.1;
         * axis.renderer.maxLabelPosition = 0.9;
         * ```
         *
         * @return {T} Renderer
         */
        get: function () {
            return this._renderer;
        },
        /**
         * Sets [[AxisRenderer]] to be used to render this Axis.
         *
         * @param {T} renderer Renderer
         */
        set: function (renderer) {
            this._renderer = renderer;
            renderer.chart = this.chart;
            renderer.axis = this;
            renderer.parent = this;
            this.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only
            this.initRenderer();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts a relative position to angle. (for circular axes)
     *
     * @param  {number} position Position (0-1)
     * @return {number}          Angle
     */
    Axis.prototype.positionToAngle = function (position) {
        return this.renderer.positionToAngle(position);
    };
    /**
     * Converts pixel coordinates to a relative position. (0-1)
     *
     * @param {IPoint}   point  Coorinates (px)
     * @return {number}         Position (0-1)
     */
    Axis.prototype.pointToPosition = function (point) {
        return this.renderer.pointToPosition(point);
    };
    /**
     * [getAnyRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {any}     start  [description]
     * @param  {any}     end    [description]
     * @return {string}         [description]
     */
    Axis.prototype.getAnyRangePath = function (start, end) {
        return this.renderer.getPositionRangePath(start, end);
    };
    /**
     * Converts any positional parameter to a relative position on axis.
     *
     * @todo Description (review)
     * @param  {any}     value  Pisition
     * @return {number}         Position (0-1)
     */
    Axis.prototype.anyToPosition = function (value) {
        return 0;
    };
    /**
     * Converts any positional parameter to a relative position on axis.
     *
     * @todo Description (review)
     * @param  {any}     value  Pisition
     * @return {IOrientationPoint}  Orientation point
     */
    Axis.prototype.anyToPoint = function (value) {
        return { x: 0, y: 0, angle: 0 };
    };
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number} startPosition [description]
     * @param  {number} endPosition   [description]
     * @return {string}               [description]
     */
    Axis.prototype.getPositionRangePath = function (startPosition, endPosition) {
        return this.renderer.getPositionRangePath(startPosition, endPosition);
    };
    Object.defineProperty(Axis.prototype, "axisLength", {
        /**
         * Actual axis length in pixels.
         *
         * @return {number} Axis length (px)
         */
        get: function () {
            return this.renderer.axisLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Axis.prototype, "cursorTooltipEnabled", {
        /**
         * Returns current setting for showing axis tooltip.
         *
         * @return {boolean} Display tooltip?
         */
        get: function () {
            return this._cursorTooltipEnabled;
        },
        /**
         * Sets if axis should display a tooltip for chart's cursor.
         *
         * @param {boolean} value Display tooltip?
         */
        set: function (value) {
            this._cursorTooltipEnabled = value;
            if (value && this.renderer) {
                this.renderer.updateTooltip();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows Axis tooltip at specific relative position within Axis. (0-1)
     *
     * @param {number} position Position (0-1)
     */
    Axis.prototype.showTooltipAtPosition = function (position) {
        if (this._cursorTooltipEnabled) {
            var tooltip = this._tooltip;
            var renderer = this.renderer;
            if (tooltip) {
                //@todo: think of how to solve this better
                if (tooltip && !tooltip.parent) {
                    tooltip.parent = this.tooltipContainer;
                }
                var tooltipLocation = renderer.tooltipLocation;
                var startPosition = this.getCellStartPosition(position);
                var endPosition = this.getCellEndPosition(position);
                position = startPosition + (endPosition - startPosition) * tooltipLocation;
                position = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["fitToRange"](position, this.start, this.end);
                var startPoint = renderer.positionToPoint(startPosition);
                var endPoint = renderer.positionToPoint(endPosition);
                // save values so cursor could use them
                this.currentItemStartPoint = startPoint;
                this.currentItemEndPoint = endPoint;
                if (renderer.fullWidthTooltip) {
                    tooltip.width = endPoint.x - startPoint.x;
                    tooltip.height = endPoint.y - startPoint.y;
                }
                var point = renderer.positionToPoint(position);
                var globalPoint = __WEBPACK_IMPORTED_MODULE_13__core_utils_Utils__["spritePointToSvg"](point, this.renderer.line);
                tooltip.text = this.getTooltipText(position);
                tooltip.pointTo(globalPoint);
                tooltip.show();
            }
        }
    };
    /**
     * Converts relative position (0-1) to Axis position with zoom level and
     * inversed taken into account.
     *
     * @param  {number} position Global position (0-1)
     * @return {number}          Position within Axis (0-1)
     */
    Axis.prototype.toAxisPosition = function (position) {
        position = position * (this.end - this.start);
        if (this.renderer.inversed) {
            position = this.end - position;
        }
        else {
            position = this.start + position;
        }
        return position;
    };
    /**
     * Returns text to be used for cursor's Axis tooltip.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position coordinate (px)
     * @return {string}            Label text
     */
    Axis.prototype.getTooltipText = function (position) {
        return;
    };
    /**
     * Updates Axis' tooltip's position and possibly size, and pointer (stem)
     * place.
     *
     * @ignore Exclude from docs
     * @param {PointerOrientation}  pointerOrientation  Pointer (stem) orientation
     * @param {IRectangle}          boundingRectangle   A rectangle for tooltip to fit within
     */
    Axis.prototype.updateTooltip = function (pointerOrientation, boundingRectangle) {
        var tooltip = this._tooltip;
        if (tooltip) {
            tooltip.pointerOrientation = pointerOrientation;
            tooltip.setBounds(__WEBPACK_IMPORTED_MODULE_13__core_utils_Utils__["spriteRectToSvg"](boundingRectangle, this.renderer.line));
        }
    };
    /**
     * [roundPosition description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}            position  Relative position
     * @param  {AxisItemLocation}  location  Location on axis
     * @return {number}                      Rounded position
     */
    Axis.prototype.roundPosition = function (position, location) {
        return position;
    };
    /**
     * [getCellStartPosition description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number} position [description]
     * @return {number}          [description]
     */
    Axis.prototype.getCellStartPosition = function (position) {
        return position;
    };
    /**
     * [getCellEndPosition description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number} position [description]
     * @return {number}          [description]
     */
    Axis.prototype.getCellEndPosition = function (position) {
        return position;
    };
    Object.defineProperty(Axis.prototype, "axisRanges", {
        /**
         * A list of axis ranges for this Axis.
         *
         * @return {ListTemplate} Axis ranges
         */
        get: function () {
            if (!this._axisRanges) {
                var dataItem = this.createDataItem();
                this._axisRanges = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](dataItem);
                this._axisRanges.events.on("insert", this.processAxisRange, this);
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._axisRanges));
            }
            return this._axisRanges;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Decorates an axis range after it has been added to the axis range list.
     *
     * @param {IListEvents<AxisDataItem>["insert"]} event Event
     */
    Axis.prototype.processAxisRange = function (event) {
        var axisRange = event.newValue;
        axisRange.component = this;
        axisRange.isRange = true;
    };
    Object.defineProperty(Axis.prototype, "axisBreaks", {
        /**
         * A list of axis breaks on this Axis.
         *
         * @return {SortedListTemplate} Axis breaks.
         */
        get: function () {
            if (!this._axisBreaks) {
                this._axisBreaks = new __WEBPACK_IMPORTED_MODULE_6__core_utils_SortedList__["d" /* SortedListTemplate */](this.createAxisBreak(), function (a, b) {
                    return __WEBPACK_IMPORTED_MODULE_14__core_utils_Number__["order"](a.adjustedStartValue, b.adjustedStartValue);
                });
                this._axisBreaks.events.on("insert", this.processBreak, this);
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._axisBreaks));
            }
            return this._axisBreaks;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a new axis break.
     *
     * @return {this["_axisBreak"]} Axis break
     */
    Axis.prototype.createAxisBreak = function () {
        return new __WEBPACK_IMPORTED_MODULE_3__AxisBreak__["a" /* AxisBreak */]();
    };
    Object.defineProperty(Axis.prototype, "series", {
        /**
         * A list of Series currently associated with this Axis.
         *
         * @return {List<XYSeries>} Series
         */
        get: function () {
            if (!this._series) {
                this._series = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["b" /* List */]();
            }
            return this._series;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes Series' data items.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.processSeriesDataItems = function () {
    };
    /**
     * Processes Series' single data item.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @param {XYSeriesDataItem} dataItem Data item
     */
    Axis.prototype.processSeriesDataItem = function (dataItem) {
    };
    /**
     * Post-processes Serie's data items.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.postProcessSeriesDataItems = function () {
    };
    /**
     * Post-processes Serie's single data item.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @param {XYSeriesDataItem} dataItem Data item
     */
    Axis.prototype.postProcessSeriesDataItem = function (dataItem) {
    };
    //
    /**
     * Updates Axis based on all Series that might influence it.
     *
     * Called by Series after Series data is validated.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.updateAxisBySeries = function () {
    };
    /**
     * Hides unused data items.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    Axis.prototype.hideUnusedDataItems = function () {
        // hide all unused
        var dataItemsIterator = this._dataItemsIterator;
        dataItemsIterator.createNewItems = false;
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](dataItemsIterator.iterator(), function (dataItem) {
            dataItem.__disabled = true;
        });
        dataItemsIterator.clear();
        dataItemsIterator.createNewItems = true;
    };
    /**
     * Returns a Series' data item that corresponds to specific position on Axis.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @param  {Series}          series    Series
     * @param  {number}          position  Position (0-1)
     * @return {XYSeriesDataItem}            Data item
     */
    Axis.prototype.getSeriesDataItem = function (series, position) {
        return;
    };
    /**
     * Returns an angle that corresponds to specific angle.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}          key       ???
     * @param  {number}          location  Location
     * @param  {string}          stackKey  ???
     * @return {number}                    Angle
     */
    Axis.prototype.getAngle = function (dataItem, key, location, stackKey) {
        return;
    };
    /**
     * [getX description]
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem} dataItem [description]
     * @param  {string}         key      [description]
     * @param  {number}         location [description]
     * @param  {string}         stackKey [description]
     * @return {number}                  [description]
     */
    Axis.prototype.getX = function (dataItem, key, location, stackKey) {
        return;
    };
    /**
     * [getY description]
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem} dataItem [description]
     * @param  {string}         key      [description]
     * @param  {number}         location [description]
     * @param  {string}         stackKey [description]
     * @return {number}                  [description]
     */
    Axis.prototype.getY = function (dataItem, key, location, stackKey) {
        return;
    };
    Object.defineProperty(Axis.prototype, "basePoint", {
        /**
         * [basePoint description]
         *
         * @ignore Exclude from docs
         * @todo Description (review)
         * @return {IPoint} Base point coordinates
         */
        get: function () {
            return { x: 0, y: 0 };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [dataChangeUpdate description]
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Axis.prototype.dataChangeUpdate = function () {
    };
    /**
     * Removes axis breaks that fall between `min` and `max` (???)
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {number}  min  Start value
     * @param  {number}  max  End value
     * @return {number}       Spread o
     */
    Axis.prototype.adjustDifference = function (min, max) {
        var difference = max - min;
        if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](difference)) {
            __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["eachContinue"](this.axisBreaks.iterator(), function (axisBreak) {
                var startValue = axisBreak.adjustedStartValue;
                var endValue = axisBreak.adjustedEndValue;
                if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](startValue) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](endValue)) {
                    // breaks are sorted, we don't need go further anymore
                    if (startValue > max) {
                        return false;
                    }
                    if (endValue >= min) {
                        if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](startValue) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](endValue)) {
                            var breakSize = axisBreak.breakSize;
                            var intersection = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["intersection"]({ start: startValue, end: endValue }, { start: min, end: max });
                            if (intersection) {
                                difference -= (intersection.end - intersection.start) * (1 - breakSize);
                            }
                        }
                    }
                    return true;
                }
            });
            return difference;
        }
    };
    /**
     * Checks if specific value falls within a break.
     *
     * Returns [[AxisBreak]] the value falls into.
     *
     * @param  {number}     value  Value to check
     * @return {AxisBreak}         Axis break
     */
    Axis.prototype.isInBreak = function (value) {
        return __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["find"](this.axisBreaks.iterator(), function (axisBreak) {
            return value >= axisBreak.adjustedStartValue &&
                value <= axisBreak.adjustedEndValue;
        });
    };
    /**
     * [fixAxisBreaks description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Axis.prototype.fixAxisBreaks = function () {
        var _this = this;
        var axisBreaks = this.axisBreaks;
        if (axisBreaks.length > 0) {
            // first make sure that startValue is <= end value
            // This needs to make a copy of axisBreaks because it mutates the list while traversing
            // TODO very inefficient
            __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["b" /* each */](__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["toArray"](axisBreaks.iterator()), function (axisBreak) {
                var startValue = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["min"](axisBreak.startValue, axisBreak.endValue);
                var endValue = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["max"](axisBreak.startValue, axisBreak.endValue);
                axisBreak.adjustedStartValue = startValue;
                axisBreak.adjustedEndValue = endValue;
                _this.axisBreaks.update(axisBreak);
            });
            var firstAxisBreak = axisBreaks.first;
            var previousEndValue_1 = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);
            // process breaks
            // TODO does this need to call axisBreaks.update ?
            __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.axisBreaks.iterator(), function (axisBreak) {
                var startValue = axisBreak.adjustedStartValue;
                var endValue = axisBreak.adjustedEndValue;
                // breaks can't overlap
                // if break starts before previous break ends
                if (startValue < previousEndValue_1) {
                    startValue = previousEndValue_1;
                    if (endValue < previousEndValue_1) {
                        endValue = previousEndValue_1;
                    }
                }
                axisBreak.adjustedStartValue = startValue;
                axisBreak.adjustedEndValue = endValue;
            });
        }
    };
    Object.defineProperty(Axis.prototype, "startIndex", {
        /**
         * [startIndex description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            return 0;
        },
        /**
         * We need start/end indexes of axes to be 0 - `dataItems.length`.
         *
         * Yes, also for category axis, this helps to avoid jumping of categories
         * while scrolling and does not do a lot of extra work as we use
         * protected `_startIndex` and `_endIndex` when working with items.
         *
         * @hidden
         */
        /**
         * [startIndex description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Axis.prototype, "endIndex", {
        /**
         * [endIndex description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            return this.dataItems.length;
        },
        /**
         * [endIndex description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a formatted label based on position.
     *
     * Individual axis types should override this method to generate a label
     * that is relevant to axis type.
     *
     * @param  {number}  position  Relative position on axis (0-1)
     * @return {string}            Position label
     */
    Axis.prototype.getPositionLabel = function (position) {
        return Math.round(position * 100) + "%x";
    };
    Object.defineProperty(Axis.prototype, "chart", {
        /**
         * Returns currently associated Chart.
         *
         * @return {Chart} Chart
         */
        get: function () {
            return this._chart;
        },
        /**
         * Sets associated Chart for this Axis.
         *
         * @param {Chart}  value  Chart
         */
        set: function (value) {
            this._chart = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a data item for a Series range.
     *
     * @param  {XYSeries}  series  Target Series
     * @return {this}            Range data item
     */
    Axis.prototype.createSeriesRange = function (series) {
        var range = this.createDataItem();
        range.component = this;
        series.axisRanges.push(range);
        return range;
    };
    /**
     * Copies all properties and related data from a different instance of Axis.
     *
     * @param {this} source Source Axis
     */
    Axis.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        if (this.renderer) {
            this.renderer.copyFrom(source.renderer);
        }
    };
    /**
     * Resets internal iterator.
     */
    Axis.prototype.resetIterators = function () {
        this._dataItemsIterator.reset();
    };
    return Axis;
}(__WEBPACK_IMPORTED_MODULE_0__core_Component__["a" /* Component */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_9__core_Registry__["a" /* registry */].registeredClasses["Axis"] = Axis;
__WEBPACK_IMPORTED_MODULE_9__core_Registry__["a" /* registry */].registeredClasses["AxisDataItem"] = AxisDataItem;
//# sourceMappingURL=Axis.js.map

/***/ }),
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisBreak; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedLine__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 * Axis break module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base class to define "breaks" on axes.
 *
 * @see {@link IAxisBreakEvents} for a list of available events
 * @see {@link IAxisBreakAdapters} for a list of available Adapters
 * @important
 */
var AxisBreak = /** @class */ (function (_super) {
    __extends(AxisBreak, _super);
    /**
     * Constructor
     */
    function AxisBreak() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Reference to parent Axis.
         *
         * @type {MutableValueDisposer}
         */
        _this._axis = new __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * A list of axis data items which fall within this break.
         *
         * @type {List<AxisDataItem>}
         */
        _this.dataItems = new __WEBPACK_IMPORTED_MODULE_3__core_utils_List__["b" /* List */]();
        _this.className = "AxisBreak";
        // Set defaults
        _this.breakSize = 0.01;
        _this.marginLeft = -5;
        _this.marginRight = -5;
        _this.marginTop = -5;
        _this.marginBottom = -5;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create elements
        // (these won't be used actually, just for setting properties)
        var fillShape = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedLine__["a" /* WavedLine */]();
        fillShape.fill = interfaceColors.getFor("background");
        fillShape.stroke = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["c" /* color */])();
        fillShape.fillOpacity = 0.9;
        fillShape.zIndex = 0;
        _this._fillShape = fillShape;
        var startLine = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedLine__["a" /* WavedLine */]();
        startLine.fill = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["c" /* color */])();
        startLine.stroke = interfaceColors.getFor("grid");
        startLine.strokeOpacity = 0.3;
        startLine.zIndex = 1;
        _this._startLine = startLine;
        var endLine = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedLine__["a" /* WavedLine */]();
        endLine.fill = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["c" /* color */])();
        endLine.stroke = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["c" /* color */])("#000000"); // interfaceColors.getFor("grid");
        endLine.strokeOpacity = 0.3;
        endLine.zIndex = 2;
        _this._endLine = endLine;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisBreak.prototype, "startLine", {
        /**
         * Returns currently set element for starting line.
         *
         * @return {IWavedShape} Element
         */
        get: function () {
            return this._startLine;
        },
        /**
         * Sets an element to use for the starting line of the break.
         *
         * @param {IWavedShape} sprite Element
         */
        set: function (sprite) {
            if (this._startLine) {
                this._startLine.dispose();
            }
            this._startLine = sprite;
            this.addBreakSprite(sprite);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "endLine", {
        /**
         * Returns currently set element for end line.
         *
         * @return {IWavedShape} Element
         */
        get: function () {
            return this._endLine;
        },
        /**
         * Sets an element to use for the end line of the break.
         *
         * @param {IWavedShape} sprite Element
         */
        set: function (sprite) {
            if (this._endLine) {
                this._endLine.dispose();
            }
            this._endLine = sprite;
            this.addBreakSprite(sprite);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "fillShape", {
        /**
         * Returns currently set element for break fill.
         *
         * @return {IWavedShape} Element
         */
        get: function () {
            return this._fillShape;
        },
        /**
         * Sets an element to use for fill of the break.
         *
         * @param {IWavedShape} sprite Element
         */
        set: function (sprite) {
            if (this._fillShape) {
                this._fillShape.dispose();
            }
            this._fillShape = sprite;
            this.addBreakSprite(sprite);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a break element (e.g. lines, fill) to the break, which is
     * [[Container]].
     *
     * @ignore Exclude from docs
     * @param {IWavedShape} sprite Element to add
     */
    AxisBreak.prototype.addBreakSprite = function (sprite) {
        sprite.parent = this;
        sprite.isMeasured = false;
        this._disposers.push(sprite);
    };
    Object.defineProperty(AxisBreak.prototype, "axis", {
        /**
         * Returns currently set parent Axis for the break.
         *
         * @return {this} Axis
         */
        get: function () {
            return this._axis.get();
        },
        /**
         * Associates this break to particular Axis.
         *
         * @param {this["_axisType"]} axis Axis
         */
        set: function (axis) {
            if (this._axis.get() !== axis) {
                this._axis.set(axis, axis.renderer.gridContainer.events.on("transformed", this.invalidate, this));
                axis.renderer.createBreakSprites(this);
                // this can't go to copyFrom, as axis is set later
                var breakTemplate = axis.axisBreaks.template;
                this.startLine.copyFrom(breakTemplate.startLine);
                this.endLine.copyFrom(breakTemplate.endLine);
                this.fillShape.copyFrom(breakTemplate.fillShape);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "breakSize", {
        /**
         * [breakSize description]
         *
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            return this.getPropertyValue("breakSize");
        },
        /**
         * [breakSize description]
         *
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
            if (this.setPropertyValue("breakSize", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "startPoint", {
        /**
         * Returns pixel coordinates of axis break's start.
         *
         * @return {IPoint} Start point
         */
        get: function () {
            var renderer = this.axis.renderer;
            if (renderer) {
                return renderer.positionToPoint(this.startPosition);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "endPoint", {
        /**
         * Returns pixel coordinates of axis break's end.
         *
         * @return {IPoint} End point
         */
        get: function () {
            var renderer = this.axis.renderer;
            if (renderer) {
                return renderer.positionToPoint(this.endPosition);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "startPosition", {
        /**
         * Returns a relative position at which axis break starts.
         *
         * This is a calculated position, meaning it shows relative position of the
         * break after break is applied.
         *
         * @return {number} Start position
         */
        get: function () {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "endPosition", {
        /**
         * Returns a relative position at which axis break ends.
         *
         * This is a calculated position, meaning it shows relative position of the
         * break after break is applied.
         *
         * @return {number} End position
         */
        get: function () {
            return;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Draws the axis break.
     *
     * @ignore Exclude from docs
     */
    AxisBreak.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (this.axis) {
            var renderer = this.axis.renderer;
            renderer.updateBreakElement(this);
        }
    };
    Object.defineProperty(AxisBreak.prototype, "startValue", {
        /**
         * Returns currently set starting value.
         *
         * @return {number} Starting value
         */
        get: function () {
            return this.getPropertyValue("startValue");
        },
        /**
         * Sets the starting value for the break.
         *
         * @param {number} value Starting value
         */
        set: function (value) {
            if (this.setPropertyValue("startValue", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "endValue", {
        /**
         * Returns currently set end value.
         *
         * @return {number} End value
         */
        get: function () {
            return this.getPropertyValue("endValue");
        },
        /**
         * Sets the end value for the break.
         *
         * @param {number} value End value
         */
        set: function (value) {
            if (this.setPropertyValue("endValue", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return AxisBreak;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_4__core_Registry__["a" /* registry */].registeredClasses["AxisBreak"] = AxisBreak;
//# sourceMappingURL=AxisBreak.js.map

/***/ }),
/* 121 */,
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Triangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rendering_Path__ = __webpack_require__(12);
/**
 * Functionality for drawing triangles.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw a triangle.
 *
 * @see {@link ITriangleEvents} for a list of available events
 * @see {@link ITriangleAdapters} for a list of available Adapters
 */
var Triangle = /** @class */ (function (_super) {
    __extends(Triangle, _super);
    /**
     * Constructor
     */
    function Triangle() {
        var _this = _super.call(this) || this;
        _this.className = "Triangle";
        _this.element = _this.paper.add("path");
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Triangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.pixelWidth;
        var h = this.pixelHeight;
        var path;
        switch (this.direction) {
            case "right":
                path = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["moveTo"]({ x: 0, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"]({ x: w, y: h / 2 })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"]({ x: 0, y: h })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["closePath"]();
                break;
            case "left":
                path = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["moveTo"]({ x: w, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"]({ x: 0, y: h / 2 })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"]({ x: w, y: h })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["closePath"]();
                break;
            case "bottom":
                path = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["moveTo"]({ x: 0, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"]({ x: w, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"]({ x: w / 2, y: h })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["closePath"]();
                break;
            case "top":
                path = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["moveTo"]({ x: w / 2, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"]({ x: w, y: h })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"]({ x: 0, y: h })
                    + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["closePath"]();
                break;
        }
        this.element.attr({ "d": path });
    };
    Object.defineProperty(Triangle.prototype, "direction", {
        /**
         * Returns direction of a triangle
         *
         * @return {"left" | "right" | "top" | "bottom"} value
         */
        get: function () {
            return this.getPropertyValue("direction");
        },
        /**
         * Sets direction of a triangle
         *
         * @param {"left" | "right" | "top" | "bottom"} value
         */
        set: function (value) {
            this.setPropertyValue("direction", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Triangle;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Triangle.js.map

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(13);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(36);
var toLength = __webpack_require__(25);
var toAbsoluteIndex = __webpack_require__(69);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 125 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(42);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(17);
var cof = __webpack_require__(42);
var MATCH = __webpack_require__(22)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(22)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(9);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hide = __webpack_require__(31);
var redefine = __webpack_require__(32);
var fails = __webpack_require__(16);
var defined = __webpack_require__(47);
var wks = __webpack_require__(22);

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(9);
var aFunction = __webpack_require__(29);
var SPECIES = __webpack_require__(22)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(13);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(32);
var redefineAll = __webpack_require__(75);
var meta = __webpack_require__(59);
var forOf = __webpack_require__(74);
var anInstance = __webpack_require__(73);
var isObject = __webpack_require__(17);
var fails = __webpack_require__(16);
var $iterDetect = __webpack_require__(128);
var setToStringTag = __webpack_require__(86);
var inheritIfRequired = __webpack_require__(171);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(13);
var hide = __webpack_require__(31);
var uid = __webpack_require__(66);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(67) || !__webpack_require__(16)(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete __webpack_require__(13)[K];
});


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(0);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(29);
var ctx = __webpack_require__(41);
var forOf = __webpack_require__(74);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ChartDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Chart; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Component__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_elements_Label__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_DataItem__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(2);
/**
 * [[Chart]] class provides base functionality for all chart types to inherit.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[Chart]].
 *
 * @see {@link DataItem}
 */
var ChartDataItem = /** @class */ (function (_super) {
    __extends(ChartDataItem, _super);
    /**
     * Constructor
     */
    function ChartDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "ChartDataItem";
        _this.applyTheme();
        return _this;
    }
    return ChartDataItem;
}(__WEBPACK_IMPORTED_MODULE_5__core_DataItem__["a" /* DataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all Charts.
 *
 * @see {@link IChartEvents} for a list of available Events
 * @see {@link IChartAdapters} for a list of available Adapters
 */
var Chart = /** @class */ (function (_super) {
    __extends(Chart, _super);
    /**
     * Constructor
     */
    function Chart() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Chart";
        // Create a list of titles
        _this.titles = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_4__core_elements_Label__["a" /* Label */]());
        // Chart component is also a container. it holds _chartAndLegendCont and titles
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        _this.layout = "vertical";
        // Chart and legend
        var chartAndLegendContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_3__core_Container__["a" /* Container */]);
        chartAndLegendContainer.shouldClone = false;
        chartAndLegendContainer.layout = "vertical";
        chartAndLegendContainer.width = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        chartAndLegendContainer.height = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        _this.chartAndLegendContainer = chartAndLegendContainer;
        // Chart container holds all the elements of a chart, extept titles and legend
        var chartContainer = chartAndLegendContainer.createChild(__WEBPACK_IMPORTED_MODULE_3__core_Container__["a" /* Container */]);
        chartContainer.shouldClone = false;
        chartContainer.width = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        chartContainer.height = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        _this.chartContainer = chartContainer;
        // hides everything on first frame and shows only on second. helps to avoid technical flickering
        chartAndLegendContainer.visible = false;
        chartAndLegendContainer.events.once("validated", function () {
            __WEBPACK_IMPORTED_MODULE_1__core_System__["b" /* system */].events.once("enterframe", function () {
                chartAndLegendContainer.visible = true;
            });
        });
        // Add title list events to apply certain formatting options and to make
        // the chart reference them as accessible screen reader labels
        _this.titles.events.on("insert", function (label) {
            _this.processTitle(label);
            _this.updateReaderTitleReferences();
        }, _this);
        _this.titles.events.on("remove", function (label) {
            _this.updateReaderTitleReferences();
        }, _this);
        // Accessibility
        // It seems we can't set focusable on the whole chart because it seems to
        // mess up the whole focus event system - getting a focus on an inside
        // object also trigger focus on parent
        //this.focusable = true;
        _this.role = "region";
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    Chart.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        this.readerTitle = this.language.translate("Chart");
    };
    /**
     * (Re)validates chart data.
     *
     * @ignore Exclude from docs
     */
    Chart.prototype.validateData = function () {
        _super.prototype.validateData.call(this);
        this.feedLegend();
    };
    /**
     * Initiates drawing of the chart.
     *
     * @ignore Exclude from docs
     */
    Chart.prototype.draw = function () {
        this.fixLayout();
        _super.prototype.draw.call(this);
    };
    /**
     * Updates legend's hierarchy based on the position.
     */
    Chart.prototype.fixLayout = function () {
        var legend = this.legend;
        if (legend) {
            var chartAndLegendContainer = this.chartAndLegendContainer;
            switch (legend.position) {
                case "left":
                    chartAndLegendContainer.layout = "horizontal";
                    legend.toBack();
                    break;
                case "right":
                    chartAndLegendContainer.layout = "horizontal";
                    legend.toFront();
                    break;
                case "top":
                    chartAndLegendContainer.layout = "vertical";
                    legend.toBack();
                    break;
                case "bottom":
                    chartAndLegendContainer.layout = "vertical";
                    legend.toFront();
            }
        }
    };
    /**
     * Setups the legend to use the chart's data.
     */
    Chart.prototype.feedLegend = function () {
        // Nothing here. This method is provided only as a "placeholder" for
        // extending classes to override
    };
    /**
     * Adds a new title to the chart when it is inserted into chart's titles
     * list.
     * @param  {IListEvents<Label>["insert"]}  event  An event object which is triggered when inserting into titles list
     * @return {Label}                               Label object
     */
    Chart.prototype.processTitle = function (event) {
        var title = event.newValue;
        title.parent = this;
        title.toBack();
        title.align = "center";
        // Need to explicitly apply the `id` attribute so it can be referenced by
        // `aria-labelledby`
        title.uidAttr();
        return title;
    };
    /**
     * Checks if chart has any title elements. If it does, we will use them in an
     * `aria-labelledby` attribute so that screen readers can use them to properly
     * describe the chart when it is focused or hovered.
     *
     * @ignore Exclude from docs
     */
    Chart.prototype.updateReaderTitleReferences = function () {
        if (this.titles.length) {
            var titleIds_1 = [];
            __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.titles.iterator(), function (title) {
                titleIds_1.push(title.uid);
            });
            this.setSVGAttribute({ "aria-labelledby": titleIds_1.join(" ") });
        }
        else {
            this.removeSVGAttribute("aria-labelledby");
        }
    };
    Object.defineProperty(Chart.prototype, "legend", {
        /**
         * @return {Legend} legend
         */
        get: function () {
            return this._legend;
        },
        /**
         * Chart legend
         *
         * @todo Description
         *
         * @param {Legend} legend
         */
        set: function (legend) {
            this.setLegend(legend);
        },
        enumerable: true,
        configurable: true
    });
    Chart.prototype.setLegend = function (legend) {
        var _this = this;
        if (this._legend != legend) {
            if (this._legend) {
                this.removeDispose(this._legend);
            }
            this._legend = legend;
            if (legend) {
                this._disposers.push(legend);
                // Set legend options
                legend.parent = this.chartAndLegendContainer;
                legend.events.on("propertychanged", function (event) {
                    if (event.property == "position") {
                        _this.fixLayout();
                    }
                });
            }
        }
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    Chart.prototype.processConfig = function (config) {
        if (config) {
            // Set up legend
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.legend) && !__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.legend.type)) {
                config.legend.type = "Legend";
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return Chart;
}(__WEBPACK_IMPORTED_MODULE_0__core_Component__["a" /* Component */]));

//# sourceMappingURL=Chart.js.map

/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisFill; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__ = __webpack_require__(2);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * AxisFill is a base class used to defines fill shapes for various
 * type-specific Axes.
 *
 * Axis fills are used to add fills to specific ranges of those axes.
 *
 * @see {@link IAxisFillEvents} for a list of available events
 * @see {@link IAxisFillAdapters} for a list of available Adapters
 * @important
 */
var AxisFill = /** @class */ (function (_super) {
    __extends(AxisFill, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Axis
     */
    function AxisFill(axis) {
        var _this = _super.call(this) || this;
        _this.axis = axis;
        _this.element = _this.paper.add("path");
        _this.className = "AxisFill";
        _this.isMeasured = false;
        _this.location = 0;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.fill = interfaceColors.getFor("alternativeBackground");
        _this.fillOpacity = 0;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the fill element.
     *
     * @ignore Exclude from docs
     */
    AxisFill.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (this.axis && __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](this.startPosition) && __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](this.endPosition)) {
            this.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);
            this.element.attr({ "d": this.fillPath });
        }
    };
    Object.defineProperty(AxisFill.prototype, "startPosition", {
        /**
         * Returns current starting position.
         *
         * @return {number} Start position
         */
        get: function () {
            return this.getPropertyValue("startPosition");
        },
        /**
         * Sets the actual starting position of the fill.
         *
         * @param {number} value Starting position
         */
        set: function (value) {
            this.setPropertyValue("startPosition", value);
            this.invalidate(); // this is needed as relative position might not change when zooming
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisFill.prototype, "endPosition", {
        /**
         * Returns current end position.
         *
         * @return {number} End position
         */
        get: function () {
            return this.getPropertyValue("endPosition");
        },
        /**
         * Sets the actual end position of the fill.
         *
         * @param {number} value End position
         */
        set: function (value) {
            this.setPropertyValue("endPosition", value);
            this.invalidate(); // this is needed as relative position might not change when zooming
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisFill.prototype, "location", {
        /**
         * Returns current relative location.
         *
         * @return {AxisItemLocation} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("location");
        },
        /**
         * Sets the relative location of the fill. (0-1)
         *
         * @param {number} value Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("location", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return AxisFill;
}(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["a" /* registry */].registeredClasses["AxisFill"] = AxisFill;
//# sourceMappingURL=AxisFill.js.map

/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Grid; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 * A module defining functionality for axis grid elements.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Displays an axis grid line.
 *
 * @see {@link IGridEvents} for a list of available events
 * @see {@link IGridAdapters} for a list of available Adapters
 * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements
 * @important
 */
var Grid = /** @class */ (function (_super) {
    __extends(Grid, _super);
    /**
     * Constructor
     */
    function Grid() {
        var _this = _super.call(this) || this;
        _this.className = "Grid";
        _this.element = _this.paper.add("path");
        _this.location = 0.5;
        _this.isMeasured = false;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.stroke = interfaceColors.getFor("grid");
        _this.pixelPerfect = true;
        _this.strokeOpacity = 0.15;
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_2__core_utils_Color__["c" /* color */])(); // "none";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Grid.prototype, "location", {
        /**
         * @return {AxisItemLocation} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("location");
        },
        /**
         * Location within axis cell to place grid line on.
         *
         * * 0 - start
         * * 0.5 - middle
         * * 1 - end
         *
         * @param {AxisItemLocation}  value  Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("location", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Grid;
}(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["a" /* registry */].registeredClasses["Grid"] = Grid;
//# sourceMappingURL=Grid.js.map

/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisLabel; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_elements_Label__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(1);
/**
 * Axis Label module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Use to create labels on Axis.
 *
 * @see {@link IAxisLabelEvents} for a list of available events
 * @see {@link IAxisLabelAdapters} for a list of available Adapters
 * @important
 */
var AxisLabel = /** @class */ (function (_super) {
    __extends(AxisLabel, _super);
    /**
     * Constructor
     */
    function AxisLabel() {
        var _this = _super.call(this) || this;
        _this.className = "AxisLabel";
        _this.isMeasured = false;
        _this.padding(10, 10, 10, 10);
        _this.renderingFrequency = 1;
        _this.location = 0.5;
        _this.nonScaling = true;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisLabel.prototype, "location", {
        /**
         * Returns current location of the label.
         *
         * @return {AxisItemLocation} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("location");
        },
        /**
         * Sets relative location of the label. (0-1)
         *
         * @param {AxisItemLocation}  value  Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("location", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisLabel.prototype, "inside", {
        /**
         * Returns if label is set to be drawn inside axis.
         *
         * @return {boolean} Inside?
         */
        get: function () {
            return this.getPropertyValue("inside");
        },
        /**
         * Sets if label should be drawn inside axis.
         *
         * @param {boolean}  value  Inside?
         */
        set: function (value) {
            this.setPropertyValue("inside", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return AxisLabel;
}(__WEBPACK_IMPORTED_MODULE_0__core_elements_Label__["a" /* Label */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["a" /* registry */].registeredClasses["AxisLabel"] = AxisLabel;
//# sourceMappingURL=AxisLabel.js.map

/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return LegendDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return LegendSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Legend; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Component__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_DataItem__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_elements_Label__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Keyboard__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_interaction_Interaction__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 * Legend-related functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */











/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[Legend]].
 *
 * @see {@link DataItem}
 */
var LegendDataItem = /** @class */ (function (_super) {
    __extends(LegendDataItem, _super);
    /**
     * Constructor
     */
    function LegendDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "LegendDataItem";
        _this.applyTheme();
        return _this;
    }
    return LegendDataItem;
}(__WEBPACK_IMPORTED_MODULE_1__core_DataItem__["a" /* DataItem */]));

/**
 * ============================================================================
 * REQUISITES
 * ============================================================================
 * @hidden
 */
/**
 * Defines a class that carries legend settings.
 *
 * A legend might change its settings dynamically. Legend can also be shared
 * by several elements, requiring different settings.
 *
 * Having legend's settings in a separate object is a good way to "hot swap"
 * a set of settings for the legend.
 */
var LegendSettings = /** @class */ (function () {
    function LegendSettings() {
        /**
         * Should marker be created for each legend item.
         *
         * @type {boolean}
         */
        this.createMarker = true;
    }
    return LegendSettings;
}());

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * [[Legend]] class is used to create legend for the chart.
 *
 * @see {@link ILegendEvents} for a list of available events
 * @see {@link ILegendAdapters} for a list of available Adapters
 * @todo Verify/implement dynamic updating of legend items once the properties of related Series change
 */
var Legend = /** @class */ (function (_super) {
    __extends(Legend, _super);
    /**
     * Constructor
     */
    function Legend() {
        var _this = _super.call(this) || this;
        _this.className = "Legend";
        // Set defaults
        _this.layout = "grid";
        _this.useDefaultMarker = false;
        _this.contentAlign = "center";
        // Create a template container and list for legend items
        var itemContainer = new __WEBPACK_IMPORTED_MODULE_4__core_Container__["a" /* Container */]();
        itemContainer.padding(10, 0, 10, 0);
        itemContainer.margin(0, 5, 0, 0);
        itemContainer.layout = "horizontal";
        itemContainer.clickable = true;
        itemContainer.focusable = true;
        itemContainer.role = "checkbox";
        itemContainer.background.opacity = 0; // creates hit area
        itemContainer.togglable = true;
        // Add click/tap event to toggle item
        itemContainer.events.on("hit", function (ev) {
            _this.toggleDataItem(ev.target.dataItem);
        }, _this);
        // Add focus event so that we can track which object is currently in focus
        // for keyboard toggling
        itemContainer.events.on("focus", function (ev) {
            _this.focusedItem = ev.target.dataItem;
        });
        itemContainer.events.on("blur", function (ev) {
            _this.focusedItem = undefined;
        });
        // Create container list using item template we just created
        _this.itemContainers = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](itemContainer);
        // Set up global keyboard events for toggling elements
        __WEBPACK_IMPORTED_MODULE_8__core_interaction_Interaction__["b" /* interaction */].body.events.on("keyup", function (ev) {
            if (__WEBPACK_IMPORTED_MODULE_6__core_utils_Keyboard__["b" /* keyboard */].isKey(ev.event, "enter") && _this.focusedItem) {
                _this.toggleDataItem(_this.focusedItem);
            }
        }, _this);
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_10__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create a template container and list for the a marker
        var marker = new __WEBPACK_IMPORTED_MODULE_4__core_Container__["a" /* Container */]();
        marker.width = 23;
        marker.height = 23;
        marker.mouseEnabled = false;
        marker.setStateOnChildren = true;
        marker.propertyFields.fill = "fill";
        var disabledColor = interfaceColors.getFor("disabledBackground");
        marker.events.on("childadded", function (event) {
            var activeState = event.newValue.states.create("active");
            activeState.properties.stroke = disabledColor;
            activeState.properties.fill = disabledColor;
        });
        _this.markers = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](marker);
        // Create a legend background element
        var rectangle = marker.createChild(__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__["a" /* RoundedRectangle */]);
        rectangle.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        rectangle.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        // Create a template container and list for item labels
        var label = new __WEBPACK_IMPORTED_MODULE_5__core_elements_Label__["a" /* Label */]();
        label.text = "{name}";
        label.margin(0, 5, 0, 5);
        label.valign = "middle";
        label.states.create("active").properties.fill = interfaceColors.getFor("disabledBackground");
        label.renderingFrequency = 2;
        _this.labels = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](label);
        // Create a template container and list for item value labels
        var valueLabel = new __WEBPACK_IMPORTED_MODULE_5__core_elements_Label__["a" /* Label */]();
        valueLabel.margin(0, 5, 0, 0);
        valueLabel.valign = "middle";
        valueLabel.width = 40; // to avoid rearranging legend entries when value changes.
        valueLabel.align = "right";
        valueLabel.textAlign = "end";
        valueLabel.states.create("active").properties.fill = interfaceColors.getFor("disabledBackground");
        valueLabel.renderingFrequency = 2;
        _this.valueLabels = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](valueLabel);
        _this.position = "bottom";
        // Create a state for disabled legend items
        itemContainer.states.create("active");
        itemContainer.setStateOnChildren = true;
        // Apply accessibility settings
        _this.role = "group";
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    Legend.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        this.readerTitle = this.language.translate("Legend");
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {LegendDataItem} Data Item
     */
    Legend.prototype.createDataItem = function () {
        return new LegendDataItem();
    };
    /**
     * Removes children before calling validate method of the super class. (which
     * initiates building of the legend)
     *
     * @ignore Exclude from docs
     */
    Legend.prototype.validate = function () {
        this.removeChildren();
        _super.prototype.validate.call(this);
    };
    /**
     * [validateDataElement description]
     *
     * @ignore Exclude from docs
     * @param {LegendDataItem} dataItem Data item
     * @todo Description
     * @todo Figure out how to update appearance of legend item without losing focus
     * @todo Update legend marker appearance as apperance of related series changes
     */
    Legend.prototype.validateDataElement = function (dataItem) {
        _super.prototype.validateDataElement.call(this, dataItem);
        // Get data item (legend item's) container and assign it to legend container
        var container = dataItem.itemContainer;
        if (!container) {
            // Create new container for the data item
            container = this.itemContainers.create();
            dataItem.addSprite(container);
            container.readerTitle = this.language.translate("Click, tap or press ENTER to toggle");
            container.readerControls = dataItem.dataContext.uidAttr();
            container.readerLabelledBy = dataItem.dataContext.uidAttr();
            dataItem.itemContainer = container;
            // Add an event to check for item's properties
            // We cannot do this on a template since template does not have
            // dataContext, yet
            dataItem.dataContext.events.on("propertychanged", function (ev) {
                if (ev.property == "visible") {
                    container.readerChecked = dataItem.dataContext.visible;
                }
                else {
                    //this.validateDataElement(dataItem);
                }
            });
        }
        // Set parent and update current state
        container.parent = this;
        container.readerChecked = dataItem.dataContext.visible;
        // Create a marker for legend item
        var marker = dataItem.marker;
        if (!marker) {
            marker = this.markers.create();
            marker.parent = container;
            dataItem.marker = marker;
        }
        // If we are not using default markers, create a unique legend marker based
        // on the data item type
        if (!this.useDefaultMarker) {
            dataItem.dataContext.createLegendMarker(marker);
        }
        // Create label
        var label = dataItem.label;
        if (!label) {
            label = this.labels.create();
            label.parent = container;
            dataItem.label = label;
        }
        // Create value label
        var valueLabel = dataItem.valueLabel;
        if (!valueLabel) {
            valueLabel = this.valueLabels.create();
            valueLabel.parent = container;
            dataItem.valueLabel = valueLabel;
        }
        // Tell series its legend data item
        dataItem.dataContext.legendDataItem = dataItem;
    };
    Object.defineProperty(Legend.prototype, "position", {
        /**
         * @return {LegendPosition} Position
         */
        get: function () {
            return this.getPropertyValue("position");
        },
        /**
         * Position of the legend.
         *
         * Options: "left", "right", "top", "bottom" (default), or "absolute".
         *
         * @default "bottom"
         * @param {LegendPosition}  value  Position
         */
        set: function (value) {
            if (this.setPropertyValue("position", value)) {
                if (value == "left" || value == "right") {
                    this.width = 200;
                    this.margin(10, 20, 10, 20);
                    this.valign = "middle";
                    this.itemContainers.template.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
                    this.valueLabels.template.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
                }
                else {
                    this.itemContainers.template.maxWidth = undefined;
                    this.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
                    this.valueLabels.template.width = 40;
                }
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Legend.prototype, "useDefaultMarker", {
        /**
         * @return {boolean} Use default marker?
         */
        get: function () {
            return this.getPropertyValue("useDefaultMarker");
        },
        /**
         * Should legend try to mirror the look of the related item when building
         * the marker for legend item?
         *
         * If set to `true` it will try to make the marker look like its related
         * item.
         *
         * E.g. if an item is for a Line Series, it will display a line of the
         * same thickness, color, and will use the same bullets if series have them.
         *
         * @default false
         * @param {boolean} value Use default marker?
         */
        set: function (value) {
            this.setPropertyValue("useDefaultMarker", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Toggles a legend item.
     *
     * @ignore Exclude from docs
     * @param {this["_dataItem"]} item Legend item
     * @todo Maybe do it with togglable instead
     */
    Legend.prototype.toggleDataItem = function (item) {
        var dataContext = item.dataContext;
        if (!dataContext.visible || dataContext.isHiding) {
            dataContext.show();
        }
        else {
            dataContext.hide();
        }
    };
    Object.defineProperty(Legend.prototype, "preloader", {
        /**
         * Override preloader method so that legend does not accidentally show its
         * own preloader.
         *
         * @ignore Exclude from docs
         * @return {Preloader} Always `undefined`
         */
        get: function () {
            return;
        },
        enumerable: true,
        configurable: true
    });
    return Legend;
}(__WEBPACK_IMPORTED_MODULE_0__core_Component__["a" /* Component */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["a" /* registry */].registeredClasses["Legend"] = Legend;
//# sourceMappingURL=Legend.js.map

/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DesaturateFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(51);
/**
 * Module for "Desaturate" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creats a "Desaturate" filter
 */
var DesaturateFilter = /** @class */ (function (_super) {
    __extends(DesaturateFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function DesaturateFilter() {
        var _this = _super.call(this) || this;
        _this.className = "DesaturateFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feColorMatrix = _this.paper.add("feColorMatrix");
        _this.feColorMatrix.attr({ "type": "saturate" });
        _this.filterPrimitives.push(_this.feColorMatrix);
        // Set default properties
        _this.width = 120;
        _this.height = 120;
        _this.saturation = 0;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(DesaturateFilter.prototype, "saturation", {
        /**
         * @return {number} Saturation (0-1)
         */
        get: function () {
            return this.properties["saturation"];
        },
        /**
         * Saturation.
         *
         * 0 - completely desaturated.
         * 1 - fully saturated.
         *
         * @param {number}  value  Saturation (0-1)
         * @todo Describe possible values
         */
        set: function (value) {
            this.properties["saturation"] = value;
            this.feColorMatrix.attr({ "values": value.toString() });
        },
        enumerable: true,
        configurable: true
    });
    return DesaturateFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=DesaturateFilter.js.map

/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Modal; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ModalCSS__ = __webpack_require__(299);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Keyboard__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Disposer__ = __webpack_require__(10);
/**
 * Modal class is used to display information over chart area.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * Shows an HTML modal which covers window or a chart area.
 *
 * @todo Positioning over whole window
 */
var Modal = /** @class */ (function (_super) {
    __extends(Modal, _super);
    function Modal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Adapter.
         *
         * @type {Adapter<Modal, IModalAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Contents of modal window.
         *
         * @type {string}
         */
        _this._content = "";
        /**
         * Prefix to apply to class names for modal elements.
         *
         * @type {string}
         */
        _this._classPrefix = "ammodal";
        /**
         * If set to `true` [[Modal]] will use default styles.
         *
         * @type {boolean}
         */
        _this._defaultStyles = true;
        /**
         * A title for screen readers. It is very highly recommended to set that title
         * so that people using screen reader tools can get an immediate summary of
         * the information in the modal.
         *
         * @type {string}
         */
        _this.readerTitle = "";
        /**
         * Is modal closable?
         *
         * @type {boolean}
         */
        _this._closable = true;
        return _this;
    }
    /**
     * Shows modal window.
     */
    Modal.prototype.show = function () {
        if (this.container) {
            this.container.appendChild(this.element);
            this.positionElement();
        }
    };
    /**
     * Hides modal window.
     */
    Modal.prototype.hide = function () {
        if (this.element && this.element.parentElement) {
            this.element.parentElement.removeChild(this.element);
        }
    };
    /**
     * Destroy (dispose) modal.
     */
    Modal.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.hide();
    };
    Object.defineProperty(Modal.prototype, "element", {
        /**
         * Creates and returns an HTML holder element for modal (`<div>`).
         *
         * @ignore Exclude from docs
         * @return {HTMLElement} Modal holder element
         */
        get: function () {
            if (!this._element) {
                // Get class names for modal elements
                var classNames = this.adapter.apply("classNames", {
                    wrapperClass: this.classPrefix + "",
                    contentClass: this.classPrefix + "-content",
                    curtainClass: this.classPrefix + "-curtain",
                    closeClass: this.classPrefix + "-close"
                });
                // Create the wrapper
                var wrapper = document.createElement("div");
                wrapper.className = classNames.wrapperClass;
                // See if we're loading external CSS
                // Hide it until CSS is loaded
                if (this.defaultStyles) {
                    wrapper.style.display = "none";
                }
                // Create the curtain
                var curtain = document.createElement("div");
                curtain.className = classNames.curtainClass;
                // Append curtain to wrapper
                wrapper.appendChild(curtain);
                // Create an InteractionObject for curtain because we might need to
                // set interactions on it
                this._curtainIO = __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* interaction */].getInteraction(curtain);
                // Create content element
                var contentWrapper = document.createElement("div");
                contentWrapper.className = classNames.contentClass;
                // Create close button
                var close_1 = document.createElement("a");
                close_1.className = classNames.closeClass;
                // Content div
                var content = document.createElement("div");
                content.innerHTML = this.content;
                // Append close to content wrapper
                contentWrapper.appendChild(close_1);
                // Create an InteractionObject for close
                this._closeIO = __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* interaction */].getInteraction(close_1);
                // Hide close for now
                close_1.style.visibility = "hidden";
                // Add accessible stuff
                content.setAttribute("role", "dialog");
                content.setAttribute("aria-label", this.adapter.apply("readerTitle", this.readerTitle));
                // Add to wrapper
                contentWrapper.appendChild(content);
                wrapper.appendChild(contentWrapper);
                // Set references for easy access later on
                this._element = wrapper;
                this._contentElement = content;
                this._contentWrapperElement = contentWrapper;
                // Add IOs to disposers
                this._disposers.push(this._curtainIO);
                this._disposers.push(this._closeIO);
                // Apply events
                this._applyEvents();
                // Load CSS
                if (this.defaultStyles) {
                    this.loadDefaultCSS();
                }
            }
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Positions content element in the center of modal based on its actual size.
     *
     * @ignore Exclude from docs
     */
    Modal.prototype.positionElement = function () {
        var _this = this;
        setTimeout(function () {
            _this._contentWrapperElement.style.left = "0";
            _this._contentWrapperElement.style.top = "0";
            setTimeout(function () {
                var bbox = _this._contentWrapperElement.getBoundingClientRect();
                _this._contentWrapperElement.style.left = "50%";
                _this._contentWrapperElement.style.top = "50%";
                _this._contentWrapperElement.style.marginLeft = Math.round(-bbox.width / 2) + "px";
                _this._contentWrapperElement.style.marginTop = Math.round(-bbox.height / 2) + "px";
            }, 1);
        }, 1);
    };
    Object.defineProperty(Modal.prototype, "classPrefix", {
        /**
         * A prefix that is applied to class names of various modal elements.
         *
         * @return {string} Class name prefix
         */
        get: function () {
            return this.adapter.apply("classPrefix", this._classPrefix);
        },
        /**
         * @param {string} value Class name prefix
         */
        set: function (value) {
            this._classPrefix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Modal.prototype, "content", {
        /**
         * @return {string} Modal content
         */
        get: function () {
            return this.adapter.apply("content", this._content);
        },
        /**
         * Modal content.
         *
         * Modal contemt can be any valid HTML, including CSS.
         * @param {string} value Modal content
         */
        set: function (value) {
            this._content = value;
            if (this._contentElement) {
                this._contentElement.innerHTML = value;
                this.positionElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Modal.prototype, "closable", {
        /**
         * @return {boolean} Closable?
         */
        get: function () {
            return this._closable;
        },
        /**
         * Is modal closable?
         *
         * If it is, it can be closed in a number of ways, e.g. by hitting ESC key,
         * clicking curtain, or clicking the close button.
         *
         * If it is not closable, the only way to close it is via `hide()` call.
         *
         * @param {boolean} value Closable?
         */
        set: function (value) {
            if (value !== this._closable) {
                this._closable = value;
                this._applyEvents();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Modal.prototype, "defaultStyles", {
        /**
         * @return {boolean} Use default CSS?
         */
        get: function () {
            return this.adapter.apply("defaultStyles", this._defaultStyles);
        },
        /**
         * Should modal use default CSS?
         *
         * If default CSS is disabled, an external CSS should handle the look of the
         * modal, since it will look quite out of place otherwise.
         *
         * @default true
         * @param {string} Use default CSS?
         */
        set: function (value) {
            if (this._defaultStyles != value) {
                this._defaultStyles = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads modal CSS.
     *
     * @ignore Exclude from docs
     */
    Modal.prototype.loadDefaultCSS = function () {
        this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_0__ModalCSS__["a" /* default */])(this.classPrefix));
        this._element.style.display = "initial";
    };
    /**
     * If modal is closable, this method adds various events to modal elements.
     */
    Modal.prototype._applyEvents = function () {
        var _this = this;
        if (this._closeIO) {
            if (this.closable) {
                this._closeIO.element.style.visibility = "visible";
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_5__utils_Disposer__["c" /* MultiDisposer */]([
                    __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* interaction */].body.events.on("keyup", function (ev) {
                        if (__WEBPACK_IMPORTED_MODULE_4__utils_Keyboard__["b" /* keyboard */].isKey(ev.event, "esc") && _this.closable) {
                            _this.hide();
                        }
                    }),
                    this._curtainIO.events.on("hit", function (ev) {
                        _this.hide();
                    }),
                    this._closeIO.events.on("hit", function (ev) {
                        _this.hide();
                    })
                ]));
            }
            else {
                this._closeIO.element.style.visibility = "hidden";
            }
        }
    };
    return Modal;
}(__WEBPACK_IMPORTED_MODULE_2__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Modal.js.map

/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Export; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ExportMenu__ = __webpack_require__(217);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__elements_Modal__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__formatters_DateFormatter__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Language__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Validatable__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Net__ = __webpack_require__(218);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__utils_DOM__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__utils_Type__ = __webpack_require__(2);
/**
 * Export module.
 *
 * Parts of Export functionality rely on the following third party libraries:
 *
 * [Fabric.js](http://fabricjs.com/)
 * Copyright (c) Printio (Juriy Zaytsev, Maxim Chernyak)
 * Licensed under [MIT](https://github.com/kangax/fabric.js/blob/master/LICENSE)
 *
 * [pdfmake](http://pdfmake.org/)
 * Copyright (c) 2014 bpampuch
 * Licensed under [MIT](https://github.com/bpampuch/pdfmake/blob/master/LICENSE)
 *
 * [SheetJS Community Edition](https://github.com/sheetjs/js-xlsx)
 * Licensed under [Apache License 2.0](https://github.com/SheetJS/js-xlsx/blob/master/LICENSE)
 *
 * [JSZip](http://stuartk.com/jszip)
 * Copyright (c) Stuart Knightley
 * Dual licenced under the [MIT license or GPLv3](https://raw.githubusercontent.com/Stuk/jszip/master/LICENSE.markdown).
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */















/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * [[Export]] allows downloading of current snapshot of the chart as an
 * image, PDF, or its data in various formats.
 *
 * The export functionality is enabled by default in charts and is accessible
 * via API or optional export menu.
 *
 * To enable menu, simply access export's `menu` property. E.g.:
 *
 * ```TypeScript
 * chart.exporting.menu = new amcharts4.ExportMenu();
 * ```
 * ```JavaScript
 * chart.exporting.menu = new amcharts4.ExportMenu();
 * ```
 * ```JSON
 * {
 *   // ...
 *   "exporting": {
 *     "menu": {}
 *   }
 * }
 * ```
 *
 * To export via API, use `export()` method:
 *
 * ```TypeScript
 * chart.exporting.export(type, [options]);
 * ```
 * ```JavaScript
 * chart.exporting.export(type, [options]);
 * ```
 *
 * E.g.:
 *
 * ```TypeScript
 * chart.exporting.export("png");
 * ```
 * ```JavaScript
 * chart.exporting.export("png");
 * ```
 *
 * @todo Better loading indicator?
 * @todo Implement multiplier option
 * @todo Handling of hanged exports
 * @important
 */
var Export = /** @class */ (function (_super) {
    __extends(Export, _super);
    /**
     * Constructor
     */
    function Export() {
        var _this = _super.call(this) || this;
        /**
         * Event dispacther..
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_2__utils_EventDispatcher__["a" /* EventDispatcher */]();
        /**
         * Adapter.
         *
         * @type {Adapter<Export, IExportAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Holds options for each format.
         *
         * @ignore Exclude from docs
         * @type {Dictionary<string, ExportOptions>}
         */
        _this._formatOptions = new __WEBPACK_IMPORTED_MODULE_5__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Holds a list of objects that were temporarily removed from the DOM while
         * exporting. Those most probably are tainted images, or foreign objects that
         * would otherwise prevent SVG to be converted to canvas.
         *
         * @ignore Exclude from docs
         * @type {List<IExportRemovedObject>}
         */
        _this._removedObjects = new __WEBPACK_IMPORTED_MODULE_4__utils_List__["b" /* List */]();
        /**
         * Exported files will be prefixed with whatever it is set here.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._filePrefix = "amCharts";
        /**
         * If export operation takes longer than milliseconds in this second, we will
         * show a modal saying export operation took longer than expected.
         *
         * @type {number}
         */
        _this.timeoutDelay = 2000;
        _this.className = "Export";
        // Set default options
        _this._formatOptions.setKey("png", {});
        _this._formatOptions.setKey("jpg", {
            quality: 0.8
        });
        _this._formatOptions.setKey("gif", {});
        _this._formatOptions.setKey("svg", {});
        _this._formatOptions.setKey("pdf", {
            fontSize: 14,
            imageFormat: "png",
            addURL: true
        });
        _this._formatOptions.setKey("json", {
            indent: 2,
            useLocale: true
        });
        _this._formatOptions.setKey("csv", {
            addColumnNames: true
        });
        _this._formatOptions.setKey("xlsx", {
            addColumnNames: true,
            useLocale: true
        });
        _this._formatOptions.setKey("print", {
            delay: 500
        });
        // Add options adapter
        _this.adapter.add("options", function (arg) {
            var formatOptions = _this._formatOptions.getKey(arg.type);
            if (arg.options) {
                arg.options = __WEBPACK_IMPORTED_MODULE_11__utils_Object__["merge"](arg.options, formatOptions);
            }
            else {
                arg.options = formatOptions;
            }
            return arg;
        });
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Export.prototype, "menu", {
        /**
         * @return {ExportMenu} ExportMenu instance
         */
        get: function () {
            return this._menu;
        },
        /**
         * An instance of [[ExportMenu]].
         *
         * To add an export menu to a chart, set this to a new instance of
         * [[ExportMenu]].
         *
         * ```TypeScript
         * chart.exporting.menu = new amcharts4.ExportMenu();
         * ```
         * ```JavaScript
         * chart.exporting.menu = new amcharts4.ExportMenu();
         * ```
         * ```JSON
         * {
         *   // ...
         *   "exporting": {
         *     "menu": {}
         *   }
         * }
         * ```
         *
         * @param {ExportMenu}  menu  ExportMenu instance
         */
        set: function (menu) {
            var _this = this;
            if (this._menu) {
                this.removeDispose(this._menu);
            }
            this._menu = menu;
            // Set container and language
            this._menu.container = this.container;
            this._menu.language = this._language;
            // Add adapter to check for browser support
            this._menu.adapter.add("branch", function (arg) {
                arg.branch.unsupported = !_this.typeSupported(arg.branch.type);
                return arg;
            });
            // Add click events
            this._menu.events.on("hit", function (ev) {
                _this.export(ev.target.type, ev.target.options);
                _this.menu.close();
            });
            this._menu.events.on("enter", function (ev) {
                _this.export(ev.target.type, ev.target.options);
                _this.menu.close();
            });
            // Dispatch event
            this.dispatchImmediately("menuCreated");
            // Prefix with Sprite's class name
            this._menu.adapter.add("classPrefix", function (obj) {
                obj.classPrefix = _this.sprite.classNamePrefix + obj.classPrefix;
                return obj;
            });
            // Add menu to disposers so that it's destroyed when Export is disposed
            this._disposers.push(this._menu);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if this specific menu item type is supported by current system.
     *
     * @param  {string}   type  Menu item type
     * @return {boolean}        `false` if not supported
     */
    Export.prototype.typeSupported = function (type) {
        var supported = true;
        if (type === "pdf") {
            supported = this.linkDownloadSupport();
        }
        else if (type === "xlsx") {
            supported = this.linkDownloadSupport() && this.data;
        }
        else if (type == "print" && !window.print) {
            supported = false;
        }
        else if (["json", "csv"].indexOf(type) !== -1 && !this.data) {
            supported = false;
        }
        return this.adapter.apply("supported", {
            supported: supported,
            type: type
        }).supported;
    };
    /**
     * Get function to handle export for particular format.
     *
     * @ignore Exclude from docs
     * @type {this}
     */
    Export.prototype._getFunction = function (type) {
        switch (type) {
            case "png":
            case "gif":
            case "jpg":
                return this.getImage;
            case "svg":
                return this.getSVG;
            case "pdf":
                return this.getPDF;
            case "xlsx":
                return this.getExcel;
            case "csv":
                return this.getCSV;
            case "json":
                return this.getJSON;
            case "print":
                return this.getPrint;
            default:
                return this.unsupported;
        }
    };
    /**
     * Initiates export procedure.
     *
     * @param  {string}   type     Export type
     * @param  {Object}   options  Options
     * @return {boolean}           `true` if export was successful
     * @async
     */
    Export.prototype.export = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var func, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Dispatch event
                        if (this.events.isEnabled("exportStarted")) {
                            this.events.dispatchImmediately("exportStarted", {
                                "type": "exportStarted",
                                "target": this,
                                "format": type,
                                "options": options
                            });
                        }
                        // Schedule a preloader
                        this.showPreloader();
                        // Schedule a timeout
                        if (this.timeoutDelay) {
                            this.hideTimeout();
                            this._timeoutTimeout = this.setTimeout(function () {
                                // Dispatch event
                                if (_this.events.isEnabled("exportTimeout")) {
                                    _this.events.dispatchImmediately("exportTimeout", {
                                        "type": "exportTimeout",
                                        "target": _this,
                                        "format": type,
                                        "options": options
                                    });
                                }
                                // Show modal
                                _this.showTimeout();
                            }, this.timeoutDelay);
                        }
                        func = this._getFunction(type);
                        // Give chance for plugins to override both function and options
                        options = this.adapter.apply("options", {
                            options: options,
                            type: type
                        }).options;
                        func = this.adapter.apply("exportFunction", {
                            func: func,
                            type: type,
                            options: options
                        }).func;
                        return [4 /*yield*/, func.call(this, type, options)];
                    case 1:
                        data = _a.sent();
                        if (data) {
                            // Dispatch event
                            if (this.events.isEnabled("exportFinished")) {
                                this.events.dispatchImmediately("exportFinished", {
                                    "type": "exportFinished",
                                    "target": this,
                                    "format": type,
                                    "options": options
                                });
                            }
                            // Hide preloader and timeout modals
                            this.hidePreloader();
                            this.hideTimeout();
                            // Download or print
                            if (type === "print") {
                                return [2 /*return*/, this.print(data, options, this.adapter.apply("title", {
                                        title: this.title,
                                        options: options
                                    }).title)];
                            }
                            else {
                                return [2 /*return*/, this.download(data, this.filePrefix + "." + type)];
                            }
                        }
                        else {
                            // Throw exception?
                            // @todo
                            // Dispatch event
                            if (this.events.isEnabled("exportError")) {
                                this.events.dispatchImmediately("exportError", {
                                    "type": "exportError",
                                    "target": this,
                                    "format": type,
                                    "options": options
                                });
                            }
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * A function that should handle unsupported export types.
     *
     * @ignore Exclude from docs
     * @param  {string}              type     Export type
     * @param  {IExportImageOptions} options  Options
     * @return {Promise<string>}               Promise
     * @async
     */
    Export.prototype.unsupported = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    /**
     * Requests a Print of the chart.
     *
     * @param  {string}               type     Export type
     * @param  {IExportImageOptions}  options  Options
     * @return {Promise<string>}               Promise
     * @async
     */
    Export.prototype.getPrint = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getImage("png", options)];
            });
        });
    };
    /**
     * Produces image output from the element.
     *
     * Converts to a `Canvas` first, then produces an image to download.
     *
     * This is an asynchronous function. Rather than returning a result, it
     * returns a Promise.
     *
     * You can use `await` notion from other async functions, or `then()`
     * anywhere else.
     *
     * ```TypeScript
     * // Async
     * let img = await chart.exporting.getImage( "PNG" );
     *
     * // Sync
     * let img;
     * chart.exporting.getImage( "PNG" ).then( ( data ) => {
     *   img = exporing;
     * } );
     * ```
     * ```JavaScript
     * var img;
     * chart.exporting.getImage( "PNG" ).then( ( data ) => {
     *   var = data;
     * } );
     * ```
     *
     * @param  {string}               type     Image format
     * @param  {IExportImageOptions}  options  Options
     * @return {Promise<string>}               Promise
     */
    Export.prototype.getImage = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var background, width, height, font, fontSize, canvas, ctx, DOMURL, data, svg, url, img, uri, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);
                        return [4 /*yield*/, this.simplifiedImageExport()];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 8];
                        width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = this.findFont(this.sprite.dom), fontSize = this.findFontSize(this.sprite.dom);
                        canvas = document.createElement("canvas");
                        canvas.width = width;
                        canvas.height = height;
                        ctx = canvas.getContext("2d");
                        // Add background if necessary
                        if (background) {
                            ctx.fillStyle = background;
                            ctx.fillRect(0, 0, width, height);
                        }
                        DOMURL = this.getDOMURL();
                        // Do prepareations on a document
                        return [4 /*yield*/, Promise.all([
                                this.imagesToDataURI(this.sprite.dom, options),
                                this.prepForeignObjects(this.sprite.dom, options)
                            ])];
                    case 2:
                        // Do prepareations on a document
                        _a.sent();
                        data = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);
                        svg = new Blob([data], { type: "image/svg+xml" });
                        url = DOMURL.createObjectURL(svg);
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 7]);
                        return [4 /*yield*/, this.loadNewImage(url, width, height, "anonymous")];
                    case 4:
                        img = _a.sent();
                        // Draw image on canvas
                        ctx.drawImage(img, 0, 0);
                        DOMURL.revokeObjectURL(url);
                        // Options are set?
                        if (!__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](options)) {
                            options = {};
                        }
                        uri = canvas.toDataURL(this.getContentType(type), options.quality);
                        // Restore replaced tainted images in DOM
                        this.restoreRemovedObjects();
                        // Return value
                        return [2 /*return*/, uri];
                    case 5:
                        e_1 = _a.sent();
                        return [4 /*yield*/, this.getImageAdvanced(type, options)];
                    case 6: 
                    // An error occurred, let's try advanced method
                    return [2 /*return*/, _a.sent()];
                    case 7: return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, this.getImageAdvanced(type, options)];
                    case 9: 
                    /**
                     * Going the hard way. Converting to canvas from each node
                     */
                    return [2 /*return*/, _a.sent()];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Tries to dynamically load [Fabric.js](http://fabricjs.com/) and export it
     * using its functions.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}               type     Image format
     * @param {IExportImageOptions}  options  Options
     * @return {Promise<string>}              Data uri
     * @todo Is toDataURL a Promise?
     */
    Export.prototype.getImageAdvanced = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var fpromise, fabric, width, height, font, fontSize, data, canvas, background, uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // Convert external images to data uris
                    return [4 /*yield*/, this.imagesToDataURI(this.sprite.dom, options)];
                    case 1:
                        // Convert external images to data uris
                        _a.sent();
                        return [4 /*yield*/, this.fabric];
                    case 2:
                        fpromise = _a.sent();
                        fabric = fpromise.fabric;
                        width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = this.findFont(this.sprite.dom), fontSize = this.findFontSize(this.sprite.dom);
                        data = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);
                        canvas = new fabric.StaticCanvas();
                        canvas.setDimensions({
                            width: width,
                            height: height
                        });
                        background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);
                        if (background) {
                            canvas.setBackgroundColor(background);
                        }
                        return [4 /*yield*/, new Promise(function (success, error) {
                                fabric.loadSVGFromString(data, function (objects, fabricOptions) {
                                    var obj = fabric.util.groupSVGElements(objects, fabricOptions);
                                    canvas.add(obj).renderAll();
                                    success(canvas.toDataURL({
                                        "type": type,
                                        "multiplier": 1,
                                        "quality": (options && options.quality) || 1,
                                        "enableRetina": false
                                    }));
                                }, _this.prepFabricElement, {
                                    "crossOrigin": "anonymous"
                                });
                            })];
                    case 3:
                        uri = _a.sent();
                        return [2 /*return*/, uri];
                }
            });
        });
    };
    /**
     * Preps objects used by FabricJS before the export.
     *
     * It performs removal of embedded SVG images, since those would trigger
     * security error on older browsers. Newer browsers are fine, but they do not
     * use Fabric, so we can safely assume that if we got to this function, we
     * have an old browser on our hands.
     *
     * @ignore Exclude from docs
     * @param {any} el  Element
     * @param {any} obj Fabric element object
     * @todo Check if we can somehow apply text formatting to `<tspan>` elements that is otherwise ignored by Fabric
     */
    Export.prototype.prepFabricElement = function (el, obj) {
        // Remove in-line SVG images so they don't cause security error
        if (obj.type == "image" && obj["xlink:href"] && obj["xlink:href"].match(/^data:image\/svg\+xml/)) {
            obj.visible = false;
        }
    };
    /**
     * Converts all `<image>` tags in SVG to use data uris instead of external
     * URLs
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param  {SVGSVGElement}        el       SVG node
     * @param  {IExportImageOptions}  options  Options
     * @return {Promise<void>}                 Promise
     */
    Export.prototype.imagesToDataURI = function (el, options) {
        return __awaiter(this, void 0, void 0, function () {
            var images, promises, count, i, image, href;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        images = el.querySelectorAll("image");
                        if (!images.length) return [3 /*break*/, 2];
                        promises = [];
                        // There are images, process each of them
                        for (count = images.length, i = 0; i < count; i++) {
                            image = images[i];
                            href = image.getAttributeNS(Export.XLINK, "href");
                            //let href = image.getAttribute("href");
                            if (href.indexOf("data:image") !== -1) {
                                // Ignore image if it's already in Data URI format
                            }
                            else {
                                // SVG or bitmap image?
                                if (href.indexOf(".svg") !== -1) {
                                    promises.push(this.svgToDataURI(image, options));
                                }
                                else {
                                    promises.push(this.imageToDataURI(image, options));
                                }
                            }
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * `foreignObject` elements cannot be exported. This function hides them
     * temprarily. In the future it might try to convert them to SVG to make them
     * exportable.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param  {SVGSVGElement}        el       SVG node
     * @param  {IExportImageOptions}  options  Options
     * @return {Promise<void>}                 Promise
     */
    Export.prototype.prepForeignObjects = function (el, options) {
        return __awaiter(this, void 0, void 0, function () {
            var objects, count, i;
            return __generator(this, function (_a) {
                objects = el.querySelectorAll("foreignObject");
                if (objects.length) {
                    // There are foreign objects, process each of them
                    for (count = objects.length, i = 0; i < count; i++) {
                        this.temporarilyRemoveObject(objects[i]);
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Converts an SVG `<image>` to use its data uri for `href` instead of
     * external file.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param {SVGImageElement}     el       SVG element
     * @param {IExportImageOptions} options  Options
     */
    Export.prototype.imageToDataURI = function (el, options) {
        return __awaiter(this, void 0, void 0, function () {
            var img, canvas, uri, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.loadNewImage(el.getAttributeNS(Export.XLINK, "href"), null, null, "anonymous")];
                    case 1:
                        // Create image
                        img = _a.sent();
                        canvas = document.createElement("canvas");
                        canvas.width = img.width;
                        canvas.height = img.height;
                        // Draw new image on it via `toDataURL`
                        canvas.getContext("2d").drawImage(img, 0, 0);
                        // Replace image `href` with data uri
                        // If we got to this point it means image has loaded, however we might
                        // still get an error with `toDataURL()`
                        try {
                            uri = canvas.toDataURL();
                            el.setAttribute("href", uri);
                            return [2 /*return*/, uri];
                        }
                        catch (e) {
                            // Give up and temporarily remove the element href temporarily
                            if (options.keepTainted !== false) {
                                /*this._removedObjects.push({
                                    "element": el,
                                    "originalHref": el.getAttributeNS(Export.XLINK, "href")
                                });
                                el.setAttributeNS(Export.XLINK, "href", "");*/
                                this.temporarilyRemoveObject(el);
                            }
                            return [2 /*return*/, undefined];
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        // Give up and temporarily remove the element's href
                        if (!options || options.keepTainted !== false) {
                            /*this._removedObjects.push({
                                "element": el,
                                "originalHref": el.getAttributeNS(Export.XLINK, "href")
                            });
                            el.setAttributeNS(Export.XLINK, "href", "");*/
                            this.temporarilyRemoveObject(el);
                        }
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Converts `<image>` with external SVG source to data uri. Loads external SVG
     * file, then converts it to data uri and replaces the `xlink:href` parameter.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param {SVGImageElement}     el        An SVG element
     * @param {IExportImageOptions} options   Options
     */
    Export.prototype.svgToDataURI = function (el, options) {
        return __awaiter(this, void 0, void 0, function () {
            var href, data, charset, uri, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        href = el.getAttributeNS(Export.XLINK, "href");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, __WEBPACK_IMPORTED_MODULE_12__utils_Net__["a" /* load */](href)];
                    case 2:
                        data = _a.sent();
                        charset = this.adapter.apply("charset", {
                            charset: "base64",
                            type: "svg",
                            options: options
                        }).charset;
                        uri = this.adapter.apply("svgToDataURI", {
                            data: "data:" + this.getContentType("svg") + ";" + charset + "," + btoa(data.response),
                            options: options
                        }).data;
                        el.setAttributeNS(Export.XLINK, "href", uri);
                        return [2 /*return*/, uri];
                    case 3:
                        e_3 = _a.sent();
                        // Disable temporarily
                        if (!options || options.keepTainted !== false) {
                            /*this._removedObjects.push({
                                "element": el,
                                "originalHref": href
                            });
                            el.setAttributeNS(Export.XLINK, "href", "");*/
                            this.temporarilyRemoveObject(el);
                        }
                        return [2 /*return*/, undefined];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Temporarily removes element from DOM, and replaces it with a dummy
     * placeholder, as well as stores it for later restoration.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param {Node} el Node
     */
    Export.prototype.temporarilyRemoveObject = function (el, placeholder) {
        // Get parent
        var parent = el.parentElement || el.parentNode;
        // Create a placeholder group element if it has not been passed in
        if (!placeholder) {
            placeholder = this.sprite.paper.add("g").node;
        }
        parent.insertBefore(placeholder, el);
        // Check if we have a textContents we can replace with
        // @todo Perhaps we should explore alternatives to creating text nodes
        // i.e. creating a text version of the HTML-based Text, just for export
        // purposes. Converting HTML into SVG is very complicated
        if (el.textContent) {
            /*let text = this.sprite.paper.add("text").node;
            text.textContent = el.textContent;
            placeholder.appendChild(text);

            // Copy properties from the removing element to the placeholder
            $dom.copyAttributes(el, placeholder);*/
        }
        // Remove the old element
        parent.removeChild(el);
        // Log removed item
        this._removedObjects.push({
            "element": el,
            "placeholder": placeholder
        });
    };
    /**
     * Restores all (possibly tainted or unsupported) objects that were
     * temporarily removed when exporting.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.restoreRemovedObjects = function () {
        var obj;
        while (obj = this._removedObjects.pop()) {
            //obj.element.setAttribute("href", obj.originalHref);
            var parent_1 = obj.placeholder.parentElement || obj.placeholder.parentNode;
            parent_1.insertBefore(obj.element, obj.placeholder);
            //parent.removeChild(obj.placeholder);
        }
    };
    /**
     * Checkes if simplified export can be used using `createObjectURL` and SVG
     * document does not contain any external images.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @return {boolean} `true` if simplified export can be used
     */
    Export.prototype.simplifiedImageExport = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cache, canvas, ctx, DOMURL, svg, url, img, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache = __WEBPACK_IMPORTED_MODULE_9__System__["b" /* system */].getCache("simplifiedImageExport");
                        if (cache === false || cache === true) {
                            return [2 /*return*/, cache];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        canvas = document.createElement("canvas");
                        canvas.width = 1;
                        canvas.height = 1;
                        ctx = canvas.getContext("2d");
                        DOMURL = this.getDOMURL();
                        svg = new Blob([this.normalizeSVG("<g></g>", {}, 1, 1)], { type: "image/svg+xml" });
                        url = DOMURL.createObjectURL(svg);
                        return [4 /*yield*/, this.loadNewImage(url, 1, 1)];
                    case 2:
                        img = _a.sent();
                        ctx.drawImage(img, 0, 0);
                        DOMURL.revokeObjectURL(url);
                        try {
                            //let uri = canvas.toDataURL("image/png");
                            __WEBPACK_IMPORTED_MODULE_9__System__["b" /* system */].setCache("simplifiedImageExport", true);
                            return [2 /*return*/, true];
                        }
                        catch (e) {
                            __WEBPACK_IMPORTED_MODULE_9__System__["b" /* system */].setCache("simplifiedImageExport", false);
                            return [2 /*return*/, false];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_4 = _a.sent();
                        __WEBPACK_IMPORTED_MODULE_9__System__["b" /* system */].setCache("simplifiedImageExport", false);
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a new `<image>` element.
     *
     * @ignore Exclude from docs
     * @param  {string}                     url          URL of the image
     * @param  {number}                     width        Width (px)
     * @param  {number}                     height       Height (px)
     * @param  {string}                     crossOrigin  Cross-Origin setting
     * @return {Promise<HTMLImageElement>}               Promise
     */
    Export.prototype.loadNewImage = function (url, width, height, crossOrigin) {
        return new Promise(function (success, error) {
            // New image
            var image;
            if (width && height) {
                image = new Image(width, height);
            }
            else {
                image = new Image();
            }
            // Set crossorigin
            if (crossOrigin) {
                image.setAttribute("crossOrigin", crossOrigin);
            }
            // Rrport success on load
            image.onload = function () {
                success(image);
            };
            function onerror() {
                // Error occurred. Just in case it's the crossOrigin issue, let's try
                // stripping off this attribute and trying again
                if (crossOrigin) {
                    // Retain old uri
                    var currentHref = image.src;
                    // Set up another `onerror` to handle situations where image is not
                    // loadable at all (i.e. protected by CORS)
                    image.onerror = function () {
                        // Nope, no luck
                        error(new Error("Loading image \"" + url + "\" failed"));
                    };
                    // remove the `crossOrigin` attribute
                    image.removeAttribute("crossorigin");
                    // retry
                    image.src = "";
                    image.src = currentHref;
                }
                else {
                    error(new Error("Loading image \"" + url + "\" failed"));
                }
            }
            // Set image error handlers
            image.onabort = onerror;
            image.onerror = onerror;
            // Trigger load
            image.src = url;
        });
    };
    /**
     * Returns current DOM URL.
     *
     * @ignore Exclude from docs
     * @return {any} URL
     */
    Export.prototype.getDOMURL = function () {
        return self.URL || self.webkitURL || self;
    };
    /**
     * Returns an SVG representation of the chart.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}             type     Type of the export
     * @param {IExportSVGOptions}  options  Options
     * @return {Promise<string>}            Promise
     */
    Export.prototype.getSVG = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var width, height, font, fontSize, svg, charset, uri;
            return __generator(this, function (_a) {
                width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = this.findFont(this.sprite.dom), fontSize = this.findFontSize(this.sprite.dom);
                svg = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);
                charset = this.adapter.apply("charset", {
                    charset: "charset=utf-8",
                    type: "svg",
                    options: options
                }).charset;
                uri = this.adapter.apply("getSVG", {
                    data: "data:" + this.getContentType(type) + ";" + charset + "," + svg,
                    options: options
                }).data;
                return [2 /*return*/, uri];
            });
        });
    };
    /**
     * Checks if SVG is fully formatted. Encloses in `<svg>...</svg>` if
     * necessary.
     *
     * @ignore Exclude from docs
     * @param  {string}             svg       Input SVG
     * @param  {IExportSVGOptions}  options   Options
     * @param  {number}             width     Width of the SVG viewport
     * @param  {number}             height    Height of the SVG viewport
     * @param  {string}             font      Font family to use as a base
     * @param  {string}             fontSize  Font size to use as a base
     * @return {string}                       Output SVG
     * @todo Add style params to existing <svg>
     */
    Export.prototype.normalizeSVG = function (svg, options, width, height, font, fontSize) {
        // Construct width/height params
        var dimParams = "";
        if (width) {
            dimParams += "width=\"" + width + "px\" ";
        }
        if (height) {
            dimParams += "height=\"" + height + "px\" ";
        }
        // Apply font settings
        var styleParams = "";
        if (font) {
            styleParams += "font-family: " + font + ";";
        }
        if (fontSize) {
            styleParams += "font-size: " + fontSize + ";";
        }
        // Add missing <svg> enclosure
        if (!svg.match(/<svg/)) {
            svg = "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg " + dimParams + " style=\"" + styleParams + "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">" + svg + "</svg>";
        }
        else {
            if (dimParams !== "") {
                // Clear current params
                svg = svg.replace(/(<svg[^>]*)width="[^"]*"/, "$1");
                svg = svg.replace(/(<svg[^>]*)height="[^"]*"/, "$1");
                // Add new params
                svg = svg.replace(/(<svg)/, "$1" + dimParams);
            }
            /*if (styleParams !== "") {
                // Clear current params
                svg = svg.replace(/(<svg[^>]*)stylewidth="[^"]*"/, "$1");
                svg = svg.replace(/(<svg[^>]*)height="[^"]*"/, "$1");

                // Add new params
                svg = svg.replace(/(<svg)/, "$1" + dimParams);
            }*/
        }
        svg = this.adapter.apply("normalizeSVG", {
            data: svg,
            options: options
        }).data;
        return svg;
    };
    /**
     * Serializes an element and returns its contents.
     *
     * @ignore Exclude from docs
     * @param  {HTMLElement | SVGSVGElement}  element  An element to serialize
     * @return {string}                                A serialized XML
     */
    Export.prototype.serializeElement = function (element) {
        return new XMLSerializer().serializeToString(element);
    };
    /**
     * Returns a PDF containing chart image.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}             type     Type of the export
     * @param {IExportPDFOptions}  options  Options
     * @return {Promise<string>}            Promise
     * @async
     * @todo Account for header when calculating vertical fit
     */
    Export.prototype.getPDF = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var image, pdfmake, defaultMargins, doc, title;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getImage(options.imageFormat || "png", options)];
                    case 1:
                        image = _a.sent();
                        return [4 /*yield*/, this.pdfmake];
                    case 2:
                        pdfmake = _a.sent();
                        defaultMargins = [30, 30, 30, 30];
                        doc = {
                            pageSize: options.pageSize || "A4",
                            pageOrientation: options.pageOrientation || "portrait",
                            pageMargins: options.pageMargins || defaultMargins,
                            //header: <any>[],
                            content: []
                        };
                        title = this.adapter.apply("title", {
                            title: this.title,
                            options: options
                        }).title;
                        if (title) {
                            doc.content.push({
                                text: title,
                                fontSize: options.fontSize,
                                bold: true,
                                margin: [0, 0, 0, 15]
                            });
                        }
                        // Add page URL?
                        if (options.addURL) {
                            doc.content.push({
                                text: this.language.translate("Saved from") + ": " + document.location.href,
                                fontSize: options.fontSize,
                                margin: [0, 0, 0, 15]
                            });
                        }
                        // Add image
                        doc.content.push({
                            image: image,
                            fit: this.getPageSizeFit(doc.pageSize, doc.pageMargins)
                        });
                        // Apply adapters
                        doc = this.adapter.apply("pdfmakeDocument", {
                            doc: doc,
                            options: options
                        }).doc;
                        return [4 /*yield*/, new Promise(function (success, error) {
                                pdfmake.createPdf(doc).getDataUrl(function (uri) {
                                    success(uri);
                                });
                            })];
                    case 3: 
                    // Create PDF
                    return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns fit dimensions for available page sizes.
     *
     * @ignore Exclude from docs
     * @param  {pageSizes} pageSize Page size
     * @return {number[]}           `[width, height]` in pixels
     */
    Export.prototype.getPageSizeFit = function (pageSize, margins) {
        // Check margins
        var newMargins = [0, 0, 0, 0];
        if (typeof margins == "number") {
            newMargins = [margins, margins, margins, margins];
        }
        else if (margins.length == 2) {
            newMargins = [margins[0], margins[1], margins[0], margins[1]];
        }
        else if (margins.length == 4) {
            newMargins = margins;
        }
        // Define available page sizes
        var sizes = {
            "4A0": [4767.87, 6740.79],
            "2A0": [3370.39, 4767.87],
            A0: [2383.94, 3370.39],
            A1: [1683.78, 2383.94],
            A2: [1190.55, 1683.78],
            A3: [841.89, 1190.55],
            A4: [595.28, 841.89],
            A5: [419.53, 595.28],
            A6: [297.64, 419.53],
            A7: [209.76, 297.64],
            A8: [147.40, 209.76],
            A9: [104.88, 147.40],
            A10: [73.70, 104.88],
            B0: [2834.65, 4008.19],
            B1: [2004.09, 2834.65],
            B2: [1417.32, 2004.09],
            B3: [1000.63, 1417.32],
            B4: [708.66, 1000.63],
            B5: [498.90, 708.66],
            B6: [354.33, 498.90],
            B7: [249.45, 354.33],
            B8: [175.75, 249.45],
            B9: [124.72, 175.75],
            B10: [87.87, 124.72],
            C0: [2599.37, 3676.54],
            C1: [1836.85, 2599.37],
            C2: [1298.27, 1836.85],
            C3: [918.43, 1298.27],
            C4: [649.13, 918.43],
            C5: [459.21, 649.13],
            C6: [323.15, 459.21],
            C7: [229.61, 323.15],
            C8: [161.57, 229.61],
            C9: [113.39, 161.57],
            C10: [79.37, 113.39],
            RA0: [2437.80, 3458.27],
            RA1: [1729.13, 2437.80],
            RA2: [1218.90, 1729.13],
            RA3: [864.57, 1218.90],
            RA4: [609.45, 864.57],
            SRA0: [2551.18, 3628.35],
            SRA1: [1814.17, 2551.18],
            SRA2: [1275.59, 1814.17],
            SRA3: [907.09, 1275.59],
            SRA4: [637.80, 907.09],
            EXECUTIVE: [521.86, 756.00],
            FOLIO: [612.00, 936.00],
            LEGAL: [612.00, 1008.00],
            LETTER: [612.00, 792.00],
            TABLOID: [792.00, 1224.00]
        };
        // Calculate size
        var fitSize = sizes[pageSize];
        fitSize[0] -= newMargins[0] + newMargins[2];
        fitSize[1] -= newMargins[1] + newMargins[3];
        return fitSize;
    };
    /**
     * Returns an Excel file of chart's data.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}               type     Type of the export
     * @param {IExportExcelOptions}  options  Options
     * @return {Promise<string>}              Promise
     * @async
     * @todo Handle dates
     * @todo Support for multi-sheet
     */
    Export.prototype.getExcel = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var XLSX, wbOptions, sheetName, wb, data, len, i, uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.xlsx];
                    case 1:
                        XLSX = _a.sent();
                        wbOptions = this.adapter.apply("xlsxWorkbookOptions", {
                            options: {
                                bookType: "xlsx",
                                bookSST: false,
                                type: "base64"
                            }
                        }).options;
                        sheetName = this.adapter.apply("xlsxSheetName", {
                            name: this.title || this.language.translate("Data")
                        }).name;
                        wb = {
                            SheetNames: [sheetName],
                            Sheets: {}
                        };
                        data = [];
                        // Add column names?
                        if (options.addColumnNames) {
                            data.push(this.getExcelRow(this.dataFields, options));
                        }
                        // Add lines
                        for (len = this.data.length, i = 0; i < len; i++) {
                            data.push(this.getExcelRow(this.data[i], options));
                        }
                        // Create sheet and add data
                        wb.Sheets[sheetName] = XLSX.utils.aoa_to_sheet(data);
                        uri = this.adapter.apply("getExcel", {
                            data: "data:" + this.getContentType(type) + ";base64," + XLSX.write(wb, wbOptions),
                            options: options
                        }).data;
                        return [2 /*return*/, uri];
                }
            });
        });
    };
    /**
     * Rertuns an array of values to be used as Excel row.
     *
     * @ignore Exclude from docs
     * @param  {any}                  row      Row data
     * @param  {IExportExcelOptions}  options  Options
     * @return {any[]}                         Array of values
     */
    Export.prototype.getExcelRow = function (row, options) {
        var _this = this;
        // Init
        var items = [];
        // Process each row item
        __WEBPACK_IMPORTED_MODULE_11__utils_Object__["each"](row, function (key, value) {
            items.push(_this.convertDateValue(key, value, options));
        });
        return items;
    };
    /**
     * Returns chart's data formatted as CSV.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}             type     Type of the export
     * @param {IExportCSVOptions}  options  Options
     * @return {Promise<string>}            Promise
     * @async
     */
    Export.prototype.getCSV = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var csv, br, len, i, row, charset, uri;
            return __generator(this, function (_a) {
                csv = "";
                br = "";
                for (len = this.data.length, i = 0; i < len; i++) {
                    row = this.getCSVRow(this.data[i], options);
                    if (options.reverse) {
                        csv = row + br + csv;
                    }
                    else {
                        csv += br + row;
                    }
                    br = "\n";
                }
                // Add column names?
                if (options.addColumnNames) {
                    csv = this.getCSVRow(this.dataFields, options) + br + csv;
                }
                charset = this.adapter.apply("charset", {
                    charset: "charset=utf-8",
                    type: type,
                    options: options
                }).charset;
                uri = this.adapter.apply("getCSV", {
                    data: "data:" + this.getContentType(type) + ";" + charset + "," + encodeURIComponent(csv),
                    options: options
                }).data;
                return [2 /*return*/, uri];
            });
        });
    };
    /**
     * Formats a row of CSV data.
     *
     * @ignore Exclude from docs
     * @param  {any}               row     An object holding data for the row
     * @param  {IExportCSVOptions} options Options
     * @return {string}                    Formated CSV line
     */
    Export.prototype.getCSVRow = function (row, options) {
        var _this = this;
        // Init
        var separator = options.separator || ",";
        var items = [];
        // Process each row item
        __WEBPACK_IMPORTED_MODULE_11__utils_Object__["each"](row, function (key, value) {
            // Convert dates
            var item = _this.convertDateValue(key, value, options);
            // Cast and escape doublequotes
            item = "" + item;
            item = item.replace(/"/g, '""');
            // Enclose into double quotes
            if (options.forceQuotes || (item.search(new RegExp("\"|\n|" + separator, "g")) >= 0)) {
                item = "\"" + item + "\"";
            }
            // Add to item
            items.push(item);
        });
        return items.join(separator);
    };
    /**
     * Returns chart's data in JSON format.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}              type     Type of the export
     * @param {IExportJSONOptions}  options  Options
     * @return {Promise<string>}             Promise
     * @async
     */
    Export.prototype.getJSON = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var json, charset, uri;
            return __generator(this, function (_a) {
                json = JSON.stringify(this.data, function (key, value) {
                    if (typeof value == "object") {
                        __WEBPACK_IMPORTED_MODULE_11__utils_Object__["each"](value, function (field, item) {
                            value[field] = _this.convertDateValue(field, item, options);
                        });
                    }
                    return value;
                }, options.indent);
                charset = this.adapter.apply("charset", {
                    charset: "charset=utf-8",
                    type: type,
                    options: options
                }).charset;
                uri = this.adapter.apply("getJSON", {
                    data: "data:" + this.getContentType(type) + ";" + charset + "," + encodeURIComponent(json),
                    options: options
                }).data;
                return [2 /*return*/, uri];
            });
        });
    };
    /**
     * Converts the value to proper date format.
     *
     * @ignore Exclude from docs
     * @param  {string}                                  field    Field name
     * @param  {any}                                     value    Value
     * @param  {IExportCSVOptions | IExportJSONOptions}  options  Options
     * @return {any}                                              Formatted date value or unmodified value
     */
    Export.prototype.convertDateValue = function (field, value, options) {
        // Is this a timestamp?
        if (typeof value == "number" && this.isDateField(field)) {
            value = new Date(value);
        }
        if (value instanceof Date) {
            if (options.useTimestamps) {
                value = value.getTime();
            }
            else if (options.useLocale) {
                value = value.toLocaleString();
            }
            else {
                value = this.dateFormatter.format(value, this.dateFormat);
            }
        }
        return value;
    };
    /**
     * Triggers download of the file.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param  {string}            uri       Data URI with file content
     * @param  {string}            fileName  File name
     * @return {Promise<boolean>}            Promise
     * @async
     */
    Export.prototype.download = function (uri, fileName) {
        return __awaiter(this, void 0, void 0, function () {
            var link, parts, contentType, decoded, chars, i, charCode, blob, parts, contentType, iframe, idoc;
            return __generator(this, function (_a) {
                //if (window.navigator.msSaveOrOpenBlob === undefined) {
                if (this.linkDownloadSupport() && !__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](window.navigator.msSaveOrOpenBlob)) {
                    link = document.createElement("a");
                    link.download = fileName;
                    link.href = uri;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
                else if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](window.navigator.msSaveBlob)) {
                    parts = uri.split(";");
                    contentType = parts.shift().replace(/data:/, "");
                    uri = decodeURIComponent(parts.join(";").replace(/^[^,]*,/, ""));
                    // Check if we need to Base64-decode
                    try {
                        decoded = atob(uri);
                        uri = decoded;
                    }
                    catch (e) {
                        // Error occurred, meaning string was not Base64-encoded. Do nothing.
                        return [2 /*return*/, false];
                    }
                    chars = new Array(uri.length);
                    for (i = 0; i < uri.length; ++i) {
                        charCode = uri.charCodeAt(i);
                        chars[i] = charCode;
                    }
                    blob = new Blob([new Uint8Array(chars)], { type: contentType });
                    window.navigator.msSaveBlob(blob, fileName);
                }
                else if (this.legacyIE()) {
                    parts = uri.match(/^data:(.*);[ ]*([^,]*),(.*)$/);
                    if (parts.length === 4) {
                        // Base64-encoded or text-based stuff?
                        if (parts[2] == "base64") {
                            // Base64-encoded - probably an image
                            if (parts[1].match(/^image\//)) {
                                // Yep, an image. Let's create a temporary image placeholder,
                                // so that user can use do Save As.
                                this.showModal("<img src=\"" + uri + "\" style=\"float: left; max-width: 50%; max-height: 80%; margin: 0 1em 0.5em 0; border: 1px solid #eee;\" />" +
                                    "<p>" + this.language.translate("To save the image, right-click thumbnail on the left and choose \"Save picture as...\"") +
                                    "</p>" +
                                    "<p style=\"text-align: center;\"><small>" + this.language.translate("(Press ESC to close this message)") + "</small></p>", this.language.translate("Image Export Complete"));
                            }
                        }
                        else {
                            contentType = void 0;
                            if (fileName.match(/\.svg$/)) {
                                contentType = "image/svg+xml";
                            }
                            else {
                                contentType = "text/plain";
                                fileName += ".txt";
                            }
                            iframe = document.createElement("iframe");
                            iframe.width = "1px";
                            iframe.height = "1px";
                            iframe.style.display = "none";
                            document.body.appendChild(iframe);
                            idoc = iframe.contentDocument;
                            idoc.open(contentType, "replace");
                            idoc.charset = parts[2].replace(/charset=/, "");
                            idoc.write(decodeURIComponent(parts[3]));
                            idoc.close();
                            idoc.execCommand("SaveAs", true, fileName);
                            // Destroy the iframe
                            document.body.removeChild(iframe);
                        }
                    }
                }
                return [2 /*return*/, true];
            });
        });
    };
    /**
     * Checks if the browser supports "download" attribute on links.
     *
     * @ignore Exclude from docs
     * @return {boolean} Browser supports triggering downloads?
     */
    Export.prototype.linkDownloadSupport = function () {
        // Do we have this cached?
        var cache = __WEBPACK_IMPORTED_MODULE_9__System__["b" /* system */].getCache("linkDownloadSupport");
        if (cache === false || cache === true) {
            return cache;
        }
        var a = document.createElement("a");
        var res = typeof a.download !== "undefined";
        __WEBPACK_IMPORTED_MODULE_9__System__["b" /* system */].setCache("linkDownloadSupport", res);
        return res;
    };
    /**
     * Checks if this is a legacy version of IE.
     *
     * @ignore Exclude from docs
     * @return {boolean} IE9 or less?
     */
    Export.prototype.legacyIE = function () {
        // Create a temporary <div> with conditional tags in it an an <i> tag.
        // Count <i>s. If there are some, we have IE9 or late on our hands.
        var div = document.createElement("div");
        div.innerHTML = "<!--[if lt IE 10]><i></i><![endif]-->";
        return div.getElementsByTagName("i").length == 1;
    };
    /**
     * Initiates print of the chart.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}               data     Data URI for the image
     * @param {IExportPrintOptions}  options  Options
     * @param {string}               title    Optional title to use (uses window's title by default)
     * @return {Promise<boolean>}             Promise
     * @async
     */
    Export.prototype.print = function (data, options, title) {
        return __awaiter(this, void 0, void 0, function () {
            var scroll, states, items, len, i, item, originalTitle, img, isIOS;
            return __generator(this, function (_a) {
                scroll = document.documentElement.scrollTop || document.body.scrollTop;
                states = [];
                items = document.body.childNodes;
                for (len = items.length, i = 0; i < len; i++) {
                    item = items[i];
                    if (__WEBPACK_IMPORTED_MODULE_13__utils_DOM__["i" /* isElement */](item)) {
                        states[i] = item.style.display;
                        item.style.display = "none";
                    }
                }
                if (title && document && document.title) {
                    originalTitle = document.title;
                    document.title = title;
                }
                img = new Image();
                img.src = data;
                img.style.maxWidth = "100%";
                document.body.appendChild(img);
                // Print
                this.setTimeout(function () {
                    window.print();
                }, 50);
                isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                if (isIOS && (options.delay < 1000)) {
                    options.delay = 1000;
                }
                else if (options.delay < 100) {
                    options.delay = 100;
                }
                // Delay function that resets back the document the way ot was before
                this.setTimeout(function () {
                    // Remove image
                    document.body.removeChild(img);
                    // Reset back all elements
                    for (var len = items.length, i = 0; i < len; i++) {
                        var item = items[i];
                        if (__WEBPACK_IMPORTED_MODULE_13__utils_DOM__["i" /* isElement */](item)) {
                            item.style.display = states[i];
                        }
                    }
                    // Restore title
                    if (originalTitle) {
                        document.title = document.title;
                    }
                    // Scroll back the document the way it was before
                    document.documentElement.scrollTop = document.body.scrollTop = scroll;
                }, options.delay || 500);
                return [2 /*return*/, true];
            });
        });
    };
    /**
     * Finds a background color for the element. If element is transparent it goes
     * up the DOM hierarchy to find a parent element that does.
     *
     * @ignore Exclude from docs
     * @param  {Element}  element Element
     * @return {string}           Color code
     */
    Export.prototype.findBackgroundColor = function (element) {
        // Check if element has styles set
        var opacity = 1, color = "";
        if (element.currentStyle) {
            color = element.currentStyle["background-color"];
        }
        else if (window.getComputedStyle) {
            color = document.defaultView.getComputedStyle(element, null).getPropertyValue("background-color");
        }
        // Check opacity
        if (color.match(/[^,]*,[^,]*,[^,]*,[ ]?0/) || color == "transparent") {
            opacity = 0;
        }
        if (opacity == 0) {
            var parent_2 = element.parentElement; // || <Element>element.parentNode;
            // Completely transparent. Look for a parent
            if (parent_2) {
                return this.findBackgroundColor(parent_2);
            }
            else {
                return undefined;
            }
        }
        else {
            return color;
        }
    };
    /**
     * Returns a font fmaily name for the element (directly set or
     * computed/inherited).
     *
     * @ignore Exclude from docs
     * @param  {Element}  element  Element
     * @return {string}            Font family
     */
    Export.prototype.findFont = function (element) {
        // Check if element has styles set
        var font = "";
        if (element.currentStyle) {
            font = element.currentStyle["font-family"];
        }
        else if (window.getComputedStyle) {
            font = document.defaultView.getComputedStyle(element, null).getPropertyValue("font-family");
        }
        if (!font) {
            // Completely transparent. Look for a parent
            var parent_3 = element.parentElement || element.parentNode;
            if (parent_3) {
                return this.findFont(parent_3);
            }
            else {
                return undefined;
            }
        }
        else {
            return font;
        }
    };
    /**
     * Returns a font fmaily name for the element (directly set or
     * computed/inherited).
     *
     * @ignore Exclude from docs
     * @param  {Element}  element  Element
     * @return {string}            Font family
     */
    Export.prototype.findFontSize = function (element) {
        // Check if element has styles set
        var font = "";
        if (element.currentStyle) {
            font = element.currentStyle["font-size"];
        }
        else if (window.getComputedStyle) {
            font = document.defaultView.getComputedStyle(element, null).getPropertyValue("font-size");
        }
        if (!font) {
            // Completely transparent. Look for a parent
            var parent_4 = element.parentElement || element.parentNode;
            if (parent_4) {
                return this.findFont(parent_4);
            }
            else {
                return undefined;
            }
        }
        else {
            return font;
        }
    };
    Object.defineProperty(Export.prototype, "container", {
        /**
         * Returns current [[ExportMenu]] container.
         *
         * @return {HTMLElement} Reference
         */
        get: function () {
            return this.adapter.apply("container", {
                container: this._container
            }).container;
        },
        /**
         * Sets container to be used to place [[ExportMenu]] in.
         *
         * @param {HTMLElement} value Reference
         */
        set: function (value) {
            this._container = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "sprite", {
        /**
         * Returns current [[Sprite]].
         *
         * @return {Sprite} Sprite
         */
        get: function () {
            return this.adapter.apply("sprite", {
                sprite: this._sprite
            }).sprite;
        },
        /**
         * Reference to [[Sprite]] to export. Can be any Sprite, including some
         * internal elements.
         *
         * @param {Sprite} value Sprite
         */
        set: function (value) {
            this._sprite = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "data", {
        /**
         * Returns current data.
         *
         * @return {any} Data
         */
        get: function () {
            return this.adapter.apply("data", {
                data: this._data
            }).data;
        },
        /**
         * Sets data to export.
         *
         * @param {any} value Data
         */
        set: function (value) {
            this._data = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "dataFields", {
        /**
         * Returns current data fields.
         *
         * @return {any} Field names `{ field: fieldName }`
         */
        get: function () {
            if (!this._dataFields) {
                this.generateDataFields();
            }
            return this.adapter.apply("dataFields", {
                dataFields: this._dataFields
            }).dataFields;
        },
        /**
         * Sets data fields in `{ field: fieldName }` format. Those are used for
         * exporting in data formats to name the columns.
         *
         * @param {any} value Field names
         */
        set: function (value) {
            this._dataFields = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "dateFormatter", {
        /**
         * Returns current [[DateFormatter]].
         *
         * @return {any} A DateFormatter instance
         */
        get: function () {
            if (!this._dateFormatter) {
                this._dateFormatter = new __WEBPACK_IMPORTED_MODULE_6__formatters_DateFormatter__["a" /* DateFormatter */]();
            }
            return this.adapter.apply("dateFormatter", {
                dateFormatter: this._dateFormatter
            }).dateFormatter;
        },
        /**
         * Sets a [[DateFormatter]] to use when formatting dates when exporting data.
         *
         * @param {any} value DateFormatter instance
         */
        set: function (value) {
            this._dateFormatter = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "dateFormat", {
        /**
         * Returns current date format setting.
         *
         * @return {string} Date format
         */
        get: function () {
            return this.adapter.apply("dateFormat", {
                dateFormat: this._dateFormat
            }).dateFormat;
        },
        /**
         * Sets a date format to use for exporting dates. Will use [[DateFormatter]]
         * format if not set.
         *
         * @param {string} value Date format
         */
        set: function (value) {
            this._dateFormat = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "dateFields", {
        /**
         * Returns current list of date fields.
         *
         * @return {List<string>} Date field list
         */
        get: function () {
            if (!this._dateFields) {
                this._dateFields = new __WEBPACK_IMPORTED_MODULE_4__utils_List__["b" /* List */]();
            }
            return this.adapter.apply("dateFields", {
                dateFields: this._dateFields
            }).dateFields;
        },
        /**
         * Sets a list of fields that hold date values.
         *
         * @param {List<string>} value Date field list
         */
        set: function (value) {
            this._dateFields = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Generates data fields out of the first row of data.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.generateDataFields = function () {
        var _this = this;
        this._dataFields = {};
        if (this.data.length) {
            var row = this.data[0];
            __WEBPACK_IMPORTED_MODULE_11__utils_Object__["each"](row, function (key, value) {
                _this._dataFields[key] = _this.adapter.apply("dataFieldName", {
                    name: key,
                    field: key
                }).name;
            });
        }
    };
    /**
     * Cheks against `dateFields` property to determine if this field holds
     * dates.
     *
     * @ignore Exclude from docs
     * @param  {string}        field   Field name
     * @param  {IExportOptions} options Options
     * @return {boolean}               `true` if it's a date field
     */
    Export.prototype.isDateField = function (field) {
        return this.adapter.apply("isDateField", {
            isDateField: this.dateFields.contains(field),
            field: field
        }).isDateField;
    };
    /**
     * Returns proper content type for the export type.
     *
     * @param  {string}  type  Export format/type
     * @return {string}        Proper content type, i.e. "image/jpeg"
     */
    Export.prototype.getContentType = function (type) {
        var contentType = "";
        switch (type) {
            case "png":
            case "gif":
                contentType = "image/" + type;
                break;
            case "jpg":
                contentType = "image/jpeg";
                break;
            case "svg":
                contentType = "image/svg+xml";
                break;
            case "csv":
                contentType = "text/csv";
                break;
            case "json":
                contentType = "application/json";
                break;
            case "pdf":
                contentType = "application/pdf";
                break;
            case "xlsx":
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                break;
        }
        return this.adapter.apply("contentType", {
            contentType: contentType,
            type: type
        }).contentType;
    };
    Object.defineProperty(Export.prototype, "filePrefix", {
        /**
         * Returns current file prefix.
         *
         * @return {string} File prefix
         */
        get: function () {
            return this.adapter.apply("filePrefix", {
                filePrefix: this._filePrefix
            }).filePrefix;
        },
        /**
         * Sets a file prefix to be used for all exported formats.
         *
         * Export will apply format-related extension to it. E.g. if this is set to
         * "myExport", the file name of the PNG exported image will be "myExport.png".
         *
         * @param {string} value File prefix
         */
        set: function (value) {
            this._filePrefix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "backgroundColor", {
        /**
         * Returns currently set background color.
         *
         * @return {string} Background color
         */
        get: function () {
            return this.adapter.apply("backgroundColor", {
                backgroundColor: this._backgroundColor
            }).backgroundColor;
        },
        /**
         * Sets a background color to be used for exported images. If set, this will
         * override the automatically acquired background color.
         *
         * @param {string} value Color
         * @todo Use [[Color]] instead of string.
         */
        set: function (value) {
            this._backgroundColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "title", {
        /**
         * Returns currently set print title.
         *
         * @return {string} Title
         */
        get: function () {
            return this.adapter.apply("title", {
                title: this._title
            }).title;
        },
        /**
         * Sets a title to be used when printing.
         *
         * @param {string} value Title
         */
        set: function (value) {
            this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Displays a preloader/exporting indicator.
     *
     * @ignore Exclude from docs
     * @todo Add ability to change text
     */
    Export.prototype.showPreloader = function () {
        var preloader = this.preloader;
        if (preloader) {
            preloader.progress = 0.5;
            preloader.label.text = "...";
        }
    };
    /**
     * Hides preloader/exporting indicator
     *
     * @ignore Exclude from docs
     */
    Export.prototype.hidePreloader = function () {
        var preloader = this.preloader;
        if (preloader) {
            preloader.progress = 1;
        }
    };
    Object.defineProperty(Export.prototype, "preloader", {
        /**
         * Returns a an instance of [[Preloader]] associated with the Sprite being
         * exported.
         *
         * @return {Preloader} Preloader
         */
        get: function () {
            return this._sprite && this._sprite.parent && this._sprite.parent.preloader ?
                this._sprite.parent.preloader :
                undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Displays a modal saying export is taking longer than expected.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.showTimeout = function () {
        this.showModal(this.adapter.apply("timeoutMessage", {
            message: this.language.translate("Export operation took longer than expected. Something might have gone wrong.")
        }).message);
    };
    /**
     * Hides preloader/exporting indicator.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.hideTimeout = function () {
        if (this._timeoutTimeout) {
            this.removeDispose(this._timeoutTimeout);
            this._timeoutTimeout = null;
        }
        this.hideModal();
    };
    Object.defineProperty(Export.prototype, "language", {
        /**
         * Returns current [[Language]] instance. If it's not set a new instance is
         * created.
         *
         * @return {Language} A [[Language]] instance to be used
         */
        get: function () {
            if (this._language) {
                return this._language;
            }
            this.language = new __WEBPACK_IMPORTED_MODULE_7__utils_Language__["a" /* Language */]();
            return this.language;
        },
        /**
         * Sets [[Language]] instance.
         *
         * @param {Language} value An instance of [[Language]]
         */
        set: function (value) {
            this._language = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "modal", {
        /**
         * Returns (and creates) [[Modal]].
         *
         * @ignore Exclude from docs
         * @return {Modal} Modal instance
         */
        get: function () {
            var _this = this;
            if (!this._modal) {
                this._modal = new __WEBPACK_IMPORTED_MODULE_3__elements_Modal__["a" /* Modal */]();
                // Prefix with Sprite's class name
                this._modal.adapter.add("classPrefix", function (value) {
                    value = _this.sprite.classNamePrefix + value;
                    return value;
                });
            }
            return this._modal;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows [[Modal]] with specific text.
     *
     * @ignore Exclude from docs
     * @param {string} text Modal contents
     */
    Export.prototype.showModal = function (text, title) {
        // Hide previous modal and preloader
        this.hideModal();
        this.hidePreloader();
        // Create modal
        var modal = this.modal;
        modal.container = this.sprite.svgContainer;
        modal.content = text;
        modal.readerTitle = title;
        modal.show();
    };
    /**
     * Hides modal window if one's currently open.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.hideModal = function () {
        if (this._modal) {
            this.modal.hide();
        }
    };
    /**
     * Loads Fabric dynamic module.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @return {Promise<any>} Instance of Fabric
     * @async
     */
    Export.prototype._fabric = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __webpack_require__.e/* import() */(2).then(__webpack_require__.bind(null, 585))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Object.defineProperty(Export.prototype, "fabric", {
        /**
         * Returns Fabric instance.
         *
         * @ignore Exclude from docs
         * @return {Promise<any>} Instance of Fabric
         */
        get: function () {
            return this._fabric();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads pdfmake dynamic module
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @return {Promise<any>} Instance of pdfmake
     * @async
     */
    Export.prototype._pdfmake = function () {
        return __awaiter(this, void 0, void 0, function () {
            var a, pdfmake, vfs_fonts;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 586)),
                            __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 587))
                        ])];
                    case 1:
                        a = _a.sent();
                        pdfmake = a[0];
                        vfs_fonts = a[1];
                        pdfmake.vfs = vfs_fonts.pdfMake.vfs;
                        return [2 /*return*/, pdfmake];
                }
            });
        });
    };
    Object.defineProperty(Export.prototype, "pdfmake", {
        /**
         * Returns pdfmake instance.
         *
         * @ignore Exclude from docs
         * @return {Promise<any>} Instance of pdfmake
         */
        get: function () {
            return this._pdfmake();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads xlsx dynamic module.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @return {Promise<any>} Instance of pdfmake
     * @async
     */
    Export.prototype._xlsx = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __webpack_require__.e/* import() */(1).then(__webpack_require__.bind(null, 588))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Object.defineProperty(Export.prototype, "xlsx", {
        /**
         * Returns xlsx instance.
         *
         * @ignore Exclude from docs
         * @return {Promise<any>} Instance of pdfmake
         */
        get: function () {
            return this._xlsx();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets options for a format.
     *
     * @type {Key}
     */
    Export.prototype.setFormatOptions = function (type, options) {
        this._formatOptions.setKey(type, options);
    };
    /**
     * Returns current options for a format.
     */
    Export.prototype.getFormatOptions = function (type) {
        return this._formatOptions.getKey(type);
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    Export.prototype.processConfig = function (config) {
        __WEBPACK_IMPORTED_MODULE_10__Registry__["a" /* registry */].registeredClasses["ExportMenu"] = __WEBPACK_IMPORTED_MODULE_0__ExportMenu__["a" /* ExportMenu */];
        if (config) {
            // Set up menu
            if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](config.menu) && !__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](config.menu.type)) {
                config.menu.type = "ExportMenu";
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    /**
     * XLINK namespace definition.
     *
     * @ignore Exclude from docs
     * @type {string}
     */
    Export.XLINK = "http://www.w3.org/1999/xlink";
    return Export;
}(__WEBPACK_IMPORTED_MODULE_8__utils_Validatable__["a" /* Validatable */]));

//# sourceMappingURL=Export.js.map

/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Validatable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__System__ = __webpack_require__(21);
/**
 * This module defines a [[Validatable]] class which can be used by all
 * non-[[Sprite]] classes to use system beats to revalite themselves.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * This module defines a [[Validatable]] class which can be used by all
 * non-[[Sprite]] classes to use system update cycle to revalidate themselves.
 *
 * @ignore Exclude from docs
 */
var Validatable = /** @class */ (function (_super) {
    __extends(Validatable, _super);
    function Validatable() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Is invalid and should be revalidated?
         *
         * @type {boolean}
         */
        _this._invalid = false;
        return _this;
    }
    /**
     * Invalidates the element, so that it can re-validate/redraw itself in the
     * next cycle.
     *
     * @ignore Exclude from docs
     */
    Validatable.prototype.invalidate = function () {
        if (this._invalid === false) {
            this._invalid = true;
            __WEBPACK_IMPORTED_MODULE_1__System__["b" /* system */].events.on("exitframe", this.validate, this);
        }
    };
    /**
     * Validates itself.
     *
     * Most probably the extending class will have an overriding `validate()`
     * method which will do actual work, as well as call this method using
     * `super.validate()`.
     *
     * @ignore Exclude from docs
     */
    Validatable.prototype.validate = function () {
        if (this._invalid === true) {
            this._invalid = false;
            __WEBPACK_IMPORTED_MODULE_1__System__["b" /* system */].events.off("exitframe", this.validate, this);
        }
    };
    return Validatable;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Validatable.js.map

/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CSVParser; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataParser__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Type__ = __webpack_require__(2);
/**
 * CSV parser.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * Define possible separators.
 */
var separators = [",", ";", "\t"];
/**
 * A parser for CSV format.
 *
 * @important
 */
var CSVParser = /** @class */ (function (_super) {
    __extends(CSVParser, _super);
    function CSVParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Content-type suitable for CSV format.
         *
         * @type {string}
         */
        _this.type = "text/csv";
        /**
         * Parser options.
         *
         * @see {@link ICSVOptions} for description of each option
         * @type {ICSVOptions}
         */
        _this.options = {
            delimiter: "",
            reverse: false,
            skipRows: 0,
            skipEmpty: true,
            useColumnNames: false
        };
        return _this;
    }
    /**
     * Tests if the format is CSV.
     *
     * @param  {string}   data  Source data
     * @return {boolean}        Is it CSV?
     */
    CSVParser.isCSV = function (data) {
        return CSVParser.getDelimiterFromData(data) ? true : false;
    };
    /**
     * Tries to determine a column separator.
     *
     * @param  {string}  data  Source data
     * @return {string}        Separator
     */
    CSVParser.getDelimiterFromData = function (data) {
        // We're going to take first few lines of the CSV with different 
        // possible separators and check if it results in same number of columns.
        // If it does, we're going to assume it's a CSV
        var lines = data.split("\n");
        var separator;
        for (var x in separators) {
            var sep = separators[x], columns = 0, lineColums = 0;
            for (var i in lines) {
                // Get number of columns in a line
                columns = lines[i].split(sep).length;
                if (columns > 1) {
                    // More than one column - possible candidate
                    if (lineColums === 0) {
                        // First line
                        lineColums = columns;
                    }
                    else if (columns != lineColums) {
                        // Incorrect number of columns, give up on this separator
                        lineColums = 0;
                        break;
                    }
                }
                else {
                    // Not this separator
                    // Not point in continuing
                    lineColums = 0;
                    break;
                }
            }
            // Check if we have a winner
            if (lineColums) {
                separator = sep;
            }
        }
        return separator;
    };
    /**
     * Parses and returns data.
     *
     * @param  {string}  data  Unparsed data
     * @return {any}           Parsed data
     */
    CSVParser.prototype.parse = function (csv) {
        // Check if we have delimiter set
        if (!this.options.delimiter) {
            this.options.delimiter = CSVParser.getDelimiterFromData(csv);
        }
        // Get CSV data as array
        var data = this.CSVToArray(csv, this.options.delimiter);
        // Do we need to cast some fields to numbers?
        var empty = __WEBPACK_IMPORTED_MODULE_1__utils_Type__["hasValue"](this.options.emptyAs);
        var numbers = this.parsableNumbers;
        var dates = this.parsableDates;
        // Init resuling array
        var res = [], cols = [], col, i;
        // First row holds column names?
        if (this.options.useColumnNames) {
            cols = data.shift();
            // Normalize column names
            for (var x = 0; x < cols.length; x++) {
                // trim
                col = cols[x].replace(/^\s+|\s+$/gm, "");
                // Check for empty
                if ("" === col)
                    col = "col" + x;
                cols[x] = col;
            }
            if (0 < this.options.skipRows)
                this.options.skipRows--;
        }
        // Skip rows
        for (i = 0; i < this.options.skipRows; i++)
            data.shift();
        // Iterate through the result set
        var row;
        while ((row = this.options.reverse ? data.pop() : data.shift())) {
            if (this.options.skipEmpty && row.length === 1 && row[0] === "")
                continue;
            var dataPoint = {};
            for (i = 0; i < row.length; i++) {
                col = undefined === cols[i] ? "col" + i : cols[i];
                dataPoint[col] = row[i] === "" ? this.options.emptyAs : row[i];
                // Convert 
                if (empty) {
                    row[col] = this.maybeToEmpty(dataPoint[col]);
                }
                if (numbers) {
                    row[col] = this.maybeToNumber(col, dataPoint[col]);
                }
                if (dates) {
                    row[col] = this.maybeToDate(col, dataPoint[col]);
                }
            }
            res.push(dataPoint);
        }
        return res;
    };
    /**
     * Converts CSV into array.
     *
     * The functionality of this function is taken from here:
     * http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm
     *
     * @param  {string}  data       Source data
     * @param  {string}  delimiter  Column delimiter
     * @return {any[]}              Parsed array
     */
    CSVParser.prototype.CSVToArray = function (data, delimiter) {
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        delimiter = (delimiter || ',');
        // Create a regular expression to parse the CSV values.
        var objPattern = new RegExp((
        // Delimiters.
        "(\\" + delimiter + "|\\r?\\n|\\r|^)" +
            // Quoted fields.
            "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
            // Standard fields.
            "([^\"\\" + delimiter + "\\r\\n]*))"), "gi");
        // Create an array to hold our data. Give the array
        // a default empty first row.
        var arrData = [
            []
        ];
        // Create an array to hold our individual pattern
        // matching groups.
        var arrMatches = null;
        // Keep looping over the regular expression matches
        // until we can no longer find a match.
        while ((arrMatches = objPattern.exec(data))) {
            // Get the delimiter that was found.
            var strMatchedDelimiter = arrMatches[1];
            // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.
            if (strMatchedDelimiter.length &&
                (strMatchedDelimiter !== delimiter)) {
                // Since we have reached a new row of data,
                // add an empty row to our data array.
                arrData.push([]);
            }
            // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).
            var strMatchedValue = void 0;
            if (arrMatches[2]) {
                // We found a quoted value. When we capture
                // this value, unescape any double quotes.
                strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
            }
            else {
                // We found a non-quoted value.
                strMatchedValue = arrMatches[3];
            }
            // Now that we have our value string, let's add
            // it to the data array.
            arrData[arrData.length - 1].push(strMatchedValue);
        }
        // Return the parsed data.
        return (arrData);
    };
    return CSVParser;
}(__WEBPACK_IMPORTED_MODULE_0__DataParser__["a" /* DataParser */]));

//# sourceMappingURL=CSVParser.js.map

/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DataParser; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatters_DateFormatter__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Type__ = __webpack_require__(2);
/**
 * Data parser module.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base class for the data parsers.
 */
var DataParser = /** @class */ (function () {
    function DataParser() {
    }
    /**
     * A "placeholder" function for real parsers to override.
     *
     * @ignore Exclude from docs
     * @param  {string}  data  Source data
     * @return {any}           Parsed data (empty)
     */
    DataParser.prototype.parse = function (data) {
        return [];
    };
    ;
    Object.defineProperty(DataParser.prototype, "parsableNumbers", {
        /**
         * Checks if there are any numeric fields that need to be converted to
         * numbers.
         *
         * @return {boolean} Numeric fields?
         */
        get: function () {
            return this.options.numberFields && (this.options.numberFields.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts a value to 'number' if it is in `numberFields`.
     *
     * @param  {string}  field  Field name
     * @param  {any}     value  Value
     * @return {any}            Parsed or original value
     */
    DataParser.prototype.maybeToNumber = function (field, value) {
        if (this.options.numberFields.indexOf(field) !== -1) {
            return __WEBPACK_IMPORTED_MODULE_1__utils_Utils__["anyToNumber"](value);
        }
        return value;
    };
    Object.defineProperty(DataParser.prototype, "parsableDates", {
        /**
         * Checks if there are any date fields that need to be converted to `Date`
         * objects.
         *
         * @return {boolean} Date fields?
         */
        get: function () {
            return this.options.dateFields && (this.options.dateFields.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts a value to `Date` if it is in `dateFields`.
     *
     * @param  {string}  field  Field name
     * @param  {any}     value  Value
     * @return {any}            Parsed or original value
     */
    DataParser.prototype.maybeToDate = function (field, value) {
        if (this.options.dateFields.indexOf(field) !== -1) {
            return this.options.dateFormatter.parse(value, this.dateFormat);
        }
        return value;
    };
    /**
     * Replaces empty value with something else.
     *
     * @param  {any}  value  Source value
     * @return {any}         Source value or replacement
     */
    DataParser.prototype.maybeToEmpty = function (value) {
        if ((!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](value) || value == "") && __WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](this.options.emptyAs)) {
            return this.options.emptyAs;
        }
        return value;
    };
    Object.defineProperty(DataParser.prototype, "dateFormatter", {
        /**
         * [[DateFormatter]] object for date parsing.
         *
         * If there was not [[DateFormatter]] supplied in parser options, a new one
         * is created.
         *
         * @return {DateFormatter} Date formatter
         * @see {@link DateFormatter}
         */
        get: function () {
            if (!this.options.dateFormatter) {
                this.options.dateFormatter = new __WEBPACK_IMPORTED_MODULE_0__formatters_DateFormatter__["a" /* DateFormatter */];
                if (this.options.dateFormat) {
                    this.options.dateFormat = this.options.dateFormat;
                }
            }
            return this.options.dateFormatter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataParser.prototype, "dateFormat", {
        /**
         * A date format to use when parsing dates.
         *
         * @return {string} Date format
         * @see {@link DateFormatter}
         */
        get: function () {
            return this.options.dateFormat || this.dateFormatter.dateFormat;
        },
        enumerable: true,
        configurable: true
    });
    return DataParser;
}());

//# sourceMappingURL=DataParser.js.map

/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return JSONParser; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataParser__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Type__ = __webpack_require__(2);
/**
 * JSON parser.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * A parser for JSON.
 *
 * @important
 */
var JSONParser = /** @class */ (function (_super) {
    __extends(JSONParser, _super);
    function JSONParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Content-type suitable for JSON format.
         *
         * @type {string}
         */
        _this.type = "application/json";
        /**
         * Parser options.
         *
         * @see {@link IJSONOptions} for description of each option
         * @type {IJSONOptions}
         */
        _this.options = {};
        return _this;
    }
    /**
     * Tests if the data is valid JSON.
     *
     * @param  {string}   data  Source data
     * @return {boolean}        Is it JSON?
     */
    JSONParser.isJSON = function (data) {
        try {
            // Try parsing JSON
            JSON.parse(data);
            // If we got to this point it means it's a valid JSON
            return true;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Parses and returns data.
     *
     * @param  {string}  data  Unparsed data
     * @return {any}           Parsed data
     */
    JSONParser.prototype.parse = function (data) {
        var _this = this;
        // Init return
        var res;
        // Try parsing
        try {
            if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](JSON)) {
                res = JSON.parse(data);
            }
        }
        catch (e) {
            return undefined;
        }
        // Do we need to cast some fields to numbers or dates?
        var empty = __WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](this.options.emptyAs);
        var numbers = this.parsableNumbers;
        var dates = this.parsableDates;
        if (Array.isArray(res) && (numbers || dates || empty)) {
            var _loop_1 = function (i, len) {
                var row = res[i];
                __WEBPACK_IMPORTED_MODULE_1__utils_Object__["each"](row, function (key, value) {
                    if (empty) {
                        row[key] = _this.maybeToEmpty(row[key]);
                    }
                    if (numbers) {
                        row[key] = _this.maybeToNumber(key, row[key]);
                    }
                    if (dates) {
                        row[key] = _this.maybeToDate(key, row[key]);
                    }
                });
            };
            // Iterate through the data and check if it needs to be converted
            for (var i = 0, len = res.length; i < len; i++) {
                _loop_1(i, len);
            }
        }
        // Convert to array
        //return Array.isArray(res) ? res : [res];
        return res;
    };
    return JSONParser;
}(__WEBPACK_IMPORTED_MODULE_0__DataParser__["a" /* DataParser */]));

//# sourceMappingURL=JSONParser.js.map

/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Tick; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 * Tick module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A basic Tick class.
 *
 * A tick is a short dash, mainly connecting an object like axis or slice to
 * it's textual label.
 *
 * @see {@link ITickEvents} for a list of available events
 * @see {@link ITickAdapters} for a list of available Adapters
 * @important
 */
var Tick = /** @class */ (function (_super) {
    __extends(Tick, _super);
    /**
     * Constructor
     */
    function Tick() {
        var _this = _super.call(this) || this;
        _this.className = "Tick";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.fillOpacity = 0;
        _this.length = 6;
        _this.strokeOpacity = 0.2;
        _this.stroke = interfaceColors.getFor("grid");
        _this.isMeasured = false;
        _this.nonScalingStroke = true;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Tick.prototype, "length", {
        /**
         * @return {number} Length (px)
         */
        get: function () {
            if (this.disabled) {
                return 0;
            }
            return this.getPropertyValue("length");
        },
        /**
         * Length of the tick in pixels.
         *
         * @param {number}  value  Length (px)
         */
        set: function (value) {
            this.setPropertyValue("length", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Tick;
}(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["a" /* registry */].registeredClasses["Tick"] = Tick;
//# sourceMappingURL=Tick.js.map

/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WavedRectangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Rectangle__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rendering_Path__ = __webpack_require__(12);
/**
 * Functionality for drawing rectangles with waved edges.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a rectangle with waved edges.
 *
 * @see {@link IWavedRectangleEvents} for a list of available events
 * @see {@link IWavedRectangleAdapters} for a list of available Adapters
 */
var WavedRectangle = /** @class */ (function (_super) {
    __extends(WavedRectangle, _super);
    /**
     * Constructor
     */
    function WavedRectangle() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Top waved?
         *
         * @type {boolean}
         */
        _this._twaved = true;
        /**
         * Right side waved?
         *
         * @type {boolean}
         */
        _this._rwaved = true;
        /**
         * Bottom waved?
         *
         * @type {boolean}
         */
        _this._bwaved = true;
        /**
         * Left side waved?
         *
         * @type {boolean}
         */
        _this._lwaved = true;
        _this.className = "WavedRectangle";
        // Add path element
        _this.element = _this.paper.add("path");
        // Set defaults
        _this.waveLength = 16;
        _this.waveHeight = 4;
        _this.tension = 0.8;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the waved rectangle.
     *
     * @ignore Exclude from docs
     */
    WavedRectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.pixelWidth;
        var h = this._pixelHeight;
        if (w > 0 && h > 0) {
            var p1 = { x: 0, y: 0 };
            var p2 = { x: w, y: 0 };
            var p3 = { x: w, y: h };
            var p4 = { x: 0, y: h };
            var waveLength = this.waveLength;
            var waveHeight = this.waveHeight;
            var td = "";
            var rd = "";
            var bd = "";
            var ld = "";
            if (this._twaved) {
                td = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["wavedLine"](p1, p2, waveLength, waveHeight, this.tension, true);
            }
            if (this._rwaved) {
                ld = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["wavedLine"](p2, p3, waveLength, waveHeight, this.tension, true);
            }
            if (this._bwaved) {
                bd = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["wavedLine"](p3, p4, waveLength, waveHeight, this.tension, true);
            }
            if (this._rwaved) {
                rd = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["wavedLine"](p4, p1, waveLength, waveHeight, this.tension, true);
            }
            var d = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["moveTo"](p1) + td + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"](p2) + ld + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"](p3) + bd + __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["lineTo"](p4) + rd + "z";
            this.element.attr({ "d": d });
        }
    };
    Object.defineProperty(WavedRectangle.prototype, "waveLength", {
        /**
         * @return {number} Wave length (px)
         */
        get: function () {
            return this.getPropertyValue("waveLength");
        },
        /**
         * Wave length in pixels.
         *
         * @default 16
         * @param {number}  value  Wave length (px)
         */
        set: function (value) {
            this.setPropertyValue("waveLength", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedRectangle.prototype, "waveHeight", {
        /**
         * @return {number} Wave height (px)
         */
        get: function () {
            return this.getPropertyValue("waveHeight");
        },
        /**
         * Wave height in pixels.
         *
         * @default 4
         * @param {number}  value  Wave height (px)
         */
        set: function (value) {
            this.setPropertyValue("waveHeight", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets which side should be waved or not. If particular side is set to
     * `false`, a straight line will be drawn on that side.
     *
     * @param {boolean}  top     Top waved?
     * @param {boolean}  right   Right side waved?
     * @param {boolean}  bottom  Bottom Waved?
     * @param {boolean}  left    Left side waved?
     */
    WavedRectangle.prototype.setWavedSides = function (top, right, bottom, left) {
        this._twaved = top;
        this._lwaved = right;
        this._bwaved = bottom;
        this._rwaved = left;
    };
    /**
     * Updates bounding box based on element dimension settings.
     *
     * @ignore Exclude from docs
     */
    WavedRectangle.prototype.measureElement = function () {
        this._bbox = {
            x: 0,
            y: 0,
            width: this.innerWidth,
            height: this.innerHeight
        };
    };
    Object.defineProperty(WavedRectangle.prototype, "tension", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tension");
        },
        /**
         * Tension of the wave.
         *
         * @default 0.8
         * @param {number}  value  Tension
         */
        set: function (value) {
            this.setPropertyValue("tension", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    return WavedRectangle;
}(__WEBPACK_IMPORTED_MODULE_0__Rectangle__["a" /* Rectangle */]));

//# sourceMappingURL=WavedRectangle.js.map

/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ValueAxisBreak; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisBreak__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(1);
/**
 * A module which defines functionality related to Value Axis Break.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base class to define "breaks" on value axis.
 *
 * A "break" can be used to "cut out" specific ranges of the axis scale, e.g.
 * when comparing columns with relatively similar values, it would make sense
 * to cut out their mid section, so that their tip differences are more
 * prominent.
 *
 * @see {@link IValueAxisBreakEvents} for a list of available events
 * @see {@link IValueAxisBreakAdapters} for a list of available Adapters
 * @important
 */
var ValueAxisBreak = /** @class */ (function (_super) {
    __extends(ValueAxisBreak, _super);
    /**
     * Constructor
     */
    function ValueAxisBreak() {
        var _this = _super.call(this) || this;
        _this.className = "ValueAxisBreak";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ValueAxisBreak.prototype, "startPosition", {
        /**
         * Pixel position of the break's start.
         *
         * @return {number} Position (px)
         * @readonly
         */
        get: function () {
            if (this.axis) {
                return this.axis.valueToPosition(this.adjustedStartValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxisBreak.prototype, "endPosition", {
        /**
         * Pixel position of the break's end.
         *
         * @return {number} Position (px)
         * @readonly
         */
        get: function () {
            if (this.axis) {
                return this.axis.valueToPosition(this.adjustedEndValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    return ValueAxisBreak;
}(__WEBPACK_IMPORTED_MODULE_0__AxisBreak__["a" /* AxisBreak */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["a" /* registry */].registeredClasses["ValueAxisBreak"] = ValueAxisBreak;
//# sourceMappingURL=ValueAxisBreak.js.map

/***/ }),
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LightenFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(51);
/**
 * Module for "Lighten" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a "Lighten" filter.
 */
var LightenFilter = /** @class */ (function (_super) {
    __extends(LightenFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function LightenFilter() {
        var _this = _super.call(this) || this;
        _this.className = "LightenFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feColorMatrix = _this.paper.add("feColorMatrix");
        _this.feColorMatrix.attr({ "type": "matrix" });
        _this.filterPrimitives.push(_this.feColorMatrix);
        // Set default properties
        _this.lightness = 0;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(LightenFilter.prototype, "lightness", {
        /**
         * @return {number} Lightness (0-1)
         */
        get: function () {
            return this.properties["lightness"];
        },
        /**
         * Lightness. (0-1)
         *
         * @param {number} value Lightness (0-1)
         */
        set: function (value) {
            this.properties["lightness"] = value;
            var v = value + 1;
            this.feColorMatrix.attr({ "values": v + " 0 0 0 0 0 " + v + " 0 0 0 0 0 " + v + " 0 0 0 0 0 1 0" });
        },
        enumerable: true,
        configurable: true
    });
    return LightenFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=LightenFilter.js.map

/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LinearGradientModifier; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColorModifier__ = __webpack_require__(244);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__LinearGradient__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(2);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This class can be used to modify linear gradient steps, changing visual
 * properties like lightness, brightness, opacity of each set.
 *
 * It can also set offsets for each gradient step.
 *
 * E.g. if I want to fill a columns in a column series to be a solid fill from
 * top to 80% of height, then gradually fades out, I can use the following
 * gradient modifier as a `fillModifier`:
 *
 * ```TypeScript
 * let fillModifier = new amcharts4.LinearGradientModifier();
 * fillModifier.opacities = [1, 1, 0];
 * fillModifier.offsets = [0, 0.8, 1];
 * columnSeries.columns.template.fillModifier = fillModifier;
 * ```
 * ```JavaScript
 * var fillModifier = new amcharts4.LinearGradientModifier();
 * fillModifier.opacities = [1, 1, 0];
 * fillModifier.offsets = [0, 0.8, 1];
 * columnSeries.columns.template.fillModifier = fillModifier;
 * ```
 * ```JSON
 * "series": [{
 *   "type": "ColumnSeries",
 *   "columns": {
 *     "fillModifier": {
 *       "type": "LinearGradientModifier",
 *       "opacities": [1, 1, 0],
 *       "offsets": [0, 0.8, 1]
 *     }
 *   }
 * }]
 * ```
 */
var LinearGradientModifier = /** @class */ (function (_super) {
    __extends(LinearGradientModifier, _super);
    /**
     * Constructor.
     */
    function LinearGradientModifier() {
        var _this = _super.call(this) || this;
        /**
         * A reference to the gradient instance that this modifier is used for.
         *
         * @type {LinearGradient}
         */
        _this.gradient = new __WEBPACK_IMPORTED_MODULE_1__LinearGradient__["a" /* LinearGradient */]();
        _this.lightnesses = [];
        _this.brightnesses = [];
        _this.opacities = [];
        _this.offsets = [];
        _this.className = "LinearGradientModifier";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(LinearGradientModifier.prototype, "lightnesses", {
        /**
         * @return {number[]} Lightness values
         */
        get: function () {
            return this._lightnesses;
        },
        /**
         * An array of lightness values for each step.
         *
         * @param {number[]}  value  Lightness values
         */
        set: function (value) {
            this._lightnesses = value;
            this._brightnesses = [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradientModifier.prototype, "brightnesses", {
        /**
         * @return {number[]} Brightness values
         */
        get: function () {
            return this._brightnesses;
        },
        /**
         * An array of brightness values for each step.
         *
         * @param {number[]}  value  Brightness values
         */
        set: function (value) {
            this._brightnesses = value;
            this._lightnesses = [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradientModifier.prototype, "opacities", {
        /**
         * @return {number[]} Opacity values
         */
        get: function () {
            return this._opacities;
        },
        /**
         * An array of opacity values for each step.
         *
         * @param {number[]}  value  Opacity values
         */
        set: function (value) {
            this._opacities = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradientModifier.prototype, "offsets", {
        /**
         * @return {number[]} Offsets
         */
        get: function () {
            return this._offsets;
        },
        /**
         * An array of relative position (0-1) for each step.
         *
         * If not set, all steps will be of equal relative length.
         *
         * @param {number[]}  value  Offsets
         */
        set: function (value) {
            this._offsets = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Modifies the color based on step setting.
     *
     * @ignore Exclude from docs
     * @param  {Color}  value  Source color
     * @return {Color}         A gradient that matches set modification rules
     */
    LinearGradientModifier.prototype.modify = function (value) {
        // Clear current gradient
        this.gradient.clear();
        // Get step count
        var count = 0;
        if (this.opacities) {
            count = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["max"](count, this.opacities.length);
        }
        if (this.lightnesses) {
            count = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["max"](count, this.lightnesses.length);
        }
        if (this.brightnesses) {
            count = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["max"](count, this.brightnesses.length);
        }
        // Init step values
        var opacity = 1, lightness, brightness;
        // Apply steps
        for (var i = 0; i < count; i++) {
            // Take base color
            var color = value;
            // Check if there are any parameters for this step
            if (this.opacities && __WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](this.opacities[i])) {
                opacity = this.opacities[i];
            }
            if (this.lightnesses && __WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](this.lightnesses[i])) {
                lightness = this.lightnesses[i];
                brightness = undefined;
            }
            if (this.brightnesses && __WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](this.brightnesses[i])) {
                brightness = this.brightnesses[i];
                lightness = undefined;
            }
            // Check if we need to brighten/lighten color
            if (__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](brightness)) {
                color = value.brighten(this.brightnesses[i]);
            }
            else if (__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](lightness)) {
                color = value.lighten(this.lightnesses[i]);
            }
            // Get offset (it's OK if it's undefined)
            var offset = this.offsets[i];
            // Apply step
            this.gradient.addColor(color, opacity, offset);
        }
        return this.gradient;
    };
    LinearGradientModifier.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.gradient = source.gradient.clone();
        this._offsets = source.offsets;
        this._brightnesses = source.brightnesses;
        this._lightnesses = source.brightnesses;
        this._opacities = source.opacities;
    };
    return LinearGradientModifier;
}(__WEBPACK_IMPORTED_MODULE_0__ColorModifier__["a" /* ColorModifier */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["a" /* registry */].registeredClasses["LinearGradientModifier"] = LinearGradientModifier;
//# sourceMappingURL=LinearGradientModifier.js.map

/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResizeButton; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_Path__ = __webpack_require__(12);
/**
 * Resize button module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a draggable resize/grip button.
 *
 * @see {@link IResizeButtonEvents} for a list of available events
 * @see {@link IResizeButtonAdapters} for a list of available Adapters
 */
var ResizeButton = /** @class */ (function (_super) {
    __extends(ResizeButton, _super);
    /**
     * Constructor
     */
    function ResizeButton() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "ResizeButton";
        // Set defaults
        _this.orientation = "horizontal";
        _this.draggable = true;
        _this.padding(8, 8, 8, 8);
        _this.background.cornerRadius(20, 20, 20, 20);
        _this.horizontalCenter = "middle";
        _this.verticalCenter = "middle";
        // Create an icon
        var icon = new __WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]();
        icon.element = _this.paper.add("path");
        var path = __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["moveTo"]({ x: 0, y: 0 });
        path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["lineTo"]({ x: 0, y: 10 });
        path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["moveTo"]({ x: 3, y: 0 });
        path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["lineTo"]({ x: 3, y: 10 });
        icon.element.attr({ "d": path });
        icon.pixelPerfect = true;
        icon.padding(0, 3, 0, 3);
        icon.stroke = new __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("alternativeText");
        icon.strokeOpacity = 0.7;
        _this.icon = icon;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ResizeButton.prototype, "orientation", {
        /**
         * Use for setting of direction (orientation) of the resize button.
         *
         * Available options: "horizontal", "vertical".
         *
         * @param {Orientation} value Orientation
         */
        set: function (value) {
            var icon = this.icon;
            if (icon) {
                if (value == "horizontal") {
                    icon.rotation = 0;
                }
                else {
                    icon.rotation = -90;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return ResizeButton;
}(__WEBPACK_IMPORTED_MODULE_0__Button__["a" /* Button */]));

//# sourceMappingURL=ResizeButton.js.map

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(17);
var document = __webpack_require__(13).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(13);
var core = __webpack_require__(52);
var LIBRARY = __webpack_require__(67);
var wksExt = __webpack_require__(255);
var defineProperty = __webpack_require__(24).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(123)('keys');
var uid = __webpack_require__(66);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 167 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(13).document;
module.exports = document && document.documentElement;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(17);
var anObject = __webpack_require__(9);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(41)(Function.call, __webpack_require__(37).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 170 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(17);
var setPrototypeOf = __webpack_require__(169).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(48);
var defined = __webpack_require__(47);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),
/* 173 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),
/* 174 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(48);
var defined = __webpack_require__(47);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(67);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(32);
var hide = __webpack_require__(31);
var Iterators = __webpack_require__(88);
var $iterCreate = __webpack_require__(177);
var setToStringTag = __webpack_require__(86);
var getPrototypeOf = __webpack_require__(38);
var ITERATOR = __webpack_require__(22)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(70);
var descriptor = __webpack_require__(65);
var setToStringTag = __webpack_require__(86);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(31)(IteratorPrototype, __webpack_require__(22)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(127);
var defined = __webpack_require__(47);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(22)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(88);
var ITERATOR = __webpack_require__(22)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(24);
var createDesc = __webpack_require__(65);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(103);
var ITERATOR = __webpack_require__(22)('iterator');
var Iterators = __webpack_require__(88);
module.exports = __webpack_require__(52).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(408);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(27);
var toAbsoluteIndex = __webpack_require__(69);
var toLength = __webpack_require__(25);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(60);
var step = __webpack_require__(271);
var Iterators = __webpack_require__(88);
var toIObject = __webpack_require__(36);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(176)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(41);
var invoke = __webpack_require__(261);
var html = __webpack_require__(168);
var cel = __webpack_require__(164);
var global = __webpack_require__(13);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(42)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(13);
var macrotask = __webpack_require__(186).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(42)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(29);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(13);
var DESCRIPTORS = __webpack_require__(23);
var LIBRARY = __webpack_require__(67);
var $typed = __webpack_require__(133);
var hide = __webpack_require__(31);
var redefineAll = __webpack_require__(75);
var fails = __webpack_require__(16);
var anInstance = __webpack_require__(73);
var toInteger = __webpack_require__(48);
var toLength = __webpack_require__(25);
var toIndex = __webpack_require__(280);
var gOPN = __webpack_require__(71).f;
var dP = __webpack_require__(24).f;
var arrayFill = __webpack_require__(184);
var setToStringTag = __webpack_require__(86);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(13);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Cache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cache; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Dictionary__ = __webpack_require__(26);
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents object cache.
 *
 * @ignore Exclude from docs
 * @todo Better storage
 * @todo TTL logging
 * @todo Garbage collector
 */
var Cache = /** @class */ (function () {
    function Cache() {
        /**
         * Storage for cache items.
         *
         * @type {Object}
         */
        this._storage = new __WEBPACK_IMPORTED_MODULE_0__Dictionary__["a" /* Dictionary */]();
        /**
         * Default TTL in milliseconds.
         *
         * @type {number}
         */
        this.ttl = 1000;
    }
    /**
     * Caches or updates cached value, resets TTL.
     *
     * @param {string}  owner  An id of the object that owns this cache
     * @param {string}  key    Index key
     * @param {A}       value  Value
     */
    Cache.prototype.set = function (owner, key, value) {
        // Create if storage does not exist for this owner
        var ownerStorage = this._storage.insertKeyIfEmpty(owner, function () { return new __WEBPACK_IMPORTED_MODULE_0__Dictionary__["a" /* Dictionary */](); });
        // Create cache item
        var item = {
            "touched": new Date().getTime(),
            "ttl": this.ttl,
            "value": value
        };
        // Set
        ownerStorage.setKey(key, item);
    };
    /**
     * Rerturns cached item, respecting TTL.
     *
     * @param  {string}  owner  An id of the object that owns this cache
     * @param  {string}  key    Index key
     * @return {A}              Value, or `undefined` if not set
     */
    Cache.prototype.get = function (owner, key) {
        // 		 || ypeof this._storage[owner][key] === "undefined" || this._storage[owner][key].expired === true) {
        if (this._storage.hasKey(owner)) {
            var ownerStorage = this._storage.getKey(owner);
            if (ownerStorage.hasKey(key)) {
                var cacheItem = ownerStorage.getKey(key);
                return cacheItem.expired === true ? undefined : cacheItem.value;
            }
            else {
                return undefined;
            }
        }
        else {
            return undefined;
        }
    };
    /**
     * Clears cache for specific owner or everything.
     *
     * @param {string} owner Owner to clear cache for
     */
    Cache.prototype.clear = function (owner) {
        if (owner) {
            this._storage.removeKey(owner);
        }
        else {
            this._storage.clear();
        }
    };
    return Cache;
}());

/**
 * ============================================================================
 * GLOBAL INSTANCE
 * ============================================================================
 * @hidden
 */
/**
 * A global instance of cache. Use this instance to cache any values.
 *
 * @ignore Exclude from docs
 */
var cache = new Cache();
//# sourceMappingURL=Cache.js.map

/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGContainer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_DOM__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Array__ = __webpack_require__(15);
/**
 * This functionality is related to the HTML wrapper that houses `<svg>` tag.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A class used to create an HTML wrapper for the SVG contents.
 */
var SVGContainer = /** @class */ (function () {
    /**
     * Constructor
     *
     * * Creates an HTML wrapper for SVG
     */
    function SVGContainer(htmlElement) {
        /**
         * Indicates if this object has already been deleted. Any
         * destruction/disposal code should take this into account when deciding
         * wheter to run potentially costly disposal operations if they already have
         * been run.
         *
         * @type {boolean}
         */
        this._disposed = false;
        /**
         * If this component is in a separate HTML container, `autoResize` means the
         * module will constantly measure container's size and adopt contents to it.
         *
         * @type {Boolean}
         */
        this.autoResize = true;
        // Log parent HTML element
        this.htmlElement = htmlElement;
        // Adds to containers array
        __WEBPACK_IMPORTED_MODULE_0__System__["b" /* system */].svgContainers.push(this);
        /**
         * Create child div for the container - it will have svg node
         * It might seem that this container is not necessay, however having it solves
         * a problems with mouse position detection and some other.
         */
        var svgContainer = document.createElement("div");
        var style = svgContainer.style;
        style.width = "100%";
        style.height = "100%";
        style.position = "relative";
        htmlElement.appendChild(svgContainer);
        this.SVGContainer = svgContainer;
    }
    /**
     * Measures size of parent HTML element.
     *
     * @ignore Exclude from docs
     */
    SVGContainer.prototype.measure = function () {
        var width = __WEBPACK_IMPORTED_MODULE_1__utils_Utils__["width"](this.htmlElement);
        var height = __WEBPACK_IMPORTED_MODULE_1__utils_Utils__["height"](this.htmlElement);
        if (this.container) {
            if (this.width != width || this.height != height) {
                this.width = width;
                this.height = height;
                var container = this.container;
                container.maxWidth = width;
                container.maxHeight = height;
                __WEBPACK_IMPORTED_MODULE_2__utils_DOM__["g" /* fixPixelPerfect */](this.SVGContainer);
            }
        }
    };
    Object.defineProperty(SVGContainer.prototype, "container", {
        /**
         * @return {Container} Container
         */
        get: function () {
            return this._container;
        },
        /**
         * A [[Container]] element which is placed into container.
         *
         * @param {Container}  container  Container
         */
        set: function (container) {
            this._container = container;
            this.measure();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns if this object has been already been disposed.
     *
     * @return {boolean} Is disposed?
     */
    SVGContainer.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Removes this container from SVG container list in system, which
     * effectively disables size change monitoring for it.
     */
    SVGContainer.prototype.dispose = function () {
        if (!this._disposed) {
            __WEBPACK_IMPORTED_MODULE_3__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__System__["b" /* system */].svgContainers, this);
        }
    };
    return SVGContainer;
}());

//# sourceMappingURL=SVGContainer.js.map

/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Group; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AMElement__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(7);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates an SVG `<g>` element.
 *
 * SVG groups are used for elements that need more elements just one.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element
 */
var Group = /** @class */ (function (_super) {
    __extends(Group, _super);
    /**
     * Constructor.
     *
     * @param {string} elementName Element type (should be "g")
     */
    function Group(elementName) {
        var _this = _super.call(this, elementName) || this;
        /**
         * All child elements contained in the group.
         *
         * @type {List<AMElement>}
         */
        _this.children = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        return _this;
    }
    /**
     * Adds an element to group.
     *
     * This will manipulate DOM. `element` will be physically moved into group.
     *
     * @param {AMElement}  element  Element
     */
    Group.prototype.add = function (element) {
        if (element) {
            this.node.appendChild(element.node);
            this.children.moveValue(element);
        }
    };
    /**
     * Adds an element to group.
     *
     * This will manipulate DOM. `element` will be physically moved into group.
     *
     * @param {AMElement}  element  Element
     */
    Group.prototype.addToBack = function (element) {
        if (element) {
            var first = this.node.childNodes[0];
            if (first) {
                this.node.insertBefore(element.node, first);
            }
            else {
                this.node.appendChild(element.node);
            }
            this.children.moveValue(element);
        }
    };
    /**
     * Removes the `element` from group.
     *
     * Please note that this will not dispose the element itself, it will just
     * remove it from the group.
     *
     * @param {AMElement}  element  Element
     */
    Group.prototype.removeElement = function (element) {
        // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child
        if (element) {
            try {
                this.node.removeChild(element.node);
            }
            catch (err) {
            }
            this.children.removeValue(element);
        }
    };
    Object.defineProperty(Group.prototype, "firstChild", {
        /**
         * First element in the group.
         *
         * @return {AMElement} First element
         */
        get: function () {
            if (this.children.length) {
                return this.children.getIndex(0);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "lastChild", {
        /**
         * Last element in the group.
         *
         * @return {AMElement} Last element
         */
        get: function () {
            var len;
            if (len = this.children.length) {
                return this.children.getIndex(len - 1);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "content", {
        /**
         * @return {string} SVG markup
         */
        get: function () {
            return this.node.innerHTML;
        },
        /**
         * Content of the group element.
         *
         * Can be used to add a lot of proprietary SVG markup into group.
         *
         * @param {string}  value  SVG markup
         */
        set: function (value) {
            this.node.innerHTML = value;
            this.populateChildren();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Removes all children from the group.
     *
     * This will note dispose the children. They will remain in memory as
     * orphans. To automatically remove and dispose children elements use
     * `disposeChildren()` instead.
     */
    Group.prototype.removeChildren = function () {
        while (this.children.length > 0) {
            var child = this.children.getIndex(0);
            if (child.node && child.node.parentNode) {
                child.node.parentNode.removeChild(child.node);
            }
            this.children.removeValue(child);
        }
    };
    /**
     * Removes and disposes all elements in the group.
     */
    Group.prototype.disposeChildren = function () {
        // TODO make this more efficient
        while (this.children.length > 0) {
            var child = this.children.getIndex(0);
            this.children.removeValue(child);
            child.dispose();
        }
    };
    /**
     * Regenerates internal `children` list out of the actual nodes in DOM.
     *
     * @ignore Exclude from docs
     */
    Group.prototype.populateChildren = function () {
        this.children.clear();
        for (var i = 0, len = this.node.childNodes.length; i < len; i++) {
            var element = this.node.childNodes[i];
            this.children.push(new __WEBPACK_IMPORTED_MODULE_0__AMElement__["a" /* AMElement */](element));
        }
    };
    return Group;
}(__WEBPACK_IMPORTED_MODULE_0__AMElement__["a" /* AMElement */]));

//# sourceMappingURL=Group.js.map

/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TextFormatter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rendering_AMElement__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Strings__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(2);
/**
 * Handles formatting of pseudo-markup in text.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * Handles formatting of pseudo-markdown in text.
 *
 * @todo Encode < > in output
 * @todo Add more adapters
 * @important
 */
var TextFormatter = /** @class */ (function (_super) {
    __extends(TextFormatter, _super);
    /**
     * Constructor
     */
    function TextFormatter() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         *
         * @type {Adapter<TextFormatter, ITextFormatterAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__["a" /* Adapter */](_this);
        _this.className = "TextFormatter";
        _this.applyTheme();
        return _this;
    }
    /**
     * Formats the text according to specifications passed in.
     *
     * @param  {string}  text    Text to format
     * @param  {string}  output  Output format (svg, html)
     * @return {string}          Formatted text
     */
    TextFormatter.prototype.format = function (text, output) {
        // Apply default
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](output)) {
            output = "svg";
        }
        // Init return value
        var formatted = "";
        // Replace double (escaped) square spaces with remporary codes
        text = this.escape(text);
        // Divvy up the string by style tags
        var styles = text.match(/\[([^\]]*?)\]/gm);
        if (!styles) {
            // Nothing to do here - no formatting elements
            return this.wrap(text, "", output);
        }
        // Get pure text - no style tags
        var texts = text.split(/\[[^\[\]]*\]/);
        // Go through each of the texts and wrap it in style tags
        for (var i = 0; i < texts.length; i++) {
            // Get text bit
            var t = texts[i];
            // Check if string is empty
            if (t === "") {
                continue;
            }
            // Run through an adapter
            t = this.adapter.apply("chunk", t);
            // Get related style
            var s = "";
            if (i > 0) {
                s = styles[i - 1].replace('[', '').replace(']', '');
            }
            // Wrap text in tag
            formatted += this.wrap(t, s, output);
        }
        // Replace placeholders back
        formatted = this.unescape(formatted);
        // Return result
        return this.cleanUp(formatted);
    };
    /**
     * Replaces brackets with temporary placeholders.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Input text
     * @return {string}        Escaped text
     */
    TextFormatter.prototype.escape = function (text) {
        return text.replace("[[", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["i" /* PLACEHOLDER_L */]).replace("]]", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["k" /* PLACEHOLDER_R */]).replace("''", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["j" /* PLACEHOLDER_Q */]);
    };
    /**
     * Replaces placeholders back to brackets.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Escaped text
     * @return {string}        Unescaped text
     */
    TextFormatter.prototype.unescape = function (text) {
        return text.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["i" /* PLACEHOLDER_L */], "[[").replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["k" /* PLACEHOLDER_R */], "]]").replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["j" /* PLACEHOLDER_Q */], "'");
    };
    /**
     * Cleans up the text text for leftover double square brackets.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Input text
     * @return {string}        Cleaned up text
     */
    TextFormatter.prototype.cleanUp = function (text) {
        return text.replace("[[", "[").replace("]]", "]").replace("''", "'");
    };
    /**
     * Wraps text into corresponding tags.
     *
     * @ignore Exclude from docs
     * @param  {string}  text   Text to wrap
     * @param  {string}  style  Styles
     * @param  {string}  output  Format to output in (svg, html)
     * @return {string}          Formatted string
     */
    TextFormatter.prototype.wrap = function (text, style, output) {
        if (style === "" || style === "/") {
            //return text;
            style = "";
        }
        switch (output) {
            case "html":
                return this.wrapHtml(text, this.translateStyleShortcuts(style));
            default:
                return this.wrapSvg(text, this.translateStyleShortcuts(style));
        }
    };
    /**
     * Wraps text in styled SVG tag.
     *
     * @ignore Exclude from docs
     * @param  {string}  text   Text to wrap
     * @param  {string}  style  Style property
     * @return {string}         Formatted tag
     */
    TextFormatter.prototype.wrapSvg = function (text, style) {
        if (style === "") {
            return "<tspan>" + text + "</tspan>";
        }
        else {
            return "<tspan style='" + style + "'>" + text + "</tspan>";
        }
    };
    /**
     * Returns an SVG `<tspan>` element.
     *
     * @ignore Exclude from docs
     * @param  {string}     text   Text
     * @param  {string}     style  Style
     * @return {AMElement}         Element
     */
    TextFormatter.prototype.getSvgElement = function (text, style) {
        var element = new __WEBPACK_IMPORTED_MODULE_1__rendering_AMElement__["a" /* AMElement */]("tspan");
        element.textContent = text;
        if (style) {
            element.node.setAttribute("style", style);
        }
        return element;
    };
    /**
     * Wraps text in HTML <span> tag.
     *
     * @ignore Exclude from docs
     * @param  {string}  text   Text to wrap
     * @param  {string}  style  Style property
     * @return {string}         Formatted tag
     * @todo Translate SVG styles into HTML ones
     */
    TextFormatter.prototype.wrapHtml = function (text, style) {
        if (style === "") {
            return "<span>" + text + "</span>";
        }
        else {
            return "<span style='" + this.styleSvgToHtml(style) + "'>" + text + "</span>";
        }
    };
    /**
     * Returns an HTML `<span>` element.
     *
     * @ignore Exclude from docs
     * @param  {string}       text   Text/HTML
     * @param  {string}       style  Style definition
     * @return {HTMLElement}         HTML element
     */
    TextFormatter.prototype.getHtmlElement = function (text, style) {
        var element = document.createElement("span");
        element.innerHTML = text;
        if (style) {
            element.setAttribute("style", style);
        }
        return element;
    };
    /**
     * Trabslates SVG CSS into HTML CSS.
     *
     * @ignore Exclude from docs
     * @param  {string}  style  SVG CSS
     * @return {string}         HTML CSS
     * @todo Implement actual translation
     */
    TextFormatter.prototype.styleSvgToHtml = function (style) {
        style = style.replace(/fill:/, "color:");
        return style;
    };
    /**
     * Translates style shortcuts into full styles, i.e.:
     * "bold" => "font-weight: bold"
     * "#f00" => "fill: #f00"
     *
     * @ignore Exclude from docs
     * @param  {string}  style  Untranslated style
     * @return {string}         Translated style
     * @todo Implement actual translation
     */
    TextFormatter.prototype.translateStyleShortcuts = function (style) {
        // Get style parts
        var b = style.match(/([\w\-]*:[\s]?[^;\s\]]*)|(\#[\w]{1,6})|([\w]+)|(\/)/gi);
        // Empty?
        if (!b) {
            return style;
        }
        // Check each part
        for (var i = 0; i < b.length; i++) {
            if (b[i].match(/^bold$/i)) {
                // Bold
                b[i] = "font-weight:" + b[i];
            }
            else if (b[i] == "/") {
                // Just closing tag
                // Do nothing
                b[i] = "";
            }
            else if (!b[i].match(/:/)) {
                // Color
                b[i] = "fill:" + b[i];
            }
        }
        return b.join(';');
    };
    /**
     * Splits string into chunks. (style blocks, quoted blocks, regular blocks)
     *
     * If the second parameter `quotedBlocks` is set to `true` this method will
     * also single out text blocks enclosed within single quotes that no
     * formatting should be applied to, and they should be displayed as is.
     *
     * Default for the above is `false`, so that you can use single quote in text
     * without escaping it.
     *
     * If enabled, single quotes can be escaped by doubling it - adding two
     * single quotes, which will be replaced by a one single quote in the final
     * output.
     *
     * @ignore Exclude from docs
     * @param  {string}    text          Text to chunk
     * @param  {boolean}   quotedBlocks  Use quoted blocks
     * @return {string[]}                Array of string chunks
     */
    TextFormatter.prototype.chunk = function (text, quotedBlocks) {
        if (quotedBlocks === void 0) { quotedBlocks = false; }
        // Init result
        var res = [];
        // Replace double (escaped) square spaces and quotes with temporary codes
        text = this.escape(text);
        // Deal with style blocks
        var chunks = quotedBlocks ? text.split("'") : [text];
        for (var i = 0; i < chunks.length; i++) {
            var chunk = chunks[i];
            // Empty?
            if (chunk === "") {
                continue;
            }
            if ((i % 2) === 0) {
                // Text outside quotes
                // Parse for style blocks which are "text" chunks, the rest chunks are
                // "value"
                var chunks2 = chunk.split(/[\[\]]+/);
                for (var i2 = 0; i2 < chunks2.length; i2++) {
                    var chunk2 = this.unescape(chunks2[i2]);
                    // Empty?
                    if (chunk2 === "") {
                        continue;
                    }
                    // Block or value
                    if ((i2 % 2) === 0) {
                        res.push({
                            "type": "value",
                            "text": this.adapter.apply("chunk", chunk2)
                        });
                    }
                    else {
                        res.push({
                            "type": "format",
                            "text": "[" + chunk2 + "]"
                        });
                    }
                }
            }
            else {
                // A text within doublequotes
                // All chunks are "text"
                var chunks2 = chunk.split(/[\[\]]+/);
                for (var i2 = 0; i2 < chunks2.length; i2++) {
                    var chunk2 = this.unescape(chunks2[i2]);
                    // Empty?
                    if (chunk2 === "") {
                        continue;
                    }
                    // Block or text
                    if ((i2 % 2) === 0) {
                        res.push({
                            "type": "text",
                            "text": chunk2
                        });
                    }
                    else if (this.isImage(chunk2)) {
                        res.push({
                            "type": "image",
                            "text": "[" + chunk2 + "]"
                        });
                    }
                    else {
                        res.push({
                            "type": "format",
                            "text": "[" + chunk2 + "]"
                        });
                    }
                }
            }
        }
        return res;
    };
    /**
     * Checks if supplied format contains image information and should be
     * formatted as such.
     * I.e.: `[img: myImage.png]`
     *
     * @ignore Exclude from docs
     * @param  {string}   text  Format
     * @return {boolean}        `true` if it is an image
     */
    TextFormatter.prototype.isImage = function (text) {
        return text.match(/img[ ]?:/) ? true : false;
    };
    return TextFormatter;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=TextFormatter.js.map

/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGDefaults; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Color__ = __webpack_require__(18);
/**
 *
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * Defines a class that holds default properties for new SVG elements
 */
var SVGDefaults = /** @class */ (function () {
    function SVGDefaults() {
    }
    SVGDefaults.opacity = 1;
    SVGDefaults.strokeOpacity = 1;
    SVGDefaults.strokeWidth = 1;
    SVGDefaults.fillOpacity = 1;
    SVGDefaults.fill = Object(__WEBPACK_IMPORTED_MODULE_0__utils_Color__["c" /* color */])("#000000");
    SVGDefaults.stroke = Object(__WEBPACK_IMPORTED_MODULE_0__utils_Color__["c" /* color */])("#000000");
    SVGDefaults.focusable = undefined;
    SVGDefaults.tabindex = 0;
    return SVGDefaults;
}());

//# sourceMappingURL=SVGDefaults.js.map

/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PointedRectangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__PointedShape__ = __webpack_require__(205);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Math__ = __webpack_require__(3);
/**
 * Pointed rectangle module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a rectangle with a pointer.
 *
 * @see {@link IPointedRectangleEvents} for a list of available events
 * @see {@link IPointedRectangleAdapters} for a list of available Adapters
 */
var PointedRectangle = /** @class */ (function (_super) {
    __extends(PointedRectangle, _super);
    /**
     * Constructor
     */
    function PointedRectangle() {
        var _this = _super.call(this) || this;
        _this.className = "PointedRectangle";
        _this.element = _this.paper.add("path");
        _this.cornerRadius = 0;
        _this.cornerRadius = 6;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    PointedRectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var cr = this.cornerRadius;
        var w = this.innerWidth;
        var h = this.innerHeight;
        if (w > 0 && h > 0) {
            var x = this.pointerX;
            var y = this.pointerY;
            var bwh = this.pointerBaseWidth / 2;
            var maxcr = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["min"](w / 2, h / 2);
            var crtl = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cr, 0, maxcr);
            var crtr = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cr, 0, maxcr);
            var crbr = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cr, 0, maxcr);
            var crbl = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cr, 0, maxcr);
            // corner coordinates
            // top left
            var xtl = 0;
            var ytl = 0;
            // top right
            var xtr = w;
            var ytr = 0;
            // bottom right
            var xbr = w;
            var ybr = h;
            // bottom left
            var xbl = 0;
            var ybl = h;
            var lineT = void 0;
            var lineR = void 0;
            var lineB = void 0;
            var lineL = void 0;
            // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located
            // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)
            var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);
            var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);
            // top
            if (d1 > 0 && d2 > 0) {
                var stemX = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](x, crtl + bwh, w - bwh - crtr);
                y = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](y, -Infinity, 0);
                lineT = "M" + crtl + ",0 L" + (stemX - bwh) + ",0 L" + x + "," + y + " L" + (stemX + bwh) + ",0 L" + (w - crtr) + ",0";
            }
            else {
                lineT = "M" + crtl + ",0 L" + (w - crtr) + ",0";
            }
            // bottom
            if (d1 < 0 && d2 < 0) {
                var stemX = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](x, crbl + bwh, w - bwh - crbr);
                y = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](y, h, Infinity);
                lineB = " L" + (w - crbr) + "," + h + " L" + (stemX + bwh) + "," + h + " L" + x + "," + y + " L" + (stemX - bwh) + "," + h + " L" + crbl + "," + h;
            }
            else {
                lineB = " L" + crbl + "," + h;
            }
            // left
            if (d1 < 0 && d2 > 0) {
                var stemY = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](y, crtl + bwh, h - crbl - bwh);
                x = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](x, -Infinity, 0);
                lineL = " L0," + (h - crbl) + " L0," + (stemY + bwh) + " L" + x + "," + y + " L0," + (stemY - bwh) + " L0," + crtl;
            }
            else {
                lineL = " L0," + crtl;
            }
            // right
            if (d1 > 0 && d2 < 0) {
                var stemY = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](y, crtr + bwh, h - bwh - crbr);
                x = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](x, w, Infinity);
                lineR = " L" + w + "," + crtr + " L" + w + "," + (stemY - bwh) + " L" + x + "," + y + " L" + w + "," + (stemY + bwh) + " L" + w + "," + (h - crbr);
            }
            else {
                lineR = " L" + w + "," + (h - crbr);
            }
            var arcTR = " a" + crtr + "," + crtr + " 0 0 1 " + crtr + "," + crtr;
            var arcBR = " a" + crbr + "," + crbr + " 0 0 1 -" + crbr + "," + crbr;
            var arcBL = " a" + crbl + "," + crbl + " 0 0 1 -" + crbl + ",-" + crbl;
            var arcTL = " a" + crtl + "," + crtl + " 0 0 1 " + crtl + ",-" + crtl;
            var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL;
            this.element.attr({ "d": path });
        }
    };
    Object.defineProperty(PointedRectangle.prototype, "cornerRadius", {
        /**
         * @return {number} Corner radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadius");
        },
        /**
         * Radius of rectangle's border in pixels.
         *
         * @default 0
         * @param {number}  value  Corner radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return PointedRectangle;
}(__WEBPACK_IMPORTED_MODULE_0__PointedShape__["a" /* PointedShape */]));

//# sourceMappingURL=PointedRectangle.js.map

/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PointedShape; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Type__ = __webpack_require__(2);
/**
 * Pointed shape module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a shape with a pointer.
 *
 * @see {@link IPointedShapeEvents} for a list of available events
 * @see {@link IPointedShapeAdapters} for a list of available Adapters
 */
var PointedShape = /** @class */ (function (_super) {
    __extends(PointedShape, _super);
    /**
     * Constructor
     */
    function PointedShape() {
        var _this = _super.call(this) || this;
        _this.className = "PointedShape";
        _this.pointerBaseWidth = 15;
        _this.pointerLength = 10;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    PointedShape.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](this.pointerX)) {
            this.pointerX = this.pixelWidth / 2;
        }
        if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](this.pointerY)) {
            this.pointerY = this.pixelHeight + 10;
        }
    };
    Object.defineProperty(PointedShape.prototype, "pointerBaseWidth", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.getPropertyValue("pointerBaseWidth");
        },
        /**
         * A width of the pinter's (stem's) thick end (base) in pixels.
         *
         * @default 15
         * @param {number}  value  Width (px)
         */
        set: function (value) {
            this.setPropertyValue("pointerBaseWidth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointedShape.prototype, "pointerLength", {
        /**
         * @return {number} Length (px)
         */
        get: function () {
            return this.getPropertyValue("pointerLength");
        },
        /**
         * A length of the pinter (stem) in pixels.
         *
         * @default 10
         * @param {number}  value  Length (px)
         */
        set: function (value) {
            this.setPropertyValue("pointerLength", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointedShape.prototype, "pointerX", {
        /**
         * @return {number} X
         */
        get: function () {
            return this.getPropertyValue("pointerX");
        },
        /**
         * X coordinate the shape is pointing to.
         *
         * @param {number}  value  X
         */
        set: function (value) {
            this.setPropertyValue("pointerX", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointedShape.prototype, "pointerY", {
        /**
         * @return {number} Y
         */
        get: function () {
            return this.getPropertyValue("pointerY");
        },
        /**
         * Y coordinate the shape is pointing to.
         *
         * @param {number}  value  Y
         */
        set: function (value) {
            this.setPropertyValue("pointerY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return PointedShape;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=PointedShape.js.map

/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DropShadowFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 * Module for "Drop Shadow" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creats a "Drop Shadow" filter.
 */
var DropShadowFilter = /** @class */ (function (_super) {
    __extends(DropShadowFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function DropShadowFilter() {
        var _this = _super.call(this) || this;
        _this.className = "DropShadowFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feGaussianBlur = _this.paper.add("feGaussianBlur");
        _this.feGaussianBlur.attr({ "result": "blurOut", "in": "SourceGraphic" });
        _this.filterPrimitives.push(_this.feGaussianBlur);
        _this.feOffset = _this.paper.add("feOffset");
        _this.feOffset.attr({ "result": "offsetBlur" });
        _this.filterPrimitives.push(_this.feOffset);
        _this.feFlood = _this.paper.add("feFlood");
        _this.filterPrimitives.push(_this.feFlood);
        _this.feComposite = _this.paper.add("feComposite");
        _this.feComposite.attr({ "in2": "offsetBlur", operator: "in" });
        _this.filterPrimitives.push(_this.feComposite);
        _this.feMerge = _this.paper.addGroup("feMerge");
        _this.feMerge.add(_this.paper.add("feMergeNode"));
        _this.feMerge.add(_this.paper.add("feMergeNode").attr({ "in": "SourceGraphic" }));
        _this.filterPrimitives.push(_this.feMerge);
        // Set default properties
        _this.color = new __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("alternativeBackground");
        _this.width = 200;
        _this.height = 200;
        _this.blur = 1.5;
        _this.dx = 3;
        _this.dy = 3;
        _this.opacity = 0.5;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(DropShadowFilter.prototype, "color", {
        /**
         * @return {Color} Color
         */
        get: function () {
            return this.properties.color;
        },
        /**
         * Shadow color.
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.properties.color = value;
            this.feFlood.attr({ "flood-color": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropShadowFilter.prototype, "opacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.properties.opacity;
        },
        /**
         * Opacity of the shadow. (0-1)
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            this.properties.opacity = value;
            this.feFlood.attr({ "flood-opacity": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropShadowFilter.prototype, "dx", {
        /**
         * @return {number} Horizontal offset (px)
         */
        get: function () {
            return this.properties.dx;
        },
        /**
         * Horizontal offset in pixels.
         *
         * @param {number}  value  Horizontal offset (px)
         */
        set: function (value) {
            this.properties.dx = value;
            this.feOffset.attr({ "dx": value / this.scale });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropShadowFilter.prototype, "dy", {
        /**
         * @return {number} Vertical offset (px)
         */
        get: function () {
            return this.properties.dy;
        },
        /**
         * Vertical offset in pixels.
         *
         * @param {number} value Vertical offset (px)
         */
        set: function (value) {
            this.properties.dy = value;
            this.feOffset.attr({ "dy": value / this.scale });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropShadowFilter.prototype, "blur", {
        /**
         * @return {number} Blur
         */
        get: function () {
            return this.properties.blur;
        },
        /**
         * Blur.
         *
         * @param {number}  value  Blur
         */
        set: function (value) {
            this.properties.blur = value;
            this.feGaussianBlur.attr({ "stdDeviation": value / this.scale });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [updateScale description]
     *
     * @todo Description
     */
    DropShadowFilter.prototype.updateScale = function () {
        this.dx = this.dx;
        this.dy = this.dy;
        this.blur = this.blur;
    };
    return DropShadowFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=DropShadowFilter.js.map

/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Preloader; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Slice__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Label__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__ = __webpack_require__(11);
/**
 * Preloader module.
 *
 * Preloader is a progress indicator.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A class used to draw and display progress indicator.
 *
 * @see {@link IPreloaderEvents} for a list of available events
 * @see {@link IPreloaderAdapters} for a list of available Adapters
 */
var Preloader = /** @class */ (function (_super) {
    __extends(Preloader, _super);
    /**
     * Constructor
     */
    function Preloader() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Preloader";
        // Set dimensions
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_1__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create main container
        var sliceContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]);
        sliceContainer.shouldClone = false;
        // Add background (100%) slice
        var backgroundSlice = sliceContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__Slice__["a" /* Slice */]);
        backgroundSlice.shouldClone = false;
        backgroundSlice.radius = 53;
        backgroundSlice.arc = 360;
        backgroundSlice.fill = interfaceColors.getFor("fill");
        backgroundSlice.fillOpacity = 0.8;
        backgroundSlice.innerRadius = 42;
        backgroundSlice.isMeasured = false;
        _this.backgroundSlice = backgroundSlice;
        // Add progress slice
        var progressSlice = sliceContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__Slice__["a" /* Slice */]);
        progressSlice.shouldClone = false;
        progressSlice.radius = 50;
        progressSlice.innerRadius = 45;
        progressSlice.fill = interfaceColors.getFor("alternativeBackground");
        progressSlice.fillOpacity = 0.2;
        progressSlice.isMeasured = false;
        _this.progressSlice = progressSlice;
        // Add text label element
        var label = sliceContainer.createChild(__WEBPACK_IMPORTED_MODULE_3__Label__["a" /* Label */]);
        label.shouldClone = false;
        label.horizontalCenter = "middle";
        label.verticalCenter = "middle";
        label.isMeasured = false;
        label.width = 200;
        label.fill = interfaceColors.getFor("text");
        label.align = "center";
        label.valign = "middle";
        label.fillOpacity = 0.4;
        _this.label = label;
        // Set defaults
        _this.background.opacity = 1;
        _this.background.fill = interfaceColors.getFor("background");
        _this.contentAlign = "center";
        _this.contentValign = "middle";
        _this.delay = 500;
        // Create hidden state
        var hiddenState = _this.states.create("hidden");
        hiddenState.transitionDuration = 2000;
        hiddenState.properties.opacity = 0;
        // Hide by default
        _this.visible = false;
        _this.hide(0);
        // Make it disposable
        // @todo Maybe it's enough to just dispose `sliceContainer`?
        _this._disposers.push(_this.backgroundSlice);
        _this._disposers.push(_this.progressSlice);
        _this._disposers.push(_this.label);
        _this._disposers.push(sliceContainer);
        return _this;
    }
    Object.defineProperty(Preloader.prototype, "progress", {
        /**
         * @return {number} Progress (0-1)
         */
        get: function () {
            return this.getPropertyValue("progress");
        },
        /**
         * Current preload progress. (0-1)
         *
         * * 0 - 0%
         * * 0.5 - 50%
         * * 1 - 100%
         *
         * Setting this to a value less than 1, will automatically reveal the
         * preloader, while setting it to 1 (100%) will hide it.
         *
         * @param {number} value Progress (0-1)
         */
        set: function (value) {
            var _this = this;
            this.setPropertyValue("progress", value);
            /*if (!this.visible && value == 1) {
                return;
            }*/
            this.progressSlice.arc = 360 * value;
            if (this.label) {
                this.label.text = Math.round(value * 100) + "%";
            }
            if (value >= 1) {
                // Cancel the timeout
                if (this._started) {
                    this._started = undefined;
                }
                // TODO remove closure ?
                __WEBPACK_IMPORTED_MODULE_4__System__["b" /* system */].events.once("enterframe", function () {
                    _this.hide();
                });
                this.mouseEnabled = false;
            }
            else if (value > 0) {
                if (this.delay) {
                    if (!this._started) {
                        this._started = new Date().getTime();
                    }
                    else if ((this._started + this.delay) >= new Date().getTime()) {
                        this.show();
                        this.mouseEnabled = true;
                    }
                }
                else {
                    this.show();
                    this.mouseEnabled = true;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Preloader.prototype, "delay", {
        /**
         * @return {number} Delay (ms)
         */
        get: function () {
            return this.getPropertyValue("delay");
        },
        /**
         * Delay display of preloader by X milliseconds.
         *
         * When loading starts (`progress` is set to <1) and finishes (`progress` is
         * set to 1) before `delay` ms, the loader is never shown.
         *
         * This is used to avoid brief flashing of the preload for very quick loads.
         *
         * @default 1000
         * @param {number}  value  Delay (ms)
         */
        set: function (value) {
            this.setPropertyValue("delay", value);
        },
        enumerable: true,
        configurable: true
    });
    return Preloader;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Preloader.js.map

/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FocusFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 * Module for "Focus" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a "Focus" filter.
 */
var FocusFilter = /** @class */ (function (_super) {
    __extends(FocusFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function FocusFilter() {
        var _this = _super.call(this) || this;
        _this.className = "FocusFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feFlood = _this.paper.add("feFlood");
        _this.feFlood.attr({ "flood-color": new __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("primaryButtonHover"), "result": "base" });
        _this.filterPrimitives.push(_this.feFlood);
        _this.feMorphology = _this.paper.add("feMorphology");
        _this.feMorphology.attr({ "result": "bigger", "in": "SourceGraphic", "operator": "dilate", "radius": "2" });
        _this.filterPrimitives.push(_this.feMorphology);
        _this.feColorMatrix = _this.paper.add("feColorMatrix");
        _this.feColorMatrix.attr({ "result": "mask", "in": "bigger", "type": "matrix", "values": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0" });
        _this.filterPrimitives.push(_this.feColorMatrix);
        _this.feComposite = _this.paper.add("feComposite");
        _this.feComposite.attr({ "result": "drop", "in": "base", "in2": "mask", "operator": "in" });
        _this.filterPrimitives.push(_this.feComposite);
        _this.feBlend = _this.paper.add("feBlend");
        _this.feBlend.attr({ "in": "SourceGraphic", "in2": "drop", "mode": "normal" });
        _this.filterPrimitives.push(_this.feBlend);
        // Set default properties
        _this.width = 130;
        _this.height = 130;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(FocusFilter.prototype, "stroke", {
        /**
         * @return {number} Color
         */
        get: function () {
            return this.properties["stroke"];
        },
        /**
         * Stroke (outline) color.
         *
         * @param {number}  value  Color
         */
        set: function (value) {
            this.properties["stroke"] = value;
            this.feFlood.attr({ "flood-color": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FocusFilter.prototype, "strokeWidth", {
        /**
         * @return {number} Outline thickness (px)
         */
        get: function () {
            return this.properties["strokeWidth"];
        },
        /**
         * Stroke (outline) thickness in pixels.
         *
         * @param {number}  value  Outline thickness (px)
         */
        set: function (value) {
            this.properties["strokeWidth"] = value;
            this.feMorphology.attr({ "radius": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FocusFilter.prototype, "opacity", {
        /**
         * @return {number} Outline opacity (0-1)
         */
        get: function () {
            return this.properties["opacity"];
        },
        /**
         * Opacity of the outline. (0-1)
         *
         * @param {number}  value  Outline opacity (0-1)
         */
        set: function (value) {
            this.properties["opacity"] = value;
            this.feColorMatrix.attr({ "values": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " + value + " 0" });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets filter's target element.
     *
     * In addition it also disables built-in focus outline on element this
     * filter is applied to.
     *
     * @ignore Exclude from docs
     * @param {Sprite}  value  Element filter is being attached to
     */
    FocusFilter.prototype.setSprite = function (value) {
        if (this._sprite && this._sprite != value) {
            this._sprite.group.removeStyle("outline");
        }
        value.group.addStyle({
            "outline": "none"
        });
        _super.prototype.setSprite.call(this, value);
    };
    return FocusFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=FocusFilter.js.map

/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SpriteEventDispatcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Object__ = __webpack_require__(20);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





/**
 * An [[EventDispatcher]] for [[Sprite]].
 *
 * @type {TargetedEventDispatcher}
 * @important
 */
var SpriteEventDispatcher = /** @class */ (function (_super) {
    __extends(SpriteEventDispatcher, _super);
    function SpriteEventDispatcher() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * [_interactionEvents description]
         *
         * @todo Description
         * @type {Dictionary}
         */
        _this._interactionEvents = new __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__["a" /* Dictionary */]();
        return _this;
    }
    /**
     * [_dispatchSpriteEvent description]
     *
     * @todo Description
     * @type {[type]}
     */
    SpriteEventDispatcher.prototype._dispatchSpriteEvent = function (ev) {
        if (this.target.disabled || this.target.isTemplate) {
            return;
        }
        // TODO remove this <any> later
        if (this.target.events.isEnabled(ev.type)) {
            var imev = __WEBPACK_IMPORTED_MODULE_4__utils_Object__["merge"](ev, {
                target: this.target
            });
            this.target.events.dispatchImmediately(imev.type, imev);
        }
    };
    /**
     * [_dispatchSpritePointEvent description]
     *
     * @todo Description
     * @type {[type]}
     */
    SpriteEventDispatcher.prototype._dispatchSpritePointEvent = function (ev) {
        if (this.target.disabled || this.target.isTemplate) {
            return;
        }
        // TODO remove this <any> later
        if (this.target.events.isEnabled(ev.type)) {
            var imev = __WEBPACK_IMPORTED_MODULE_4__utils_Object__["merge"](ev, {
                target: this.target,
                spritePoint: __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["documentPointToSprite"](ev.point, this.target),
                svgPoint: this.target.getSvgPoint(ev.point)
            });
            this.target.events.dispatchImmediately(imev.type, imev);
        }
    };
    /**
     * [_addInteractionObjectEvent description]
     *
     * @todo Description
     * @type {[type]}
     */
    SpriteEventDispatcher.prototype._addInteractionObjectEvent = function (type, callback, context) {
        var _this = this;
        var counter = this._interactionEvents.insertKeyIfEmpty(type, function () {
            var disposer = _this.target.interactions.events.on(type, callback, context);
            return new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["a" /* CounterDisposer */](function () {
                _this._interactionEvents.removeKey(type);
                disposer.dispose();
            });
        });
        return counter.increment();
    };
    /**
     * [_on description]
     *
     * @todo Description
     * @type {[type]}
     */
    SpriteEventDispatcher.prototype._on = function (once, type, callback, context, dispatch) {
        var info = _super.prototype._on.call(this, once, type, callback, context, dispatch);
        var disposers = [info.disposer];
        /**
         * Catching Sprite-related events, converting them to [[SpriteEvent]] and
         * triggering them on sprite
         */
        switch (type) {
            case "hit":
            case "track":
            case "doublehit":
            case "wheel":
            case "wheelup":
            case "wheeldown":
            case "wheelleft":
            case "wheelright":
                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpritePointEvent, this));
                break;
            case "rightclick":
            case "down":
            case "hold":
            case "up":
            case "drag":
            case "dragstart":
            case "dragstop":
            case "over":
            case "out":
            case "swipe":
            case "swipeleft":
            case "swiperight":
            case "resize":
            case "rotate":
            case "focus":
            case "blur":
            case "toggle":
                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpriteEvent, this));
                break;
        }
        /**
         * Set functional properties based on events. For example if we add a
         * "drag" event handler, we want to make the Sprite draggable, even if we
         * don't explicitly set "draggable"
         */
        switch (type) {
            case "hit":
            case "doublehit":
            case "rightclick":
            case "down":
            case "up":
                this.target.clickable = true;
                break;
            case "toggle":
                this.target.togglable = true;
                break;
            case "drag":
            case "dragstart":
            case "dragstop":
                this.target.draggable = true;
                break;
            case "track":
                this.target.trackable = true;
                break;
            case "rotate":
                this.target.rotatable = true;
                break;
            case "resize":
                this.target.resizable = true;
                break;
            case "swipe":
            case "swipeleft":
            case "swiperight":
                this.target.swipeable = true;
                break;
            case "wheel":
            case "wheelup":
            case "wheeldown":
            case "wheelleft":
            case "wheelright":
                this.target.wheelable = true;
                break;
            case "over":
            case "out":
                this.target.hoverable = true;
                break;
            case "focus":
            case "blur":
                this.target.focusable = true;
                break;
        }
        info.disposer = new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["c" /* MultiDisposer */](disposers);
        return info;
    };
    return SpriteEventDispatcher;
}(__WEBPACK_IMPORTED_MODULE_1__utils_EventDispatcher__["b" /* TargetedEventDispatcher */]));

//# sourceMappingURL=SpriteEvents.js.map

/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RadialGradient; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__ = __webpack_require__(4);
/**
 * Contains code and logic for generating radial gradients.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Radial gradient class.
 */
var RadialGradient = /** @class */ (function (_super) {
    __extends(RadialGradient, _super);
    /**
     * Constructor
     */
    function RadialGradient() {
        var _this = _super.call(this) || this;
        /**
         * List of colors switch definitions in a gradient.
         *
         * @type {List<IGradientStop>}
         */
        _this._stops = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        _this.element = _this.paper.addGroup("radialGradient");
        _this.id = "gradient-" + __WEBPACK_IMPORTED_MODULE_3__Registry__["a" /* registry */].getUniqueId();
        _this.element.attr({ "id": _this.id });
        _this._disposers.push(_this.element);
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws gradient.
     */
    RadialGradient.prototype.draw = function () {
        var _this = this;
        var gradientElement = this.element;
        if (this._center) {
            gradientElement.attr({ "cx": this._center.x, "cy": this._center.y });
        }
        if (this._focalPoint) {
            gradientElement.attr({ "fx": this._focalPoint.x, "fy": this._focalPoint.y });
        }
        __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["indexed"](this._stops.iterator()), function (a) {
            var i = a[0];
            var stop = a[1];
            var offset = stop.offset;
            if (isNaN(offset)) {
                offset = i / (_this._stops.length - 1);
            }
            var gradientStop = _this.paper.add("stop");
            gradientStop.attr({ "stop-color": stop.color });
            if (!isNaN(stop.opacity)) {
                gradientStop.attr({ "stop-opacity": stop.opacity });
            }
            if (!isNaN(offset)) {
                gradientStop.attr({ "offset": offset });
            }
            gradientElement.add(gradientStop);
        });
    };
    /**
     * Adds a color step to the gradient.
     *
     * @param {Color}   color    Color (hex code or named color)
     * @param {number}  opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)
     * @param {number}  offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)
     */
    RadialGradient.prototype.addColor = function (color, opacity, offset) {
        this._stops.push({ color: color, opacity: opacity, offset: offset });
        this.draw();
    };
    Object.defineProperty(RadialGradient.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            return __WEBPACK_IMPORTED_MODULE_2__System__["b" /* system */].ghostPaper;
        },
        /**
         * A [[Paper]] instace to use for the gradient.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            if (this._paper != paper) {
                this._paper = paper;
                this.draw();
                paper.appendDef(this.element);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "center", {
        /**
         * Center coordinates of the gradient.
         *
         * @ignore Exclude from docs
         * @param {IPoint}  point  Center point
         */
        set: function (point) {
            this._center = point;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "focalPoint", {
        /**
         * Focal point coordinates of the gradient.
         *
         * @ignore Exclude from docs
         * @param {IPoint}  point  Focal point
         */
        set: function (point) {
            this._focalPoint = point;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    RadialGradient.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this._stops = source.stops;
        this._focalPoint = source.focalPoint;
        this._center = source.center;
    };
    Object.defineProperty(RadialGradient.prototype, "stops", {
        /**
         * A list of color stops in the gradient.
         *
         * @return {List<IGradientStop>} Stops
         */
        get: function () {
            return this._stops;
        },
        enumerable: true,
        configurable: true
    });
    return RadialGradient;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=RadialGradient.js.map

/***/ }),
/* 211 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InteractionObject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__InteractionObjectEvents__ = __webpack_require__(212);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Interaction__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__ = __webpack_require__(4);
/* unused harmony reexport InteractionObjectEventDispatcher */
/**
 * Interaction Object module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * Re-exports
 */

/**
 * Interaction object represents an object that is subject for any kind of
 * interaction with it with any input devices: mouse, touch or keyboard.
 *
 * Any DOM element can be wrapped into an Internaction object which in turn
 * enables attaching various interaction events to it, such as: hit, drag,
 * swipe, etc.
 *
 * To create an [[InteractionObject]] out of a [[Sprite]], use:
 * `interaction.getInteractionFromSprite(sprite: Sprite)`
 *
 * To create an [[InteractionObject]] out of a a regular element:
 * `interaction.getInteraction(element: HTMLElement)`
 */
var InteractionObject = /** @class */ (function (_super) {
    __extends(InteractionObject, _super);
    /**
     * Constructor
     */
    function InteractionObject() {
        var _this = _super.call(this) || this;
        /**
         * An [[EventDispatcher]] instance which holds events for this object
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_0__InteractionObjectEvents__["a" /* InteractionObjectEventDispatcher */](_this);
        /**
         * Collection of Disposers for various events. (so that those get disposed
         * when the whole InteractionObject is disposed)
         *
         * @ignore Exclude from docs
         * @type {Dictionary<string, IDisposer>}
         */
        _this.eventDisposers = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * A [[Dictionary]] that holds temporarily replaced original style values for
         * HTML element, so that they can be restored when the functionality that
         * replaced them is done.
         *
         * @ignore Exclude from docs
         * @type {Dictionary<string, string>}
         */
        _this.replacedStyles = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Is element currently hovered?
         *
         * @type {boolean}
         */
        _this._isHover = false;
        /**
         * Has element got any pointers currently pressing down on it?
         * @type {boolean}
         */
        _this._isDown = false;
        /**
         * Does element have focus?
         *
         * @type {boolean}
         */
        _this._isFocused = false;
        /**
         * Options used for inertia functionality.
         *
         * @type {Dictionary<InertiaTypes, IInertiaOptions>}
         */
        _this.inertiaOptions = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * A collection of different inertia types, currently playing out.
         *
         * @ignore Exclude from docs
         * @type {Dictionary<InertiaTypes, Inertia>}
         */
        _this.inertias = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Click/tap options.
         *
         * @type {IHitOptions}
         */
        _this.hitOptions = {};
        /**
         * Swipe gesture options.
         *
         * @type {ISwipeOptions}
         */
        _this.swipeOptions = {};
        /**
         * Keyboard options.
         *
         * @type {IKeyboarOptions}
         */
        _this.keyboardOptions = {};
        /**
         * Cursor options.
         *
         * @type {ICursorOptions}
         */
        _this.cursorOptions = {
            "defaultStyle": [{
                    "property": "cursor",
                    "value": "default"
                }]
        };
        _this.className = "InteractionObject";
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["b" /* DictionaryDisposer */](_this.inertias));
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(InteractionObject.prototype, "isHover", {
        /**
         * Returns if this element is currently hovered.
         *
         * @return {boolean} Hovered?
         */
        get: function () {
            return this._isHover;
        },
        /**
         * Sets if this element is currently hovered.
         *
         * @param {boolean} value Hovered?
         */
        set: function (value) {
            if (this.isHover != value) {
                this._isHover = value;
                if (value) {
                    __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].overObjects.moveValue(this);
                }
                else {
                    __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].overObjects.removeValue(this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "overPointers", {
        /**
         * Returns a list of pointers currently over the element.
         *
         * @see {@link Pointer}
         * @return {List<IPointer>} List if pointers currently hovering the element
         */
        get: function () {
            if (!this._overPointers) {
                this._overPointers = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
            }
            return this._overPointers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "isDown", {
        /**
         * Returns if this element has currently any pointers pressing on it.
         *
         * @return {boolean} Has down pointers?
         */
        get: function () {
            return this._isDown;
        },
        /**
         * Sets if this element has currently any pointers pressing on it.
         *
         * @param {boolean} value Has down pointers?
         */
        set: function (value) {
            if (this.isDown != value) {
                this._isDown = value;
                if (value) {
                    __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].downObjects.moveValue(this);
                }
                else {
                    __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].downObjects.removeValue(this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "downPointers", {
        /**
         * Returns a list of pointers currently pressing down on this element.
         *
         * @see {@link Pointer}
         * @return {List<IPointer>} List of down pointers
         */
        get: function () {
            if (!this._downPointers) {
                this._downPointers = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
            }
            return this._downPointers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "isFocused", {
        /**
         * Returns if this element is currently focused.
         *
         * @return {boolean} Focused?
         */
        get: function () {
            return this._isFocused;
        },
        /**
         * Sets if this element is currently focused.
         *
         * @param {boolean} value Focused?
         */
        set: function (value) {
            if (this.isFocused != value) {
                this._isFocused = value;
                if (value) {
                    __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].focusedObject = this;
                }
                else {
                    __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].focusedObject = undefined;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "clickable", {
        /**
         * Returns if element is currently set as clickable.
         *
         * @return {boolean} Clickable?
         */
        get: function () {
            return this._clickable;
        },
        /**
         * Is element clickable? Clickable elements will generate "hit" events when
         * clicked or tapped.
         *
         * @param {boolean} value Clickable?
         */
        set: function (value) {
            if (this._clickable !== value) {
                this._clickable = value;
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processClickable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "hoverable", {
        /**
         * Returns if element is currently set to generate hover events.
         *
         * @return {boolean} Hoverable?
         */
        get: function () {
            return this._hoverable;
        },
        /**
         * Sets if element should generate hover events.
         *
         * @param {boolean} value Hoverable?
         */
        set: function (value) {
            if (this._hoverable !== value) {
                this._hoverable = value;
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processHoverable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "trackable", {
        /**
         * Returns if element is set to track pointer movement over it.
         *
         * @return {boolean} Track pointer?
         */
        get: function () {
            return this._trackable;
        },
        /**
         * Sets if pointer movement over element should be tracked.
         *
         * @param {boolean} value Track pointer?
         */
        set: function (value) {
            if (this._trackable !== value) {
                this._trackable = value;
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processTrackable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "draggable", {
        /**
         * Returns if element is currently set as draggable.
         *
         * @return {boolean} Draggable?
         */
        get: function () {
            return this._draggable;
        },
        /**
         * Sets if element can be dragged. (moved)
         *
         * @param {boolean} value Draggable?
         */
        set: function (value) {
            if (this._draggable !== value) {
                this._draggable = value;
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processDraggable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "swipeable", {
        /**
         * Returns if element is currently set to track swipe gesture.
         *
         * @return {boolean} Track swipe?
         */
        get: function () {
            return this._swipeable;
        },
        /**
         * Sets whether element should react to swipe gesture.
         *
         * @param {boolean} value Track swipe?
         */
        set: function (value) {
            if (this._swipeable !== value) {
                this._swipeable = value;
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processSwipeable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "resizable", {
        /**
         * Returns if element is currently set as resizeable.
         *
         * @return {boolean} Resizeble?
         */
        get: function () {
            return this._resizable;
        },
        /**
         * Sets if element can be resized.
         *
         * @param {boolean} value Resizeable?
         */
        set: function (value) {
            if (this._resizable !== value) {
                this._resizable = value;
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processResizable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "rotatable", {
        /**
         * Returns if element is currently set as rotatable.
         *
         * @return {boolean} Can rotate?
         */
        get: function () {
            return this._rotatable;
        },
        /**
         * Sets whether element can be rotated.
         *
         * @param {boolean} value Can rotate?
         */
        set: function (value) {
            if (this._rotatable !== value) {
                this._rotatable = value;
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processRotatable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "wheelable", {
        /**
         * Returns current setting for wheel tracking.
         *
         * @return {boolean} Track wheel?
         */
        get: function () {
            return this._wheelable;
        },
        /**
         * Sets whether track moouse wheel rotation over element.
         *
         * @param {boolean} value Track wheel?
         */
        set: function (value) {
            if (this._wheelable !== value) {
                this._wheelable = value;
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processWheelable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "inert", {
        /**
         * Returns if element is currently set as inert.
         *
         * @return {boolean} Inert?
         */
        get: function () {
            return this._inert;
        },
        /**
         * Sets if element is inert, i.e. if it should carry movement momentum after
         * it is dragged and released.
         *
         * @param {boolean} value Inert?
         */
        set: function (value) {
            if (this._inert !== value) {
                this._inert = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "focusable", {
        /**
         * Returns if element is currently set as focusable.
         *
         * @return {true} Focusable?
         */
        get: function () {
            return this._focusable || undefined;
        },
        /**
         * Sets if element can gain focus.
         *
         * @param {boolean} value Focusable?
         */
        set: function (value) {
            if (this._focusable !== value) {
                this._focusable = value;
                if (this._focusable && this.tabindex == -1) {
                    this._tabindex = 1;
                }
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processFocusable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "tabindex", {
        /**
         * Returns element's current tab index.
         *
         * @return {number} Tab index
         */
        get: function () {
            return this._tabindex || -1;
        },
        /**
         * Sets element's tab index.
         *
         * @param {number} value Tab index
         */
        set: function (value) {
            if (this._tabindex !== value) {
                this._tabindex = value;
                if (value > -1) {
                    this.focusable = true;
                }
                __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].processFocusable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "element", {
        /**
         * Returns DOM element associated with this element
         * @return {HTMLElement} Element
         */
        get: function () {
            return this._element;
        },
        /**
         * Sets DOM element associated with this element
         * @param {HTMLElement | SVGSVGElement} element Element
         */
        set: function (element) {
            this._element = element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "originalPosition", {
        /**
         * Returns element's original position.
         *
         * @ignore Exclude from docs
         * @return {Optional<IPoint>} Position.
         */
        get: function () {
            return this._originalPosition || { x: 0, y: 0 };
        },
        /**
         * Sets element's original position.
         *
         * @ignore Exclude from docs
         * @param {Optional<IPoint>} value Position
         */
        set: function (value) {
            this._originalPosition = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "originalScale", {
        /**
         * Returns element's original scale.
         *
         * @return {number} Scale
         */
        get: function () {
            return this._originalScale || 1;
        },
        /**
         * Sets element's original scale.
         *
         * @ignore Exclude from docs
         * @param {number} value Scale
         */
        set: function (value) {
            if (this._originalScale !== value) {
                this._originalScale = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "originalAngle", {
        /**
         * Returns element's original angle.
         *
         * @return {number} Angle
         */
        get: function () {
            return this._originalAngle || 0;
        },
        /**
         * Sets element's original angle.
         *
         * @ignore Exclude from docs
         * @param {number} value Angle
         */
        set: function (value) {
            if (this._originalAngle !== value) {
                this._originalAngle = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Destroys this object and all related data.
     */
    InteractionObject.prototype.dispose = function () {
        if (!this.isDisposed) {
            _super.prototype.dispose.call(this);
            __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__["each"](this.eventDisposers.iterator(), function (a) {
                var y = a[1];
                y.dispose();
            });
        }
    };
    /**
     * Copies all properties and related assets from another object of the same
     * type.
     *
     * @param {this} source Source object
     */
    InteractionObject.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.inertiaOptions = source.inertiaOptions;
        this.hitOptions = source.hitOptions;
        this.swipeOptions = source.swipeOptions;
        this.keyboardOptions = source.keyboardOptions;
        this.cursorOptions = source.cursorOptions;
        __WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* interaction */].applyCursorOverStyle(this);
    };
    return InteractionObject;
}(__WEBPACK_IMPORTED_MODULE_1__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=InteractionObject.js.map

/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InteractionObjectEventDispatcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Disposer__ = __webpack_require__(10);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Represents an Event Dispatcher for [[InteractionObject]].
 *
 * Besides regular [[EventDispatcher]] functionality it adds new events with
 * direct application to DOM nodes. Primarily used to handle keyboard events,
 * but can turn into something else moving forward.
 */
var InteractionObjectEventDispatcher = /** @class */ (function (_super) {
    __extends(InteractionObjectEventDispatcher, _super);
    function InteractionObjectEventDispatcher() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Holds a list of Disposers for DOM events added.
         */
        _this._domEvents = {};
        return _this;
    }
    /**
     * Adds a DOM event and returns Disposer.
     *
     * @return {IDisposer} Disposer
     */
    InteractionObjectEventDispatcher.prototype._addDOMEvent = function (type, key, listener, context) {
        var _this = this;
        if (!this._domEvents[type]) {
            var callback_1 = function (e) {
                listener.call(context, key, e);
            };
            this.target.element.addEventListener(type, callback_1, false);
            this._domEvents[type] = new __WEBPACK_IMPORTED_MODULE_1__utils_Disposer__["a" /* CounterDisposer */](function () {
                delete _this._domEvents[type];
                _this.target.element.removeEventListener(type, callback_1, false);
            });
        }
        return this._domEvents[type].increment();
    };
    InteractionObjectEventDispatcher.prototype._dispatchKeyboardEvent = function (key, ev) {
        // TODO use this.dispatchImmediately ?
        if (this.target.events.isEnabled(key)) {
            this.target.events.dispatchImmediately(key, {
                type: key,
                target: this.target,
                event: ev
            });
        }
    };
    InteractionObjectEventDispatcher.prototype._on = function (once, type, callback, context, dispatch) {
        var info = _super.prototype._on.call(this, once, type, callback, context, dispatch);
        var disposers = [info.disposer];
        switch (type) {
            case "hit":
            case "doublehit":
            case "rightclick":
            case "down":
            case "up":
                this.target.clickable = true;
                break;
            case "drag":
            case "dragstart":
            case "dragstop":
                this.target.draggable = true;
                break;
            case "track":
                this.target.trackable = true;
                break;
            case "rotate":
                this.target.rotatable = true;
                break;
            case "resize":
                this.target.resizable = true;
                break;
            case "swipe":
            case "swipeleft":
            case "swiperight":
                this.target.swipeable = true;
                break;
            case "wheel":
            case "wheelup":
            case "wheeldown":
            case "wheelleft":
            case "wheelright":
                this.target.wheelable = true;
                break;
            case "over":
            case "out":
                this.target.hoverable = true;
                break;
            case "focus":
            case "blur":
            case "focusin":
            case "focusout":
                this.target.focusable = true;
                break;
            case "keydown":
                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
                break;
            case "keyup":
                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
                break;
            case "keypress":
                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
                break;
            case "input":
                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
                break;
        }
        info.disposer = new __WEBPACK_IMPORTED_MODULE_1__utils_Disposer__["c" /* MultiDisposer */](disposers);
        return info;
    };
    return InteractionObjectEventDispatcher;
}(__WEBPACK_IMPORTED_MODULE_0__utils_EventDispatcher__["b" /* TargetedEventDispatcher */]));

//# sourceMappingURL=InteractionObjectEvents.js.map

/***/ }),
/* 213 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InteractionKeyboardObject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Interaction__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Animation__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Array__ = __webpack_require__(15);
/**
 * Functionality related simulating of dragging of elements using keyboard.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * [[InteractionKeyboardObject]] is used to simulate dragging of the `draggable`
 * element using keyboard arrows.
 *
 * @ignore Exclude from docs
 */
var InteractionKeyboardObject = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {InteractionObject} io An InteractionObject
     */
    function InteractionKeyboardObject(io) {
        /**
         * Indicates if this object has already been deleted. Any
         * destruction/disposal code should take this into account when deciding
         * wheter to run potentially costly disposal operations if they already have
         * been run.
         *
         * @type {boolean}
         */
        this._disposed = false;
        /**
         * Indicates direction of current horizontal movement.
         *
         * 0 - not moving horizontally
         * 1 - moving right
         * -1 - moving left
         * @type {number}
         */
        this.directionX = 0;
        /**
         * Indicates direction of current vertical movement.
         *
         * 0 - not moving vertically
         * 1 - moving down
         * -1 - moving up
         * @type {number}
         */
        this.directionY = 0;
        this.interaction = io;
        this._startedOn = new Date().getTime();
        __WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* interaction */].processDragStart(io);
        __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["c" /* animations */].push(this);
    }
    /**
     * It's an update method which is called by the system if
     * [[InteractionObject]] is used as animation.
     *
     * This will update coordinates of the element based on the movement
     * directions.
     */
    InteractionKeyboardObject.prototype.update = function () {
        // Init and get settings
        var io = this.interaction;
        var speed = __WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* interaction */].getKeyboardOption(io, "speed"), accelleration = __WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* interaction */].getKeyboardOption(io, "accelleration"), accellerationDelay = __WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* interaction */].getKeyboardOption(io, "accellerationDelay"), shift = {
            x: 0,
            y: 0
        };
        // If SHIFT key is pressed we slash speed by half and disable accelleration
        if (this.keyboardEvent.shiftKey) {
            speed *= 0.5;
            accelleration = 1;
        }
        // If CTRL is pressed we increase speed by x2
        else if (this.keyboardEvent.ctrlKey) {
            speed *= 2;
        }
        // Get elapsed time
        var ms = new Date().getTime() - this._startedOn;
        var accelleratedMs = ms - accellerationDelay;
        // Add accellerated movement
        if ((accelleration > 0) && (accelleratedMs > 0)) {
            var accellerationFactor = ms / accellerationDelay;
            ms = accellerationDelay;
            shift.x += this.directionX * (speed * accelleration * accellerationFactor * accelleratedMs);
            shift.y += this.directionY * (speed * accelleration * accellerationFactor * accelleratedMs);
        }
        // Calculate position
        shift.x += this.directionX * (speed * ms);
        shift.y += this.directionY * (speed * ms);
        // Simulate move on Interaction
        __WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* interaction */].handleTransformMove(io, shift, { x: 0, y: 0 }, this.keyboardEvent, true);
    };
    /**
     * Returns if this object has been already been disposed.
     *
     * @return {boolean} Is disposed?
     */
    InteractionKeyboardObject.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Disposes this object. Removes from system animations.
     */
    InteractionKeyboardObject.prototype.dispose = function () {
        if (!this._disposed) {
            __WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* interaction */].processDragStop(this.interaction);
            __WEBPACK_IMPORTED_MODULE_2__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_1__utils_Animation__["c" /* animations */], this);
        }
    };
    return InteractionKeyboardObject;
}());

//# sourceMappingURL=InteractionKeyboardObject.js.map

/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Inertia; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Interaction__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Type__ = __webpack_require__(2);
/**
 * Functionality related to inertia
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * A point of inertia is to simulate gradually drecreasing motion even after
 * actual interaction by user, that caused it, has already ended.
 *
 * [[Inertia]] object will continue triggering the same [[Sprite]] handlers
 * as if the interaction was still happening, gradually reducing
 * shift/angle/scale values until full stop.
 *
 * Basically, from the target element's point of view, while inertia is
 * playing, it is still being interacted with by user, albeit with a
 * decreasing speed.
 */
var Inertia = /** @class */ (function (_super) {
    __extends(Inertia, _super);
    /**
     * Constructor
     */
    function Inertia() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * List of animations currently playing.
         *
         * @type {List<Animation>}
         */
        _this.animations = [];
        _this.className = "Inertia";
        // Make animations disposable
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_1__utils_Disposer__["c" /* MultiDisposer */](_this.animations));
        return _this;
    }
    Object.defineProperty(Inertia.prototype, "x", {
        /**
         * Returns current X coordinate.
         *
         * @return {number} X
         */
        get: function () {
            return this.point.x;
        },
        /**
         * Sets current X coordinate.
         *
         * Will trigger "drag" event for the target element.
         *
         * @param {number} value X
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](value)) {
                this.point.x = value;
                this.handleMove();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Inertia.prototype, "y", {
        /**
         * Returns current Y coordinate.
         *
         * @return {number} Y
         */
        get: function () {
            return this.point.y;
        },
        /**
         * Sets current Y coordinate.
         *
         * Will trigger "drag" event for the target element.
         *
         * @param {number} value Y
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](value)) {
                this.point.y = value;
                this.handleMove();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Simulates dragging of element.
     */
    Inertia.prototype.handleMove = function () {
        // Prepare {InteractionEvent} object
        if (this.interaction.events.isEnabled("drag")) {
            var imev = {
                type: "drag",
                target: this.interaction,
                shift: {
                    x: this.x - this.startPoint.x,
                    y: this.y - this.startPoint.y
                },
                startPoint: this.startPoint,
                point: {
                    x: this.x,
                    y: this.y
                }
            };
            // Call handler
            this.interaction.events.dispatchImmediately("drag", imev);
        }
    };
    Object.defineProperty(Inertia.prototype, "rotation", {
        /**
         * Sets current angle.
         *
         * Will trigger "rotate" event on a target element.
         *
         * @param {number} value Angle
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](value)) {
                if (this.interaction.events.isEnabled("rotate")) {
                    var imev = {
                        type: "rotate",
                        target: this.interaction,
                        angle: value
                    };
                    this.interaction.events.dispatchImmediately("rotate", imev);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Finishes up the inertia animation. (removes reference to this animation
     * object)
     */
    Inertia.prototype.done = function () {
        // Remove inertia animation from the object
        this.interaction.inertias.removeKey(this.type);
        // Move ended
        if (this.type === "move") {
            __WEBPACK_IMPORTED_MODULE_2__Interaction__["b" /* interaction */].processDragStop(this.interaction);
        }
        // Destroy
        this.dispose();
    };
    return Inertia;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Inertia.js.map

/***/ }),
/* 215 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NumberFormatter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Language__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Strings__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Utils__ = __webpack_require__(5);
/**
 * Number formatting-related functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






/**
 * NumberFormatter class. Formats numbers according to specified formats.
 *
 * @todo Apply translations to suffixes/prefixes
 */
var NumberFormatter = /** @class */ (function (_super) {
    __extends(NumberFormatter, _super);
    /**
     * Constructor
     */
    function NumberFormatter() {
        var _this = _super.call(this) || this;
        /**
         * A base value for negative numbers. Will treat all numbers below this value
         * as negative numbers.
         *
         * @type {number}
         */
        _this._negativeBase = 0;
        /**
         * Holds number format.
         *
         * @type {string}
         * @default #,###.#####
         */
        _this._numberFormat = "#,###.#####";
        /**
         * Output format to produce. If the format calls for applying color to the
         * formatted value, this setting will determine what markup to use: SVG or
         * HTML.
         *
         * Available options: svg, html.
         *
         * @default "svg"
         * @type {string}
         */
        _this._outputFormat = "svg";
        /**
         * Holds big number prefixes to apply to numbers if `a` modifier is used in
         * format.
         *
         * @type {Array}
         */
        _this._bigNumberPrefixes = [
            { "number": 1e+3, "suffix": "K" },
            { "number": 1e+6, "suffix": "M" },
            { "number": 1e+9, "suffix": "G" },
            { "number": 1e+12, "suffix": "T" },
            { "number": 1e+15, "suffix": "P" },
            { "number": 1e+18, "suffix": "E" },
            { "number": 1e+21, "suffix": "Z" },
            { "number": 1e+24, "suffix": "Y" }
        ];
        /**
         * Holds small number prefixes to apply to numbers if `a` modifier is used in
         * format.
         *
         * @type {Array}
         */
        _this._smallNumberPrefixes = [
            { "number": 1e-24, "suffix": "y" },
            { "number": 1e-21, "suffix": "z" },
            { "number": 1e-18, "suffix": "a" },
            { "number": 1e-15, "suffix": "f" },
            { "number": 1e-12, "suffix": "p" },
            { "number": 1e-9, "suffix": "n" },
            { "number": 1e-6, "suffix": "μ" },
            { "number": 1e-3, "suffix": "m" }
        ];
        /**
         * Holds prefixes to apply to data size numbers if `b` modifier is used in
         * format.
         *
         * @type {Array}
         */
        _this._bytePrefixes = [
            { "number": 0, "suffix": "B" },
            { "number": 1024, "suffix": "KB" },
            { "number": 1048576, "suffix": "MB" },
            { "number": 1073741824, "suffix": "GB" },
            { "number": 1099511627776, "suffix": "TB" },
            { "number": 1125899906842624, "suffix": "PB" }
        ];
        _this.className = "NumberFormatter";
        _this.applyTheme();
        return _this;
    }
    /**
     * Formats the number according to specific format.
     *
     * @param  {number | string}  value   Value to format
     * @param  {string}           format  Format to apply
     * @return {string}                   Formatted number
     */
    NumberFormatter.prototype.format = function (value, format) {
        // no language?
        if (!this.language) {
            if (this.sprite) {
                this.language = this.sprite.language;
            }
            else {
                this.language = new __WEBPACK_IMPORTED_MODULE_0__utils_Language__["a" /* Language */];
            }
        }
        // no format passed in or "Number"
        if (typeof format === "undefined" || format.toLowerCase() === "number") {
            format = this._numberFormat;
        }
        // Clean format
        format = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["cleanFormat"](format);
        // Get format info (it will also deal with parser caching)
        var info = this.parseFormat(format);
        // cast to number just in case
        // TODO: maybe use better casting
        var source = Number(value);
        // format and replace the number
        var details;
        if (source > this._negativeBase) {
            details = info.positive;
        }
        else if (source < this._negativeBase) {
            details = info.negative;
        }
        else {
            details = info.zero;
        }
        // Format
        var formatted = details.template.split(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */]).join(this.applyFormat(source, details));
        return formatted;
    };
    /**
     * Parses supplied format into structured object which can be used to format
     * the number.
     *
     * @param {string} format Format string, i.e. "#,###.00"
     */
    NumberFormatter.prototype.parseFormat = function (format) {
        var _this = this;
        // check cache
        if (typeof (this.getCache(format)) !== "undefined") {
            return this.getCache(format);
        }
        // init format parse info holder
        var info = {
            "positive": {
                "thousands": {
                    "active": -1,
                    "passive": -1,
                    "interval": -1,
                    "separator": this.language.translateEmpty("_thousandSeparator")
                },
                "decimals": {
                    "active": -1,
                    "passive": -1,
                    "separator": this.language.translateEmpty("_decimalSeparator")
                },
                "template": "",
                "source": "",
                "parsed": false
            },
            "negative": {
                "thousands": {
                    "active": -1,
                    "passive": -1,
                    "interval": -1,
                    "separator": this.language.translateEmpty("_thousandSeparator")
                },
                "decimals": {
                    "active": -1,
                    "passive": -1,
                    "separator": this.language.translateEmpty("_decimalSeparator")
                },
                "template": "",
                "source": "",
                "parsed": false
            },
            "zero": {
                "thousands": {
                    "active": -1,
                    "passive": -1,
                    "interval": -1,
                    "separator": this.language.translateEmpty("_thousandSeparator")
                },
                "decimals": {
                    "active": -1,
                    "passive": -1,
                    "separator": this.language.translateEmpty("_decimalSeparator")
                },
                "template": "",
                "source": "",
                "parsed": false
            }
        };
        // Escape double vertical bars (that mean display one vertical bar)
        format = format.replace("||", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */]);
        // Split it up and deal with different formats
        var parts = format.split("|");
        info.positive.source = parts[0];
        if (typeof parts[2] === "undefined") {
            info.zero = info.positive;
        }
        else {
            info.zero.source = parts[2];
        }
        if (typeof parts[1] === "undefined") {
            info.negative = info.positive;
        }
        else {
            info.negative.source = parts[1];
        }
        // Parse each
        __WEBPACK_IMPORTED_MODULE_4__utils_Object__["each"](info, function (part, item) {
            // Already parsed
            if (item.parsed) {
                return;
            }
            // Check cached
            if (typeof _this.getCache(item.source) !== "undefined") {
                info[part] = _this.getCache(item.source);
                return;
            }
            // Begin parsing
            var partFormat = item.source;
            // Just "Number"?
            if (partFormat.toLowerCase() === "number") {
                partFormat = _this._numberFormat;
            }
            // Let TextFormatter split into chunks
            var chunks = __WEBPACK_IMPORTED_MODULE_2__System__["b" /* system */].textFormatter.chunk(partFormat, true);
            for (var i = 0; i < chunks.length; i++) {
                var chunk = chunks[i];
                // replace back double vertical bar
                chunk.text = chunk.text.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */], "|");
                if (chunk.type === "value") {
                    // Parse format
                    // Look for codes
                    var matches = [];
                    if (matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%]?[abesABES‰]?/)) {
                        if (matches === null || matches[0] === "") {
                            // no codes here - assume string
                            // nothing to do here
                            item.template += chunk.text;
                        }
                        else {
                            // look for the format modifiers at the end
                            var mods = [];
                            if (mods = matches[0].match(/[abesABES%‰]{2}|[abesABES%‰]{1}$/)) {
                                item.mod = mods[0].toLowerCase();
                                item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰]{1}$/) ? true : false;
                            }
                            // break the format up
                            var a = matches[0].split(".");
                            // Deal with thousands
                            if (a[0] === "") {
                                // No directives for thousands
                                // Leave default settings (no formatting)
                            }
                            else {
                                // Counts
                                item.thousands.active = (a[0].match(/0/g) || []).length;
                                item.thousands.passive = (a[0].match(/\#/g) || []).length + item.thousands.active;
                                // Separator interval
                                var b = a[0].split(",");
                                if (b.length === 1) {
                                    // No thousands separators
                                    // Do nothing
                                }
                                else {
                                    // Use length fo the last chunk as thousands length
                                    item.thousands.interval = b.pop().length;
                                    if (item.thousands.interval === 0)
                                        item.thousands.interval = -1;
                                }
                            }
                            // Deal with decimals
                            if (typeof (a[1]) === "undefined") {
                                // No directives for decimals
                                // Leave at defaults (no formatting)
                            }
                            else {
                                // Counts
                                item.decimals.active = (a[1].match(/0/g) || []).length;
                                item.decimals.passive = (a[1].match(/\#/g) || []).length + item.decimals.active;
                            }
                            // Add special code to template
                            item.template += chunk.text.split(matches[0]).join(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */]);
                        }
                    }
                }
                else {
                    // Quoted string - take it as it is
                    item.template += chunk.text;
                }
            }
            // Apply style formatting
            //item.template = system.textFormatter.format(item.template, this.outputFormat);
            // Save cache
            _this.setCache(item.source, item);
            // Mark this as parsed
            item.parsed = true;
        });
        // Save cache (the whole thing)
        this.setCache(format, info);
        return info;
    };
    /**
     * Applies parsed format to a numeric value.
     *
     * @param  {number}  value    Value
     * @param  {any}     details  Parsed format as returned by {parseFormat}
     * @return {string}          Formatted number
     */
    NumberFormatter.prototype.applyFormat = function (value, details) {
        // Use absolute values
        var negative = value < 0;
        value = Math.abs(value);
        // Recalculate according to modifier
        var prefix = "", suffix = "";
        var mods = details.mod ? details.mod.split("") : [];
        if (mods.indexOf("b") !== -1) {
            var a_1 = this.applyPrefix(value, this._bytePrefixes);
            value = a_1[0];
            prefix = a_1[1];
            suffix = a_1[2];
            if (details.modSpacing) {
                suffix = " " + suffix;
            }
        }
        else if (mods.indexOf("a") !== -1) {
            var a_2 = this.applyPrefix(value, value < 1.00 ? this._smallNumberPrefixes : this._bigNumberPrefixes);
            value = a_2[0];
            prefix = a_2[1];
            suffix = a_2[2];
            if (details.modSpacing) {
                suffix = " " + suffix;
            }
        }
        else if (mods.indexOf("%") !== -1) {
            value *= 100;
            suffix = "%";
        }
        else if (mods.indexOf("‰") !== -1) {
            value *= 1000;
            suffix = "‰";
        }
        // Round to passive
        if (mods.indexOf("e") !== -1) {
            // convert the value to exponential
            var exp = void 0;
            if (details.decimals.passive >= 0) {
                exp = value.toExponential(details.decimals.passive).split("e");
            }
            else {
                exp = value.toExponential().split("e");
            }
            value = Number(exp[0]);
            suffix = "e" + exp[1];
            if (details.modSpacing) {
                suffix = " " + suffix;
            }
        }
        else if (details.decimals.passive === 0) {
            value = Math.round(value);
        }
        else if (details.decimals.passive > 0) {
            var d = Math.pow(10, details.decimals.passive);
            value = Math.round(value * d) / d;
        }
        // Init return value
        var res = "";
        // Calc integer and decimal parts
        var a = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["numberToString"](value).split(".");
        // Format integers
        var ints = a[0];
        // Pad integers to active length
        if (ints.length < details.thousands.active) {
            ints = Array(details.thousands.active - ints.length + 1).join("0") + ints;
        }
        // Insert thousands separators
        if (details.thousands.interval > 0) {
            var ip = [];
            var intsr = ints.split("").reverse().join("");
            for (var i = 0; i <= ints.length; i += details.thousands.interval) {
                var c = intsr.substr(i, details.thousands.interval).split("").reverse().join("");
                if (c !== "") {
                    ip.unshift(c);
                }
            }
            ints = ip.join(details.thousands.separator);
        }
        // Add integers
        res += ints;
        // Add decimals
        if (a.length === 1) {
            a.push("");
        }
        var decs = a[1];
        // Fill zeros?
        if (decs.length < details.decimals.active) {
            decs += Array(details.decimals.active - decs.length + 1).join("0");
        }
        if (decs !== "") {
            res += details.decimals.separator + decs;
        }
        // Can't have empty return value
        if (res === "") {
            res = "0";
        }
        // Add minus sign back
        if (negative && (mods.indexOf("s") === -1)) {
            res = "-" + res;
        }
        // Add suffixes/prefixes
        if (prefix) {
            res = prefix + res;
        }
        if (suffix) {
            res += suffix;
        }
        return res;
    };
    /**
     * Chooses appropriate prefix and suffix based on the passed in rules.
     *
     * @param  {number}  value     Value
     * @param  {any[]}   prefixes  Prefix array
     * @return {any}               Result
     */
    NumberFormatter.prototype.applyPrefix = function (value, prefixes) {
        var newvalue = value, prefix = "", suffix = "";
        for (var i = 0; i < prefixes.length; i++) {
            if (prefixes[i].number <= value) {
                if (prefixes[i].number === 0) {
                    newvalue = 0;
                }
                else {
                    newvalue = value / prefixes[i].number;
                }
                prefix = prefixes[i].prefix;
                suffix = prefixes[i].suffix;
            }
        }
        return [newvalue, prefix, suffix];
    };
    /**
     * Invalidates the parent [[Sprite]] object.
     */
    NumberFormatter.prototype.invalidateSprite = function () {
        if (this.sprite) {
            this.sprite.invalidate();
        }
    };
    Object.defineProperty(NumberFormatter.prototype, "numberFormat", {
        /**
         * @return {string} A format to use for number formatting
         */
        get: function () {
            return this._numberFormat;
        },
        /**
         * Number format.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param {string}  format  A format to use for number formatting
         */
        set: function (format) {
            this._numberFormat = format;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberFormatter.prototype, "bigNumberPrefixes", {
        /**
         * @return {any[]} Prefixes for big numbers
         */
        get: function () {
            return this._bigNumberPrefixes;
        },
        /**
         * Prefixes for big numbers.
         *
         * It's an array of objects of number/prefix pairs.
         *
         * ```JSON
         * [
         *   { "number": 1e+3, "suffix": "K" },
         *   { "number": 1e+6, "suffix": "M" },
         *   { "number": 1e+9, "suffix": "G" },
         *   { "number": 1e+12, "suffix": "T" },
         *   { "number": 1e+15, "suffix": "P" },
         *   { "number": 1e+18, "suffix": "E" },
         *   { "number": 1e+21, "suffix": "Z" },
         *   { "number": 1e+24, "suffix": "Y" }
         * ]
         * ```
         *
         * If the number is bigger than the `number` ir will be converted to the
         * appropriate bigger number with prefix.
         *
         * E.g. as per above `1500` will be converted to `1.5K`.
         *
         * Please note that for this transformation to be enabled, you need to
         * enable it specific modifier in your format setting.
         *
         * The modifier for big/small number modification is "a":
         *
         * ```Text
         * {myfield.formatNumber("#,###.00a")}
         * ```
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param {any[]}  prefixes  Prefixes for big numbers
         */
        set: function (prefixes) {
            this._bigNumberPrefixes = prefixes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberFormatter.prototype, "smallNumberPrefixes", {
        /**
         * @return {any[]} Prefixes for small numbers
         */
        get: function () {
            return this._smallNumberPrefixes;
        },
        /**
         * Prefixes for big numbers.
         *
         * It's an array of objects of number/prefix pairs.
         *
         * ```JSON
         * [
         *   { "number": 1e-24, "suffix": "y" },
         *   { "number": 1e-21, "suffix": "z" },
         *   { "number": 1e-18, "suffix": "a" },
         *   { "number": 1e-15, "suffix": "f" },
         *   { "number": 1e-12, "suffix": "p" },
         *   { "number": 1e-9, "suffix": "n" },
         *   { "number": 1e-6, "suffix": "μ" },
         *   { "number": 1e-3, "suffix": "m" }
         * ]
         * ```
         *
         * If the number is smaller than the `number` ir will be converted to the
         * appropriate smaller number with prefix.
         *
         * E.g. as per above `0.0015` will be converted to `1.5m`.
         *
         * Please note that for this transformation to be enabled, you need to
         * enable it specific modifier in your format setting.
         *
         * The modifier for big/small number modification is "a":
         *
         * ```Text
         * {myfield.formatNumber("#,###.00a")}
         * ```
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param {any[]}  prefixes  Prefixes for small numbers
         */
        set: function (prefixes) {
            this._smallNumberPrefixes = prefixes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberFormatter.prototype, "bytePrefixes", {
        /**
         * @return {any[]} Prefixes for byte-size formatting
         */
        get: function () {
            return this._bytePrefixes;
        },
        /**
         * Basically the same as `bigNumberPrefixes`, except base for calculation
         * is not thousand but byte (1024).
         *
         * The modifier is "b".
         *
         *  ```Text
         * {myfield.formatNumber("#,###.00b")}
         * ```
         *
         * The above `2048` will change to `2K`.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param {any[]}  prefixes  Prefixes for byte-size formatting
         */
        set: function (prefixes) {
            this._bytePrefixes = prefixes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberFormatter.prototype, "outputFormat", {
        /**
         * @ignore Exclude from docs
         * @return {string} Output format
         */
        get: function () {
            return this._outputFormat;
        },
        /**
         * Ooutput format: "svg" or "html".
         *
         * @ignore Exclude from docs
         * @param {string}  value  Output format
         */
        set: function (outputFormat) {
            this._outputFormat = outputFormat.toLowerCase();
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Replaces brackets with temporary placeholders.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Input text
     * @return {string}        Escaped text
     */
    NumberFormatter.prototype.escape = function (text) {
        return text.replace("||", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */]);
    };
    /**
     * Replaces placeholders back to brackets.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Escaped text
     * @return {string}        Unescaped text
     */
    NumberFormatter.prototype.unescape = function (text) {
        return text.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */], "|");
    };
    return NumberFormatter;
}(__WEBPACK_IMPORTED_MODULE_1__Base__["a" /* BaseObject */]));

//# sourceMappingURL=NumberFormatter.js.map

/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DurationFormatter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Language__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__System__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Strings__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(2);
/**
 * Duration formatting functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







/**
 * DurationFormatter class. Formats numbers as durations.
 *
 * `1000` as `16:40`
 *
 * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting
 * @todo Implement syntax to set base unit in format itself
 */
var DurationFormatter = /** @class */ (function (_super) {
    __extends(DurationFormatter, _super);
    /**
     * Constructor
     */
    function DurationFormatter() {
        var _this = _super.call(this) || this;
        /**
         * A base value for negative numbers. Will treat all numbers below this value
         * as negative numbers.
         *
         * @type {number}
         */
        _this._negativeBase = 0;
        /**
         * Holds number format.
         *
         * @type {string}
         */
        _this._durationFormat = "mm:ss";
        /**
         * A base unit to consider values are in.
         *
         * @default "s"
         * @type {string}
         */
        _this._baseUnit = "s";
        /**
         * Output format to produce. If the format calls for applying color to the
         * formatted value, this setting will determine what markup to use: SVG or
         * HTML.
         *
         * Available options: svg, html.
         *
         * @default "svg"
         * @type {string}
         */
        _this._outputFormat = "svg";
        /**
         * How many milliseconds each unit represents.
         *
         * @type {Object}
         */
        _this._unitValues = {
            "S": 1,
            "s": 1000,
            "m": 60000,
            "h": 3600000,
            "d": 86400000,
            "w": 604800000,
            "M": 2592000000,
            "y": 31536000000,
        };
        /**
         * Collection of aliases for units.
         *
         * @type {Object}
         */
        _this._unitAliases = {
            "Y": "y",
            "D": "d",
            "H": "h",
            "K": "h",
            "k": "h",
            "n": "S"
        };
        _this.className = "DurationFormatter";
        _this.applyTheme();
        return _this;
    }
    /**
     * Formats the number according as duration.
     *
     * For example `1000` (base unit seconds) would be converted to `16:40` as in
     * 16 minutes and 40 seconds.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting
     * @param  {number | string}  value   Value to format
     * @param  {string}           format  Format to apply
     * @param  {string}           base    Override base unit
     * @return {string}                   Formatted number
     */
    DurationFormatter.prototype.format = function (value, format, base) {
        // no language?
        if (!this.language) {
            if (this.sprite) {
                this.language = this.sprite.language;
            }
            else {
                this.language = new __WEBPACK_IMPORTED_MODULE_0__utils_Language__["a" /* Language */];
            }
        }
        // no base unit?
        var baseUnit = base || this._baseUnit;
        // no format passed in or empty
        if (typeof format === "undefined" || format === "") {
            format = this._durationFormat;
        }
        // Clean format
        format = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["cleanFormat"](format);
        // get format info (it will also deal with parser caching)
        var info = this.parseFormat(format, baseUnit);
        // cast to number just in case
        // TODO: maybe use better casting
        var source = Number(value);
        // format and replace the number
        var details;
        if (source > this._negativeBase) {
            details = info.positive;
        }
        else if (source < this._negativeBase) {
            details = info.negative;
        }
        else {
            details = info.zero;
        }
        // Format
        var formatted = this.applyFormat(source, details);
        // Apply color?
        if (details.color !== "") {
            if (this._outputFormat === "svg") {
                formatted = "<tspan fill='" + details.color + "'>" + formatted + "</tspan>";
            }
            else if (this._outputFormat === "html") {
                formatted = "<span style='color: " + details.color + ";'>" + formatted + "</span>";
            }
        }
        return formatted;
    };
    /**
     * Parses supplied format into structured object which can be used to format
     * the number.
     *
     * @param  {string}  format  Format string, i.e. "#,###.00"
     * @param  {string}  base    Override base unit
     * @return {any}             Parsed information
     */
    DurationFormatter.prototype.parseFormat = function (format, base) {
        var _this = this;
        // check cache
        if (typeof (this.getCache(format)) !== "undefined") {
            return this.getCache(format);
        }
        // no base unit?
        var baseUnit = base || this._baseUnit;
        // Initialize duration parsing info
        var info = {
            "positive": {
                "color": "",
                "template": "",
                "parts": [],
                "source": "",
                "baseUnit": baseUnit,
                "parsed": false,
                "absolute": false
            },
            "negative": {
                "color": "",
                "template": "",
                "parts": [],
                "source": "",
                "baseUnit": baseUnit,
                "parsed": false,
                "absolute": false
            },
            "zero": {
                "color": "",
                "template": "",
                "parts": [],
                "source": "",
                "baseUnit": baseUnit,
                "parsed": false,
                "absolute": false
            }
        };
        // Escape double vertical bars (that mean display one vertical bar)
        format = format.replace("||", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */]);
        // Split it up and deal with different formats
        var parts = format.split("|");
        info.positive.source = parts[0];
        if (typeof parts[2] === "undefined") {
            info.zero = info.positive;
        }
        else {
            info.zero.source = parts[2];
        }
        if (typeof parts[1] === "undefined") {
            info.negative = info.positive;
        }
        else {
            info.negative.source = parts[1];
        }
        // Parse each
        __WEBPACK_IMPORTED_MODULE_4__utils_Object__["each"](info, function (part, item) {
            // Already parsed
            if (item.parsed) {
                return;
            }
            // Check cached
            if (typeof _this.getCache(item.source) !== "undefined") {
                info[part] = _this.getCache(item.source);
                return;
            }
            // Begin parsing
            var partFormat = item.source;
            // Check for [] directives
            var dirs = [];
            dirs = item.source.match(/^\[([^\]]*)\]/);
            if (dirs && dirs.length && dirs[0] !== "") {
                partFormat = item.source.substr(dirs[0].length);
                item.color = dirs[1];
            }
            // Let TextFormatter split into chunks
            var chunks = __WEBPACK_IMPORTED_MODULE_2__System__["b" /* system */].textFormatter.chunk(partFormat, true);
            for (var i = 0; i < chunks.length; i++) {
                var chunk = chunks[i];
                // replace back double vertical bar
                chunk.text = chunk.text.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */], "|");
                if (chunk.type === "value") {
                    // Just "Duration"?
                    if (chunk.text.toLowerCase() === "duration") {
                        chunk.text = _this._durationFormat;
                    }
                    // Check for "a" (absolute) modifier
                    if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {
                        item.absolute = true;
                        chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, "$1");
                    }
                    // Find all possible parts
                    var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);
                    // Populate template
                    for (var x = 0; x < matches.length; x++) {
                        // Is it an alias?
                        if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](matches[x])) {
                            matches[x] = _this._unitAliases[matches[x]];
                        }
                        item.parts.push(matches[x]);
                        chunk.text = chunk.text.replace(matches[x], __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */]);
                    }
                }
                // Apply to template
                item.template += chunk.text;
            }
            // Apply style formatting
            //item.template = system.textFormatter.format(item.template, this.outputFormat);
            // Save cache
            _this.setCache(item.source, item);
            // Mark this as parsed
            item.parsed = true;
        });
        // Save cache (the whole thing)
        this.setCache(format, info);
        return info;
    };
    /**
     * Applies parsed format to a numeric value.
     *
     * @param  {number}  value    Value
     * @param  {any}     details  Parsed format as returned by {parseFormat}
     * @return {string}           Formatted duration
     */
    DurationFormatter.prototype.applyFormat = function (value, details) {
        // Use absolute values
        var negative = !details.absolute && (value < this._negativeBase);
        value = Math.abs(value);
        // Recalculate to milliseconds
        var tstamp = this.toTimeStamp(value, details.baseUnit);
        // Init return value
        var res = details.template;
        // Iterate through duration parts
        for (var i = 0; i < details.parts.length; i++) {
            // Gather the part
            var part = details.parts[i];
            var unit = part.substr(0, 1);
            var digits = part.length;
            // Calculate current unit value
            var ints = Math.floor(tstamp / this._unitValues[unit]);
            res = res.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */], __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["padString"](ints, digits, "0"));
            // Reduce timestamp
            tstamp -= ints * this._unitValues[unit];
        }
        // Reapply negative sign
        if (negative) {
            res = "-" + res;
        }
        return res;
    };
    /**
     * Converts numeric value to timestamp in milliseconds.
     *
     * @param  {number}  value     A source value
     * @param  {string}  baseUnit  Base unit the source value is in: "q", "s", "i", "h", "d", "w", "m", "y"
     * @return {number}            Value representation as a timestamp in milliseconds
     */
    DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {
        return value * this._unitValues[baseUnit];
    };
    /**
     * Invalidates the parent [[Sprite]] object.
     */
    DurationFormatter.prototype.invalidateSprite = function () {
        if (this.sprite) {
            this.sprite.invalidate();
        }
    };
    Object.defineProperty(DurationFormatter.prototype, "durationFormat", {
        /**
         * @return {string} Duration format
         */
        get: function () {
            return this._durationFormat;
        },
        /**
         * Duration format.
         *
         * @default "mm:ss"
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting
         * @param {string}  format  Duration format
         */
        set: function (format) {
            this._durationFormat = format;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationFormatter.prototype, "baseUnit", {
        /**
         * @return {string} Base unit
         */
        get: function () {
            return this._baseUnit;
        },
        /**
         * Base unit the values are in.
         *
         * A base unit will be used to recalculate the numeric value to millisecond
         * timestamps.
         *
         * Available options:
         *
         * * "q" - millisecond
         * * "s" - second
         * * "i" - minute
         * * "h" - hour
         * * "d" - day
         * * "w" - week
         * * "m" - month
         * * "y" - year
         *
         * @default "s"
         * @param {string}  baseUnit  A base unit
         */
        set: function (baseUnit) {
            this._baseUnit = baseUnit.toLowerCase();
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationFormatter.prototype, "outputFormat", {
        /**
         * Getter for output format.
         *
         * @ignore Exclude from docs
         * @return {string} Output format
         */
        get: function () {
            return this._outputFormat;
        },
        /**
         * Setter for output format: "svg" or "html.
         *
         * @ignore Exclude from docs
         * @param {string}  value  Output format
         */
        set: function (outputFormat) {
            this._outputFormat = outputFormat.toLowerCase();
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    return DurationFormatter;
}(__WEBPACK_IMPORTED_MODULE_1__Base__["a" /* BaseObject */]));

//# sourceMappingURL=DurationFormatter.js.map

/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ExportMenu; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ExportCSS__ = __webpack_require__(301);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Language__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Validatable__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Keyboard__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_DOM__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Type__ = __webpack_require__(2);
/**
 * ExportMenu provides functionality for building Export menu
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */













/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a menu for Export operations.
 *
 * To add an export menu to a chart, set this to a new instance of
 * [[ExportMenu]].
 *
 * ```TypeScript
 * chart.exporting.menu = new amcharts4.ExportMenu();
 * ```
 * ```JavaScript
 * chart.exporting.menu = new amcharts4.ExportMenu();
 * ```
 * ```JSON
 * {
 *   // ...
 *   "exporting": {
 *     "menu": {}
 *   }
 * }
 * ```
 * @important
 */
var ExportMenu = /** @class */ (function (_super) {
    __extends(ExportMenu, _super);
    /**
     * Constructor
     */
    function ExportMenu() {
        var _this = _super.call(this) || this;
        /**
         * Holds [[EventDispatcher]].
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_4__utils_EventDispatcher__["a" /* EventDispatcher */]();
        /**
         * An [[Adapter]].
         *
         * @type {Adapter<ExportMenu, IExportMenuAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * How many milliseconds to hold menu/sub-menu open after it loses focus or
         * hover, before auto-closing it.
         *
         * @type {number}
         */
        _this.closeDelay = 1000;
        /**
         * An instance of [[Language]].
         *
         * @ignore Exclude from docs
         * @type {MutableValueDisposer<Language>}
         */
        _this._language = new __WEBPACK_IMPORTED_MODULE_5__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * What HTML tags to use to build menu.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._menuTag = "ul";
        /**
         * Which tag to use to enclose individual menu items.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._itemTag = "li";
        /**
         * Tag to wrap menu item labels in.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._labelTag = "a";
        /**
         * Prefix for class names applied to menu elements.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._classPrefix = "amexport";
        /**
         * If set to `true` [[ExportMenu]] will load it's own external CSS when
         * instantiated.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._defaultStyles = true;
        /**
         * Horizontal positioning.
         *
         * @ignore Exclude from docs
         * @type {Align}
         */
        _this._align = "right";
        /**
         * Vertical positioning.
         *
         * @ignore Exclude from docs
         * @type {VerticalAlign}
         */
        _this._verticalAlign = "top";
        /**
         * A tabindex to apply to Export Menu.
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this._tabindex = 0;
        /**
         * Whether next menu close event should be ignored.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._ignoreNextClose = false;
        /**
         * Default menu items.
         *
         * @ignore Exclude from docs
         * @type {Array<IExportMenuItem>}
         */
        _this._items = [
            {
                "label": "...",
                "menu": [
                    {
                        "label": "Image",
                        "menu": [
                            { "type": "png", "label": "PNG" },
                            { "type": "jpg", "label": "JPG" },
                            { "type": "gif", "label": "GIF" },
                            { "type": "svg", "label": "SVG" },
                            { "type": "pdf", "label": "PDF" }
                        ]
                    }, {
                        "label": "Data",
                        "menu": [
                            { "type": "json", "label": "JSON" },
                            { "type": "csv", "label": "CSV" },
                            { "type": "xlsx", "label": "XLSX" }
                        ]
                    }, {
                        "label": "Print", "type": "print"
                    }
                ]
            }
        ];
        _this.className = "ExportMenu";
        _this.invalidate();
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)draws the Export menu.
     *
     * @ignore Exclude from docs
     */
    ExportMenu.prototype.validate = function () {
        this.draw();
        _super.prototype.validate.call(this);
    };
    /**
     * Draws the menu based on current items.
     *
     * Normally, there's no need to call this explicitly. The chart, if it has
     * export menu enabled, will automatically draw the menu.
     */
    ExportMenu.prototype.draw = function () {
        var _this = this;
        // Create top-level menu item, or clear it
        if (!this._element) {
            this._element = this.createMenuElement(0);
        }
        else {
            this._element.innerHTML = "";
            this._element.className = this.getMenuItemClass(0);
        }
        // See if we're loading external CSS
        // Hide it until CSS is loaded
        if (this.defaultStyles) {
            this._element.style.display = "none";
        }
        // Append to container
        this._container.appendChild(this._element);
        // Apply adapter to menu items before processing
        this._items = this.adapter.apply("items", {
            items: this._items
        }).items;
        for (var len = this._items.length, i = 0; i < len; i++) {
            this.drawBranch(this._element, this._items[i], 0);
        }
        // Apply adapter to finalized menu element
        this._element = this.adapter.apply("menuElement", {
            menuElement: this._element
        }).menuElement;
        // Set up global "down" event
        __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* interaction */].body.events.on("down", function (ev) {
            if (!ev.pointer.touch) {
                _this._ignoreNextClose = false;
            }
            _this.close();
        });
        // Set up global event on ESC press to close the menu
        __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* interaction */].body.events.on("keyup", function (ev) {
            var key = __WEBPACK_IMPORTED_MODULE_8__utils_Keyboard__["b" /* keyboard */].getEventKey(ev.event);
            switch (key) {
                case "esc":
                    _this.close();
                    break;
                case "up":
                case "down":
                case "left":
                case "right":
                    _this.moveSelection(key);
                    break;
            }
        });
        if (this.defaultStyles) {
            this.loadDefaultCSS();
        }
    };
    /**
     * Creates a new branch in export menu. This function is recursive for
     * building multi-level menus.
     *
     * @ignore Exclude from docs
     * @param {HTMLElement}     container Container to put branch elements in
     * @param {IExportMenuItem} branch    Menu item
     * @param {number}          level     Current nesting level
     */
    ExportMenu.prototype.drawBranch = function (container, branch, level) {
        var _this = this;
        // Apply adapter
        branch = this.adapter.apply("branch", {
            branch: branch,
            level: level
        }).branch;
        // Unsupported?
        // ExportMenu does not check or know for specific browser/system
        // capabilities. It must happen in some other code and applied via Adapter.
        // Export itself will check compatibility, but there might be other plugins
        // that influence it or even add any specific export functionality.
        if (branch.unsupported === true) {
            return;
        }
        // Init ascendants
        if (!branch.ascendants) {
            branch.ascendants = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
        }
        // Get type
        var type = branch.type;
        // Create an item
        var element = this.createItemElement(level, type);
        // Create label
        var label = this.createLabelElement(level, type);
        label.innerHTML = (branch.label ? this.language.translate(branch.label) : "");
        // Apply reader text to label
        var readerLabel = this.getReaderLabel(branch, label.innerHTML);
        label.setAttribute("aria-label", readerLabel);
        // Add Label
        element.appendChild(label);
        // Create interaction object
        branch.interactions = __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* interaction */].getInteraction(label);
        // Create interaction manager we can set event listeners to
        if (this.typeClickable(type)) {
            //branch.interactions.clickable = true;
            branch.interactions.events.on("hit", function (ev) {
                if (_this.events.isEnabled("hit")) {
                    _this.events.dispatchImmediately("hit", {
                        "type": "hit",
                        "event": ev.event,
                        "target": branch
                    });
                }
            });
            branch.interactions.events.on("keyup", function (ev) {
                if (__WEBPACK_IMPORTED_MODULE_8__utils_Keyboard__["b" /* keyboard */].isKey(ev.event, "enter")) {
                    if (_this.events.isEnabled("enter")) {
                        _this.events.dispatchImmediately("enter", {
                            "type": "enter",
                            "event": ev.event,
                            "target": branch
                        });
                    }
                }
            });
        }
        // Add ENTER event to open sub-menus
        if (this.hasSubMenu(branch)) {
            branch.interactions.events.on("keyup", function (ev) {
                if (__WEBPACK_IMPORTED_MODULE_8__utils_Keyboard__["b" /* keyboard */].isKey(ev.event, "enter")) {
                    // This is item has sub-menu, activate the first child on ENTER
                    _this.selectBranch(branch.menu[0]);
                    // Attempt to set focus
                    _this.setFocus(branch.menu[0]);
                }
            });
        }
        // Add events
        branch.interactions.events.on("over", function (ev) {
            if (ev.pointer.touch) {
                // Cancel pending menu closure
                _this._ignoreNextClose = true;
            }
            _this.selectBranch(branch);
        });
        branch.interactions.events.on("out", function (ev) {
            if (!ev.pointer.touch) {
                _this.delayUnselectBranch(branch);
            }
        });
        branch.interactions.events.on("focus", function (ev) {
            _this.selectBranch(branch);
        });
        branch.interactions.events.on("blur", function (ev) {
            _this.delayUnselectBranch(branch);
        });
        // Increment level
        var local_level = level + 1;
        // Has sub-menu?
        if (branch.menu) {
            var submenu = this.createMenuElement(local_level);
            for (var len = branch.menu.length, i = 0; i < len; i++) {
                branch.menu[i].ascendants = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
                if (branch.ascendants.length) {
                    branch.menu[i].ascendants.copyFrom(branch.ascendants);
                }
                branch.menu[i].ascendants.push(branch);
                this.drawBranch(submenu, branch.menu[i], local_level);
            }
            // Sub-menu is empty (all items are not supported)
            // Do not draw this menu item at all
            if (submenu.innerHTML == "") {
                return;
            }
            element.appendChild(submenu);
        }
        // Append to container
        container.appendChild(element);
    };
    /**
     * Creates a menu element to hold its elements in. Usually it's an `<ul>`
     * tag.
     *
     * @ignore Exclude from docs
     * @param  {number}       level  Current nesting level
     * @return {HTMLElement}         HTML element reference
     */
    ExportMenu.prototype.createMenuElement = function (level) {
        var element = document.createElement(this.menuTag);
        element.className = this.getMenuItemClass(level);
        // Accessibility
        if (level === 0) {
            element.setAttribute("role", "menu");
        }
        return element;
    };
    /**
     * Generates a class name for the menu element based on its nesting level.
     *
     * @ignore Exclude from docs
     * @param  {number}  level  Current nesting level
     * @return {string}         Class name(s)
     */
    ExportMenu.prototype.getMenuItemClass = function (level) {
        var className = this.classPrefix + "-menu " + this.classPrefix + "-menu-level-" + level;
        if (level === 0) {
            className += " " + this.classPrefix + "-menu-root " +
                this.classPrefix + "-" + this.align + " " +
                this.classPrefix + "-" + this.verticalAlign;
        }
        return this.adapter.apply("menuClass", {
            className: className,
            level: level
        }).className;
    };
    /**
     * Creates menu item. Usually `<li>` tag. Its label and sub-elements will go
     * into this element.
     *
     * @ignore Exclude from docs
     * @param  {number}       level  Current nesting level
     * @param  {string}       type   Type of the menu item
     * @return {HTMLElement}         HTML element reference
     */
    ExportMenu.prototype.createItemElement = function (level, type) {
        var element = document.createElement(this.itemTag);
        var className = this.classPrefix + "-item " + this.classPrefix
            + "-item-level-" + level
            + " " + this.classPrefix + "-item-" + (type || "blank");
        element.className = this.adapter.apply("itemClass", {
            className: className,
            level: level,
            type: type
        }).className;
        return element;
    };
    /**
     * Creates a "label" part of the menu item. It could be text or any HTML
     * content.
     *
     * @ignore Exclude from docs
     * @param  {number}       level  Current nesting level
     * @param  {string}       type   Type of the menu item
     * @return {HTMLElement}         An HTML Element
     */
    ExportMenu.prototype.createLabelElement = function (level, type) {
        var element = document.createElement(this.labelTag);
        var className = this.classPrefix + "-label " + this.classPrefix
            + "-label-level-" + level
            + " " + this.classPrefix + "-item-" + (type || "blank");
        if (this.typeClickable(type)) {
            className += " " + this.classPrefix + "-clickable";
        }
        element.className = this.adapter.apply("labelClass", {
            className: className,
            level: level,
            type: type
        }).className;
        // Accessible navigation
        element.setAttribute("tabindex", this.tabindex.toString());
        element.setAttribute("role", "menuitem");
        return element;
    };
    /**
     * Destroys the menu and all its elements.
     */
    ExportMenu.prototype.dispose = function () {
        if (!this._disposed) {
            _super.prototype.dispose.call(this);
            this._element
                && this._element.parentNode
                && this._element.parentNode.removeChild(this._element);
        }
    };
    /**
     * Checks whether menu item type is supposed to be clickable.
     *
     * @ignore Exclude from docs
     * @param  {string}   type  Menu item type
     * @return {boolean}        Is clickable?
     */
    ExportMenu.prototype.typeClickable = function (type) {
        return __WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](type);
    };
    /**
     * Checks whether menu item has any sub-items.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  branch  A menu item
     * @return {boolean}                  Has sub-items?
     */
    ExportMenu.prototype.hasSubMenu = function (branch) {
        return (branch.menu && branch.menu.length) ? true : false;
    };
    /**
     * Generates and returns an applicable label to be used for screen readers.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  item   A menu item instance
     * @param  {string}           label  Current label
     * @return {string}                  Reader text
     */
    ExportMenu.prototype.getReaderLabel = function (branch, label) {
        // Strip any HTML from the label
        label = __WEBPACK_IMPORTED_MODULE_9__utils_Utils__["stripTags"](label);
        // Add textual note if the branch is clickable
        if (this.hasSubMenu(branch)) {
            label += " [" + this.language.translate("Click, tap or press ENTER to open") + "]";
        }
        else if (branch.type == "print") {
            label = this.language.translate("Click, tap or press ENTER to print.");
        }
        else if (this.typeClickable(branch.type)) {
            label = this.language.translate("Click, tap or press ENTER to export as %1.", null, label);
        }
        return this.adapter.apply("rederLabel", {
            label: label,
            branch: branch
        }).label;
    };
    Object.defineProperty(ExportMenu.prototype, "container", {
        /**
         * Returns current menu container.
         *
         * @return {HTMLElement} Container
         */
        get: function () {
            return this._container;
        },
        /**
         * Getters and setters
         */
        /**
         * Sets HTML container to place the Menu in.
         *
         * A container must be an HTML element, because menu itself is HTML, and
         * cannot be placed into SVG.
         *
         * @param {HTMLElement} container Reference to container element
         * @todo Check if menu is already build. If it is, just move it to a new container
         */
        set: function (container) {
            this._container = container;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "items", {
        /**
         * Returns current menu items.
         *
         * @return {Array<IExportMenuItem>} Menu items
         */
        get: function () {
            return this._items;
        },
        /**
         * Sets a list of menu items. Can be nested.
         *
         * @param {Array<IExportMenuItem>}  items  Menu items
         */
        set: function (items) {
            this._items = items;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "tag", {
        /**
         * Sets main menu tag to place menu in.
         *
         * This also sets up how menu items are built.
         *
         * If you set this to "ul", menu items will be wrapped into `<li>` tags.
         *
         * If set to "div", menu items will be wrapped in `<div>` tags.
         *
         * @default "ul"
         * @param {"ul" | "div"} tag Tag to use for menu
         */
        set: function (tag) {
            this._menuTag = tag;
            this._itemTag = tag == "ul" ? "li" : "div";
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "menuTag", {
        /**
         * Returns current menu tag.
         *
         * @ignore Exclude from docs
         * @return {string} Menu tag (item that contains sub-items)
         */
        get: function () {
            return this.adapter.apply("menuTag", {
                tag: this._menuTag
            }).tag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "itemTag", {
        /**
         * Returns tag to wrap items into.
         *
         * @ignore Exclude from docs
         * @return {string} Item tag
         */
        get: function () {
            return this.adapter.apply("itemTag", {
                tag: this._itemTag
            }).tag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "labelTag", {
        /**
         * Returns menu label tag.
         *
         * @ignore Exclude from docs
         * @return {string} Label tag
         */
        get: function () {
            return this.adapter.apply("labelTag", {
                tag: this._labelTag
            }).tag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "align", {
        /**
         * Returns current setting for horizontal alignement.
         *
         * @return {Align} Horizontal alignement
         */
        get: function () {
            return this.adapter.apply("align", {
                align: this._align
            }).align;
        },
        /**
         * Sets horizontal alignement for the menu placement.
         *
         * @param {Align} value Horizontal alignement
         */
        set: function (value) {
            this._align = value;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "verticalAlign", {
        /**
         * Returns current setting for vertical alignement.
         *
         * @return {VerticalAlign} Vertical alignement
         */
        get: function () {
            return this.adapter.apply("verticalAlign", {
                verticalAlign: this._verticalAlign
            }).verticalAlign;
        },
        /**
         * Sets vertical alignement for the menu placement.
         *
         * @param {VerticalAlign} value Vertical alignement
         */
        set: function (value) {
            this._verticalAlign = value;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "classPrefix", {
        /**
         * Return current class name prefix.
         *
         * @return {string} Class name prefix
         */
        get: function () {
            return this.adapter.apply("classPrefix", {
                classPrefix: this._classPrefix
            }).classPrefix;
        },
        /**
         * Sets class name prefix.
         *
         * @default "amexport"
         * @param {string} value Class name prefix
         */
        set: function (value) {
            this._classPrefix = value;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "defaultStyles", {
        /**
         * Returns current setting for deafult style usage.
         *
         * @return {boolean} Should ExportMenu load its own CSS?
         */
        get: function () {
            return this.adapter.apply("defaultStyles", {
                defaultStyles: this._defaultStyles
            }).defaultStyles;
        },
        /**
         * Sets whether [[ExportMenu]] should load external CSS to style itself.
         *
         * If set to `false`, the menu will not be styled, and will rely on some
         * external CSS.
         *
         * @default true
         * @param {string} Should ExportMenu load its own CSS?
         */
        set: function (value) {
            if (this._defaultStyles != value) {
                this._defaultStyles = value;
                if (value) {
                    this.loadDefaultCSS();
                }
            }
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads the default CSS.
     *
     * @ignore Exclude from docs
     */
    ExportMenu.prototype.loadDefaultCSS = function () {
        this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_0__ExportCSS__["a" /* default */])(this.classPrefix));
        this._element.style.display = "initial";
    };
    Object.defineProperty(ExportMenu.prototype, "tabindex", {
        /**
         * Returns current tab index setting.
         *
         * @return {number} Tab index
         */
        get: function () {
            return this.adapter.apply("tabindex", {
                tabindex: this._tabindex
            }).tabindex;
        },
        /**
         * Sets tab index for the menu.
         *
         * Tab index will influence the order in which elements on the chart and
         * the whole page are selected when pressing TAB key.
         *
         * @param {number} value Tab index
         */
        set: function (value) {
            this._tabindex = value;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "language", {
        /**
         * Returns current [[Language]] instance. If it's not set a new instance is
         * created.
         *
         * @return {Language} A [[Language]] instance to be used
         */
        get: function () {
            var _this = this;
            var language = this._language.get();
            if (language == null) {
                language = new __WEBPACK_IMPORTED_MODULE_6__utils_Language__["a" /* Language */]();
                // TODO code duplication with `set language()`
                this._language.set(language, language.events.on("localeChanged", function (ev) {
                    _this.invalidate();
                }));
            }
            return language;
        },
        /**
         * Sets [[Language]] instance.
         *
         * @param {Language} value An instance of [[Language]]
         */
        set: function (value) {
            var _this = this;
            this._language.set(value, value.events.on("localeChanged", function (ev) {
                _this.invalidate();
            }));
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Controlling the menu
     */
    /**
     * Removes all active classes from menu items. Useful on touch devices and
     * keyboard navigation where open menu can be closed instantly by clicking or
     * tapping outside it.
     *
     * @ignore Exclude from docs
     */
    ExportMenu.prototype.close = function () {
        if (this._ignoreNextClose) {
            this._ignoreNextClose = false;
            return;
        }
        if (this._currentSelection) {
            this.setBlur(this._currentSelection);
            this._currentSelection = undefined;
        }
        var items = this._element.getElementsByClassName("active");
        for (var len = items.length, i = len - 1; i >= 0; i--) {
            if (items[i]) {
                __WEBPACK_IMPORTED_MODULE_11__utils_DOM__["l" /* removeClass */](items[i], "active");
            }
        }
    };
    /**
     * Selects a branch in the menu.
     *
     * Handles closing of currently open branch.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Branch to select
     */
    ExportMenu.prototype.selectBranch = function (branch) {
        var _this = this;
        // Cancel previous closure
        if (branch.closeTimeout) {
            this.removeDispose(branch.closeTimeout);
            branch.closeTimeout = null;
        }
        // Add active class
        __WEBPACK_IMPORTED_MODULE_11__utils_DOM__["c" /* addClass */](branch.interactions.element.parentElement, "active");
        // Remove current selection
        if (this._currentSelection && this._currentSelection !== branch) {
            __WEBPACK_IMPORTED_MODULE_10__utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_10__utils_Iterator__["concat"](__WEBPACK_IMPORTED_MODULE_10__utils_Iterator__["fromArray"]([this._currentSelection]), this._currentSelection.ascendants.iterator()), function (ascendant) {
                if (!branch.ascendants.contains(ascendant) && branch !== ascendant) {
                    _this.unselectBranch(ascendant, true);
                }
            });
        }
        // Select and/or cancel timeout for current ascendants
        __WEBPACK_IMPORTED_MODULE_10__utils_Iterator__["each"](branch.ascendants.iterator(), function (ascendant) {
            if (ascendant.closeTimeout) {
                _this.removeDispose(ascendant.closeTimeout);
                ascendant.closeTimeout = null;
            }
            __WEBPACK_IMPORTED_MODULE_11__utils_DOM__["c" /* addClass */](ascendant.interactions.element.parentElement, "active");
        });
        // Log current selection
        this._currentSelection = branch;
    };
    /**
     * Unselects a branch. Also selects a branch one level up if necessary.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Branch to unselect
     * @param {boolean}         simple If `true`, only the branch will be unselected without selecting parent branch
     */
    ExportMenu.prototype.unselectBranch = function (branch, simple) {
        // Remove active class
        __WEBPACK_IMPORTED_MODULE_11__utils_DOM__["l" /* removeClass */](branch.interactions.element.parentElement, "active");
        // Remove current selection
        if (this._currentSelection == branch) {
            this._currentSelection = undefined;
        }
    };
    /**
     * Delay unselection of a branch. This can still be cancelled in some other
     * place if the branch or its children regain focus.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Branch to unselect
     * @param {boolean}         simple If `true`, only the branch will be unselected without selecting parent branch
     */
    ExportMenu.prototype.delayUnselectBranch = function (branch, simple) {
        var _this = this;
        // Schedule branch unselection
        if (branch.closeTimeout) {
            this.removeDispose(branch.closeTimeout);
            branch.closeTimeout = null;
        }
        branch.closeTimeout = this.setTimeout(function () {
            _this.unselectBranch(branch, simple);
        }, this.closeDelay);
        // Schedule unselection of all ascendants
        // In case focus went away from the export menu altogether, this will ensure
        // that all items will be closed.
        // In case we're jumping to other menu item, those delayed unselections will
        // be cancelled by `selectBranch`
        if (simple !== true) {
            __WEBPACK_IMPORTED_MODULE_10__utils_Iterator__["each"](branch.ascendants.iterator(), function (ascendant) {
                _this.delayUnselectBranch(ascendant, true);
            });
        }
    };
    /**
     * Navigates the menu based on which direction kayboard key was pressed.
     *
     * @ignore Exclude from docs
     * @param {KeyboardKeys} key A key that was pressed
     */
    ExportMenu.prototype.moveSelection = function (key) {
        // Check if there's a current selection
        if (!this._currentSelection) {
            return;
        }
        var newSelection;
        if (key == "up") {
            // Try moving up in current menu list, or to the last item if already
            // at the top
            newSelection = this.getPrevSibling(this._currentSelection);
        }
        else if (key == "down") {
            // Try moving down in current menu list, or to the top item if already
            // at the bottom
            newSelection = this.getNextSibling(this._currentSelection);
        }
        else if ((key == "left" && this.align == "right") || (key == "right" && this.align == "left")) {
            // Go one level-deeper
            if (this.hasSubMenu(this._currentSelection)) {
                newSelection = this._currentSelection.menu[0];
            }
        }
        else if ((key == "right" && this.align == "right") || (key == "left" && this.align == "left")) {
            // Go one level-deeper
            newSelection = this.getParentItem(this._currentSelection);
        }
        if (newSelection && newSelection !== this._currentSelection) {
            this.selectBranch(newSelection);
            this.setFocus(newSelection);
            this._currentSelection = newSelection;
        }
    };
    /**
     * Returns all siblings of a menu item, including this same menu item.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}         branch  Menu item
     * @return {Array<IExportMenuItem>}          List of sibling menu items
     */
    ExportMenu.prototype.getSiblings = function (branch) {
        var parent = this.getParentItem(branch);
        return parent ? parent.menu : [];
    };
    /**
     * Returns menu items parent item.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  branch  Menu item
     * @return {IExportMenuItem}          Parent menu item
     */
    ExportMenu.prototype.getParentItem = function (branch) {
        if (branch.ascendants.length) {
            return branch.ascendants.getIndex(branch.ascendants.length - 1);
        }
        else {
            return undefined;
        }
    };
    /**
     * Returns next sibling in the same menu branch. If there is no next sibling,
     * the first one is returned. If there is just one item, that item is
     * returned. Unsupported menu items are skipped.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  branch  Menu item to search siblings for
     * @return {IExportMenuItem}          Menu item
     */
    ExportMenu.prototype.getNextSibling = function (branch) {
        var siblings = this.getSiblings(branch);
        if (siblings.length > 1) {
            var next = siblings.indexOf(branch) + 1;
            next = siblings.length == next ? 0 : next;
            return siblings[next].unsupported ? this.getNextSibling(siblings[next]) : siblings[next];
        }
        else {
            return branch;
        }
    };
    /**
     * Returns previous sibling in the same menu branch. If there is no next
     * sibling, the first one is returned. If there is just one item, that item is
     * returned. Unsupported menu items are skipped.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  branch  Menu item to search siblings for
     * @return {IExportMenuItem}          Menu item
     */
    ExportMenu.prototype.getPrevSibling = function (branch) {
        var siblings = this.getSiblings(branch);
        if (siblings.length > 1) {
            var prev = siblings.indexOf(branch) - 1;
            prev = prev == -1 ? siblings.length - 1 : prev;
            return siblings[prev].unsupported ? this.getPrevSibling(siblings[prev]) : siblings[prev];
        }
        else {
            return branch;
        }
    };
    /**
     * Attempts to set focus on particular menu element.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Menu item
     */
    ExportMenu.prototype.setFocus = function (branch) {
        branch.interactions.element.focus();
    };
    /**
     * Attempts to remove focus from the menu element.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Menu item
     */
    ExportMenu.prototype.setBlur = function (branch) {
        branch.interactions.element.blur();
    };
    return ExportMenu;
}(__WEBPACK_IMPORTED_MODULE_7__utils_Validatable__["a" /* Validatable */]));

//# sourceMappingURL=ExportMenu.js.map

/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = load;
/**
 * A collection of network-related functions
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * Loads an external file via its URL.
 *
 * Please note that this is an asynchronous function.
 *
 * It will not return the result, but rather a `Promise`.
 *
 * You can use the `await` notion, or `then()`.
 *
 * ```TypeScript
 * // Using await
 * let response = await Net.load( "http://www.my.com/data.json" );
 * console.log( response.response );
 *
 * // Using then()
 * Net.load( "http://www.my.com/data.json" ).then( ( response ) => {
 *   console.log( response.response );
 * } );
 * ```
 * ```JavaScript
 * // Using then()
 * Net.load( "http://www.my.com/data.json" ).then( function( response ) {
 *   console.log( response.response );
 * } );
 * ```
 *
 * @async
 * @param  {string}                      url     URL for the file to load
 * @param  {A}                           target  A target element that is requesting the net load
 * @return {Promise<INetLoadResult<A>>}          Result (Promise)
 */
function load(url, target) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (success, error) {
                    var xhr = new XMLHttpRequest();
                    xhr.onload = function () {
                        if (xhr.status === 200) {
                            var response = xhr.responseText || xhr.response;
                            success({
                                xhr: xhr,
                                error: false,
                                response: response,
                                type: xhr.getResponseHeader("Content-Type"),
                                target: target
                            });
                        }
                        else {
                            error({
                                xhr: xhr,
                                error: true,
                                type: xhr.getResponseHeader("Content-Type"),
                                target: target
                            });
                        }
                    };
                    xhr.onerror = error;
                    xhr.open("GET", url);
                    xhr.send();
                })];
        });
    });
}
//# sourceMappingURL=Net.js.map

/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DataSource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataLoader__ = __webpack_require__(220);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__JSONParser__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__CSVParser__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Language__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__formatters_DateFormatter__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Type__ = __webpack_require__(2);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










;
;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents a single data source - external file with all of its settings,
 * such as format, data parsing, etc.
 *
 * ```TypeScript
 * chart.dataSource.url = "http://www.myweb.com/data.json";
 * chart.dataSource.parser = amcharts4.JSONParser;
 * ```
 * ```JavaScript
 * chart.dataSource.url = "http://www.myweb.com/data.json";
 * chart.dataSource.parser = amcharts4.JSONParser;
 * ```
 * ```JSON
 * {
 *   // ...
 *   "dataSource": {
 *     "url": "http://www.myweb.com/data.json",
 *     "parser": "JSONParser"
 *   },
 *   // ...
 * }
 * ```
 *
 * @see {@link IDataSourceEvents} for a list of available events
 * @see {@link IDataSourceAdapters} for a list of available Adapters
 */
var DataSource = /** @class */ (function (_super) {
    __extends(DataSource, _super);
    /**
     * Constructor
     */
    function DataSource(url, parser) {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Event dispatcher.
         *
         * @type {EventDispatcher<AMEvent<DataSource, IDataSourceEvents>>}
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_5__utils_EventDispatcher__["a" /* EventDispatcher */]();
        /**
         * Adapter.
         *
         * @type {Adapter<DataSource, IDataSourceAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Will show loading indicator when loading files.
         *
         * @type {boolean}
         */
        _this.showPreloader = true;
        _this.className = "DataSource";
        // Set defaults
        if (url) {
            _this.url = url;
        }
        // Set parser
        if (parser) {
            if (typeof parser == "string") {
                _this.parser = __WEBPACK_IMPORTED_MODULE_0__DataLoader__["b" /* dataLoader */].getParserByType(parser);
            }
            else {
                _this.parser = parser;
            }
        }
        return _this;
    }
    /**
     * Processes the loaded data.
     *
     * @ignore Exclude from docs
     * @param {string}  data  Raw (unparsed) data
     * @param {string}  type  Content type of the loaded data (optional)
     */
    DataSource.prototype.processData = function (data, type) {
        var _this = this;
        // Parsing started
        this.dispatchImmediately("parsestart");
        // Check if parser is set
        if (!this.parser) {
            // Try to resolve from data
            this.parser = __WEBPACK_IMPORTED_MODULE_0__DataLoader__["b" /* dataLoader */].getParserByData(data, type);
            if (!this.parser) {
                // We have a problem - nobody knows what to do with the data
                // Raise error
                if (this.events.isEnabled("parseerror")) {
                    this.events.dispatchImmediately("parseerror", {
                        type: "parseerror",
                        message: this.language.translate("No parser available for file: %1", null, this.url),
                        target: this
                    });
                }
                this.dispatchImmediately("parsestop");
                return;
            }
        }
        // Apply options adapters
        this.parser.options = this.adapter.apply("parserOptions", this.parser.options);
        this.parser.options.dateFields = this.adapter.apply("dateFields", this.parser.options.dateFields || []);
        this.parser.options.numberFields = this.adapter.apply("numberFields", this.parser.options.numberFields || []);
        // Check if we need to pass in date formatter
        if (this.parser.options.dateFields && !this.parser.options.dateFormatter) {
            this.parser.options.dateFormatter = this.dateFormatter;
        }
        // Parse
        this.data = this.adapter.apply("parsedData", this.parser.parse(this.adapter.apply("unparsedData", data)));
        // Check for parsing errors
        if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["hasValue"](this.data) && this.events.isEnabled("parseerror")) {
            this.events.dispatchImmediately("parseerror", {
                type: "parseerror",
                message: this.language.translate("Error parsing file: %1", null, this.url),
                target: this
            });
        }
        // Wrap up
        this.dispatchImmediately("parsestop");
        this.dispatchImmediately("done", {
            "data": this.data
        });
        // Update component
        /*if (this.component) {

            // Set new data
            if (this.data && this.incremental) {
                this.component.addData(this.data);
            }
            else {
                this.component.data = this.data;
            }

        }*/
        // Update last data load
        this.lastLoad = new Date();
        // Should we schedule a reload?
        if (this.reloadFrequency) {
            this._reloadTimeout = setTimeout(function () {
                _this.load();
            }, this.reloadFrequency);
        }
    };
    Object.defineProperty(DataSource.prototype, "url", {
        /**
         * @return {string} URL
         */
        get: function () {
            return this.adapter.apply("url", this.disableCache
                ? this.timestampUrl(this._url)
                : this._url);
        },
        /**
         * URL of the data source.
         *
         * @param {string}  value  URL
         */
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "parser", {
        /**
         * @return {DataParser} Data parser
         */
        get: function () {
            if (!this._parser) {
                this._parser = new __WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */]();
            }
            return this.adapter.apply("parser", this._parser);
        },
        /**
         * A parser to be used to parse data.
         *
         * ```TypeScript
         * chart.dataSource.url = "http://www.myweb.com/data.json";
         * chart.dataSource.parser = amcharts4.JSONParser;
         * ```
         * ```JavaScript
         * chart.dataSource.url = "http://www.myweb.com/data.json";
         * chart.dataSource.parser = amcharts4.JSONParser;
         * ```
         * ```JSON
         * {
         *   // ...
         *   "dataSource": {
         *     "url": "http://www.myweb.com/data.json",
         *     "parser": "JSONParser"
         *   },
         *   // ...
         * }
         * ```
         *
         * @default JSONParser
         * @param {DataParser}  value  Data parser
         */
        set: function (value) {
            this._parser = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "reloadFrequency", {
        /**
         * @return {number} Reload frequency (ms)
         */
        get: function () {
            return this.adapter.apply("reloadTimeout", this._reloadFrequency);
        },
        /**
         * Data source reload frequency.
         *
         * If set, it will reload the same URL every X milliseconds.
         *
         * @param {number} value Reload frequency (ms)
         */
        set: function (value) {
            this._reloadFrequency = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "incremental", {
        /**
         * @return {boolean} Incremental load?
         */
        get: function () {
            return this.adapter.apply("incremental", this._incremental);
        },
        /**
         * Should subsequent reloads be treated as incremental?
         *
         * Incremental loads will assume that they contain only new data items
         * since the last load.
         *
         * If `incremental = false` the loader will replace all of the target's
         * data with each load.
         *
         * @default false
         * @param {boolean} Incremental load?
         */
        set: function (value) {
            this._incremental = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "language", {
        /**
         * @return {Language} A [[Language]] instance to be used
         */
        get: function () {
            if (this._language) {
                return this._language;
            }
            else if (this.component) {
                this._language = this.component.language;
                return this._language;
            }
            this.language = new __WEBPACK_IMPORTED_MODULE_6__utils_Language__["a" /* Language */]();
            return this.language;
        },
        /**
         * Language instance to use.
         *
         * Will inherit and use chart's language, if not set.
         *
         * @param {Language} value An instance of Language
         */
        set: function (value) {
            this._language = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "dateFormatter", {
        /**
         * @return {DateFormatter} A [[DateFormatter]] instance to be used
         */
        get: function () {
            if (this._dateFormatter) {
                return this._dateFormatter;
            }
            else if (this.component) {
                this._dateFormatter = this.component.dateFormatter;
                return this._dateFormatter;
            }
            this.dateFormatter = new __WEBPACK_IMPORTED_MODULE_7__formatters_DateFormatter__["a" /* DateFormatter */]();
            return this.dateFormatter;
        },
        /**
         * A [[DateFormatter]] to use when parsing dates from string formats.
         *
         * Will inherit and use chart's DateFormatter if not ser.
         *
         * @param {DateFormatter} value An instance of [[DateFormatter]]
         */
        set: function (value) {
            this._dateFormatter = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds current timestamp to the URL.
     *
     * @param  {string}  url  Source URL
     * @return {string}       Timestamped URL
     */
    DataSource.prototype.timestampUrl = function (url) {
        var p = url.split("?"), tstamp = new Date().getTime().toString();
        if (1 === p.length) {
            p[1] = tstamp;
        }
        else {
            p[1] += "&" + tstamp;
        }
        return p.join("?");
    };
    /**
     * Disposes of this object.
     */
    DataSource.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        if (this._reloadTimeout) {
            clearTimeout(this._reloadTimeout);
        }
    };
    /**
     * Initiate the load.
     *
     * All loading in JavaScript is asynchronous. This function will trigger the
     * load and will exit immediately.
     *
     * Use DataSource's events to watch for loaded data and errors.
     */
    DataSource.prototype.load = function () {
        __WEBPACK_IMPORTED_MODULE_0__DataLoader__["b" /* dataLoader */].load(this);
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    DataSource.prototype.processConfig = function (config) {
        __WEBPACK_IMPORTED_MODULE_8__Registry__["a" /* registry */].registeredClasses["json"] = __WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */];
        __WEBPACK_IMPORTED_MODULE_8__Registry__["a" /* registry */].registeredClasses["JSONParser"] = __WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */];
        __WEBPACK_IMPORTED_MODULE_8__Registry__["a" /* registry */].registeredClasses["csv"] = __WEBPACK_IMPORTED_MODULE_2__CSVParser__["a" /* CSVParser */];
        __WEBPACK_IMPORTED_MODULE_8__Registry__["a" /* registry */].registeredClasses["CSVParser"] = __WEBPACK_IMPORTED_MODULE_2__CSVParser__["a" /* CSVParser */];
        _super.prototype.processConfig.call(this, config);
    };
    return DataSource;
}(__WEBPACK_IMPORTED_MODULE_3__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=DataSource.js.map

/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DataLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return dataLoader; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__CSVParser__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__JSONParser__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Net__ = __webpack_require__(218);
/**
 * Data Loader is responsible for loading and parsing external data
 */




;
/**
 * Data Loader is responsible for loading and parsing external data.
 *
 * There is just one instance of DataLoader per system. Unless you have a
 * speicific reason, do not instantiate additional instances.
 *
 * The global instance of Data Loader is accessible via:
 *
 * ```TypeScript
 * amcharts4.dataLoader;
 * ```
 * ```JavaScript
 * amcharts4.dataLoader;
 * ```
 *
 * A loading of specific data source is done via [[DataSource]].
 *
     Please refer to [[DataSource]] for information how to use it.
 *
 * @see {@link IDataLoaderAdapters} for a list of available Adapters
 */
var DataLoader = /** @class */ (function () {
    function DataLoader() {
        /**
         * Adapter.
         *
         * @type {Adapter<DataLoader, IDataLoaderAdapters>}
         */
        this.adapter = new __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__["a" /* Adapter */](this);
    }
    /**
     * Loads a supplied [[DataSource]] or an array of data sources, then calls
     * their respective `parse` methods.
     *
     * @param  {DataSource | DataSource[]}  source  A single data source or an array of multiple of data sources
     */
    DataLoader.prototype.load = function (source) {
        var sources = Array.isArray(source) ? source : [source];
        var promises = [];
        // Add each Source to the list to be loaded simultaneously
        for (var x in sources) {
            // Dispatch events
            sources[x].dispatchImmediately("start");
            sources[x].dispatchImmediately("loadstart");
            promises.push(__WEBPACK_IMPORTED_MODULE_3__utils_Net__["a" /* load */](sources[x].url, sources[x]));
        }
        // Run all promises in parallel
        Promise.all(promises).then(function (res) {
            // Process each loaded source
            for (var x in res) {
                // Get Source
                var result = res[x];
                var source_1 = result.target;
                // Dispatch events
                source_1.dispatchImmediately("loadstop");
                if (result.error) {
                    if (source_1.events.isEnabled("error")) {
                        source_1.events.dispatchImmediately("error", {
                            type: "error",
                            code: result.xhr.status,
                            message: source_1.language.translate("Unable to load file: %1", null, source_1.url),
                            target: source_1
                        });
                    }
                }
                else {
                    // Initiate parsing of the loaded data
                    source_1.processData(result.response, result.type);
                }
                source_1.dispatchImmediately("stop");
            }
        }).catch(function (res) {
            res.dispatchImmediately("loadstop");
            if (res.target.events.isEnabled("error")) {
                res.target.events.dispatchImmediately("error", {
                    type: "error",
                    code: res.xhr.status,
                    message: res.target.language.translate("Unable to load file: %1", null, res.target.url),
                    target: res.target
                });
            }
            res.target.dispatchImmediately("stop");
        });
    };
    /**
     * Instantiates a [[DataParser]] object based on the data type.
     * Built-in parser types are as follows:
     *
     * * "csv" or "text/csv"
     * * "json" or "application/json"
     *
     * @param  {string}      type  A format type
     * @return {DataParser}        A parser object
     */
    DataLoader.prototype.getParserByType = function (type) {
        // Let some plugin decide
        var parser;
        if (parser = this.adapter.apply("getParserByType", {
            parser: null,
            type: type
        }).parser) {
            return parser;
        }
        if (type == "csv" || type == "text/csv") {
            return new __WEBPACK_IMPORTED_MODULE_0__CSVParser__["a" /* CSVParser */]();
        }
        if (type == "json" || type == "application/json") {
            return new __WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */]();
        }
        return;
    };
    /**
     * Tries to determine a parser out of content type and/or actual data.
     *
     * @param  {string}      data  Data
     * @param  {string}      type  Content-type
     * @return {DataParser}        Parser instance
     */
    DataLoader.prototype.getParserByData = function (data, type) {
        // Let some plugin decide
        var parser = this.adapter.apply("getParserByData", {
            parser: null,
            data: data,
            type: type
        }).parser;
        // Check if we have parser from outside code
        if (!parser) {
            // No, let's try to figure it out
            if (parser = this.getParserByType(type)) {
                // We're able to figure out parser by conten-type
                return parser;
            }
            else if (__WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */].isJSON(data)) {
                return this.getParserByType("json");
            }
            else if (__WEBPACK_IMPORTED_MODULE_0__CSVParser__["a" /* CSVParser */].isCSV(data)) {
                return this.getParserByType("csv");
            }
        }
        return parser;
    };
    return DataLoader;
}());

/**
 * Create instance of Data Loader
 */
var dataLoader = new DataLoader();
//# sourceMappingURL=DataLoader.js.map

/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Responsive; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_EventDispatcher__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Adapter__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Array__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Type__ = __webpack_require__(2);
/**
 * Responsive functionality module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Responsive is responsible for overriding certain properties when conditions
 * are met.
 *
 * This class is used to dynamically apply and change certain chart properties
 * based on the current values of properties.
 *
 * Mainly, this is used with [[Sprite]]'s dimensional properties, like
 * `pixelWidth` and `pixelHeight`. However, it can be used to dynamically
 * change any property, based on any other property's value.
 *
 * A default responsive rules are disabled.
 *
 * To enable, set `enabled = false`. E.g.:
 *
 * ```TypeScript
 * chart.responsive.enabled = true;
 * ```
 * ```JavaScript
 * chart.responsive.enabled = true;
 * ```
 *
 * @see {@link IResponsiveEvents} for a list of available events
 * @see {@link IResponsiveAdapters} for a list of available Adapters
 * @todo Add default rules
 * @todo Watch for rule modification
 * @important
 */
var Responsive = /** @class */ (function (_super) {
    __extends(Responsive, _super);
    /**
     * Constructor
     */
    function Responsive() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds a list of responsive rules organized by object type.
         *
         * @type {List<IResponsiveRule>}
         */
        _this._rules = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * Holds the list of the default responsive rules.
         *
         * @type {List<IResponsiveRule>}
         */
        _this._defaultRules = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * Holds the list of currently applied rules.
         *
         * @type {object}
         */
        _this._appliedRules = {};
        /**
         * Use default rules in addition to the user-defined ones?
         *
         * @type {Boolean}
         */
        _this._useDefault = true;
        /**
         * EventDispatcher for [[Responsive]].
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_2__utils_EventDispatcher__["a" /* EventDispatcher */]();
        /**
         * Adapter.
         *
         * @type {Adapter<Responsive, IResponsiveAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_3__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Indicates of responsive rules application is enabled.
         *
         * @type {Boolean}
         */
        _this._enabled = false;
        /**
         * Collection of objects and state ids that do not have any properties set.
         *
         * @type {string[]}
         */
        _this._noStates = [];
        _this.className = "Responsive";
        // Set up rules list events
        _this.rules.events.on("insert", _this.checkRules, true);
        _this.rules.events.on("remove", _this.checkRules, true);
        _this._disposers.push(_this.rules.events);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Responsive.prototype, "component", {
        /**
         * @return {Component} Target object
         */
        get: function () {
            return this._component;
        },
        /**
         * A target object that responsive rules will need to be applied to.
         *
         * @param {Component}  value  Target object
         */
        set: function (value) {
            // Check if it's the same
            if (value == this._component) {
                return;
            }
            // Check if we already have a set up component and remove its events
            if (this._sizeEventDisposer) {
                this.removeDispose(this._sizeEventDisposer);
            }
            // Set
            this._component = value;
            // Set up resize monitoring events
            this._sizeEventDisposer = this.component.events.on("sizechanged", this.checkRules, this);
            this._disposers.push(this._sizeEventDisposer);
            // Enable resoponsive
            this.enabled = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "enabled", {
        /**
         * @return {boolean} Apply responsive rules?
         */
        get: function () {
            return this.adapter.apply("enabled", this._enabled);
        },
        /**
         * Should responsive rules be checked against and applied?
         *
         * @default false
         * @param {boolean}  value  Apply responsive rules?
         */
        set: function (value) {
            if (this._enabled != value) {
                this._enabled = true;
                // Run `applyRules` so that any currently applied rules can be reset
                this.applyRules();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "useDefault", {
        /**
         * @return {boolean} Use default rules?
         */
        get: function () {
            return this.adapter.apply("useDefault", this._useDefault);
        },
        /**
         * Should default responsive rules be applied in addition to user-defined
         * ones.
         *
         * User-defined rules will take precedence over default rules whenever they
         * produce conflicting settings.
         *
         * @default true
         * @param {boolean}  value  Use default rules?
         */
        set: function (value) {
            if (this._useDefault != value) {
                this._useDefault = true;
                // Run `applyRules` so that any currently applied rules can be reset
                this.applyRules();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "rules", {
        /**
         * @return {List<IResponsiveRule>} User-defined rules
         */
        get: function () {
            return this.adapter.apply("rules", this._rules);
        },
        /**
         * User-defined responsive rules.
         *
         * User-defined rules will take precedence over default rules whenever they
         * produce conflicting settings.
         *
         * Use `allRules` to get all applicable rules including default and
         * user-defined ones.
         *
         * @param {List<IResponsiveRule>}  value  User-defined rules
         */
        set: function (value) {
            this._rules = value;
            this._enabled = true;
            this.applyRules();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "defaultRules", {
        /**
         * Default responsive rules.
         *
         * @readonly
         * @return {List<IResponsiveRule>} List of responsive rules
         */
        get: function () {
            return this.adapter.apply("defaultRules", this._defaultRules);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "allRules", {
        /**
         * Returns all rules: default rules (if not disabled) combined with
         * user-defined ones.
         *
         * @readonly
         * @return {List<IResponsiveRule>} List of all applicable rules
         */
        get: function () {
            // Create empty list
            var rules = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
            // Add default rules if not disabled
            // A code, requesting `allRules` must ensure loading of default rules
            // by calling `loadDefaultRules()`
            if (this.useDefault) {
                rules.copyFrom(this.defaultRules);
            }
            // Add user-defined ones
            rules.copyFrom(this.rules);
            return this.adapter.apply("allRules", rules);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if rule by the particular id currently applied.
     *
     * @param  {string}   ruleId  Rule ID
     * @return {boolean}          Is currently applied?
     */
    Responsive.prototype.isApplied = function (ruleId) {
        return __WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](this._appliedRules[ruleId]) ? this._appliedRules[ruleId] : false;
    };
    /**
     * Checks which responsive rules currently satisfy their conditions and
     * should be applied, or unapplied.
     *
     * @ignore Exclude from docs
     */
    Responsive.prototype.checkRules = function () {
        var _this = this;
        // Check if default rules need to be loaded
        // If needed, we wait until it's loaded and then call `checkRules` again
        if (this.useDefault && this.defaultRules.length == 0) {
            this.loadDefaultRules().then(function (res) {
                _this._defaultRules.setAll(res.default);
                _this.checkRules();
            });
            return;
        }
        // Check if there are any rules
        var rules = this.allRules;
        if (!rules || rules.length == 0) {
            return;
        }
        // Init a list of rules to be applied
        var rulesChanged = false;
        // Check which rules match
        __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__["each"](rules.iterator(), function (rule) {
            // Check if rule has an id
            if (!rule.id) {
                rule.id = __WEBPACK_IMPORTED_MODULE_4__Registry__["a" /* registry */].getUniqueId();
            }
            // Init indicator if this rule should be applied
            var apply = rule.relevant(_this.component);
            // Let's check if this rule needs to be applied
            if ((apply && !_this.isApplied(rule.id)) || (!apply && _this.isApplied(rule.id))) {
                rulesChanged = true;
            }
            _this._appliedRules[rule.id] = apply;
        });
        // Check if we need to re-apply the rules
        if (rulesChanged) {
            this.applyRules();
        }
    };
    /**
     * Applies current rules to the object.
     *
     * @ignore Exclude from docs
     * @param {any} target Target object
     * @todo Better type check
     */
    Responsive.prototype.applyRules = function (target) {
        var _this = this;
        // If no target supplied, we assume the top-level element
        if (!__WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](target)) {
            target = this.component;
        }
        // Check each rule
        var defaultStateApplied = false;
        if (this.enabled) {
            __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__["each"](this.allRules.iterator(), function (rule) {
                // Get relevant state
                var state = _this.getState(rule, target);
                // If there's a state, it means it needs to be applied
                if (state) {
                    // Check if default state was already applied to this element.
                    // We don't want to go resetting default states to ALL element,
                    // if they don't have responsive states.
                    if (!defaultStateApplied) {
                        // Nope, reset states (instantly).
                        console.log("Applying default state to " + target.className + " (" + target.uid + "): " + JSON.stringify(target.defaultState.properties));
                        target.applyCurrentState(0);
                        defaultStateApplied = true;
                    }
                    // Is this rule currently applied?
                    if (_this.isApplied(rule.id)) {
                        // Yes. Apply the responsive state
                        console.log("Applying state to " + target.className + " (" + target.uid + "): " + JSON.stringify(state.properties));
                        target.setState(state);
                    }
                }
            });
        }
        // Apply rules to the children
        if (target.children) {
            __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__["each"](target.children.iterator(), function (child) {
                _this.applyRules(child);
            });
        }
    };
    /**
     * Applies specific oresponsive overrides to the element.
     *
     * @ignore Exclude from docs
     * @param {IResponsiveRule}  rule    Responsive rule
     * @param {any}              target  Target element
     * @deprecated
     */
    /*	public applyRule(rule: IResponsiveRule, target: any): void {

            // Construct state id
            //let stateId = "responsive-" + rule.id;

            // Check if we need to create a state for the element
            let state = this.getState(rule, target);

            // Apply the state
            if (state) {
                //if (target.className == "Container" && target.parent.className == "ZoomControl") {
                console.log("Applying state to " + target.className + " (" + target.uid + "): " + JSON.stringify(state.properties));
                //}
                target.setState(state);
            }

        }*/
    /**
     * Returns a relative state for the rule/target, or `null` if no state is
     * needed.
     *
     * @param  {IResponsiveRule}  rule    [description]
     * @param  {any}              target  [description]
     * @return {Optional}                 [description]
     */
    Responsive.prototype.getState = function (rule, target) {
        var stateId = "responsive-" + rule.id;
        var tmpId = target.uid + "_" + stateId;
        if (__WEBPACK_IMPORTED_MODULE_6__utils_Array__["g" /* indexOf */](this._noStates, tmpId) !== -1) {
            return null;
        }
        else if (!target.states.hasKey(stateId)) {
            var state = rule.state(target, stateId);
            if (!state) {
                this._noStates.push(tmpId);
            }
            return state;
        }
        else {
            return target.states.getKey(stateId);
        }
    };
    /**
     * Gets a value from an element.
     *
     * @ignore Exclude from docs
     * @param  {any}     target    Target object
     * @param  {string}  property  Property
     * @return {any}               Property value
     */
    Responsive.prototype.getValue = function (target, property) {
        // This is a bit hacky, first we check if the property exist.
        // If it doesn't we try accessing target's property directly
        var value = target.getPropertyValue(property);
        if (!__WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](value) && __WEBPACK_IMPORTED_MODULE_7__utils_Type__["hasValue"](target[property])) {
            value = target[property];
        }
        return value;
    };
    /**
     * Loads default responsive rules.
     *
     * @ignore Exclude from docs
     * @return {Promise<any>} Responsive rules
     */
    Responsive.prototype.loadDefaultRules = function () {
        return __webpack_require__.e/* import() */(3).then(__webpack_require__.bind(null, 589));
    };
    return Responsive;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Responsive.js.map

/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisLine; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw Axis line.
 *
 * @see {@link IAxisLineEvents} for a list of available events
 * @see {@link IAxisLineAdapters} for a list of available Adapters
 */
var AxisLine = /** @class */ (function (_super) {
    __extends(AxisLine, _super);
    /**
     * Constructor
     */
    function AxisLine() {
        var _this = _super.call(this) || this;
        _this.className = "AxisLine";
        _this.element = _this.paper.add("path");
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.stroke = interfaceColors.getFor("grid");
        _this.strokeOpacity = 0.15;
        _this.pixelPerfect = true;
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_2__core_utils_Color__["c" /* color */])();
        _this.applyTheme();
        _this.mouseEnabled = false;
        _this.element.moveTo({ x: 0, y: 0 });
        return _this;
    }
    return AxisLine;
}(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["a" /* registry */].registeredClasses["AxisLine"] = AxisLine;
//# sourceMappingURL=AxisLine.js.map

/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisTick; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__elements_Tick__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(1);
/**
 * Axis Tick module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws an axis tick
 * @see {@link IAxisTickEvents} for a list of available events
 * @see {@link IAxisTickAdapters} for a list of available Adapters
 */
var AxisTick = /** @class */ (function (_super) {
    __extends(AxisTick, _super);
    function AxisTick() {
        var _this = _super.call(this) || this;
        _this.className = "AxisTick";
        _this.element = _this.paper.add("path");
        _this.location = 0.5;
        _this.isMeasured = false;
        _this.pixelPerfect = true;
        _this.length = 5;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisTick.prototype, "location", {
        get: function () {
            return this.getPropertyValue("location");
        },
        set: function (value) {
            this.setPropertyValue("location", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisTick.prototype, "inside", {
        get: function () {
            return this.getPropertyValue("inside");
        },
        set: function (value) {
            this.setPropertyValue("inside", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return AxisTick;
}(__WEBPACK_IMPORTED_MODULE_0__elements_Tick__["a" /* Tick */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["a" /* registry */].registeredClasses["AxisTick"] = AxisTick;
//# sourceMappingURL=AxisTick.js.map

/***/ }),
/* 224 */,
/* 225 */,
/* 226 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timeUnitDurations", function() { return timeUnitDurations; });
/* harmony export (immutable) */ __webpack_exports__["getNextUnit"] = getNextUnit;
/* harmony export (immutable) */ __webpack_exports__["getDuration"] = getDuration;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["checkChange"] = checkChange;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Type__ = __webpack_require__(2);

/**
 * Maps time period names to their numeric representations in milliseconds.
 *
 * @ignore Exclude from docs
 */
var timeUnitDurations = {
    millisecond: 1,
    second: 1000,
    minute: 60000,
    hour: 3600000,
    day: 86400000,
    week: 604800000,
    month: 2592000000,
    year: 31536000000
};
/**
 * Returns the next time unit that goes after source `unit`.
 *
 * E.g. "hour" is the next unit after "minute", etc.
 *
 * @ignore Exclude from docs
 * @param  {TimeUnit}            unit  Source time unit
 * @return {Optional<TimeUnit>}        Next time unit
 */
function getNextUnit(unit) {
    switch (unit) {
        case "year":
            return;
        case "month":
            return "year";
        case "week":
            return "month";
        case "day":
            return "month"; // not a mistake
        case "hour":
            return "day";
        case "minute":
            return "hour";
        case "second":
            return "minute";
        case "millisecond":
            return "second";
    }
}
/**
 * Returns number of milliseconds in the `count` of time `unit`.
 *
 * Available units: "millisecond", "second", "minute", "hour", "day", "week",
 * "month", and "year".
 *
 * @ignore Exclude from docs
 * @param  {TimeUnit}  unit   Time unit
 * @param  {number}    count  Number of units
 * @return {number}           Milliseconds
 */
function getDuration(unit, count) {
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_Type__["hasValue"](count)) {
        count = 1;
    }
    return timeUnitDurations[unit] * count;
}
/**
 * Returns a copy of the `Date` object.
 *
 * @ignore Exclude from docs
 * @param  {Date}  date  Source date
 * @return {Date}        Copy
 */
function copy(date) {
    return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3
}
/**
 * Checks if the `unit` part of two `Date` objects do not match. Two dates
 * represent a "range" of time, rather the same time date.
 *
 * @ignore Exclude from docs
 * @param  {Date}      dateOne  Date 1
 * @param  {Date}      dateTwo  Date 2
 * @param  {TimeUnit}  unit     Time unit to check
 * @return {boolean}            Range?
 */
function checkChange(dateOne, dateTwo, unit) {
    switch (unit) {
        case "year":
            if (dateOne.getFullYear() != dateTwo.getFullYear()) {
                return true;
            }
            break;
        case "month":
            if (dateOne.getMonth() != dateTwo.getMonth()) {
                return true;
            }
            break;
        case "day":
            if (dateOne.getDate() != dateTwo.getDate()) {
                return true;
            }
            break;
        case "hour":
            if (dateOne.getHours() != dateTwo.getHours()) {
                return true;
            }
            break;
        case "minute":
            if (dateOne.getMinutes() != dateTwo.getMinutes()) {
                return true;
            }
            break;
        case "second":
            if (dateOne.getSeconds() != dateTwo.getSeconds()) {
                return true;
            }
            break;
        case "millisecond":
            if (dateOne.getTime() != dateTwo.getTime()) {
                return true;
            }
            break;
    }
    var nextUnit = getNextUnit(unit);
    if (nextUnit) {
        return checkChange(dateOne, dateTwo, nextUnit);
    }
    else {
        return false;
    }
}
/**
 * Adds `count` of time `unit` to the source date. Returns a new `Date` object.
 *
 * @ignore Exclude from docs
 * @param  {Date}      date   Source date
 * @param  {TimeUnit}  unit   Time unit
 * @param  {number}    count  Number of units to add
 * @return {Date}             New date
 */
function add(date, unit, count) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var seconds = date.getSeconds();
    var milliseconds = date.getMilliseconds();
    //let weekDay: number = date.getDay();
    switch (unit) {
        case "year":
            date.setFullYear(year + count);
            break;
        case "month":
            date.setMonth(month + count);
            break;
        case "week":
            date.setDate(day + count * 7);
            break;
        case "day":
            date.setDate(day + count);
            break;
        case "hour":
            date.setHours(hours + count);
            break;
        case "minute":
            date.setMinutes(minutes + count);
            break;
        case "second":
            date.setSeconds(seconds + count);
            break;
        case "millisecond":
            date.setMilliseconds(milliseconds + count);
            break;
    }
    return date;
}
/**
 * "Rounds" the date to specific time unit.
 *
 * @ignore Exclude from docs
 * @param  {Date}      date             Source date
 * @param  {TimeUnit}  unit             Time unit
 * @param  {number}    count            Number of units to round to
 * @param  {number}    firstDateOfWeek  First day of week
 * @return {Date}                       New date
 */
function round(date, unit, count, firstDateOfWeek) {
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_Type__["isNumber"](count)) {
        count = 1;
    }
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_Type__["isNumber"](firstDateOfWeek)) {
        firstDateOfWeek = 1;
    }
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var seconds = date.getSeconds();
    var milliseconds = date.getMilliseconds();
    var weekDay = date.getDay();
    switch (unit) {
        case "year":
            year = Math.floor(year / count) * count;
            month = 0;
            day = 1;
            hours = 0;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "month":
            month = Math.floor(month / count) * count;
            day = 1;
            hours = 0;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "week":
            // todo: rounding when count is not 1
            if (weekDay >= firstDateOfWeek) {
                day = day - weekDay + firstDateOfWeek;
            }
            else {
                day = day - (7 + weekDay) + firstDateOfWeek;
            }
            hours = 0;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "day":
            day = Math.floor(day / count) * count;
            day = day;
            hours = 0;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "hour":
            hours = Math.floor(hours / count) * count;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "minute":
            minutes = Math.floor(minutes / count) * count;
            seconds = 0;
            milliseconds = 0;
            break;
        case "second":
            seconds = Math.floor(seconds / count) * count;
            milliseconds = 0;
            break;
        case "millisecond":
            milliseconds = Math.floor(milliseconds / count) * count;
            break;
    }
    date.setFullYear(year, month, day);
    date.setHours(hours, minutes, seconds, milliseconds);
    return date;
}
//# sourceMappingURL=Time.js.map

/***/ }),
/* 227 */,
/* 228 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ZoomOutButton; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_Path__ = __webpack_require__(12);
/**
 * Zoom out button functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a zoom out button.
 *
 * @see {@link IZoomOutButtonEvents} for a list of available events
 * @see {@link IZoomOutButtonAdapters} for a list of available Adapters
 */
var ZoomOutButton = /** @class */ (function (_super) {
    __extends(ZoomOutButton, _super);
    /**
     * Orientation of the resize direction.
     *
     * @deprecated Not used
     * @type {Orientation}
     */
    //protected _orientation: Orientation;
    /**
     * Constructor
     */
    function ZoomOutButton() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "ZoomOutButton";
        _this.padding(9, 9, 9, 9);
        //this.dx = - 5;
        //this.dy = 5;
        _this.showSystemTooltip = true;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        var background = _this.background;
        background.cornerRadius(20, 20, 20, 20);
        background.fill = interfaceColors.getFor("primaryButton");
        background.stroke = interfaceColors.getFor("primaryButtonStroke");
        background.strokeOpacity = 0;
        background.states.getKey("hover").properties.fill = interfaceColors.getFor("primaryButtonHover");
        background.states.getKey("down").properties.fill = interfaceColors.getFor("primaryButtonActive");
        // Create an icon
        var icon = new __WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]();
        icon.element = _this.paper.add("path");
        var path = __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"]({ x: 0, y: 0 });
        path += __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: 11, y: 0 });
        icon.element.attr({ "d": path });
        icon.pixelPerfect = true;
        icon.padding(8, 3, 8, 3);
        icon.stroke = interfaceColors.getFor("primaryButtonText");
        _this.icon = icon;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    ZoomOutButton.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        this.readerTitle = this.language.translate("Zoom Out");
    };
    return ZoomOutButton;
}(__WEBPACK_IMPORTED_MODULE_0__Button__["a" /* Button */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["a" /* registry */].registeredClasses["ZoomOutButton"] = ZoomOutButton;
//# sourceMappingURL=ZoomOutButton.js.map

/***/ }),
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WavedCircle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Circle__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rendering_Path__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_rendering_Smoothing__ = __webpack_require__(94);
/**
 * Functionality for drawing waved circles.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a waved circle.
 *
 * @see {@link IWavedCircleEvents} for a list of available events
 * @see {@link IWavedCircleAdapters} for a list of available Adapters
 */
var WavedCircle = /** @class */ (function (_super) {
    __extends(WavedCircle, _super);
    /**
     * Constructor
     */
    function WavedCircle() {
        var _this = _super.call(this) || this;
        _this.className = "WavedCircle";
        _this.element = _this.paper.add("path");
        _this.waveLength = 16;
        _this.waveHeight = 4;
        _this.fill = undefined;
        _this.fillOpacity = 0;
        _this.tension = 0.8;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the waved line.
     *
     * @ignore Exclude from docs
     */
    WavedCircle.prototype.draw = function () {
        var path = "";
        var radius = this.pixelRadius;
        if (radius > 0) {
            var points = this.getPoints(radius);
            path = __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["moveTo"](points[0]) + new __WEBPACK_IMPORTED_MODULE_4__core_rendering_Smoothing__["f" /* Tension */](this.tension, this.tension).smooth(points);
        }
        var innerRadius = this.pixelInnerRadius;
        if (innerRadius > 0) {
            var points = this.getPoints(innerRadius);
            points.reverse();
            path += __WEBPACK_IMPORTED_MODULE_1__rendering_Path__["moveTo"](points[0]) + new __WEBPACK_IMPORTED_MODULE_4__core_rendering_Smoothing__["f" /* Tension */](this.tension, this.tension).smooth(points);
        }
        this.element.attr({ "d": path });
    };
    /**
     * Returns points that circle consists of.
     *
     * @param  {number}    radius  Radius (px)
     * @return {IPoint[]}          Points
     */
    WavedCircle.prototype.getPoints = function (radius) {
        var circleLength = radius * Math.PI * 2;
        var halfWaveHeight = this.waveHeight / 2;
        var waveLength = circleLength / Math.round(circleLength / this.waveLength);
        var halfWaveLength = waveLength / 2;
        var points = [];
        var count = circleLength / waveLength;
        for (var i = 0; i <= count; i++) {
            var angle1 = (i * waveLength) / circleLength * 360;
            var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;
            points.push({ x: (radius - halfWaveHeight) * __WEBPACK_IMPORTED_MODULE_2__utils_Math__["cos"](angle1), y: (radius - halfWaveHeight) * __WEBPACK_IMPORTED_MODULE_2__utils_Math__["sin"](angle1) });
            points.push({ x: (radius + halfWaveHeight) * __WEBPACK_IMPORTED_MODULE_2__utils_Math__["cos"](angle2), y: (radius + halfWaveHeight) * __WEBPACK_IMPORTED_MODULE_2__utils_Math__["sin"](angle2) });
        }
        points.pop();
        return points;
    };
    Object.defineProperty(WavedCircle.prototype, "innerRadius", {
        /**
         * @return {number} Inner radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).
         *
         * @param {number | Percent}  value  Inner radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedCircle.prototype, "pixelInnerRadius", {
        /**
         * Calculated inner radius of the circle in pixels.
         *
         * @readonly
         * @return {number} Inner radius (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["relativeToValue"](this.innerRadius, __WEBPACK_IMPORTED_MODULE_2__utils_Math__["min"](this.innerWidth / 2, this.innerHeight / 2));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedCircle.prototype, "waveLength", {
        /**
         * @return {number} Wave length (px)
         */
        get: function () {
            return this.getPropertyValue("waveLength");
        },
        /**
         * Wave length in pixels.
         *
         * @default 16
         * @param {number}  value  Wave length (px)
         */
        set: function (value) {
            this.setPropertyValue("waveLength", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedCircle.prototype, "waveHeight", {
        /**
         * @return {number} Wave height (px)
         */
        get: function () {
            return this.getPropertyValue("waveHeight");
        },
        /**
         * Wave height in pixels.
         *
         * @default 4
         * @param {number}  value  Wave height (px)
         */
        set: function (value) {
            this.setPropertyValue("waveHeight", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedCircle.prototype, "tension", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tension");
        },
        /**
         * Tension of the wave.
         *
         * @default 0.8
         * @param {number}  value  Tension
         */
        set: function (value) {
            this.setPropertyValue("tension", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    return WavedCircle;
}(__WEBPACK_IMPORTED_MODULE_0__Circle__["a" /* Circle */]));

//# sourceMappingURL=WavedCircle.js.map

/***/ }),
/* 234 */,
/* 235 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Trapezoid; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Utils__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_Path__ = __webpack_require__(12);
/**
 * Functionality for drawing a trapezoid.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw a Trapezoid.
 *
 * @see {@link ITrapezoidEvents} for a list of available events
 * @see {@link ITrapezoidAdapters} for a list of available Adapters
 */
var Trapezoid = /** @class */ (function (_super) {
    __extends(Trapezoid, _super);
    /**
     * Constructor
     */
    function Trapezoid() {
        var _this = _super.call(this) || this;
        _this.className = "Trapezoid";
        _this.element = _this.paper.add("path");
        _this.topSide = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.bottomSide = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.leftSide = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.rightSide = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.isMeasured = false; // todo: add measureElement
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Trapezoid.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.pixelWidth;
        var h = this.pixelHeight;
        var ts = __WEBPACK_IMPORTED_MODULE_2__utils_Utils__["relativeToValue"](this.topSide, w);
        var bs = __WEBPACK_IMPORTED_MODULE_2__utils_Utils__["relativeToValue"](this.bottomSide, w);
        var ls = __WEBPACK_IMPORTED_MODULE_2__utils_Utils__["relativeToValue"](this.leftSide, h);
        var rs = __WEBPACK_IMPORTED_MODULE_2__utils_Utils__["relativeToValue"](this.rightSide, h);
        // 1----2
        // |    |
        // 4----3
        var x0 = (w - ts) / 2;
        var y0 = (h - ls) / 2;
        var x1 = w - (w - ts) / 2;
        var y1 = (h - rs) / 2;
        var x2 = w - (w - bs) / 2;
        var y2 = h - (h - rs) / 2;
        var x3 = (w - bs) / 2;
        var y3 = h - (h - ls) / 2;
        var mt = "";
        var mr = "";
        var mb = "";
        var ml = "";
        if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["hasValue"](this.horizontalNeck)) {
            var hn = this.horizontalNeck.value;
            mt = __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: w * hn, y: Math.max(y0, y1) });
            mb = __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: w * hn, y: Math.min(y2, y3) });
        }
        if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["hasValue"](this.verticalNeck)) {
            var vn = this.verticalNeck.value;
            mr = __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: Math.min(x1, x2), y: h * vn });
            ml = __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: Math.max(x0, x3), y: h * vn });
        }
        var path = __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"]({ x: x0, y: y0 })
            + mt
            + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: x1, y: y1 })
            + mr
            + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: x2, y: y2 })
            + mb
            + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: x3, y: y3 })
            + ml;
        this.element.attr({ "d": path });
    };
    Object.defineProperty(Trapezoid.prototype, "topSide", {
        /**
         * @return {number} Width
         */
        get: function () {
            return this.getPropertyValue("topSide");
        },
        /**
         * Wdith of the top side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param {number | Percent}  value  Width
         */
        set: function (value) {
            this.setPropertyValue("topSide", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "bottomSide", {
        /**
         * @return {number} Width
         */
        get: function () {
            return this.getPropertyValue("bottomSide");
        },
        /**
         * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param {number | Percent}  value  Width
         */
        set: function (value) {
            this.setPropertyValue("bottomSide", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "leftSide", {
        /**
         * @return {number} Height
         */
        get: function () {
            return this.getPropertyValue("leftSide");
        },
        /**
         * Height of the left side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param {number | Percent}  value  Height
         */
        set: function (value) {
            this.setPropertyValue("leftSide", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "rightSide", {
        /**
         * @return {number} Height
         */
        get: function () {
            return this.getPropertyValue("rightSide");
        },
        /**
         * Height of the right side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param {number | Percent}  value  Height
         */
        set: function (value) {
            this.setPropertyValue("rightSide", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "horizontalNeck", {
        /**
         * @return {Percent} Horizontal neck position
         */
        get: function () {
            return this.getPropertyValue("horizontalNeck");
        },
        /**
         * A relative vertical position of the "neck". If the top and bottom sides
         * are of different width, and `horizontalNeck` is set, a choke point
         * will be created at that position, creating a funnel shape.
         *
         * @param {Percent}  value  Horizontal neck position
         */
        set: function (value) {
            this.setPropertyValue("horizontalNeck", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "verticalNeck", {
        /**
         * @return {Percent} Vertical neck position
         */
        get: function () {
            return this.getPropertyValue("verticalNeck");
        },
        /**
         * A relative horizontal position of the "neck". If the left and right sides
         * are of different height, and `verticalNeck` is set, a choke point
         * will be created at that position, creating a funnel shape.
         *
         * @param {Percent}  value  Vertical neck position
         */
        set: function (value) {
            this.setPropertyValue("verticalNeck", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Trapezoid;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Trapezoid.js.map

/***/ }),
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Slice3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Slice__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_filters_LightenFilter__ = __webpack_require__(161);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_Path__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(2);
/**
 * 3D slice module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw a 3D slice of a Pie chart.
 *
 * @see {@link ISlice3DEvents} for a list of available events
 * @see {@link ISlice3DAdapters} for a list of available Adapters
 */
var Slice3D = /** @class */ (function (_super) {
    __extends(Slice3D, _super);
    /**
     * Constructor
     */
    function Slice3D() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Slice3D";
        _this.layout = "none";
        // Create edge container
        var edge = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__Container__["a" /* Container */]);
        _this.edge = edge;
        edge.shouldClone = false;
        edge.isMeasured = false;
        var lightenFilter = new __WEBPACK_IMPORTED_MODULE_3__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilter.lightness = -0.25;
        edge.filters.push(lightenFilter);
        edge.toBack();
        edge.strokeOpacity = 0;
        _this._disposers.push(edge);
        // Set defaults
        _this.angle = 30;
        _this.depth = 20;
        // Create side A element
        var sideA = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        _this.sideA = sideA;
        sideA.shouldClone = false;
        sideA.isMeasured = false;
        sideA.element = _this.paper.add("path");
        var lightenFilterA = new __WEBPACK_IMPORTED_MODULE_3__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterA.lightness = -0.25;
        sideA.filters.push(lightenFilterA);
        sideA.strokeOpacity = 0;
        _this._disposers.push(sideA);
        // Crate side B element
        var sideB = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        _this.sideB = sideB;
        sideB.shouldClone = false;
        sideB.isMeasured = false;
        sideB.element = _this.paper.add("path");
        var lightenFilterB = new __WEBPACK_IMPORTED_MODULE_3__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterB.lightness = -0.25;
        sideB.filters.push(lightenFilterB);
        _this._disposers.push(sideB);
        sideB.strokeOpacity = 0;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Slice3D.prototype.draw = function () {
        _super.prototype.draw.call(this);
        // this should go here to hide 3d slices if arc = 0
        for (var i = 0; i < this.edge.children.length; i++) {
            var slice = this.edge.children.getIndex(i);
            if (slice instanceof __WEBPACK_IMPORTED_MODULE_0__Slice__["a" /* Slice */]) {
                slice.radiusY = this.radiusY;
                slice.radius = this.radius;
                slice.fill = this.fill;
                slice.startAngle = this.startAngle;
                slice.arc = this.arc;
                slice.cornerRadius = this.cornerRadius;
                slice.innerRadius = this.innerRadius;
                slice.strokeOpacity = 0;
            }
        }
        if (this.arc !== 0 && this.radius > 0 && this.depth > 0) {
            this.sideB.show(0);
            this.sideA.show(0);
            this.edge.show(0);
            var startAngle = this.startAngle;
            var arc = this.arc;
            var innerRadius = this.innerRadius;
            var radiusY = this.radiusY;
            var cornerRadius = this.cornerRadius;
            var innerCornerRadius = this.innerCornerRadius;
            var radius = this.radius;
            // this is code duplicate with $path.arc. @todo to think how to avoid it
            var endAngle = startAngle + arc;
            var crSin = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["min"](arc, 45) / 2);
            innerRadius = innerRadius || 0;
            radiusY = radiusY || radius;
            cornerRadius = cornerRadius || 0;
            innerCornerRadius = innerCornerRadius || cornerRadius;
            var innerRadiusY = (radiusY / radius) * innerRadius;
            var cornerRadiusY = (radiusY / radius) * cornerRadius;
            var innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;
            cornerRadius = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](cornerRadius, 0, (radius - innerRadius) / 2);
            cornerRadiusY = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
            innerCornerRadius = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](innerCornerRadius, 0, (radius - innerRadius) / 2);
            innerCornerRadiusY = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
            cornerRadius = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](cornerRadius, 0, radius * crSin);
            cornerRadiusY = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](cornerRadiusY, 0, radiusY * crSin);
            innerCornerRadius = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](innerCornerRadius, 0, innerRadius * crSin);
            innerCornerRadiusY = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](innerCornerRadiusY, 0, innerRadiusY * crSin);
            //let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;
            //let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;
            if (innerRadius < innerCornerRadius) {
                innerRadius = innerCornerRadius;
            }
            if (innerRadiusY < innerCornerRadiusY) {
                innerRadiusY = innerCornerRadiusY;
            }
            var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * __WEBPACK_IMPORTED_MODULE_4__utils_Math__["DEGREES"] * 2;
            var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * __WEBPACK_IMPORTED_MODULE_4__utils_Math__["DEGREES"] * 2;
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](crInnerAngle)) {
                crInnerAngle = 0;
            }
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](crInnerAngleY)) {
                crInnerAngleY = 0;
            }
            //let middleAngle = startAngle + arc / 2;
            //let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };
            var a0 = { x: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["cos"](startAngle) * (innerRadius + innerCornerRadius), 4), y: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](startAngle) * (innerRadiusY + innerCornerRadiusY), 4) };
            var b0 = { x: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["cos"](startAngle) * (radius - cornerRadius), 4), y: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](startAngle) * (radiusY - cornerRadiusY), 4) };
            var c0 = { x: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["cos"](endAngle) * (radius - cornerRadius), 4), y: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](endAngle) * (radiusY - cornerRadiusY), 4) };
            var d0 = { x: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["cos"](endAngle) * (innerRadius + innerCornerRadius), 4), y: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](endAngle) * (innerRadiusY + innerCornerRadiusY), 4) };
            // end of duplicate
            var h = this.depth;
            var ah = { x: a0.x, y: a0.y - h };
            var bh = { x: b0.x, y: b0.y - h };
            var ch = { x: c0.x, y: c0.y - h };
            var dh = { x: d0.x, y: d0.y - h };
            var pathA = __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["moveTo"](a0) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](b0) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](bh) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](ah) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["closePath"]();
            this.sideA.element.attr({ "d": pathA });
            var pathB = __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["moveTo"](c0) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](d0) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](dh) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](ch) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["closePath"]();
            this.sideB.element.attr({ "d": pathB });
            if (this.startAngle < 90) {
                this.sideA.toBack();
            }
            else {
                this.sideA.toFront();
            }
            if (this.startAngle + this.arc > 90) {
                this.sideB.toBack();
            }
            else {
                this.sideB.toFront();
            }
        }
        else {
            this.sideA.hide(0);
            this.sideB.hide(0);
            this.edge.hide(0);
        }
    };
    Object.defineProperty(Slice3D.prototype, "depth", {
        /**
         * @return {number} Depth (px)
         */
        get: function () {
            return this.getPropertyValue("depth");
        },
        /**
         * Depth (height) of the 3D slice in pixels.
         *
         * @default 20
         * @param {number}  depth  Depth (px)
         */
        set: function (depth) {
            if (this.setPropertyValue("depth", depth, true)) {
                this.edge.removeChildren();
                var d = 10;
                if (this.cornerRadius > 2) {
                    d = 5;
                }
                if (depth > 0) {
                    var count = Math.ceil(this.depth / d);
                    var step = depth / count;
                    for (var i = 0; i <= count; i++) {
                        var slice = this.edge.createChild(__WEBPACK_IMPORTED_MODULE_0__Slice__["a" /* Slice */]);
                        slice.isMeasured = false;
                        slice.y = -step * i;
                    }
                }
                this.slice.dy = -this.depth;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice3D.prototype, "angle", {
        /**
         * @return {number} Angle
         */
        get: function () {
            var angle = this.getPropertyValue("angle");
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](angle)) {
                angle = 0;
            }
            return angle;
        },
        /**
         * Angle of the point of view to the 3D element. (0-360)
         *
         * @default 30
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("angle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice3D.prototype, "radiusY", {
        get: function () {
            var radiusY = this.getPropertyValue("radiusY");
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](radiusY)) {
                radiusY = this.radius - this.radius * this.angle / 90;
            }
            return radiusY;
        },
        set: function (value) {
            this.setPropertyValue("radiusY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Slice3D;
}(__WEBPACK_IMPORTED_MODULE_0__Slice__["a" /* Slice */]));

//# sourceMappingURL=Slice3D.js.map

/***/ }),
/* 240 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SankeyDiagramDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SankeyDiagram; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Chart__ = __webpack_require__(142);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__elements_SankeyNode__ = __webpack_require__(241);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__elements_SankeyLink__ = __webpack_require__(243);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_rendering_fills_LinearGradientModifier__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_ColorSet__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_utils_Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__core_utils_Number__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__core_utils_Order__ = __webpack_require__(111);
/**
 * Sankey diagram module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */
















/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
//@todo rearange notes after dragged
/**
 * Defines a [[DataItem]] for [[SankeyDiagram]].
 *
 * @see {@link DataItem}
 */
var SankeyDiagramDataItem = /** @class */ (function (_super) {
    __extends(SankeyDiagramDataItem, _super);
    /**
     * Constructor
     */
    function SankeyDiagramDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "SankeyDiagramDataItem";
        _this.values.value = {};
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(SankeyDiagramDataItem.prototype, "fromName", {
        /**
         * @return {string} name
         */
        get: function () {
            return this.properties.fromName;
        },
        /**
         * Source node's name.
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this.setProperty("fromName", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyDiagramDataItem.prototype, "toName", {
        /**
         * @return {string} name
         */
        get: function () {
            return this.properties.toName;
        },
        /**
         * Destination node's name.
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this.setProperty("toName", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyDiagramDataItem.prototype, "color", {
        /**
         * @return {string} color
         */
        get: function () {
            return this.properties.color;
        },
        /**
         * Node color
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this.setProperty("color", Object(__WEBPACK_IMPORTED_MODULE_10__core_utils_Color__["e" /* toColor */])(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyDiagramDataItem.prototype, "value", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values["value"].value;
        },
        /**
         * Link's value.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("value", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyDiagramDataItem.prototype, "link", {
        /**
         * A visual element, representing link between the source and target nodes.
         *
         * Link's actual thickness will be determined by `value` of this link and
         * `value` of the source node.
         *
         * @readonly
         * @return {SankeyLink} Link element
         */
        get: function () {
            if (!this._link) {
                this._link = this.component.links.create();
                this.addSprite(this._link);
            }
            return this._link;
        },
        enumerable: true,
        configurable: true
    });
    return SankeyDiagramDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Chart__["b" /* ChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a Pie chart
 * @see {@link ISankeyDiagramEvents} for a list of available Events
 * @see {@link ISankeyDiagramAdapters} for a list of available Adapters
 * @important
 */
var SankeyDiagram = /** @class */ (function (_super) {
    __extends(SankeyDiagram, _super);
    /**
     * Constructor
     */
    function SankeyDiagram() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A Color Set to use when applying/generating colors for each subsequent
         * node.
         *
         * @type {ColorSet}
         */
        _this.colors = new __WEBPACK_IMPORTED_MODULE_9__core_utils_ColorSet__["a" /* ColorSet */]();
        /**
         * A list of chart's Sankey nodes.
         *
         * @param {DictionaryTemplate<string, SankeyNode>}
         */
        _this.nodes = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["c" /* DictionaryTemplate */](new __WEBPACK_IMPORTED_MODULE_6__elements_SankeyNode__["a" /* SankeyNode */]());
        /**
         * A list of Sankey links connecting nodes.
         *
         * @param {ListTemplate<SankeyLink>}
         */
        _this.links = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_7__elements_SankeyLink__["a" /* SankeyLink */]());
        /**
         * [valueHeight description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {number}
         */
        _this.valueHeight = 0;
        _this.className = "SankeyDiagram";
        _this.nodePadding = 20;
        _this.sortBy = "none";
        _this.orientation = "horizontal";
        _this.sequencedInterpolation = true;
        _this.nodeAlign = "middle";
        _this.colors.step = 2;
        var linksContainer = _this.chartContainer.createChild(__WEBPACK_IMPORTED_MODULE_4__core_Container__["a" /* Container */]);
        linksContainer.shouldClone = false;
        linksContainer.width = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        linksContainer.height = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        linksContainer.layout = "none";
        linksContainer.isMeasured = false;
        _this.linksContainer = linksContainer;
        _this.linksContainer.id = "linksContainer";
        var nodesContainer = _this.chartContainer.createChild(__WEBPACK_IMPORTED_MODULE_4__core_Container__["a" /* Container */]);
        nodesContainer.shouldClone = false;
        nodesContainer.width = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        nodesContainer.height = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        nodesContainer.layout = "none";
        nodesContainer.isMeasured = false;
        _this.nodesContainer = nodesContainer;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)validates chart's data, effectively causing the chart to redraw.
     *
     * @ignore Exclude from docs
     */
    SankeyDiagram.prototype.validateData = function () {
        var _this = this;
        _super.prototype.validateData.call(this);
        // reset toNodes and fromNodes
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.nodes.iterator(), function (strNode) {
            var node = strNode[1];
            node.incomingDataItems.clear();
            node.outgoingDataItems.clear();
        });
        // build blocks
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.dataItems.iterator(), function (dataItem) {
            var fromName = dataItem.fromName;
            if (fromName) {
                var node = _this.nodes.getKey(fromName);
                if (!node) {
                    node = _this.nodes.create(fromName);
                    node.name = fromName;
                    node.chart = _this;
                }
                dataItem.addSprite(node);
                dataItem.fromNode = node;
                dataItem.fromNode.outgoingDataItems.push(dataItem);
            }
            var toName = dataItem.toName;
            if (toName) {
                var node = _this.nodes.getKey(toName);
                if (!node) {
                    node = _this.nodes.create(toName);
                    node.name = toName;
                    node.chart = _this;
                    if (!node.dataItem) {
                        dataItem.addSprite(node);
                    }
                }
                dataItem.toNode = node;
                dataItem.toNode.incomingDataItems.push(dataItem);
            }
            if (!dataItem.fromNode) {
                var strokeModifier = new __WEBPACK_IMPORTED_MODULE_8__core_rendering_fills_LinearGradientModifier__["a" /* LinearGradientModifier */]();
                strokeModifier.opacities = [0, 1];
                dataItem.link.strokeModifier = strokeModifier;
            }
            if (!dataItem.toNode) {
                var fillModifier = new __WEBPACK_IMPORTED_MODULE_8__core_rendering_fills_LinearGradientModifier__["a" /* LinearGradientModifier */]();
                fillModifier.opacities = [1, 0];
                dataItem.link.strokeModifier = fillModifier;
            }
        });
        this._levelCount = 0;
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.nodes.iterator(), function (strNode) {
            var node = strNode[1];
            if (node.color == undefined) {
                node.color = _this.colors.next();
            }
            if (node.dataItem.color != undefined) {
                node.color = node.dataItem.color;
            }
            node.level = _this.getNodeLevel(node, 0);
            _this._levelCount = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["max"](_this._levelCount, node.level);
        });
        this.sortNodes();
        if (this.interpolationDuration > 0) {
            this.events.once("validated", this.appear, this);
        }
    };
    /**
     * Returns node's highest level.
     *
     * @param  {SankeyNode}  node   Node
     * @param  {number}      level  Current level
     * @return {number}             New level
     */
    SankeyDiagram.prototype.getNodeLevel = function (node, level) {
        var _this = this;
        var levels = [level];
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](node.incomingDataItems.iterator(), function (link) {
            if (link.fromNode) {
                levels.push(_this.getNodeLevel(link.fromNode, level + 1));
            }
        });
        return Math.max.apply(Math, __spread(levels));
    };
    /**
     * Sorts nodes by either their values or names, based on `sortBy` setting.
     */
    SankeyDiagram.prototype.sortNodes = function () {
        if (this.sortBy == "name") {
            this._sorted = this.nodes.sortedIterator();
        }
        else if (this.sortBy == "value") {
            this._sorted = __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["sort"](this.nodes.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_15__core_utils_Order__["b" /* reverse */](__WEBPACK_IMPORTED_MODULE_14__core_utils_Number__["order"](x[1].value, y[1].value)); });
        }
        else {
            this._sorted = this.nodes.iterator();
        }
    };
    /**
     * Calculates relation between pixel height and total value.
     *
     * In Sankey the actual thickness of links and height of nodes will depend
     * on their values.
     */
    SankeyDiagram.prototype.calculateValueHeight = function () {
        var _this = this;
        //@todo respect startIndex/endIndex?
        // calculate values of each node
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.nodes.iterator(), function (strNode) {
            _this.getNodeValue(strNode[1]);
        });
        // calculate sums of each level
        this._levelSum = {};
        this._levelNodesCount = {};
        this.maxSum = 0;
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.nodes.iterator(), function (strNode) {
            var node = strNode[1];
            var level = node.level;
            if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["isNumber"](_this._levelSum[level])) {
                _this._levelSum[level] += node.value;
            }
            else {
                _this._levelSum[level] = node.value;
            }
            if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["isNumber"](_this._levelNodesCount[level])) {
                _this._levelNodesCount[level]++;
            }
            else {
                _this._levelNodesCount[level] = 1;
            }
        });
        var maxSumLevel;
        for (var key in this._levelSum) {
            if (this.maxSum < this._levelSum[key]) {
                this.maxSum = this._levelSum[key];
                maxSumLevel = Number(key);
            }
        }
        var maxSumLevelNodeCount = this._levelNodesCount[maxSumLevel];
        var availableHeight;
        if (this.orientation == "horizontal") {
            availableHeight = this.chartContainer.maxHeight - 1;
        }
        else {
            availableHeight = this.chartContainer.maxWidth - 1;
        }
        this.valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;
    };
    /**
     * Updates a cummulative value of the node.
     *
     * A node's value is determined by summing values of all of the incoming
     * links or all of the outgoing links, whichever results in bigger number.
     *
     * @param {SankeyNode}  node  Node value
     */
    SankeyDiagram.prototype.getNodeValue = function (node) {
        var fromSum = 0;
        var toSum = 0;
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](node.incomingDataItems.iterator(), function (link) {
            fromSum += link.value;
        });
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](node.outgoingDataItems.iterator(), function (link) {
            toSum += link.value;
        });
        node.value = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["max"](fromSum, toSum);
    };
    ;
    /**
     * Redraws the chart.
     *
     * @ignore Exclude from docs
     */
    SankeyDiagram.prototype.validate = function () {
        var _this = this;
        _super.prototype.validate.call(this);
        this.calculateValueHeight();
        var container = this.nodesContainer;
        container.removeChildren();
        var nextCoordinate = {};
        var nodesInLevel = [];
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            var level = node.level;
            if (!__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["isNumber"](nodesInLevel[level])) {
                nodesInLevel[level] = 1;
            }
            else {
                nodesInLevel[level]++;
            }
        });
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            var level = node.level;
            var levelCoordinate = 0;
            switch (_this.nodeAlign) {
                case "bottom":
                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodesInLevel[level] - 2) * _this.nodePadding;
                    break;
                case "middle":
                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodesInLevel[level] - 2) * _this.nodePadding / 2;
                    break;
            }
            if (node.value > 0) {
                node.parent = container;
            }
            var delta;
            var x;
            var y;
            if (_this.orientation == "horizontal") {
                delta = (container.pixelWidth - node.pixelWidth) / _this._levelCount;
                x = delta * node.level;
                y = nextCoordinate[level] || levelCoordinate;
                var h = node.value * _this.valueHeight;
                node.height = h;
                node.minX = x;
                node.maxX = x;
                nextCoordinate[level] = y + h + _this.nodePadding;
            }
            else {
                delta = (container.pixelHeight - node.pixelHeight) / _this._levelCount;
                x = nextCoordinate[level] || levelCoordinate;
                y = delta * node.level;
                var w = node.value * _this.valueHeight;
                node.width = w;
                node.minY = y;
                node.maxY = y;
                nextCoordinate[level] = x + w + _this.nodePadding;
            }
            node.x = x;
            node.y = y;
        });
    };
    /**
     * [appear description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    SankeyDiagram.prototype.appear = function () {
        var _this = this;
        var container = this.nodesContainer;
        var i = 0;
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.links.iterator(), function (link) {
            link.hide(0);
        });
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            var property;
            if (_this.orientation == "horizontal") {
                node.dx = -(container.pixelWidth - node.pixelWidth) / _this._levelCount;
                property = "dx";
            }
            else {
                node.dy = -(container.pixelHeight - node.pixelHeight) / _this._levelCount;
                property = "dy";
            }
            var delay = 0;
            var duration = _this.interpolationDuration;
            if (_this.sequencedInterpolation) {
                delay = _this.sequencedInterpolationDelay * i + duration * i / __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["length"](_this.nodes.iterator());
            }
            node.opacity = 0;
            node.invalidateLinks();
            node.animate([{ property: "opacity", from: 0, to: 1 }, { property: property, to: 0 }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);
            __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](node.outgoingDataItems.iterator(), function (dataItem) {
                dataItem.link.show(_this.interpolationDuration).delay(delay);
            });
            i++;
        });
    };
    /**
     * Changes the sort type of the nodes.
     *
     * This will actually reshuffle nodes using nice animation.
     */
    SankeyDiagram.prototype.changeSorting = function () {
        var _this = this;
        this.sortNodes();
        var nextCoordinate = {};
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            var level = node.level;
            var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;
            var property;
            var nodeHeight;
            if (_this.orientation == "horizontal") {
                property = "y";
                nodeHeight = node.pixelHeight;
            }
            else {
                property = "x";
                nodeHeight = node.pixelWidth;
            }
            node.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, _this.interpolationDuration, _this.interpolationEasing);
            nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;
            node.invalidateLinks();
        });
    };
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    SankeyDiagram.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        this.readerTitle = this.language.translate("Sankey diagram");
    };
    /**
     * Creates and returns a new data item.
     *
     * @return {this} Data item
     */
    SankeyDiagram.prototype.createDataItem = function () {
        return new SankeyDiagramDataItem();
    };
    Object.defineProperty(SankeyDiagram.prototype, "nodePadding", {
        /**
         * @return {number} Padding (px)
         */
        get: function () {
            return this.getPropertyValue("nodePadding");
        },
        /**
         * Padding for node square in pixels.
         *
         * Padding will add extra space around node's name label.
         *
         * @param {number} value Padding (px)
         */
        set: function (value) {
            this.setPropertyValue("nodePadding", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyDiagram.prototype, "sortBy", {
        /**
         * @returns {"none" | name" | "value"} Node sorting
         */
        get: function () {
            return this.getPropertyValue("sortBy");
        },
        /**
         * Sort nodes by "name" or "value" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.
         * @default "none"
         * @param {"none" "name" | "value"}  value  Node sorting
         */
        set: function (value) {
            this.setPropertyValue("sortBy", value);
            this.changeSorting();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyDiagram.prototype, "nodeAlign", {
        /**
         * @returns {"top" | "middle" | "bottom"} Returns nodeAlign value
         */
        get: function () {
            return this.getPropertyValue("nodeAlign");
        },
        /**
         * How to align nodes. In case layout is vertical, top means left and bottom means right
         *
         * @param {"top" | "middle" | "bottom"}  value  Node sorting
         */
        set: function (value) {
            this.setPropertyValue("nodeAlign", value);
            this.changeSorting();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyDiagram.prototype, "orientation", {
        /**
         * @return {Orientation} Orientation
         */
        get: function () {
            return this.getPropertyValue("orientation");
        },
        /**
         * Orientation of the chart: "horizontal" or "vertical";
         *
         * @param {Orientation} value Orientation
         */
        set: function (value) {
            this.setPropertyValue("orientation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return SankeyDiagram;
}(__WEBPACK_IMPORTED_MODULE_0__Chart__["a" /* Chart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["a" /* registry */].registeredClasses["SankeyDiagram"] = SankeyDiagram;
//# sourceMappingURL=SankeyDiagram.js.map

/***/ }),
/* 241 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SankeyNode; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LabelBullet__ = __webpack_require__(242);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_String__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Order__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Number__ = __webpack_require__(92);
/**
 * SankeyNode module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a node in a Sankey Diagram.
 *
 * A Sankey node is a block with a value, which represents its size on the
 * diagram.
 *
 * Nodes are connected via [[SankeyLink]] elements.
 *
 * @see {@link ISankeyNodeEvents} for a list of available events
 * @see {@link ISankeyNodeAdapters} for a list of available Adapters
 * @important
 */
var SankeyNode = /** @class */ (function (_super) {
    __extends(SankeyNode, _super);
    /**
     * Constructor
     */
    function SankeyNode() {
        var _this = _super.call(this) || this;
        /**
         * [nextInCoord description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {number}
         */
        _this.nextInCoord = 0;
        /**
         * [nextOutCoord description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {number}
         */
        _this.nextOutCoord = 0;
        _this.className = "SankeyNode";
        _this.width = 10;
        _this.height = 10;
        _this.isMeasured = false;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.background.fill = interfaceColors.getFor("alternativeBackground");
        _this.background.fillOpacity = 1;
        _this.pixelPerfect = false;
        _this.background.pixelPerfect = false;
        _this.draggable = true;
        _this.inert = true;
        _this.events.on("positionchanged", _this.invalidateLinks, _this);
        var nameLabel = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__LabelBullet__["a" /* LabelBullet */]);
        nameLabel.shouldClone = false;
        //@should we auto update these locations if position is changed?
        nameLabel.locationX = 1;
        nameLabel.locationY = 0.5;
        nameLabel.padding(0, 5, 0, 5);
        nameLabel.label.text = "{name}";
        //nameLabel.label.textElement.hideOversized = false;
        nameLabel.maxWidth = 150;
        nameLabel.height = 150;
        nameLabel.label.horizontalCenter = "left";
        _this.nameLabel = nameLabel;
        var valueLabel = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__LabelBullet__["a" /* LabelBullet */]);
        valueLabel.shouldClone = false;
        valueLabel.label.hideOversized = false;
        valueLabel.locationX = 0.5;
        valueLabel.locationY = 0.5;
        valueLabel.width = 150;
        valueLabel.height = 150;
        //valueLabel.label.text = "{value}";
        valueLabel.label.horizontalCenter = "middle";
        _this.valueLabel = valueLabel;
        return _this;
    }
    /**
     * Marks node as invalid, for redrawal in the next update cycle.
     *
     * @ignore Exclude from docs
     */
    SankeyNode.prototype.invalidate = function () {
        _super.prototype.invalidate.call(this);
        this.invalidateLinks();
    };
    /**
     * Invalidates all links, attached to this node.
     *
     * @ignore Exclude from docs
     */
    SankeyNode.prototype.invalidateLinks = function () {
        var _this = this;
        this.nextInCoord = 0;
        this.nextOutCoord = 0;
        var chart = this.chart;
        if (chart) {
            var orientation_1 = chart.orientation;
            if (this._incomingSorted) {
                __WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__["each"](this._incomingSorted, function (dataItem) {
                    var link = dataItem.link;
                    link.parent = _this.chart.linksContainer;
                    var x;
                    var y;
                    var angle;
                    if (orientation_1 == "horizontal") {
                        x = _this.pixelX + _this.dx;
                        y = _this.nextInCoord + _this.pixelY + _this.dy;
                        angle = 0;
                    }
                    else {
                        y = _this.pixelY + _this.dy;
                        x = _this.nextInCoord + _this.pixelX + _this.dx;
                        angle = 90;
                    }
                    link.endX = x;
                    link.endY = y;
                    link.startAngle = angle;
                    link.endAngle = angle;
                    link.gradient.rotation = angle;
                    link.linkWidth = dataItem.value * chart.valueHeight;
                    if (!dataItem.fromNode) {
                        if (orientation_1 == "horizontal") {
                            link.startX = _this.pixelX + _this.dx - link.maxWidth;
                            link.startY = link.endY;
                        }
                        else {
                            link.startX = link.endX;
                            link.startY = _this.pixelY + _this.dy - link.maxHeight;
                        }
                        var stop_1 = link.gradient.stops.getIndex(0);
                        if (stop_1) {
                            if (link.colorMode == "gradient") {
                                stop_1.color = _this.color;
                            }
                            stop_1.opacity = 0;
                            link.fill = link.gradient;
                            link.gradient.validate();
                        }
                    }
                    if (link.colorMode == "gradient") {
                        var stop_2 = link.gradient.stops.getIndex(1);
                        if (stop_2) {
                            stop_2.color = _this.color;
                            link.gradient.validate();
                        }
                    }
                    _this.nextInCoord += link.linkWidth;
                    link.validate();
                });
            }
            if (this._outgoingSorted) {
                __WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__["each"](this._outgoingSorted, function (dataItem) {
                    var link = dataItem.link;
                    link.parent = _this.chart.linksContainer;
                    var x;
                    var y;
                    var angle;
                    if (orientation_1 == "horizontal") {
                        angle = 0;
                        x = _this.pixelX + _this.pixelWidth + _this.dx - 1;
                        y = _this.nextOutCoord + _this.pixelY + _this.dy;
                    }
                    else {
                        angle = 90;
                        x = _this.nextOutCoord + _this.pixelX + _this.dx;
                        y = _this.pixelY + _this.pixelHeight + _this.dy - 1;
                    }
                    link.startX = x;
                    link.startY = y;
                    link.startAngle = angle;
                    link.endAngle = angle;
                    link.gradient.rotation = angle;
                    link.linkWidth = dataItem.value * _this.chart.valueHeight;
                    if (!dataItem.toNode) {
                        if (orientation_1 == "horizontal") {
                            link.endX = _this.pixelX + link.maxWidth + _this.dx;
                            link.endY = link.startY;
                        }
                        else {
                            link.endX = link.startX;
                            link.endY = _this.pixelY + link.maxHeight + _this.dy;
                        }
                        link.opacity = _this.opacity;
                        var stop_3 = link.gradient.stops.getIndex(1);
                        if (stop_3) {
                            if (link.colorMode == "gradient") {
                                stop_3.color = _this.color;
                            }
                            stop_3.opacity = 0;
                            link.fill = link.gradient;
                            link.gradient.validate();
                        }
                    }
                    if (link.colorMode == "gradient") {
                        var stop_4 = link.gradient.stops.getIndex(0);
                        if (stop_4) {
                            stop_4.color = _this.color;
                            link.gradient.validate();
                        }
                    }
                    _this.nextOutCoord += link.linkWidth;
                    link.validate();
                });
            }
        }
        this.positionBullet(this.nameLabel);
        this.positionBullet(this.valueLabel);
    };
    /**
     * Positions the bullet so it is centered within the node element.
     *
     * @param {LabelBullet}  bullet  Target bullet
     */
    SankeyNode.prototype.positionBullet = function (bullet) {
        if (bullet) {
            bullet.x = this.pixelWidth * bullet.locationX;
            bullet.y = this.pixelHeight * bullet.locationY;
        }
    };
    Object.defineProperty(SankeyNode.prototype, "incomingDataItems", {
        /**
         * List of incoming items (links).
         *
         * @readonly
         * @return {List<SankeyDiagramDataItem>} Incoming items
         */
        get: function () {
            var _this = this;
            if (!this._incomingDataItems) {
                var incomingDataItems = new __WEBPACK_IMPORTED_MODULE_1__core_utils_List__["b" /* List */]();
                incomingDataItems.events.on("insert", function () {
                    if (_this.chart.sortBy == "name") {
                        _this._incomingSorted = __WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__["sort"](_this._incomingDataItems.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_6__core_utils_String__["order"](x.fromName, y.fromName); });
                    }
                    else if (_this.chart.sortBy == "value") {
                        _this._incomingSorted = __WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__["sort"](_this._incomingDataItems.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_7__core_utils_Order__["b" /* reverse */](__WEBPACK_IMPORTED_MODULE_8__core_utils_Number__["order"](x.value, y.value)); });
                    }
                    else {
                        _this._incomingSorted = _this._incomingDataItems.iterator();
                    }
                }, this);
                this._incomingDataItems = incomingDataItems;
            }
            return this._incomingDataItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyNode.prototype, "outgoingDataItems", {
        /**
         * List of outgoing items (links).
         *
         * @readonly
         * @return {List<SankeyDiagramDataItem>} Outgoing items
         */
        get: function () {
            var _this = this;
            if (!this._outgoingDataItems) {
                var outgoingDataItems = new __WEBPACK_IMPORTED_MODULE_1__core_utils_List__["b" /* List */]();
                outgoingDataItems.events.on("insert", function () {
                    if (_this.chart.sortBy == "name") {
                        _this._outgoingSorted = __WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__["sort"](_this._outgoingDataItems.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_6__core_utils_String__["order"](x.fromName, y.fromName); });
                    }
                    else if (_this.chart.sortBy == "value") {
                        _this._outgoingSorted = __WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__["sort"](_this._outgoingDataItems.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_7__core_utils_Order__["b" /* reverse */](__WEBPACK_IMPORTED_MODULE_8__core_utils_Number__["order"](x.value, y.value)); });
                    }
                    else {
                        _this._outgoingSorted = _this._outgoingDataItems.iterator();
                    }
                }, this);
                this._outgoingDataItems = outgoingDataItems;
            }
            return this._outgoingDataItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyNode.prototype, "name", {
        /**
         * @return {string} Name
         */
        get: function () {
            return this.getPropertyValue("name");
        },
        /**
         * A name of the node.
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this.setPropertyValue("name", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyNode.prototype, "level", {
        /**
         * @return {number} Level
         */
        get: function () {
            return this.getPropertyValue("level");
        },
        /**
         * A level node is displayed at. (0 - ...)
         *
         * Levels are measured from left to right.
         *
         * The nodes in the left-most column will have `level = 0`.
         *
         * Nodes in second column - `level = 1`, etc.
         *
         * @param {number}  value  Level
         */
        set: function (value) {
            this.setPropertyValue("level", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyNode.prototype, "value", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.getPropertyValue("value");
        },
        /**
         * Node's numeric value.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setPropertyValue("value", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyNode.prototype, "color", {
        /**
         * @return {Color} Color
         */
        get: function () {
            return this.getPropertyValue("color");
        },
        /**
         * Node's color.
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.setPropertyValue("color", value, true);
            this.background.fill = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies properties and labels from another [[SankeyNode]].
     *
     * @param {SankeyNode}  source  Source node
     */
    SankeyNode.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.nameLabel.copyFrom(source.nameLabel);
        this.valueLabel.copyFrom(source.valueLabel);
    };
    return SankeyNode;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["a" /* registry */].registeredClasses["SankeyNode"] = SankeyNode;
//# sourceMappingURL=SankeyNode.js.map

/***/ }),
/* 242 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LabelBullet; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Bullet__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_Label__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 * Bullet module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a bullet with a textual label.
 *
 * Uses [[Label]] instance to draw the label, so the label itself is
 * configurable.
 *
 * @see {@link IBulletEvents} for a list of available events
 * @see {@link IBulletAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var LabelBullet = /** @class */ (function (_super) {
    __extends(LabelBullet, _super);
    /**
     * Constructor
     */
    function LabelBullet() {
        var _this = _super.call(this) || this;
        _this.className = "LabelBullet";
        var label = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_elements_Label__["a" /* Label */]);
        label.shouldClone = false;
        label.verticalCenter = "middle";
        label.horizontalCenter = "middle";
        label.truncate = true;
        label.hideOversized = true;
        label.stroke = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["c" /* color */])();
        label.strokeOpacity = 0;
        label.fill = new __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("text");
        label.renderingFrequency = 4;
        _this.events.on("maxsizechanged", function () {
            _this.label.maxWidth = _this.maxWidth;
            _this.label.maxHeight = _this.maxHeight;
        }, _this);
        _this.label = label;
        return _this;
        // not good, as lineSeries will have labels somewhere in the middle.
        //this.locationX = 0.5;
        //this.locationY = 0.5;
    }
    /**
     * Copies all proprities and related stuff from another instance of
     * [[LabelBullet]].
     *
     * @param {this}  source  Source element
     */
    LabelBullet.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.label.copyFrom(source.label);
    };
    return LabelBullet;
}(__WEBPACK_IMPORTED_MODULE_0__Bullet__["a" /* Bullet */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["a" /* registry */].registeredClasses["LabelBullet"] = LabelBullet;
//# sourceMappingURL=LabelBullet.js.map

/***/ }),
/* 243 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SankeyLink; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_rendering_fills_LinearGradient__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__elements_Bullet__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_elements_Polyspline__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_rendering_Smoothing__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__ = __webpack_require__(12);
/**
 * SankeyLink module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */














/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This class creates a link (waved color-filled line) between two nodes in a
 * Sankey Diagram.
 *
 * @see {@link ISankeyLinkEvents} for a list of available events
 * @see {@link ISankeyLinkAdapters} for a list of available Adapters
 * @important
 */
var SankeyLink = /** @class */ (function (_super) {
    __extends(SankeyLink, _super);
    /**
     * Constructor
     */
    function SankeyLink() {
        var _this = _super.call(this) || this;
        /**
         * A gradiend instance that is used to provided colored gradient fills for
         * the Sankey link.
         *
         * @type {LinearGradient}
         */
        _this.gradient = new __WEBPACK_IMPORTED_MODULE_2__core_rendering_fills_LinearGradient__["a" /* LinearGradient */]();
        _this.className = "SankeyLink";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.tension = 0.8;
        _this.controlPointDistance = 0.2;
        _this.maskBullets = false;
        _this.layout = "none";
        _this.isMeasured = false;
        _this.startAngle = 0;
        _this.endAngle = 0;
        _this.linkWidth = 0;
        _this.startX = 0;
        _this.endX = 0;
        _this.startY = 0;
        _this.endY = 0;
        _this.strokeOpacity = 0;
        // this is very important, otherwise the container will be shifted
        _this.verticalCenter = "none";
        _this.horizontalCenter = "none";
        _this.tooltipText = "{fromName}→{toName}:{value.value}";
        _this.link = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]);
        _this.link.shouldClone = false;
        _this.link.element = _this.paper.add("path");
        _this.fillOpacity = 0.2;
        _this.fill = interfaceColors.getFor("alternativeBackground");
        _this.bulletsContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]);
        _this.bulletsContainer.shouldClone = false;
        _this.bulletsContainer.layout = "none";
        _this.bulletsMask = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]);
        _this.bulletsMask.shouldClone = false;
        _this.bulletsMask.element = _this.paper.add("path");
        _this.middleSpline = _this.createChild(__WEBPACK_IMPORTED_MODULE_7__core_elements_Polyspline__["a" /* Polyspline */]);
        _this.middleSpline.shouldClone = false;
        _this.middleSpline.strokeOpacity = 0;
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)validates (redraws) the link.
     *
     * @ignore Exclude from docs
     */
    SankeyLink.prototype.validate = function () {
        _super.prototype.validate.call(this);
        if (!this.isTemplate) {
            var x0 = this.startX;
            var y0 = this.startY;
            var x1 = this.endX;
            var y1 = this.endY;
            if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](x1)) {
                x1 = x0;
            }
            if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](y1)) {
                y1 = y0;
            }
            var startAngle = this.startAngle;
            var endAngle = this.endAngle;
            var w = this.linkWidth;
            var path = "";
            var xt0 = x0;
            var yt0 = y0;
            var xt1 = x1;
            var yt1 = y1;
            var xb0 = x0 + w * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](startAngle);
            var xb1 = x1 + w * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](endAngle);
            var yb0 = y0 + w * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](startAngle);
            var yb1 = y1 + w * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](endAngle);
            var xm0 = x0 + w / 2 * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](startAngle);
            var xm1 = x1 + w / 2 * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](endAngle);
            var ym0 = y0 + w / 2 * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](startAngle);
            var ym1 = y1 + w / 2 * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](endAngle);
            this.zIndex = this.zIndex || this.dataItem.index;
            var tensionX = this.tension + (1 - this.tension) * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](startAngle);
            var tensionY = this.tension + (1 - this.tension) * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](startAngle);
            this.middleSpline.tensionX = tensionX;
            this.middleSpline.tensionY = tensionY;
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](w) && (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](x0) && __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](x1) && __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](y0) && __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](y1))) {
                // solves issues with gradient fill of straight lines
                if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["round"](xt0, 3) == __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["round"](xt1, 3)) {
                    xt1 += 0.01;
                }
                if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["round"](yt0, 3) == __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["round"](yt1, 3)) {
                    yt1 += 0.01;
                }
                if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["round"](xb0, 3) == __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["round"](xb1, 3)) {
                    xb1 += 0.01;
                }
                if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["round"](yb0, 3) == __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["round"](yb1, 3)) {
                    yb1 += 0.01;
                }
                var minX = Math.min(xb0, xb1, xt0, xt1);
                var minY = Math.min(yb0, yb1, yt0, yt1);
                var maxX = Math.max(xb0, xb1, xt0, xt1);
                var maxY = Math.max(yb0, yb1, yt0, yt1);
                this._bbox = {
                    x: minX,
                    y: minY,
                    width: maxX - minX,
                    height: maxY - minY
                };
                var cpd = this.controlPointDistance;
                var kxt0 = xt0 + (xt1 - xt0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](startAngle);
                var kyt0 = yt0 + (yt1 - yt0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](startAngle);
                var kxt1 = xt1 - (xt1 - xt0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](endAngle);
                var kyt1 = yt1 - (yt1 - yt0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](endAngle);
                var kxm0 = xm0 + (xm1 - xm0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](startAngle);
                var kym0 = ym0 + (ym1 - ym0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](startAngle);
                var kxm1 = xm1 - (xm1 - xm0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](endAngle);
                var kym1 = ym1 - (ym1 - ym0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](endAngle);
                var angle = __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["getAngle"]({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });
                var dx = (w / __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](angle) - w) / __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["tan"](angle) * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](startAngle);
                var dy = (w / __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](angle) - w) * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["tan"](angle) * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](startAngle);
                var kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](startAngle);
                var kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](startAngle);
                var kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["cos"](endAngle);
                var kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["sin"](endAngle);
                this.middleSpline.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];
                kxt0 += dx / 2;
                kyt0 += dy / 2;
                kxt1 += dx / 2;
                kyt1 += dy / 2;
                path += __WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__["moveTo"]({ x: xt0, y: yt0 });
                path += new __WEBPACK_IMPORTED_MODULE_12__core_rendering_Smoothing__["f" /* Tension */](tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);
                path += __WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__["lineTo"]({ x: xb1, y: yb1 });
                path += new __WEBPACK_IMPORTED_MODULE_12__core_rendering_Smoothing__["f" /* Tension */](tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);
                path += __WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__["closePath"]();
                this._overflowX = 0;
                this._overflowY = 0;
            }
            this.link.element.attr({ "d": path });
            if (this.maskBullets) {
                this.bulletsMask.element.attr({ "d": path });
                this.bulletsContainer.mask = this.bulletsMask;
            }
            this.positionBullets();
        }
    };
    SankeyLink.prototype.positionBullets = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.bullets.iterator(), function (bullet) {
            bullet.parent = _this.bulletsContainer;
            _this.positionBullet(bullet);
        });
    };
    SankeyLink.prototype.positionBullet = function (bullet) {
        var location = bullet.locationX;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](location)) {
            location = bullet.locationY;
        }
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](location)) {
            location = 0.5;
        }
        var point = this.middleSpline.positionToPoint(location);
        bullet.moveTo(point);
        var rotationField = bullet.propertyFields.rotation;
        var angle;
        if (bullet.dataItem) {
            var dataContext = bullet.dataItem.dataContext;
            angle = dataContext[rotationField];
        }
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](angle)) {
            angle = point.angle;
        }
        bullet.rotation = angle;
    };
    Object.defineProperty(SankeyLink.prototype, "startAngle", {
        /**
         * @return {number} Start angle
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * [startAngle description]
         *
         * @todo Description
         * @param {number}  value  Start angle
         */
        set: function (value) {
            this.setPropertyValue("startAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "endAngle", {
        /**
         * @return {number} End angle
         */
        get: function () {
            return this.getPropertyValue("endAngle");
        },
        /**
         * [endAngle description]
         *
         * @todo Description
         * @param {number}  value  End angle
         */
        set: function (value) {
            this.setPropertyValue("endAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "startX", {
        /**
         * @return {number} Start X
         */
        get: function () {
            return this.getPropertyValue("startX");
        },
        /**
         * [startX description]
         *
         * @todo Description
         * @param {number}  value  Start X
         */
        set: function (value) {
            this.setPropertyValue("startX", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "endX", {
        /**
         * @return {number} End X
         */
        get: function () {
            return this.getPropertyValue("endX");
        },
        /**
         * [endX description]
         *
         * @todo Description
         * @param {number} value  End X
         */
        set: function (value) {
            this.setPropertyValue("endX", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "startY", {
        /**
         * @return {number} Start Y
         */
        get: function () {
            return this.getPropertyValue("startY");
        },
        /**
         * [startY description]
         *
         * @todo Description
         * @param {number}  value  Start Y
         */
        set: function (value) {
            this.setPropertyValue("startY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "endY", {
        /**
         * @return {number} End Y
         */
        get: function () {
            return this.getPropertyValue("endY");
        },
        /**
         * [endY description]
         *
         * @todo Description
         * @param {number} value End Y
         */
        set: function (value) {
            this.setPropertyValue("endY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "linkWidth", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this.getPropertyValue("linkWidth");
        },
        /**
         * [linkWidth description]
         *
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
            this.setPropertyValue("linkWidth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "colorMode", {
        /**
         * @type {"solid" | "gradient"} Fill mode
         */
        get: function () {
            return this.getPropertyValue("colorMode");
        },
        /**
         * Should link be filled with a solid color or gradient.
         *
         * @param {"solid" | "gradient"}  value  Fill mode
         */
        set: function (value) {
            if (value == "gradient") {
                this.fill = this.gradient;
                this.stroke = this.gradient;
            }
            this.setPropertyValue("colorMode", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "maskBullets", {
        /**
         * @return {boolean} mask bullets value
         */
        get: function () {
            return this.getPropertyValue("maskBullets");
        },
        /**
         * Should link bullets be masked or not
         *
         * @param {boolean}  value
         * @default false;
         */
        set: function (value) {
            this.setPropertyValue("maskBullets", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "controlPointDistance", {
        /**
         * @return {number} relative control point distance
         */
        get: function () {
            return this.getPropertyValue("controlPointDistance");
        },
        /**
         * Distance of control point of a link, defines relative distance from a node at which linke should bend
         * @default 0.2
         * @param {number}  value
         */
        set: function (value) {
            this.setPropertyValue("controlPointDistance", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "tension", {
        /**
         * @return {number} tension value
         */
        get: function () {
            return this.getPropertyValue("tension");
        },
        /**
         * Tension of a spline, 1 would make the link to have sharp edges
         * @default 0.8
         * @param {number} value
         */
        set: function (value) {
            this.setPropertyValue("tension", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "tooltipLocation", {
        /**
         * @type {number} tooltip location value
         */
        get: function () {
            return this.getPropertyValue("tooltipLocation");
        },
        /**
         * Relative location of a tooltip.
         * @default 0.5
         *
         * @param {number} value
         */
        set: function (value) {
            this.setPropertyValue("tooltipLocation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds color steps in the link gradient.
     *
     * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Fill option
     */
    SankeyLink.prototype.setFill = function (value) {
        _super.prototype.setFill.call(this, value);
        if (value instanceof __WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["a" /* Color */]) {
            this.gradient.stops.clear();
            this.gradient.addColor(value);
            this.gradient.addColor(value);
        }
    };
    /**
     * Updates bounding box based on element dimension settings.
     *
     * @ignore Exclude from docs
     */
    SankeyLink.prototype.measureElement = function () {
    };
    Object.defineProperty(SankeyLink.prototype, "bullets", {
        /**
         * List of bullets
         *
         * @return {ListTemplate<Bullet>} [description]
         */
        get: function () {
            var _this = this;
            if (!this._bullets) {
                this._bullets = new __WEBPACK_IMPORTED_MODULE_6__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_4__elements_Bullet__["a" /* Bullet */]());
                this._bullets.events.on("insert", function (event) {
                    event.newValue.events.on("propertychanged", function (event) {
                        if (event.property == "locationX" || event.property == "locationY") {
                            _this.positionBullet(event.target);
                        }
                    });
                });
            }
            return this._bullets;
        },
        enumerable: true,
        configurable: true
    });
    SankeyLink.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.bullets.copyFrom(source.bullets);
    };
    /**
     * @ignore Exclude from docs
     * @return {number} Tooltip X (px)
     */
    SankeyLink.prototype.getTooltipX = function () {
        return this.middleSpline.positionToPoint(this.tooltipLocation).x;
    };
    /**
     * @ignore Exclude from docs
     * @return {number} Tooltip Y (px)
     */
    SankeyLink.prototype.getTooltipY = function () {
        return this.middleSpline.positionToPoint(this.tooltipLocation).y;
    };
    return SankeyLink;
}(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["a" /* registry */].registeredClasses["SankeyLink"] = SankeyLink;
//# sourceMappingURL=SankeyLink.js.map

/***/ }),
/* 244 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorModifier; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for color modifiers.
 *
 * @ignore Exclude from docs
 */
var ColorModifier = /** @class */ (function (_super) {
    __extends(ColorModifier, _super);
    /**
     * Constructor
     */
    function ColorModifier() {
        var _this = _super.call(this) || this;
        _this.className = "ColorModifier";
        _this.applyTheme();
        return _this;
    }
    /**
     * Modifies color value.
     *
     * @ignore Exclude from docs
     * @param  {Color}  value  Original color
     * @return {Color}         Modified
     */
    ColorModifier.prototype.modify = function (value) {
        return value;
    };
    return ColorModifier;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=ColorModifier.js.map

/***/ }),
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Rectangle3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__ = __webpack_require__(161);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_Path__ = __webpack_require__(12);
/**
 * Creates a 3D rectangle.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Builds a 3D rectangle
 * @see {@link IRectangle3DEvents} for a list of available events
 * @see {@link IRectangle3DAdapters} for a list of available Adapters
 */
var Rectangle3D = /** @class */ (function (_super) {
    __extends(Rectangle3D, _super);
    /**
     * Constructor
     */
    function Rectangle3D() {
        var _this = _super.call(this) || this;
        _this.angle = 30;
        _this.depth = 30;
        _this.className = "Rectangle3D";
        _this.layout = "none";
        var sideBack = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideBack.shouldClone = false;
        sideBack.element = _this.paper.add("path");
        sideBack.isMeasured = false;
        var lightenFilterBack = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterBack.lightness = -0.2;
        sideBack.filters.push(lightenFilterBack);
        _this.sideBack = sideBack;
        _this._disposers.push(_this.sideBack);
        var sideBottom = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideBottom.shouldClone = false;
        sideBottom.element = _this.paper.add("path");
        sideBottom.isMeasured = false;
        var lightenFilterBottom = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterBottom.lightness = -0.5;
        sideBottom.filters.push(lightenFilterBottom);
        _this.sideBottom = sideBottom;
        _this._disposers.push(_this.sideBottom);
        var sideLeft = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideLeft.shouldClone = false;
        sideLeft.element = _this.paper.add("path");
        sideLeft.isMeasured = false;
        var lightenFilterLeft = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterLeft.lightness = -0.4;
        sideLeft.filters.push(lightenFilterLeft);
        _this.sideLeft = sideLeft;
        _this._disposers.push(_this.sideLeft);
        var sideRight = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideRight.shouldClone = false;
        sideRight.element = _this.paper.add("path");
        sideRight.isMeasured = false;
        var lightenFilterRight = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterRight.lightness = -0.2;
        sideRight.filters.push(lightenFilterRight);
        _this.sideRight = sideRight;
        _this._disposers.push(_this.sideRight);
        var sideTop = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideTop.shouldClone = false;
        sideTop.element = _this.paper.add("path");
        sideTop.isMeasured = false;
        var lightenFilterTop = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterTop.lightness = -0.1;
        sideTop.filters.push(lightenFilterTop);
        _this.sideTop = sideTop;
        _this._disposers.push(_this.sideTop);
        var sideFront = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideFront.shouldClone = false;
        sideFront.element = _this.paper.add("path");
        sideFront.isMeasured = false;
        _this.sideFront = sideFront;
        _this._disposers.push(_this.sideFront);
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Rectangle3D.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.innerWidth;
        var h = this.innerHeight;
        var depth = this.depth;
        var angle = this.angle;
        var sin = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["sin"](angle);
        var cos = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["cos"](angle);
        var a = { x: 0, y: 0 };
        var b = { x: w, y: 0 };
        var c = { x: w, y: h };
        var d = { x: 0, y: h };
        var ah = { x: depth * cos, y: -depth * sin };
        var bh = { x: depth * cos + w, y: -depth * sin };
        var ch = { x: depth * cos + w, y: -depth * sin + h };
        var dh = { x: depth * cos, y: -depth * sin + h };
        this.sideFront.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](a) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](b) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](c) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](d) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideBack.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](ah) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](bh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ch) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](dh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideLeft.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](a) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ah) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](dh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](d) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideRight.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](b) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](bh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ch) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](c) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideBottom.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](d) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](dh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ch) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](c) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideTop.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](a) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ah) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](bh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](b) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
    };
    Object.defineProperty(Rectangle3D.prototype, "depth", {
        /**
         * @return {number} Depth (px)
         */
        get: function () {
            return this.getPropertyValue("depth");
        },
        /**
         * Depth (Z dimension) of the 3D rectangle in pixels.
         *
         * @default 30
         * @param {number}  value  Depth (px)
         */
        set: function (value) {
            this.setPropertyValue("depth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rectangle3D.prototype, "angle", {
        /**
         * @return {number} Angle
         */
        get: function () {
            return this.getPropertyValue("angle");
        },
        /**
         * Angle of the point of view to the 3D element. (0-360)
         *
         * @default 30
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("angle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Rectangle3D;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Rectangle3D.js.map

/***/ }),
/* 250 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return HeatLegend; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_rendering_fills_LinearGradient__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_List__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__charts_axes_ValueAxis__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__charts_axes_AxisRendererX__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__charts_axes_AxisRendererY__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Colors__ = __webpack_require__(80);
/**
 * HeatLegend module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();












/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This class creates a link (waved color-filled line) between two nodes in a
 * Sankey Diagram.
 *
 * @see {@link IHeatLegendEvents} for a list of available events
 * @see {@link IHeatLegendAdapters} for a list of available Adapters
 * @important
 */
var HeatLegend = /** @class */ (function (_super) {
    __extends(HeatLegend, _super);
    /**
     * Constructor
     */
    function HeatLegend() {
        var _this = _super.call(this) || this;
        _this.className = "HeatLegend";
        _this.markerContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]);
        _this.markerContainer.shouldClone = false;
        _this.orientation = "horizontal";
        _this.markerCount = 1;
        // Create a template container and list for the a marker
        var marker = new __WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]();
        marker.minHeight = 20;
        marker.minWidth = 20;
        marker.mouseEnabled = false;
        marker.background.fillOpacity = 1;
        _this.markerContainer.minHeight = 20;
        _this.markerContainer.minWidth = 20;
        _this.markers = new __WEBPACK_IMPORTED_MODULE_4__core_utils_List__["e" /* ListTemplate */](marker);
        _this.applyTheme();
        return _this;
    }
    HeatLegend.prototype.getMinFromRules = function (property) {
        var series = this.series;
        if (series) {
            var minValue_1;
            __WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__["eachContinue"](series.heatRules.iterator(), function (heatRule) {
                if (heatRule.property == property) {
                    minValue_1 = heatRule.min;
                    return false;
                }
                return true;
            });
            return minValue_1;
        }
    };
    HeatLegend.prototype.getMaxFromRules = function (property) {
        var series = this.series;
        if (series) {
            var maxValue_1;
            __WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__["each"](series.heatRules.iterator(), function (heatRule) {
                if (heatRule.property == property) {
                    maxValue_1 = heatRule.max;
                    return false;
                }
                return true;
            });
            return maxValue_1;
        }
    };
    /**
     *
     * @ignore Exclude from docs
     */
    HeatLegend.prototype.validate = function () {
        _super.prototype.validate.call(this);
        var series = this.series;
        var minColor = this.minColor;
        var maxColor = this.maxColor;
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](minColor)) {
            minColor = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMinFromRules("fill"));
        }
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxColor)) {
            maxColor = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMaxFromRules("fill"));
        }
        var seriesFill = series.fill;
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](minColor) && seriesFill instanceof __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["a" /* Color */]) {
            minColor = seriesFill;
        }
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxColor) && seriesFill instanceof __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["a" /* Color */]) {
            maxColor = seriesFill;
        }
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxColor)) {
            maxColor = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMaxFromRules("fill"));
        }
        var minOpacity = __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["toNumber"](this.getMinFromRules("fillOpacity"));
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](minOpacity)) {
            minOpacity = 1;
        }
        var maxOpacity = __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["toNumber"](this.getMaxFromRules("fillOpacity"));
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](maxOpacity)) {
            maxOpacity = 1;
        }
        var minStrokeOpacity = __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["toNumber"](this.getMinFromRules("strokeOpacity"));
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](minStrokeOpacity)) {
            minStrokeOpacity = 1;
        }
        var maxStrokeOpacity = __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["toNumber"](this.getMaxFromRules("strokeOpacity"));
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](maxStrokeOpacity)) {
            maxStrokeOpacity = 1;
        }
        var minStroke = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMinFromRules("stroke"));
        var maxStroke = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMaxFromRules("stroke"));
        if (series) {
            for (var i = 0; i < this.markerCount; i++) {
                var marker = this.markers.getIndex(i);
                if (!marker) {
                    marker = this.markers.create();
                    marker.parent = this.markerContainer;
                    marker.height = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                    marker.width = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                }
                if (this.markerCount == 1) {
                    var gradient = new __WEBPACK_IMPORTED_MODULE_1__core_rendering_fills_LinearGradient__["a" /* LinearGradient */]();
                    gradient.addColor(minColor, minOpacity);
                    gradient.addColor(maxColor, maxOpacity);
                    if (this.orientation == "vertical") {
                        gradient.rotation = -90;
                    }
                    marker.background.fill = gradient;
                    if (__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](minStroke) && __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxStroke)) {
                        var strokeGradient = new __WEBPACK_IMPORTED_MODULE_1__core_rendering_fills_LinearGradient__["a" /* LinearGradient */]();
                        strokeGradient.addColor(minStroke, minStrokeOpacity);
                        strokeGradient.addColor(maxStroke, maxStrokeOpacity);
                        if (this.orientation == "vertical") {
                            strokeGradient.rotation = -90;
                        }
                        marker.background.stroke = strokeGradient;
                    }
                }
                else {
                    var color = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["a" /* Color */](__WEBPACK_IMPORTED_MODULE_11__core_utils_Colors__["interpolate"](minColor.rgb, maxColor.rgb, i / this.markerCount));
                    marker.background.fill = color;
                    var opacity = minOpacity + (maxOpacity - minOpacity) * i / this.markerCount;
                    marker.background.fillOpacity = opacity;
                    if (__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](minStroke) && __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxStroke)) {
                        var color_1 = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["a" /* Color */](__WEBPACK_IMPORTED_MODULE_11__core_utils_Colors__["interpolate"](minStroke.rgb, maxStroke.rgb, i / this.markerCount));
                        marker.background.stroke = color_1;
                        var opacity_1 = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * i / this.markerCount;
                        marker.background.strokeOpacity = opacity_1;
                    }
                }
            }
            var renderer = this.valueAxis.renderer;
            if (this.markerCount > 1) {
                if (this.orientation == "horizontal") {
                    renderer.minGridDistance = this.pixelWidth / this.markerCount;
                }
                else {
                    renderer.minGridDistance = this.pixelHeight / this.markerCount;
                }
            }
            for (var i = this.markerCount; i < this.markers.length; i++) {
                this.markers.getIndex(i).parent = undefined;
            }
        }
    };
    Object.defineProperty(HeatLegend.prototype, "minColor", {
        /**
         * Returns minColor value
         * @return {Color}
         */
        get: function () {
            return this.getPropertyValue("minColor");
        },
        /**
         * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.
         *
         * @param {Color}
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isObject"](value)) {
                value = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(value);
            }
            this.setPropertyValue("minColor", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "maxColor", {
        /**
         * Returns maxColor value
         * @return {Color}
         */
        get: function () {
            return this.getPropertyValue("maxColor");
        },
        /**
         * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.
         *
         * @param {Color}
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isObject"](value)) {
                value = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(value);
            }
            this.setPropertyValue("maxColor", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "markerCount", {
        /**
         * Returns number of color squares (markers).
         * @return {number}
         */
        get: function () {
            return this.getPropertyValue("markerCount");
        },
        /**
         * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.
         *
         * @param {number}
         */
        set: function (value) {
            this.setPropertyValue("markerCount", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "minValue", {
        /**
         * Returns minimum value of heat legend.
         * @return {number}
         */
        get: function () {
            return this.getPropertyValue("minValue");
        },
        /**
         * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.
         *
         * @param {number}
         */
        set: function (value) {
            this.setPropertyValue("minValue", value);
            this.valueAxis.min = value;
            this.valueAxis.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "maxValue", {
        /**
         * Returns maximum value of heat legend.
         * @return {number}
         */
        get: function () {
            return this.getPropertyValue("maxValue");
        },
        /**
         * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.
         *
         * @param {number}
         */
        set: function (value) {
            this.setPropertyValue("maxValue", value);
            this.valueAxis.max = value;
            this.valueAxis.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "orientation", {
        /**
         * Returns orientation value.
         *
         * @return {"horizontal" | "vertical"}
         */
        get: function () {
            return this.getPropertyValue("orientation");
        },
        /**
        * Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.
        *
        * @param {"horizontal" | "vertical"}
        */
        set: function (value) {
            this.setPropertyValue("orientation", value, true);
            var markerContainer = this.markerContainer;
            var valueAxis = this.valueAxis;
            // HORIZONTAL
            if (value == "horizontal") {
                if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](this.width)) {
                    this.width = 200;
                }
                this.height = undefined;
                valueAxis.width = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                valueAxis.height = undefined;
                this.layout = "vertical";
                markerContainer.width = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                markerContainer.height = undefined;
                if (!(valueAxis.renderer instanceof __WEBPACK_IMPORTED_MODULE_7__charts_axes_AxisRendererX__["a" /* AxisRendererX */])) {
                    valueAxis.renderer = new __WEBPACK_IMPORTED_MODULE_7__charts_axes_AxisRendererX__["a" /* AxisRendererX */](valueAxis);
                }
            }
            // VERTICAL
            else {
                if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](this.height)) {
                    this.height = 200;
                }
                this.width = undefined;
                this.layout = "horizontal";
                markerContainer.width = undefined;
                markerContainer.height = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                valueAxis.height = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                valueAxis.width = undefined;
                if (!(valueAxis.renderer instanceof __WEBPACK_IMPORTED_MODULE_8__charts_axes_AxisRendererY__["a" /* AxisRendererY */])) {
                    valueAxis.renderer = new __WEBPACK_IMPORTED_MODULE_8__charts_axes_AxisRendererY__["a" /* AxisRendererY */](valueAxis);
                }
                valueAxis.renderer.inside = true;
                valueAxis.renderer.labels.template.inside = true;
            }
            var renderer = valueAxis.renderer;
            renderer.grid.template.disabled = true;
            renderer.axisFills.template.disabled = true;
            renderer.baseGrid.disabled = true;
            renderer.labels.template.padding(2, 3, 2, 3);
            renderer.minHeight = undefined;
            renderer.minWidth = undefined;
            this.markerContainer.layout = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "valueAxis", {
        /**
         * Returns valueAxis value.
         * @return {ValueAxis}
         */
        get: function () {
            if (!this._valueAxis) {
                this.valueAxis = this.createChild(__WEBPACK_IMPORTED_MODULE_6__charts_axes_ValueAxis__["a" /* ValueAxis */]);
                this.valueAxis.shouldClone = false;
            }
            return this._valueAxis;
        },
        /**
         * Sets a value axis of heat legend. Value axis for heat legend is created automatically.
         * @param {ValueAxis}
         */
        set: function (valueAxis) {
            this._valueAxis = valueAxis;
            valueAxis.parent = this;
            valueAxis.strictMinMax = true;
            this.orientation = this.orientation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "series", {
        /**
         * Returns series value.
         * @return {Series}
         */
        get: function () {
            return this._series;
        },
        /**
         * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.
         * @param {Series} series
         */
        set: function (series) {
            var _this = this;
            this._series = series;
            this.updateMinMax(series.dataItem.values.value.low, series.dataItem.values.value.high);
            series.dataItem.events.on("calculatedvaluechanged", function (event) {
                _this.updateMinMax(series.dataItem.values.value.low, series.dataItem.values.value.high);
            });
            series.heatRules.events.on("insert", this.invalidate, this);
            series.heatRules.events.on("remove", this.invalidate, this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates min/max of value axis.
     * @ignore
     */
    HeatLegend.prototype.updateMinMax = function (min, max) {
        var valueAxis = this.valueAxis;
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](this.minValue)) {
            valueAxis.min = min;
            valueAxis.invalidateDataRange();
        }
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](this.maxValue)) {
            valueAxis.max = max;
            valueAxis.invalidateDataRange();
        }
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    HeatLegend.prototype.processConfig = function (config) {
        if (config) {
            // Set up series
            if (__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](config.series) && __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isArray"](config.series)) {
                for (var i = 0, len = config.series.length; i < len; i++) {
                    var series = config.series[i];
                    if (__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](series) && __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isString"](series) && this.map.hasKey(series)) {
                        config.series[i] = this.map.getKey(series);
                    }
                }
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return HeatLegend;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["a" /* registry */].registeredClasses["HeatLegend"] = HeatLegend;
//# sourceMappingURL=HeatLegend.js.map

/***/ }),
/* 251 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Cone; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_Ellipse__ = __webpack_require__(252);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_fills_LinearGradientModifier__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Percent__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Object__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__rendering_Path__ = __webpack_require__(12);
/**
 * Cone module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Builds a round cone/cylinder.
 *
 * @see {@link IConeEvents} for a list of available events
 * @see {@link IConeAdapters} for a list of available Adapters
 */
var Cone = /** @class */ (function (_super) {
    __extends(Cone, _super);
    /**
     * Constructor
     */
    function Cone() {
        var _this = _super.call(this) || this;
        _this.className = "Cone";
        _this.angle = 30;
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Percent__["c" /* percent */])(100);
        _this.topRadius = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Percent__["c" /* percent */])(100);
        _this.top = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__elements_Ellipse__["a" /* Ellipse */]);
        _this.top.shouldClone = false;
        _this.bottom = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__elements_Ellipse__["a" /* Ellipse */]);
        _this.bottom.shouldClone = false;
        _this.body = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        _this.body.shouldClone = false;
        _this.body.element = _this.paper.add("path");
        _this.layout = "none";
        _this.bodyFillModifier = new __WEBPACK_IMPORTED_MODULE_3__rendering_fills_LinearGradientModifier__["a" /* LinearGradientModifier */]();
        _this.bodyFillModifier.lightnesses = [0, -0.25, 0];
        _this.body.fillModifier = _this.bodyFillModifier;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Cone.prototype.draw = function () {
        _super.prototype.draw.call(this);
        __WEBPACK_IMPORTED_MODULE_5__utils_Object__["copyProperties"](this, this.top, __WEBPACK_IMPORTED_MODULE_1__Sprite__["b" /* visualProperties */]);
        __WEBPACK_IMPORTED_MODULE_5__utils_Object__["copyProperties"](this, this.bottom, __WEBPACK_IMPORTED_MODULE_1__Sprite__["b" /* visualProperties */]);
        __WEBPACK_IMPORTED_MODULE_5__utils_Object__["copyProperties"](this, this.body, __WEBPACK_IMPORTED_MODULE_1__Sprite__["b" /* visualProperties */]);
        var w = this.innerWidth;
        var h = this.innerHeight;
        var bottom = this.bottom;
        var top = this.top;
        var angle = this.angle;
        var radiusBase;
        var dx;
        var dy;
        if (this.orientation == "horizontal") {
            radiusBase = h / 2;
            bottom.y = h / 2;
            top.y = h / 2;
            top.x = w;
            dx = (90 - angle) / 90;
            dy = 0;
            this.bodyFillModifier.gradient.rotation = 90;
        }
        else {
            dx = 0;
            dy = (90 - angle) / 90;
            radiusBase = w / 2;
            bottom.y = h;
            bottom.x = w / 2;
            top.x = w / 2;
            this.bodyFillModifier.gradient.rotation = 0;
        }
        var radius = this.radius.value * radiusBase;
        var topRadius = this.topRadius.value * radiusBase;
        bottom.radius = radius - radius * dx;
        bottom.radiusY = radius - radius * dy;
        top.radius = topRadius - topRadius * dx;
        top.radiusY = topRadius - topRadius * dy;
        var path;
        if (this.orientation == "horizontal") {
            path = __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["moveTo"]({ x: 0, y: h / 2 - bottom.radiusY }) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["arcTo"](-90, -180, bottom.radius, bottom.radiusY) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["lineTo"]({ x: w, y: h / 2 + top.radiusY }) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["arcTo"](90, 180, top.radius, top.radiusY) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["closePath"]();
        }
        else {
            path = __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["moveTo"]({ x: w / 2 - top.radius, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["arcTo"](180, -180, top.radius, top.radiusY) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["lineTo"]({ x: w / 2 + bottom.radius, y: h }) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["arcTo"](0, 180, bottom.radius, bottom.radiusY) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["closePath"]();
        }
        this.body.element.attr({ "d": path });
    };
    Object.defineProperty(Cone.prototype, "angle", {
        /**
         * @return {number} Angle
         */
        get: function () {
            return this.getPropertyValue("angle");
        },
        /**
         * Angle of the point of view to the 3D element. (0-360)
         *
         * @default 30
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("angle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cone.prototype, "radius", {
        /**
         * @return {Percent} Bottom radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * A relative radius of the cone's bottom (base).
         *
         * It is relevant to the inner width or height of the element.
         *
         * @default Percent(100)
         * @param {Percent}  value  Bottom radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cone.prototype, "topRadius", {
        /**
         * @return {Percent} Top radius
         */
        get: function () {
            return this.getPropertyValue("topRadius");
        },
        /**
         * A relative radius of the cone's top (tip).
         *
         * It is relevant to the inner width or height of the element.
         *
         * @default Percent(0)
         * @param {Percent}  value  Top radius
         */
        set: function (value) {
            this.setPropertyValue("topRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cone.prototype, "orientation", {
        /**
         * @type {"horizontal" | "vertical"} Orientation
         */
        get: function () {
            return this.getPropertyValue("orientation");
        },
        /**
         * Orientation of the cone: "horizontal" or "vertical".
         *
         * @default "vertical"
         * @param {"horizontal" | "vertical"}  value  Orientation
         */
        set: function (value) {
            this.setPropertyValue("orientation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Cone;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Cone.js.map

/***/ }),
/* 252 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Ellipse; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Circle__ = __webpack_require__(84);
/**
 * Ellipse module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws an ellipse
 * @see {@link IEllipseEvents} for a list of available events
 * @see {@link IEllipseAdapters} for a list of available Adapters
 */
var Ellipse = /** @class */ (function (_super) {
    __extends(Ellipse, _super);
    /**
     * Constructor
     */
    function Ellipse() {
        var _this = _super.call(this) || this;
        _this.className = "Ellipse";
        _this.element = _this.paper.add("ellipse");
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the ellipsis.
     */
    Ellipse.prototype.draw = function () {
        _super.prototype.draw.call(this);
        this.element.attr({ "rx": this.radius });
        this.element.attr({ "ry": this.radiusY });
    };
    Object.defineProperty(Ellipse.prototype, "radiusY", {
        /**
         * @return {number} Vertical radius
         */
        get: function () {
            return this.innerHeight / 2;
        },
        /**
         * Vertical radius.
         *
         * It's a relative size to the `radius`.
         *
         * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's
         * horizontal radius.
         *
         * @param {number}  value  Vertical radius
         */
        set: function (value) {
            this.height = value * 2;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ellipse.prototype, "radius", {
        /**
         * @return {number} Horizontal radius
         */
        get: function () {
            return this.innerWidth / 2;
        },
        /**
         * Horizontal radius.
         *
         * @param {number}  value  Horizontal radius
         */
        set: function (value) {
            this.width = value * 2;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    return Ellipse;
}(__WEBPACK_IMPORTED_MODULE_0__Circle__["a" /* Circle */]));

//# sourceMappingURL=Ellipse.js.map

/***/ }),
/* 253 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TextLink; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_elements_Label__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_interaction_Mouse__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/**
 * A module that defines Text element used to indicate links.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a text element with a link.
 *
 * @see {@link ITextLinkEvents} for a list of available events
 * @see {@link ITextLinkAdapters} for a list of available Adapters
 */
var TextLink = /** @class */ (function (_super) {
    __extends(TextLink, _super);
    /**
     * Constructor
     */
    function TextLink() {
        var _this = _super.call(this) || this;
        _this.className = "TextLink";
        _this.selectable = true;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.fill = interfaceColors.getFor("primaryButton").brighten(0.3);
        var hoverState = _this.states.create("hover");
        hoverState.properties.fill = interfaceColors.getFor("primaryButtonHover").brighten(0.3);
        var downState = _this.states.create("down");
        downState.properties.fill = interfaceColors.getFor("primaryButtonDown").brighten(0.3);
        _this.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_1__core_interaction_Mouse__["a" /* MouseCursorStyle */].pointer;
        _this.applyTheme();
        return _this;
    }
    return TextLink;
}(__WEBPACK_IMPORTED_MODULE_0__core_elements_Label__["a" /* Label */]));

//# sourceMappingURL=TextLink.js.map

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(23) && !__webpack_require__(16)(function () {
  return Object.defineProperty(__webpack_require__(164)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(22);


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(35);
var toIObject = __webpack_require__(36);
var arrayIndexOf = __webpack_require__(124)(false);
var IE_PROTO = __webpack_require__(166)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(24);
var anObject = __webpack_require__(9);
var getKeys = __webpack_require__(68);

module.exports = __webpack_require__(23) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(36);
var gOPN = __webpack_require__(71).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(68);
var gOPS = __webpack_require__(125);
var pIE = __webpack_require__(102);
var toObject = __webpack_require__(27);
var IObject = __webpack_require__(101);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(16)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(29);
var isObject = __webpack_require__(17);
var invoke = __webpack_require__(261);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),
/* 261 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(13).parseInt;
var $trim = __webpack_require__(87).trim;
var ws = __webpack_require__(170);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(13).parseFloat;
var $trim = __webpack_require__(87).trim;

module.exports = 1 / $parseFloat(__webpack_require__(170) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(42);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(17);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 266 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(173);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(9);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(29);
var toObject = __webpack_require__(27);
var IObject = __webpack_require__(101);
var toLength = __webpack_require__(25);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(27);
var toAbsoluteIndex = __webpack_require__(69);
var toLength = __webpack_require__(25);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 271 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(23) && /./g.flags != 'g') __webpack_require__(24).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(129)
});


/***/ }),
/* 273 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(9);
var isObject = __webpack_require__(17);
var newPromiseCapability = __webpack_require__(188);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(276);
var validate = __webpack_require__(89);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(132)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(24).f;
var create = __webpack_require__(70);
var redefineAll = __webpack_require__(75);
var ctx = __webpack_require__(41);
var anInstance = __webpack_require__(73);
var forOf = __webpack_require__(74);
var $iterDefine = __webpack_require__(176);
var step = __webpack_require__(271);
var setSpecies = __webpack_require__(72);
var DESCRIPTORS = __webpack_require__(23);
var fastKey = __webpack_require__(59).fastKey;
var validate = __webpack_require__(89);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(276);
var validate = __webpack_require__(89);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(132)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each = __webpack_require__(50)(0);
var redefine = __webpack_require__(32);
var meta = __webpack_require__(59);
var assign = __webpack_require__(259);
var weak = __webpack_require__(279);
var isObject = __webpack_require__(17);
var fails = __webpack_require__(16);
var validate = __webpack_require__(89);
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(132)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(75);
var getWeak = __webpack_require__(59).getWeak;
var anObject = __webpack_require__(9);
var isObject = __webpack_require__(17);
var anInstance = __webpack_require__(73);
var forOf = __webpack_require__(74);
var createArrayMethod = __webpack_require__(50);
var $has = __webpack_require__(35);
var validate = __webpack_require__(89);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(48);
var toLength = __webpack_require__(25);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(71);
var gOPS = __webpack_require__(125);
var anObject = __webpack_require__(9);
var Reflect = __webpack_require__(13).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(126);
var isObject = __webpack_require__(17);
var toLength = __webpack_require__(25);
var ctx = __webpack_require__(41);
var IS_CONCAT_SPREADABLE = __webpack_require__(22)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(25);
var repeat = __webpack_require__(172);
var defined = __webpack_require__(47);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(68);
var toIObject = __webpack_require__(36);
var isEnum = __webpack_require__(102).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(103);
var from = __webpack_require__(286);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(74);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 287 */
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};


/***/ }),
/* 288 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Polyarc; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Polyline__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__ = __webpack_require__(12);
/**
 * Module for a multi-part arched line.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a multi-part arched line.
 *
 * @see {@link IPolyarcEvents} for a list of available events
 * @see {@link IPolyarcAdapters} for a list of available Adapters
 */
var Polyarc = /** @class */ (function (_super) {
    __extends(Polyarc, _super);
    /**
     * Constructor
     */
    function Polyarc() {
        var _this = _super.call(this) || this;
        _this.className = "Polyarc";
        _this.controlPointDistance = 0.5;
        _this.controlPointPosition = 0.5;
        _this.applyTheme();
        return _this;
    }
    /**
     * Creats and adds an SVG path for the arc.
     *
     * @ignore Exclude from docs
     */
    Polyarc.prototype.makePath = function () {
        this._distance = 0;
        var segments = this.segments;
        if (segments && segments.length > 0) {
            var path = "";
            this._realSegments = [];
            for (var i = 0; i < segments.length; i++) {
                var points = segments[i];
                var realPoints = [];
                this._realSegments.push(realPoints);
                if (points.length > 0) {
                    path += __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["moveTo"](points[0]);
                    for (var p = 1; p < points.length; p++) {
                        var pointA = points[p - 1];
                        var pointB = points[p];
                        var distanceAB = __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["getDistance"](pointB, pointA);
                        var cpDistance = distanceAB * this.controlPointDistance;
                        var controlPointPosition = this.controlPointPosition;
                        var angle = -__WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["getAngle"](pointA, pointB);
                        var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["sin"](angle);
                        var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["cos"](angle);
                        var controlPoint1 = { x: cpx, y: cpy };
                        var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["sin"](angle);
                        var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["cos"](angle);
                        var controlPoint2 = { x: cpx2, y: cpy2 };
                        path += __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["cubicCurveTo"](pointB, controlPoint1, controlPoint2);
                        // we add a lot of points in order to get the position/angle later
                        var stepCount = Math.ceil(distanceAB);
                        var prevPoint = pointA;
                        for (var i_1 = 0; i_1 <= stepCount; i_1++) {
                            var point = __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["getPointOnCubicCurve"](pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);
                            realPoints.push(point);
                            this._distance += __WEBPACK_IMPORTED_MODULE_1__core_utils_Math__["getDistance"](prevPoint, point);
                            prevPoint = point;
                        }
                    }
                }
            }
            this.element.attr({ "d": path });
        }
    };
    Object.defineProperty(Polyarc.prototype, "controlPointPosition", {
        /**
         * @return {number} Position (0-1)
         */
        get: function () {
            return this.getPropertyValue("controlPointPosition");
        },
        /**
         * Relative position along the line the control point is. (0-1)
         *
         * @default 0.5
         * @param {number}  value  Position (0-1)
         */
        set: function (value) {
            this.setPropertyValue("controlPointPosition", value);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polyarc.prototype, "controlPointDistance", {
        /**
         * @return {number} Distance (0-1)
         */
        get: function () {
            return this.getPropertyValue("controlPointDistance");
        },
        /**
         * Relative distance of the control point. (0-1)
         *
         * Default is half the length of the line. (0.5)
         *
         * @default 0.5
         * @param {number}  value  Distance (0-1)
         */
        set: function (value) {
            this.setPropertyValue("controlPointDistance", value);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    return Polyarc;
}(__WEBPACK_IMPORTED_MODULE_0__Polyline__["a" /* Polyline */]));

//# sourceMappingURL=Polyarc.js.map

/***/ }),
/* 289 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Polygon; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Morpher__ = __webpack_require__(290);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_Path__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Type__ = __webpack_require__(2);
/**
 * Polygon module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a polygon.
 *
 * @see {@link IPolygonEvents} for a list of available events
 * @see {@link IPolygonAdapters} for a list of available Adapters
 */
var Polygon = /** @class */ (function (_super) {
    __extends(Polygon, _super);
    /**
     * Constructor
     */
    function Polygon() {
        var _this = _super.call(this) || this;
        _this.className = "Polygon";
        _this.element = _this.paper.add("path");
        _this.shapeRendering = "auto";
        _this._currentPoints = [];
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Polygon.prototype, "points", {
        /**
         * @return {IPoint[]} Polygon points
         */
        get: function () {
            return this.getPropertyValue("points");
        },
        /**
         * An array of X/Y coordinates for each elbow of the polygon.
         *
         * @todo Example
         * @param {IPoint[][][]}  points  Polygon points
         */
        set: function (points) {
            this.setPropertyValue("points", points, true);
            this._currentPoints = this.points;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polygon.prototype, "currentPoints", {
        /**
         * @return {IPoint[]} Polygon points
         */
        get: function () {
            return this._currentPoints;
        },
        /**
         * Current points. Used when morphing the element, so that original `points`
         * are not overwritten.
         *
         * @param {IPoint[][][]}  points  Polygon points
         */
        set: function (points) {
            if (this._currentPoints != points) {
                this._currentPoints = points;
                this.draw();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Polygon.prototype.draw = function () {
        var path = "";
        var points = this._currentPoints;
        var left;
        var right;
        var top;
        var bottom;
        if (points.length > 0) {
            // separate areas
            for (var i = 0; i < points.length; i++) {
                // surface
                var surface = points[i][0];
                var hole = points[i][1];
                if (surface && surface.length > 0) {
                    var point = surface[0];
                    path += __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"](point);
                    for (var s = 0; s < surface.length; s++) {
                        point = surface[s];
                        path += __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"](point);
                        if ((right < point.x) || !__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](right)) {
                            right = point.x;
                        }
                        if ((left > point.x) || !__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](left)) {
                            left = point.x;
                        }
                        if ((top > point.y) || !__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](top)) {
                            top = point.y;
                        }
                        if ((bottom < point.y) || !__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](bottom)) {
                            bottom = point.y;
                        }
                    }
                }
                // hole
                if (hole && hole.length > 0) {
                    var point = hole[0];
                    path += __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"](point);
                    for (var h = 0; h < hole.length; h++) {
                        point = hole[h];
                        path += __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"](point);
                    }
                }
            }
            if (path) {
                path += __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["closePath"]();
            }
            this._bbox.x = left;
            this._bbox.y = top;
            this._bbox.width = right - left;
            this._bbox.height = bottom - top;
        }
        this.element.attr({ "d": path });
    };
    /**
     * Measures element
     */
    Polygon.prototype.measureElement = function () {
        // Overriding to avoid extra measurement.
    };
    Object.defineProperty(Polygon.prototype, "centerPoint", {
        /**
         * A calculated center point for the shape.
         *
         * @readonly
         * @return {IPoint} Center
         */
        get: function () {
            return { x: this._bbox.x + this._bbox.width / 2, y: this._bbox.y + this._bbox.height / 2 };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polygon.prototype, "morpher", {
        /**
         * A [[Morpher]] instance that is used to morph polygon into some other
         * shape.
         *
         * @readonly
         * @return {Morpher} Morpher instance
         */
        get: function () {
            if (!this._morpher) {
                this._morpher = new __WEBPACK_IMPORTED_MODULE_1__utils_Morpher__["a" /* Morpher */](this);
                this._disposers.push(this._morpher);
            }
            return this._morpher;
        },
        enumerable: true,
        configurable: true
    });
    return Polygon;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Polygon.js.map

/***/ }),
/* 290 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Morpher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Animation__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Ease__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Type__ = __webpack_require__(2);
/**
 * Morpher module contains functionality that allows transforming (morphing)
 * SVG shapes like paths, rectangles, circles between one another.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * Morpher class can be used in conjunction with [[Animation]] to transform one
 * SVG shape into another.
 */
var Morpher = /** @class */ (function (_super) {
    __extends(Morpher, _super);
    /**
     * Constructor.
     *
     * @param {IMorphable} morphable An object to morph
     */
    function Morpher(morphable) {
        var _this = _super.call(this) || this;
        /**
         * A storage for measurements.
         *
         * @type {IRectangle[]}
         */
        _this._bboxes = [];
        /**
         * Duration of the morphing animation in milliseconds.
         *
         * @type {number}
         */
        _this.morphDuration = 800;
        /**
         * An easing function to use for morphing animation.
         *
         * @see {@link Ease}
         * @type {Function}
         */
        _this.morphEasing = __WEBPACK_IMPORTED_MODULE_4__utils_Ease__["cubicOut"];
        /**
         * If set to `true` then all separate parts of the multi-part shape will
         * morph into a single target shape. Otherwise each separate part will render
         * into separate target shapes.
         *
         * @type {boolean}
         */
        _this.morphToSingle = true;
        /**
         * A ratio to scale morphed object in relation to the source object.
         *
         * @type {number}
         */
        _this.scaleRatio = 1;
        _this.className = "Morpher";
        _this.morphable = morphable;
        _this.applyTheme();
        return _this;
    }
    /**
     * Morphs shape to polygon.
     *
     * @param {IPoint[][][]}        toPoints  Corner points of the target shape
     * @param {number}              duration  Duration in milliseconds
     * @param {(number) => number}  easing    Easing function
     * @return {Animation}                    Animation
     */
    Morpher.prototype.morphToPolygon = function (toPoints, duration, easing) {
        var points = this.morphable.currentPoints;
        this.sortPoints(points);
        this.sortPoints(toPoints);
        this._morphFromPointsReal = [];
        this._morphToPointsReal = [];
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](duration)) {
            duration = this.morphDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](easing)) {
            easing = this.morphEasing;
        }
        this._morphFromPointsReal = this.normalizePoints(toPoints, points);
        this._morphToPointsReal = this.normalizePoints(points, toPoints);
        this.morphable.currentPoints = this._morphFromPointsReal;
        var animation = new __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["a" /* Animation */](this, { property: "morphProgress", from: 0, to: 1 }, duration, easing);
        this._disposers.push(animation);
        animation.start();
        return animation;
    };
    /**
     * [normalizePoints description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {IPoint[][][]}  pointsA  Point A
     * @param  {IPoint[][][]}  pointsB  Point B
     * @return {IPoint[]}               Normalized points
     */
    Morpher.prototype.normalizePoints = function (pointsA, pointsB) {
        for (var i = 0; i < pointsA.length; i++) {
            var surfaceA = pointsA[i][0];
            var holeA = pointsA[i][1];
            var bboxA = __WEBPACK_IMPORTED_MODULE_5__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_3__utils_Math__["getBBox"](surfaceA));
            var middleX = bboxA.x + bboxA.width;
            var middleY = bboxA.y + bboxA.height;
            // check if we have the same in PointsB
            if (!pointsB[i]) {
                pointsB[i] = [];
            }
            // check if we have surface in pointsB
            if (surfaceA && !pointsB[i][0]) {
                pointsB[i][0] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];
            }
            if (pointsB[i][0]) {
                pointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);
                var distance = Infinity;
                var splitAt = 0;
                for (var a = 0; a < pointsB[i][0].length; a++) {
                    var newDistance = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getDistance"](pointsB[i][0][a], surfaceA[0]);
                    if (newDistance < distance) {
                        splitAt = a;
                        distance = newDistance;
                    }
                }
                var partA = pointsB[i][0].slice(0, splitAt);
                var partB = pointsB[i][0].slice(splitAt);
                pointsB[i][0] = partB.concat(partA);
            }
            if (holeA) {
                if (!pointsB[i][1]) {
                    pointsB[i][1] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];
                }
                pointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);
            }
        }
        return pointsB;
    };
    /**
     * [sortPoints description]
     *
     * @ignore Exclude from doc
     * @todo Description
     * @param {IPoint[][][]}  points  [description]
     * @return                        common bbox of points
     */
    Morpher.prototype.sortPoints = function (points) {
        points.sort(function (a, b) {
            var bbox1 = __WEBPACK_IMPORTED_MODULE_5__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_3__utils_Math__["getBBox"](a[0]));
            var bbox2 = __WEBPACK_IMPORTED_MODULE_5__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_3__utils_Math__["getBBox"](b[0]));
            if (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {
                return -1;
            }
            else {
                return 1;
            }
        });
        var bboxes = [];
        for (var i = 0; i < points.length; i++) {
            var surface = points[i][0];
            if (surface) {
                bboxes.push(__WEBPACK_IMPORTED_MODULE_5__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_3__utils_Math__["getBBox"](surface)));
            }
        }
        return __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getCommonRectangle"](bboxes);
    };
    /**
     * Morphs shape to a circle.
     *
     * @param  {number}              radius    Target circle radius (px)
     * @param  {number}              duration  Duration (ms)
     * @param  {(number) => number}  easing    Easing function
     * @return {Animation}                     Animation
     */
    Morpher.prototype.morphToCircle = function (radius, duration, easing) {
        var points = this.morphable.points;
        var commonBBox = this.sortPoints(points);
        this._morphFromPointsReal = [];
        this._morphToPointsReal = [];
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](duration)) {
            duration = this.morphDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](easing)) {
            easing = this.morphEasing;
        }
        // surface
        for (var i = 0; i < points.length; i++) {
            var surface = points[i][0];
            var hole = points[i][1];
            this._morphFromPointsReal[i] = [];
            this._morphToPointsReal[i] = [];
            if (surface) {
                var toPoints = surface;
                var fromPoints = surface;
                var bbox = __WEBPACK_IMPORTED_MODULE_5__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_3__utils_Math__["getBBox"](fromPoints)); // this._bboxes[i];
                if (this.morphToSingle) {
                    bbox = __WEBPACK_IMPORTED_MODULE_5__utils_Type__["getValue"](commonBBox);
                }
                var middleX = bbox.x + bbox.width / 2;
                var middleY = bbox.y + bbox.height / 2;
                var realRadius = radius;
                if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](realRadius)) {
                    realRadius = Math.min(bbox.width / 2, bbox.height / 2);
                }
                toPoints = [];
                // find angle for the first point
                var startAngle = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getAngle"]({ x: middleX, y: middleY }, surface[0]);
                var count = 100;
                if (surface.length > count) {
                    count = surface.length;
                }
                fromPoints = this.addPoints(surface, count);
                count = fromPoints.length; // add Points might increase number a bit
                var angle = 360 / (count - 1);
                for (var a = 0; a < count; a++) {
                    var realAngle = angle * a + startAngle;
                    var pointOnCircle = { x: middleX + realRadius * __WEBPACK_IMPORTED_MODULE_3__utils_Math__["cos"](realAngle), y: middleY + realRadius * __WEBPACK_IMPORTED_MODULE_3__utils_Math__["sin"](realAngle) };
                    toPoints[a] = pointOnCircle;
                }
                if (hole && hole.length > 0) {
                    for (var i_1 = 0; i_1 < hole.length; i_1++) {
                        toPoints.push({ x: middleX, y: middleY });
                    }
                }
                this._morphFromPointsReal[i][0] = fromPoints;
                this._morphToPointsReal[i][0] = toPoints;
            }
        }
        this.morphable.currentPoints = this._morphFromPointsReal;
        var animation = new __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["a" /* Animation */](this, { property: "morphProgress", from: 0, to: 1 }, duration, easing);
        this._disposers.push(animation);
        animation.start();
        return animation;
    };
    /**
     * [addPoints description]
     *
     * @ignore Exclude from doc
     * @todo Description
     * @param  {IPoint[]}  points         [description]
     * @param  {number}    mustHaveCount  [description]
     * @return {IPoint[]}                 [description]
     */
    Morpher.prototype.addPoints = function (points, mustHaveCount) {
        var addToSegmentCount = Math.round(mustHaveCount / points.length);
        var newPoints = [];
        for (var i = 0; i < points.length; i++) {
            var point0 = points[i];
            var point1 = void 0;
            if (i == points.length - 1) {
                point1 = points[0];
            }
            else {
                point1 = points[i + 1];
            }
            newPoints.push(point0);
            for (var p = 1; p < addToSegmentCount; p++) {
                var percent = p / addToSegmentCount;
                var extraPoint = { x: point0.x + (point1.x - point0.x) * percent, y: point0.y + (point1.y - point0.y) * percent };
                newPoints.push(extraPoint);
            }
            // stop adding in case we already added more than left in original
            if (newPoints.length + points.length - i == mustHaveCount) {
                addToSegmentCount = 0;
            }
        }
        if (newPoints.length < mustHaveCount && points.length > 0) {
            var lastPoint = points[points.length - 1];
            for (var p = newPoints.length; p < mustHaveCount; p++) {
                // add same as last
                newPoints.push({ x: lastPoint.x, y: lastPoint.y });
            }
        }
        return newPoints;
    };
    /**
     * Morphs shape into a rectangle.
     *
     * @param  {number}              width     Width of the target rectangle (px)
     * @param  {number}              height    Height of the target rectangle (px)
     * @param  {number}              duration  Duration (ms)
     * @param  {(number) => number}  easing    Easing function
     * @return {Animation}                     Animation
     */
    Morpher.prototype.morphToRectangle = function (width, height, duration, easing) {
        var points = this.morphable.points;
        this.sortPoints(points);
        this._morphFromPointsReal = [];
        this._morphToPointsReal = [];
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](duration)) {
            duration = this.morphDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](easing)) {
            easing = this.morphEasing;
        }
        //		let biggestBBox: IRectangle = this._bboxes[this._biggestIndex];
        // surface
        for (var i = 0; i < points.length; i++) {
            var surface = points[i][0];
            var hole = points[i][1];
            this._morphFromPointsReal[i] = [];
            this._morphToPointsReal[i] = [];
            if (surface) {
                var toPoints = surface;
                var fromPoints = surface;
                var bbox = this._bboxes[i];
                // we only work with first area. TODO: maybe we should find the biggest one?
                if (this.morphToSingle) {
                    //if (i != this._biggestIndex) {
                    //	bbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };
                    //}
                }
                var x = bbox.x;
                var y = bbox.y;
                var realWidth = width;
                var realHeight = height;
                if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](realWidth)) {
                    realWidth = bbox.width;
                }
                if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](realHeight)) {
                    realHeight = bbox.height;
                }
                toPoints = [{ x: x, y: y }, { x: x + realWidth, y: y }, { x: x + realWidth, y: y + realHeight }, { x: x, y: y + realHeight }];
                toPoints = this.addPoints(toPoints, surface.length);
                // if polygon has less points then count, add
                if (surface.length < 4) {
                    for (var i_2 = surface.length; i_2 < 4; i_2++) {
                        toPoints.push({ x: surface[i_2].x, y: surface[i_2].y });
                    }
                }
                if (hole && hole.length > 0) {
                    var middleX = bbox.x + bbox.width / 2;
                    var middleY = bbox.y + bbox.height / 2;
                    for (var i_3 = 0; i_3 < hole.length; i_3++) {
                        toPoints.push({ x: middleX, y: middleY });
                    }
                }
                this._morphFromPointsReal[i][0] = fromPoints;
                this._morphToPointsReal[i][0] = toPoints;
            }
        }
        this.morphable.currentPoints = this._morphFromPointsReal;
        var animation = new __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["a" /* Animation */](this, { property: "morphProgress", from: 0, to: 1 }, duration, easing);
        this._disposers.push(animation);
        animation.start();
        return animation;
    };
    Object.defineProperty(Morpher.prototype, "morphProgress", {
        /**
         * Returns the progress of morph transition.
         *
         * @return {Optional<number>} Progress (0-1)
         */
        get: function () {
            return this._morphProgress;
        },
        /**
         * Progress of the morph transition.
         *
         * Setting this will also trigger actual transformation.
         *
         * @param {number}  value  Progress (0-1)
         */
        set: function (value) {
            this._morphProgress = value;
            var currentPoints = [];
            if (value != null) {
                var fromPoints = this._morphFromPointsReal;
                var toPoints = this._morphToPointsReal;
                if (fromPoints != null && toPoints != null) {
                    for (var i = 0; i < fromPoints.length; i++) {
                        var currentArea = [];
                        currentPoints.push(currentArea);
                        var surfaceFrom = fromPoints[i][0];
                        var holeFrom = fromPoints[i][1];
                        var surfaceTo = toPoints[i][0];
                        var holeTo = toPoints[i][1];
                        if (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {
                            var currentSurface = [];
                            for (var i_4 = 0; i_4 < surfaceFrom.length; i_4++) {
                                var point0 = surfaceFrom[i_4];
                                var point1 = surfaceTo[i_4];
                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };
                                currentSurface.push(currentPoint);
                            }
                            currentArea[0] = currentSurface;
                        }
                        if (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {
                            var currentHole = [];
                            for (var i_5 = 0; i_5 < holeFrom.length; i_5++) {
                                var point0 = holeFrom[i_5];
                                var point1 = holeTo[i_5];
                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };
                                currentHole.push(currentPoint);
                            }
                            currentArea[1] = currentHole;
                        }
                    }
                }
            }
            this.morphable.currentPoints = currentPoints;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Restores the shape to its original appearance.
     *
     * @param {number}              duration  Duration (ms)
     * @param {(number) => number}  easing    Easing function
     * @return {Animation}                    Animation
     */
    Morpher.prototype.morphBack = function (duration, easing) {
        this._morphToPointsReal = this._morphFromPointsReal;
        this._morphFromPointsReal = this.morphable.currentPoints;
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](duration)) {
            duration = this.morphDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](easing)) {
            easing = this.morphEasing;
        }
        var animation = new __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["a" /* Animation */](this, { property: "morphProgress", from: 0, to: 1 }, duration, easing);
        this._disposers.push(animation);
        animation.start();
        return animation;
    };
    Object.defineProperty(Morpher.prototype, "animations", {
        /**
         * Returns a list of morph animations currently being played.
         *
         * @return {Array<Animation>} List of animations
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["c" /* MultiDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    return Morpher;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Morpher.js.map

/***/ }),
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AmChartsLogo; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Polyspline__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Color__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_fills_LinearGradient__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DesaturateFilter__ = __webpack_require__(147);
/**
 * AmChartsLogo module.
 *
 * AmChartsLogo shows amCharts logo for non-commercial users of a library.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A class used to draw and display progress indicator.
 *
 * @see {@link IAmChartsLogoEvents} for a list of available events
 * @see {@link IAmChartsLogoAdapters} for a list of available Adapters
 */
var AmChartsLogo = /** @class */ (function (_super) {
    __extends(AmChartsLogo, _super);
    /**
     * Constructor
     */
    function AmChartsLogo() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "AmChartsLogo";
        //this.isMeasured = false;
        _this.valign = "bottom";
        var d = 0.3;
        _this.opacity = 0.3;
        _this.defaultState.properties.opacity = 0.4;
        _this.url = "http://www.amcharts.com";
        _this.showSystemTooltip = true;
        _this.readerTitle = "chart created using amCharts library";
        _this.width = 220 * d;
        _this.height = 70 * d;
        _this.background.opacity = 0;
        var aColor = Object(__WEBPACK_IMPORTED_MODULE_3__utils_Color__["c" /* color */])("#474758");
        if (new __WEBPACK_IMPORTED_MODULE_1__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("background").alternative.hex == "#ffffff") {
            aColor = Object(__WEBPACK_IMPORTED_MODULE_3__utils_Color__["c" /* color */])("#ffffff");
        }
        var aGradient = new __WEBPACK_IMPORTED_MODULE_4__rendering_fills_LinearGradient__["a" /* LinearGradient */]();
        aGradient.addColor(aColor);
        aGradient.addColor(aColor, 1, 0.75);
        aGradient.addColor(Object(__WEBPACK_IMPORTED_MODULE_3__utils_Color__["c" /* color */])("#3cabff"), 1, 0.755);
        aGradient.rotation = -10;
        var aStroke = aGradient;
        var m = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__Polyspline__["a" /* Polyspline */]);
        m.shouldClone = false;
        m.isMeasured = false;
        m.segments = [[{ x: 50 * d, y: 50 * d }, { x: 90 * d, y: 50 * d }, { x: 120 * d, y: 20 * d }, { x: 135 * d, y: 35 * d }, { x: 150 * d, y: 20 * d }, { x: 180 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]];
        m.strokeWidth = 6 * d;
        m.tensionX = 0.8;
        m.tensionY = 1;
        m.stroke = Object(__WEBPACK_IMPORTED_MODULE_3__utils_Color__["c" /* color */])("#3cabff");
        var a = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__Polyspline__["a" /* Polyspline */]);
        a.shouldClone = false;
        a.isMeasured = false;
        a.segments = [[{ x: 20 * d, y: 50 * d }, { x: 50 * d, y: 50 * d }, { x: 90 * d, y: 12 * d }, { x: 133 * d, y: 50 * d }, { x: 170 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]];
        a.strokeWidth = 6 * d;
        a.tensionX = 0.75;
        a.tensionY = 1;
        a.stroke = aStroke;
        var desaturateFilter = new __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DesaturateFilter__["a" /* DesaturateFilter */]();
        _this.filters.push(desaturateFilter);
        var desaturateFilterHover = new __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DesaturateFilter__["a" /* DesaturateFilter */]();
        desaturateFilterHover.saturation = 1;
        var hoverState = _this.states.create("hover");
        hoverState.properties.opacity = 1;
        hoverState.filters.push(desaturateFilterHover);
        // temp
        _this.scale = 0.001;
        return _this;
    }
    return AmChartsLogo;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=AmChartsLogo.js.map

/***/ }),
/* 299 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_DOM__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(10);



var rules = new __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["a" /* Dictionary */]();
/**
 * Default CSS for Modal.
 *
 * @ignore Exclude from docs
 * @param  {string}     prefix  Prefix for CSS classes
 * @return {IDisposer}          Disposer for the CSS definition
 */
/* harmony default export */ __webpack_exports__["a"] = (function (prefix) {
    if (!prefix) {
        prefix = "ammodal";
    }
    var counter = rules.insertKeyIfEmpty(prefix, function () {
        var disposer = new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["c" /* MultiDisposer */]([
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix, {
                "width": "100%",
                "height": "100%",
                "overflow": "auto",
                "position": "absolute",
                "top": "0",
                "left": "0",
                "z-index": "2000"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-curtain", {
                "width": "100%",
                "height": "100%",
                "position": "absolute",
                "top": "0",
                "left": "0",
                "z-index": "2001",
                "background": "#fff",
                "opacity": "0.5"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-content", {
                "padding": "1em 2em",
                "background": "rgb(255, 255, 255);",
                "background-color": "rgba(255, 255, 255, 0.8)",
                "display": "inline-block",
                "position": "absolute",
                "max-width": "90%",
                "max-height": "90%",
                "overflow": "auto",
                "z-index": "2002"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-close", {
                "display": "block",
                "position": "absolute",
                "top": "0.3em",
                "right": "0.3em",
                "background-color": "rgb(100, 100, 100)",
                "background": "rgba(100, 100, 100, 0.1) url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyBoZWlnaHQ9IjUxMiIgdmVyc2lvbj0iMSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIHdpZHRoPSI1MTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTQ0NS4yIDEwOS4ybC00Mi40LTQyLjRMMjU2IDIxMy42IDEwOS4yIDY2LjhsLTQyLjQgNDIuNEwyMTMuNiAyNTYgNjYuOCA0MDIuOGw0Mi40IDQyLjRMMjU2IDI5OC40bDE0Ni44IDE0Ni44IDQyLjQtNDIuNEwyOTguNCAyNTYiLz48L3N2Zz4=) no-repeat center",
                "background-size": "80%",
                "width": "1.2em",
                "height": "1.2em",
                "cursor": "pointer"
            }),
        ]);
        return new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["a" /* CounterDisposer */](function () {
            rules.removeKey(prefix);
            disposer.dispose();
        });
    });
    return counter.increment();
});
//# sourceMappingURL=ModalCSS.js.map

/***/ }),
/* 300 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Translation file
 * Locale: en (default international English)
 *
 * Use this file as a template to create translations. Leave the key part in
 * English intact. Fill the value with a translation.
 *
 * Save the file as language_LOCALE, i.e. en_GB, fr_FR, etc.
 * @type {ILocale}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
    // number formatter related
    "_decimalSeparator": ".",
    "_thousandSeparator": ",",
    // Default date formats for various periods
    "_date_millisecond": "mm:ss SSS",
    "_date_second": "HH:mm:ss a",
    "_date_minute": "HH:mm",
    "_date_hour": "HH:mm",
    "_date_day": "MMM dd",
    "_date_week": "ww",
    "_date_month": "MMM",
    "_date_year": "yyyy",
    // Default duration formats for various base units
    "_duration_millisecond": "SSS",
    "_duration_second": "ss",
    "_duration_minute": "mm",
    "_duration_hour": "hh",
    "_duration_day": "dd",
    "_duration_week": "ww",
    "_duration_month": "MM",
    "_duration_year": "yyyy",
    // Era
    "_era_ad": "AD",
    "_era_bc": "BC",
    // Period
    "A": "",
    "P": "",
    "AM": "",
    "PM": "",
    "A.M.": "",
    "P.M.": "",
    // Dates
    "January": "",
    "February": "",
    "March": "",
    "April": "",
    "May": "",
    "June": "",
    "July": "",
    "August": "",
    "September": "",
    "October": "",
    "November": "",
    "December": "",
    "Jan": "",
    "Feb": "",
    "Mar": "",
    "Apr": "",
    "May(short)": "May",
    "Jun": "",
    "Jul": "",
    "Aug": "",
    "Sep": "",
    "Oct": "",
    "Nov": "",
    "Dec": "",
    "Sunday": "",
    "Monday": "",
    "Tuesday": "",
    "Wednesday": "",
    "Thursday": "",
    "Friday": "",
    "Saturday": "",
    "Sun": "",
    "Mon": "",
    "Tue": "",
    "Wed": "",
    "Thu": "",
    "Fri": "",
    "Sat": "",
    // ordinal function
    "_dateOrd": function (day) {
        var res = "th";
        if ((day < 11) || (day > 13)) {
            switch (day % 10) {
                case 1:
                    res = "st";
                    break;
                case 2:
                    res = "nd";
                    break;
                case 3:
                    res = "rd";
                    break;
            }
        }
        return res;
    },
    // Chart elements
    "Zoom Out": "",
    "Play": "",
    "Stop": "",
    "Legend": "",
    "Click, tap or press ENTER to toggle": "",
    "Loading": "",
    "Home": "",
    // Chart types
    "Chart": "",
    "Serial chart": "",
    "X/Y chart": "",
    "Pie chart": "",
    "Gauge chart": "",
    "Radar chart": "",
    "Sankey diagram": "",
    "TreeMap chart": "",
    // Series types
    "Series": "",
    "Candlestick Series": "",
    "Column Series": "",
    "Line Series": "",
    "Pie Slice Series": "",
    "X/Y Series": "",
    // Map-related
    "Map": "",
    "Press ENTER to zoom in": "",
    "Press ENTER to zoom out": "",
    "Use arrow keys to zoom in and out": "",
    "Use plus and minus keys on your keyboard to zoom in and out": "",
    // Export-related
    "Export": "",
    "Image": "",
    "Data": "",
    "Print": "",
    "Click, tap or press ENTER to open": "",
    "Click, tap or press ENTER to print.": "",
    "Click, tap or press ENTER to export as %1.": "",
    'To save the image, right-click this link and choose "Save picture as..."': "",
    'To save the image, right-click thumbnail on the left and choose "Save picture as..."': "",
    "(Press ESC to close this message)": "",
    "Image Export Complete": "",
    "Export operation took longer than expected. Something might have gone wrong.": "",
    "Saved from": "",
    "PNG": "",
    "JPG": "",
    "GIF": "",
    "SVG": "",
    "PDF": "",
    "JSON": "",
    "CSV": "",
    "XLSX": "",
    // Scrollbar-related
    "Use TAB to select grip buttons or left and right arrows to change selection": "",
    "Use left and right arrows to move selection": "",
    "Use left and right arrows to move left selection": "",
    "Use left and right arrows to move right selection": "",
    "Use TAB select grip buttons or up and down arrows to change selection": "",
    "Use up and down arrows to move selection": "",
    "Use up and down arrows to move lower selection": "",
    "Use up and down arrows to move upper selection": "",
    "From %1 to %2": "",
    "From %1": "",
    "To %1": "",
    // Data loader-related
    "No parser available for file: %1": "",
    "Error parsing file: %1": "",
    "Unable to load file: %1": "",
    "Invalid date": "",
});
//# sourceMappingURL=en.js.map

/***/ }),
/* 301 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_DOM__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Dictionary__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__ = __webpack_require__(10);




var rules = new __WEBPACK_IMPORTED_MODULE_2__utils_Dictionary__["a" /* Dictionary */]();
/**
 * A dynamically-loadable CSS module for Export menu.
 *
 * @ignore Exclude from docs
 * @param  {string}     prefix  Prefix to addtach to class names
 * @return {IDisposer}          A MultiDisposer with style rules
 */
/* harmony default export */ __webpack_exports__["a"] = (function (prefix) {
    if (!prefix) {
        prefix = "amexport";
    }
    var colorSet = new __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
    var counter = rules.insertKeyIfEmpty(prefix, function () {
        var disposer = new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["c" /* MultiDisposer */]([
            /*new StyleRule(`.${prefix}-menu`, {
                "opacity": "0.3",
                "transition": "all 100ms ease-in-out",
            }),

            new StyleRule(`div:hover .${prefix}-menu, .${prefix}-menu.active`, {
                "opacity": "0.9",
            }),*/
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-menu-level-0", {
                "position": "absolute",
                "top": "5px",
                "right": "5px",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-menu-level-0." + prefix + "-left", {
                "right": "auto",
                "left": "5px",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-menu-level-0." + prefix + "-right", {
                "right": "5px",
                "left": "auto",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-menu-level-0." + prefix + "-top", {
                "top": "5px",
                "bottom": "auto",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-menu-level-0." + prefix + "-bottom", {
                "top": "auto",
                "bottom": "5px",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-item." + prefix + "-item-level-0", {
                "opacity": "0.3",
                "width": "30px",
                "height": "30px",
                "transition": "all 100ms ease-in-out",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("div:hover ." + prefix + "-item." + prefix + "-item-level-0, ." + prefix + "-item." + prefix + "-item-level-0.active", {
                "opacity": "0.9",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-item." + prefix + "-item-level-0 > a", {
                "padding": "0",
                "text-align": "center"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-item." + prefix + "-item-level-0:before", {
                "display": "block",
                "content": "..."
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-item", {
                "position": "relative",
                "display": "block",
                "opacity": "0",
                "z-index": "1",
                "border-radius": "3px",
                "background-color": colorSet.getFor("secondaryButton").hex,
                "padding": "0",
                "margin": "1px 1px 0 0",
                "color": colorSet.getFor("secondaryButton").alternative.hex,
                "transition": "all 100ms ease-in-out, opacity 0.5s ease 0.5s",
                "width": "initial",
                "height": "initial",
                "text-indent": "initial",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-left ." + prefix + "-item", {
                "margin": "1px 0 0 1px",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-item:hover, ." + prefix + "-item.active", {
                "background": colorSet.getFor("secondaryButtonHover").hex,
                "color": colorSet.getFor("secondaryButtonText").hex,
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-item > ." + prefix + "-menu", {
                "position": "absolute",
                "top": "-1px",
                "right": "0",
                "margin-right": "100%",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-left ." + prefix + "-item > ." + prefix + "-menu", {
                "left": "0",
                "right": "auto",
                "margin-left": "100%",
                "margin-right": "auto",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-right ." + prefix + "-item > ." + prefix + "-menu", {
                "left": "auto",
                "right": "0",
                "margin-left": "auto",
                "margin-right": "100%",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-top ." + prefix + "-item > ." + prefix + "-menu", {
                "top": "-1px",
                "bottom": "auto",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-bottom ." + prefix + "-item > ." + prefix + "-menu", {
                "top": "auto",
                "bottom": "0",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-item > ." + prefix + "-menu", {
                "display": "none",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-item:hover > ." + prefix + "-menu, ." + prefix + "-item.active > ." + prefix + "-menu", {
                "display": "block",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-item:hover > ." + prefix + "-menu > ." + prefix + "-item, ." + prefix + "-item.active > ." + prefix + "-menu > ." + prefix + "-item", {
                "opacity": "1",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-menu", {
                "display": "block",
                "list-style": "none",
                "margin": "0",
                "padding": "0",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-label", {
                "display": "block",
                "cursor": "default",
                "padding": "0.5em 1em",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["b" /* StyleRule */]("." + prefix + "-clickable", {
                "cursor": "pointer",
            }),
        ]);
        return new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["a" /* CounterDisposer */](function () {
            rules.removeKey(prefix);
            disposer.dispose();
        });
    });
    return counter.increment();
});
//# sourceMappingURL=ExportCSS.js.map

/***/ }),
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(317);
module.exports = __webpack_require__(514);


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(318);
__webpack_require__(320);
__webpack_require__(321);
__webpack_require__(322);
__webpack_require__(323);
__webpack_require__(324);
__webpack_require__(325);
__webpack_require__(326);
__webpack_require__(327);
__webpack_require__(328);
__webpack_require__(329);
__webpack_require__(330);
__webpack_require__(331);
__webpack_require__(332);
__webpack_require__(333);
__webpack_require__(334);
__webpack_require__(336);
__webpack_require__(337);
__webpack_require__(338);
__webpack_require__(339);
__webpack_require__(340);
__webpack_require__(341);
__webpack_require__(342);
__webpack_require__(343);
__webpack_require__(344);
__webpack_require__(345);
__webpack_require__(346);
__webpack_require__(347);
__webpack_require__(348);
__webpack_require__(349);
__webpack_require__(350);
__webpack_require__(351);
__webpack_require__(352);
__webpack_require__(353);
__webpack_require__(354);
__webpack_require__(355);
__webpack_require__(356);
__webpack_require__(357);
__webpack_require__(358);
__webpack_require__(359);
__webpack_require__(360);
__webpack_require__(361);
__webpack_require__(362);
__webpack_require__(363);
__webpack_require__(364);
__webpack_require__(365);
__webpack_require__(366);
__webpack_require__(367);
__webpack_require__(368);
__webpack_require__(369);
__webpack_require__(370);
__webpack_require__(371);
__webpack_require__(372);
__webpack_require__(373);
__webpack_require__(374);
__webpack_require__(375);
__webpack_require__(376);
__webpack_require__(377);
__webpack_require__(378);
__webpack_require__(379);
__webpack_require__(380);
__webpack_require__(381);
__webpack_require__(382);
__webpack_require__(383);
__webpack_require__(384);
__webpack_require__(385);
__webpack_require__(386);
__webpack_require__(387);
__webpack_require__(388);
__webpack_require__(389);
__webpack_require__(390);
__webpack_require__(391);
__webpack_require__(392);
__webpack_require__(393);
__webpack_require__(394);
__webpack_require__(395);
__webpack_require__(396);
__webpack_require__(398);
__webpack_require__(399);
__webpack_require__(401);
__webpack_require__(402);
__webpack_require__(403);
__webpack_require__(404);
__webpack_require__(405);
__webpack_require__(406);
__webpack_require__(407);
__webpack_require__(409);
__webpack_require__(410);
__webpack_require__(411);
__webpack_require__(412);
__webpack_require__(413);
__webpack_require__(414);
__webpack_require__(415);
__webpack_require__(416);
__webpack_require__(417);
__webpack_require__(418);
__webpack_require__(419);
__webpack_require__(420);
__webpack_require__(421);
__webpack_require__(185);
__webpack_require__(422);
__webpack_require__(423);
__webpack_require__(272);
__webpack_require__(424);
__webpack_require__(425);
__webpack_require__(426);
__webpack_require__(427);
__webpack_require__(428);
__webpack_require__(275);
__webpack_require__(277);
__webpack_require__(278);
__webpack_require__(429);
__webpack_require__(430);
__webpack_require__(431);
__webpack_require__(432);
__webpack_require__(433);
__webpack_require__(434);
__webpack_require__(435);
__webpack_require__(436);
__webpack_require__(437);
__webpack_require__(438);
__webpack_require__(439);
__webpack_require__(440);
__webpack_require__(441);
__webpack_require__(442);
__webpack_require__(443);
__webpack_require__(444);
__webpack_require__(445);
__webpack_require__(446);
__webpack_require__(447);
__webpack_require__(448);
__webpack_require__(449);
__webpack_require__(450);
__webpack_require__(451);
__webpack_require__(452);
__webpack_require__(453);
__webpack_require__(454);
__webpack_require__(455);
__webpack_require__(456);
__webpack_require__(457);
__webpack_require__(458);
__webpack_require__(459);
__webpack_require__(460);
__webpack_require__(461);
__webpack_require__(462);
__webpack_require__(463);
__webpack_require__(464);
__webpack_require__(465);
__webpack_require__(466);
__webpack_require__(467);
__webpack_require__(468);
__webpack_require__(469);
__webpack_require__(470);
__webpack_require__(471);
__webpack_require__(472);
__webpack_require__(473);
__webpack_require__(474);
__webpack_require__(475);
__webpack_require__(476);
__webpack_require__(477);
__webpack_require__(478);
__webpack_require__(479);
__webpack_require__(480);
__webpack_require__(481);
__webpack_require__(482);
__webpack_require__(483);
__webpack_require__(484);
__webpack_require__(485);
__webpack_require__(486);
__webpack_require__(487);
__webpack_require__(488);
__webpack_require__(489);
__webpack_require__(490);
__webpack_require__(491);
__webpack_require__(492);
__webpack_require__(493);
__webpack_require__(494);
__webpack_require__(495);
__webpack_require__(496);
__webpack_require__(497);
__webpack_require__(498);
__webpack_require__(499);
__webpack_require__(500);
__webpack_require__(501);
__webpack_require__(502);
__webpack_require__(503);
__webpack_require__(504);
__webpack_require__(505);
__webpack_require__(506);
__webpack_require__(507);
__webpack_require__(508);
__webpack_require__(509);
__webpack_require__(510);
__webpack_require__(511);
__webpack_require__(512);
__webpack_require__(513);
module.exports = __webpack_require__(52);


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(13);
var has = __webpack_require__(35);
var DESCRIPTORS = __webpack_require__(23);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(32);
var META = __webpack_require__(59).KEY;
var $fails = __webpack_require__(16);
var shared = __webpack_require__(123);
var setToStringTag = __webpack_require__(86);
var uid = __webpack_require__(66);
var wks = __webpack_require__(22);
var wksExt = __webpack_require__(255);
var wksDefine = __webpack_require__(165);
var enumKeys = __webpack_require__(319);
var isArray = __webpack_require__(126);
var anObject = __webpack_require__(9);
var isObject = __webpack_require__(17);
var toIObject = __webpack_require__(36);
var toPrimitive = __webpack_require__(46);
var createDesc = __webpack_require__(65);
var _create = __webpack_require__(70);
var gOPNExt = __webpack_require__(258);
var $GOPD = __webpack_require__(37);
var $DP = __webpack_require__(24);
var $keys = __webpack_require__(68);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(71).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(102).f = $propertyIsEnumerable;
  __webpack_require__(125).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(67)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(31)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(68);
var gOPS = __webpack_require__(125);
var pIE = __webpack_require__(102);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(70) });


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(23), 'Object', { defineProperty: __webpack_require__(24).f });


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(23), 'Object', { defineProperties: __webpack_require__(257) });


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(36);
var $getOwnPropertyDescriptor = __webpack_require__(37).f;

__webpack_require__(49)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(27);
var $getPrototypeOf = __webpack_require__(38);

__webpack_require__(49)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(27);
var $keys = __webpack_require__(68);

__webpack_require__(49)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(49)('getOwnPropertyNames', function () {
  return __webpack_require__(258).f;
});


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(17);
var meta = __webpack_require__(59).onFreeze;

__webpack_require__(49)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(17);
var meta = __webpack_require__(59).onFreeze;

__webpack_require__(49)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(17);
var meta = __webpack_require__(59).onFreeze;

__webpack_require__(49)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(17);

__webpack_require__(49)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(17);

__webpack_require__(49)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(17);

__webpack_require__(49)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(259) });


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { is: __webpack_require__(335) });


/***/ }),
/* 335 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(169).set });


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(103);
var test = {};
test[__webpack_require__(22)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(32)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(0);

$export($export.P, 'Function', { bind: __webpack_require__(260) });


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(24).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(23) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(17);
var getPrototypeOf = __webpack_require__(38);
var HAS_INSTANCE = __webpack_require__(22)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(24).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(262);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(263);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(13);
var has = __webpack_require__(35);
var cof = __webpack_require__(42);
var inheritIfRequired = __webpack_require__(171);
var toPrimitive = __webpack_require__(46);
var fails = __webpack_require__(16);
var gOPN = __webpack_require__(71).f;
var gOPD = __webpack_require__(37).f;
var dP = __webpack_require__(24).f;
var $trim = __webpack_require__(87).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(70)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(23) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(32)(global, NUMBER, $Number);
}


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toInteger = __webpack_require__(48);
var aNumberValue = __webpack_require__(264);
var repeat = __webpack_require__(172);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(16)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $fails = __webpack_require__(16);
var aNumberValue = __webpack_require__(264);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(0);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(0);
var _isFinite = __webpack_require__(13).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', { isInteger: __webpack_require__(265) });


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(0);
var isInteger = __webpack_require__(265);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(263);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(262);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(0);
var log1p = __webpack_require__(266);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(0);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(0);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(0);
var sign = __webpack_require__(173);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(0);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(0);
var $expm1 = __webpack_require__(174);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { fround: __webpack_require__(267) });


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(0);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(0);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(16)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { log1p: __webpack_require__(266) });


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { sign: __webpack_require__(173) });


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(174);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(16)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(174);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toAbsoluteIndex = __webpack_require__(69);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(36);
var toLength = __webpack_require__(25);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(87)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(175)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(176)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $at = __webpack_require__(175)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(25);
var context = __webpack_require__(178);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(179)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(0);
var context = __webpack_require__(178);
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(179)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(172)
});


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(25);
var context = __webpack_require__(178);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(179)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(33)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(33)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(33)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(33)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(33)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(33)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(33)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(33)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(33)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(33)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(33)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(33)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(33)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(0);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(27);
var toPrimitive = __webpack_require__(46);

$export($export.P + $export.F * __webpack_require__(16)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(0);
var toISOString = __webpack_require__(397);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(16);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(32)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(22)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(31)(proto, TO_PRIMITIVE, __webpack_require__(400));


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(9);
var toPrimitive = __webpack_require__(46);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(0);

$export($export.S, 'Array', { isArray: __webpack_require__(126) });


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(41);
var $export = __webpack_require__(0);
var toObject = __webpack_require__(27);
var call = __webpack_require__(268);
var isArrayIter = __webpack_require__(180);
var toLength = __webpack_require__(25);
var createProperty = __webpack_require__(181);
var getIterFn = __webpack_require__(182);

$export($export.S + $export.F * !__webpack_require__(128)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var createProperty = __webpack_require__(181);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(16)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(0);
var toIObject = __webpack_require__(36);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(101) != Object || !__webpack_require__(43)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var html = __webpack_require__(168);
var cof = __webpack_require__(42);
var toAbsoluteIndex = __webpack_require__(69);
var toLength = __webpack_require__(25);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(16)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var aFunction = __webpack_require__(29);
var toObject = __webpack_require__(27);
var fails = __webpack_require__(16);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(43)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $forEach = __webpack_require__(50)(0);
var STRICT = __webpack_require__(43)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(17);
var isArray = __webpack_require__(126);
var SPECIES = __webpack_require__(22)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $map = __webpack_require__(50)(1);

$export($export.P + $export.F * !__webpack_require__(43)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $filter = __webpack_require__(50)(2);

$export($export.P + $export.F * !__webpack_require__(43)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $some = __webpack_require__(50)(3);

$export($export.P + $export.F * !__webpack_require__(43)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $every = __webpack_require__(50)(4);

$export($export.P + $export.F * !__webpack_require__(43)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(269);

$export($export.P + $export.F * !__webpack_require__(43)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(269);

$export($export.P + $export.F * !__webpack_require__(43)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $indexOf = __webpack_require__(124)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(43)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(36);
var toInteger = __webpack_require__(48);
var toLength = __webpack_require__(25);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(43)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { copyWithin: __webpack_require__(270) });

__webpack_require__(60)('copyWithin');


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { fill: __webpack_require__(184) });

__webpack_require__(60)('fill');


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(50)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(60)(KEY);


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(50)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(60)(KEY);


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(72)('Array');


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(13);
var inheritIfRequired = __webpack_require__(171);
var dP = __webpack_require__(24).f;
var gOPN = __webpack_require__(71).f;
var isRegExp = __webpack_require__(127);
var $flags = __webpack_require__(129);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(23) && (!CORRECT_NEW || __webpack_require__(16)(function () {
  re2[__webpack_require__(22)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(32)(global, 'RegExp', $RegExp);
}

__webpack_require__(72)('RegExp');


/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(272);
var anObject = __webpack_require__(9);
var $flags = __webpack_require__(129);
var DESCRIPTORS = __webpack_require__(23);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(32)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(16)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

// @@match logic
__webpack_require__(130)('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

// @@replace logic
__webpack_require__(130)('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});


/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

// @@search logic
__webpack_require__(130)('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});


/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

// @@split logic
__webpack_require__(130)('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = __webpack_require__(127);
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});


/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(67);
var global = __webpack_require__(13);
var ctx = __webpack_require__(41);
var classof = __webpack_require__(103);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(17);
var aFunction = __webpack_require__(29);
var anInstance = __webpack_require__(73);
var forOf = __webpack_require__(74);
var speciesConstructor = __webpack_require__(131);
var task = __webpack_require__(186).set;
var microtask = __webpack_require__(187)();
var newPromiseCapabilityModule = __webpack_require__(188);
var perform = __webpack_require__(273);
var promiseResolve = __webpack_require__(274);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(22)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(75)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(86)($Promise, PROMISE);
__webpack_require__(72)(PROMISE);
Wrapper = __webpack_require__(52)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(128)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(279);
var validate = __webpack_require__(89);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(132)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $typed = __webpack_require__(133);
var buffer = __webpack_require__(189);
var anObject = __webpack_require__(9);
var toAbsoluteIndex = __webpack_require__(69);
var toLength = __webpack_require__(25);
var isObject = __webpack_require__(17);
var ArrayBuffer = __webpack_require__(13).ArrayBuffer;
var speciesConstructor = __webpack_require__(131);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(16)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var final = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < final) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(72)(ARRAY_BUFFER);


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
$export($export.G + $export.W + $export.F * !__webpack_require__(133).ABV, {
  DataView: __webpack_require__(189).DataView
});


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(29);
var anObject = __webpack_require__(9);
var rApply = (__webpack_require__(13).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(16)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(0);
var create = __webpack_require__(70);
var aFunction = __webpack_require__(29);
var anObject = __webpack_require__(9);
var isObject = __webpack_require__(17);
var fails = __webpack_require__(16);
var bind = __webpack_require__(260);
var rConstruct = (__webpack_require__(13).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(24);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(9);
var toPrimitive = __webpack_require__(46);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(16)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(0);
var gOPD = __webpack_require__(37).f;
var anObject = __webpack_require__(9);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(9);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(177)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(37);
var getPrototypeOf = __webpack_require__(38);
var has = __webpack_require__(35);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(17);
var anObject = __webpack_require__(9);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(37);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(9);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(0);
var getProto = __webpack_require__(38);
var anObject = __webpack_require__(9);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(9);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(281) });


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(9);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(24);
var gOPD = __webpack_require__(37);
var getPrototypeOf = __webpack_require__(38);
var has = __webpack_require__(35);
var $export = __webpack_require__(0);
var createDesc = __webpack_require__(65);
var anObject = __webpack_require__(9);
var isObject = __webpack_require__(17);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(0);
var setProto = __webpack_require__(169);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(0);
var $includes = __webpack_require__(124)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(60)('includes');


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(0);
var flattenIntoArray = __webpack_require__(282);
var toObject = __webpack_require__(27);
var toLength = __webpack_require__(25);
var aFunction = __webpack_require__(29);
var arraySpeciesCreate = __webpack_require__(183);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(60)('flatMap');


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = __webpack_require__(0);
var flattenIntoArray = __webpack_require__(282);
var toObject = __webpack_require__(27);
var toLength = __webpack_require__(25);
var toInteger = __webpack_require__(48);
var arraySpeciesCreate = __webpack_require__(183);

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(60)('flatten');


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(0);
var $at = __webpack_require__(175)(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(283);
var userAgent = __webpack_require__(190);

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(283);
var userAgent = __webpack_require__(190);

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(87)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(87)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export = __webpack_require__(0);
var defined = __webpack_require__(47);
var toLength = __webpack_require__(25);
var isRegExp = __webpack_require__(127);
var getFlags = __webpack_require__(129);
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(177)($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(165)('asyncIterator');


/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(165)('observable');


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(0);
var ownKeys = __webpack_require__(281);
var toIObject = __webpack_require__(36);
var gOPD = __webpack_require__(37);
var createProperty = __webpack_require__(181);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $values = __webpack_require__(284)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $entries = __webpack_require__(284)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(27);
var aFunction = __webpack_require__(29);
var $defineProperty = __webpack_require__(24);

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(23) && $export($export.P + __webpack_require__(134), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(27);
var aFunction = __webpack_require__(29);
var $defineProperty = __webpack_require__(24);

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(23) && $export($export.P + __webpack_require__(134), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(27);
var toPrimitive = __webpack_require__(46);
var getPrototypeOf = __webpack_require__(38);
var getOwnPropertyDescriptor = __webpack_require__(37).f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(23) && $export($export.P + __webpack_require__(134), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(27);
var toPrimitive = __webpack_require__(46);
var getPrototypeOf = __webpack_require__(38);
var getOwnPropertyDescriptor = __webpack_require__(37).f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(23) && $export($export.P + __webpack_require__(134), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(0);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(285)('Map') });


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(0);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(285)('Set') });


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(135)('Map');


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(135)('Set');


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(135)('WeakMap');


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(135)('WeakSet');


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(136)('Map');


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(136)('Set');


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(136)('WeakMap');


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(136)('WeakSet');


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(0);

$export($export.G, { global: __webpack_require__(13) });


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(0);

$export($export.S, 'System', { global: __webpack_require__(13) });


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(0);
var cof = __webpack_require__(42);

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var scale = __webpack_require__(287);
var fround = __webpack_require__(267);

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { scale: __webpack_require__(287) });


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(0);

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(0);
var core = __webpack_require__(52);
var global = __webpack_require__(13);
var speciesConstructor = __webpack_require__(131);
var promiseResolve = __webpack_require__(274);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(0);
var newPromiseCapability = __webpack_require__(188);
var perform = __webpack_require__(273);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(54);
var anObject = __webpack_require__(9);
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(54);
var anObject = __webpack_require__(9);
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(54);
var anObject = __webpack_require__(9);
var getPrototypeOf = __webpack_require__(38);
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(277);
var from = __webpack_require__(286);
var metadata = __webpack_require__(54);
var anObject = __webpack_require__(9);
var getPrototypeOf = __webpack_require__(38);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(54);
var anObject = __webpack_require__(9);
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(54);
var anObject = __webpack_require__(9);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(54);
var anObject = __webpack_require__(9);
var getPrototypeOf = __webpack_require__(38);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(54);
var anObject = __webpack_require__(9);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(54);
var anObject = __webpack_require__(9);
var aFunction = __webpack_require__(29);
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(0);
var microtask = __webpack_require__(187)();
var process = __webpack_require__(13).process;
var isNode = __webpack_require__(42)(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export = __webpack_require__(0);
var global = __webpack_require__(13);
var core = __webpack_require__(52);
var microtask = __webpack_require__(187)();
var OBSERVABLE = __webpack_require__(22)('observable');
var aFunction = __webpack_require__(29);
var anObject = __webpack_require__(9);
var anInstance = __webpack_require__(73);
var redefineAll = __webpack_require__(75);
var hide = __webpack_require__(31);
var forOf = __webpack_require__(74);
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

__webpack_require__(72)('Observable');


/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(13);
var $export = __webpack_require__(0);
var userAgent = __webpack_require__(190);
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $task = __webpack_require__(186);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(185);
var getKeys = __webpack_require__(68);
var redefine = __webpack_require__(32);
var global = __webpack_require__(13);
var hide = __webpack_require__(31);
var Iterators = __webpack_require__(88);
var wks = __webpack_require__(22);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),
/* 514 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__es2015_core__ = __webpack_require__(515);

window.amcharts4 = __WEBPACK_IMPORTED_MODULE_0__es2015_core__;

// TODO move all of this code into a different module and then import it
function getCurrentScript() {
	if (document.currentScript) {
		return document.currentScript;

	// Internet Explorer only
	} else {
		var scripts = document.getElementsByTagName("script");
		return scripts[scripts.length - 1];
	}
}

function dirpath(x) {
	return /(.*\/)[^\/]*$/.exec(x)[1];
}

__webpack_require__.p = dirpath(getCurrentScript().src);


/***/ }),
/* 515 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_core_System__ = __webpack_require__(21);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "System", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_core_System__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "system", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_core_System__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_core_Base__ = __webpack_require__(19);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BaseObject", function() { return __WEBPACK_IMPORTED_MODULE_1__internal_core_Base__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BaseObjectEvents", function() { return __WEBPACK_IMPORTED_MODULE_1__internal_core_Base__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_core_Component__ = __webpack_require__(57);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_core_Component__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_core_Container__ = __webpack_require__(6);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Container", function() { return __WEBPACK_IMPORTED_MODULE_3__internal_core_Container__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_core_DataItem__ = __webpack_require__(62);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DataItem", function() { return __WEBPACK_IMPORTED_MODULE_4__internal_core_DataItem__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal_core_Sprite__ = __webpack_require__(14);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Sprite", function() { return __WEBPACK_IMPORTED_MODULE_5__internal_core_Sprite__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_core_SpriteEvents__ = __webpack_require__(209);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SpriteEventDispatcher", function() { return __WEBPACK_IMPORTED_MODULE_6__internal_core_SpriteEvents__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__internal_core_SpriteState__ = __webpack_require__(108);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SpriteState", function() { return __WEBPACK_IMPORTED_MODULE_7__internal_core_SpriteState__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__internal_core_data_CSVParser__ = __webpack_require__(151);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CSVParser", function() { return __WEBPACK_IMPORTED_MODULE_8__internal_core_data_CSVParser__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__internal_core_data_DataLoader__ = __webpack_require__(220);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DataLoader", function() { return __WEBPACK_IMPORTED_MODULE_9__internal_core_data_DataLoader__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "dataLoader", function() { return __WEBPACK_IMPORTED_MODULE_9__internal_core_data_DataLoader__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__internal_core_data_DataParser__ = __webpack_require__(152);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DataParser", function() { return __WEBPACK_IMPORTED_MODULE_10__internal_core_data_DataParser__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__internal_core_data_DataSource__ = __webpack_require__(219);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DataSource", function() { return __WEBPACK_IMPORTED_MODULE_11__internal_core_data_DataSource__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__internal_core_data_JSONParser__ = __webpack_require__(153);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "JSONParser", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_core_data_JSONParser__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__internal_core_defs_SVGDefaults__ = __webpack_require__(203);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SVGDefaults", function() { return __WEBPACK_IMPORTED_MODULE_13__internal_core_defs_SVGDefaults__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__internal_core_elements_Button__ = __webpack_require__(78);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Button", function() { return __WEBPACK_IMPORTED_MODULE_14__internal_core_elements_Button__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__internal_core_elements_Circle__ = __webpack_require__(84);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Circle", function() { return __WEBPACK_IMPORTED_MODULE_15__internal_core_elements_Circle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__internal_core_elements_Ellipse__ = __webpack_require__(252);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Ellipse", function() { return __WEBPACK_IMPORTED_MODULE_16__internal_core_elements_Ellipse__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__internal_core_elements_Image__ = __webpack_require__(516);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Image", function() { return __WEBPACK_IMPORTED_MODULE_17__internal_core_elements_Image__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__internal_core_elements_Label__ = __webpack_require__(40);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Label", function() { return __WEBPACK_IMPORTED_MODULE_18__internal_core_elements_Label__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__internal_core_elements_Line__ = __webpack_require__(118);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Line", function() { return __WEBPACK_IMPORTED_MODULE_19__internal_core_elements_Line__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__internal_core_elements_Modal__ = __webpack_require__(148);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Modal", function() { return __WEBPACK_IMPORTED_MODULE_20__internal_core_elements_Modal__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__internal_core_elements_PointedRectangle__ = __webpack_require__(204);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PointedRectangle", function() { return __WEBPACK_IMPORTED_MODULE_21__internal_core_elements_PointedRectangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__internal_core_elements_PointedShape__ = __webpack_require__(205);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PointedShape", function() { return __WEBPACK_IMPORTED_MODULE_22__internal_core_elements_PointedShape__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__internal_core_elements_Polyarc__ = __webpack_require__(288);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Polyarc", function() { return __WEBPACK_IMPORTED_MODULE_23__internal_core_elements_Polyarc__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__internal_core_elements_Polygon__ = __webpack_require__(289);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Polygon", function() { return __WEBPACK_IMPORTED_MODULE_24__internal_core_elements_Polygon__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__internal_core_elements_Polyline__ = __webpack_require__(115);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Polyline", function() { return __WEBPACK_IMPORTED_MODULE_25__internal_core_elements_Polyline__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__internal_core_elements_Polyspline__ = __webpack_require__(114);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Polyspline", function() { return __WEBPACK_IMPORTED_MODULE_26__internal_core_elements_Polyspline__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__internal_core_elements_Preloader__ = __webpack_require__(207);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Preloader", function() { return __WEBPACK_IMPORTED_MODULE_27__internal_core_elements_Preloader__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__internal_core_elements_Rectangle__ = __webpack_require__(90);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Rectangle", function() { return __WEBPACK_IMPORTED_MODULE_28__internal_core_elements_Rectangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__internal_core_elements_ResizeButton__ = __webpack_require__(163);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeButton", function() { return __WEBPACK_IMPORTED_MODULE_29__internal_core_elements_ResizeButton__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__internal_core_elements_RoundedRectangle__ = __webpack_require__(56);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RoundedRectangle", function() { return __WEBPACK_IMPORTED_MODULE_30__internal_core_elements_RoundedRectangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__internal_core_elements_Scrollbar__ = __webpack_require__(100);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Scrollbar", function() { return __WEBPACK_IMPORTED_MODULE_31__internal_core_elements_Scrollbar__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__internal_core_elements_Slider__ = __webpack_require__(517);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return __WEBPACK_IMPORTED_MODULE_32__internal_core_elements_Slider__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__internal_core_elements_Slice__ = __webpack_require__(93);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Slice", function() { return __WEBPACK_IMPORTED_MODULE_33__internal_core_elements_Slice__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__internal_core_elements_TextLink__ = __webpack_require__(253);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TextLink", function() { return __WEBPACK_IMPORTED_MODULE_34__internal_core_elements_TextLink__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__internal_core_elements_Tooltip__ = __webpack_require__(81);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Tooltip", function() { return __WEBPACK_IMPORTED_MODULE_35__internal_core_elements_Tooltip__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__internal_core_elements_Trapezoid__ = __webpack_require__(235);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Trapezoid", function() { return __WEBPACK_IMPORTED_MODULE_36__internal_core_elements_Trapezoid__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__internal_core_elements_Triangle__ = __webpack_require__(122);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Triangle", function() { return __WEBPACK_IMPORTED_MODULE_37__internal_core_elements_Triangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__internal_core_elements_WavedCircle__ = __webpack_require__(233);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WavedCircle", function() { return __WEBPACK_IMPORTED_MODULE_38__internal_core_elements_WavedCircle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__internal_core_elements_WavedLine__ = __webpack_require__(117);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WavedLine", function() { return __WEBPACK_IMPORTED_MODULE_39__internal_core_elements_WavedLine__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__internal_core_elements_WavedRectangle__ = __webpack_require__(155);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WavedRectangle", function() { return __WEBPACK_IMPORTED_MODULE_40__internal_core_elements_WavedRectangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__internal_core_elements_ZoomOutButton__ = __webpack_require__(228);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ZoomOutButton", function() { return __WEBPACK_IMPORTED_MODULE_41__internal_core_elements_ZoomOutButton__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__internal_core_elements_PlayButton__ = __webpack_require__(518);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PlayButton", function() { return __WEBPACK_IMPORTED_MODULE_42__internal_core_elements_PlayButton__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__internal_core_elements_3d_Cone__ = __webpack_require__(251);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Cone", function() { return __WEBPACK_IMPORTED_MODULE_43__internal_core_elements_3d_Cone__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__internal_core_elements_3d_Rectangle3D__ = __webpack_require__(249);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Rectangle3D", function() { return __WEBPACK_IMPORTED_MODULE_44__internal_core_elements_3d_Rectangle3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__internal_core_elements_3d_Slice3D__ = __webpack_require__(239);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Slice3D", function() { return __WEBPACK_IMPORTED_MODULE_45__internal_core_elements_3d_Slice3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__internal_core_export_Export__ = __webpack_require__(149);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Export", function() { return __WEBPACK_IMPORTED_MODULE_46__internal_core_export_Export__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__internal_core_export_ExportMenu__ = __webpack_require__(217);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ExportMenu", function() { return __WEBPACK_IMPORTED_MODULE_47__internal_core_export_ExportMenu__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__internal_core_formatters_DateFormatter__ = __webpack_require__(96);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DateFormatter", function() { return __WEBPACK_IMPORTED_MODULE_48__internal_core_formatters_DateFormatter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__internal_core_formatters_DurationFormatter__ = __webpack_require__(216);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DurationFormatter", function() { return __WEBPACK_IMPORTED_MODULE_49__internal_core_formatters_DurationFormatter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__internal_core_formatters_NumberFormatter__ = __webpack_require__(215);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NumberFormatter", function() { return __WEBPACK_IMPORTED_MODULE_50__internal_core_formatters_NumberFormatter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__internal_core_formatters_TextFormatter__ = __webpack_require__(202);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TextFormatter", function() { return __WEBPACK_IMPORTED_MODULE_51__internal_core_formatters_TextFormatter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__internal_core_interaction_Inertia__ = __webpack_require__(214);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Inertia", function() { return __WEBPACK_IMPORTED_MODULE_52__internal_core_interaction_Inertia__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__internal_core_interaction_Interaction__ = __webpack_require__(34);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Interaction", function() { return __WEBPACK_IMPORTED_MODULE_53__internal_core_interaction_Interaction__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "interaction", function() { return __WEBPACK_IMPORTED_MODULE_53__internal_core_interaction_Interaction__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__internal_core_interaction_InteractionKeyboardObject__ = __webpack_require__(213);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "InteractionKeyboardObject", function() { return __WEBPACK_IMPORTED_MODULE_54__internal_core_interaction_InteractionKeyboardObject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__internal_core_interaction_InteractionObject__ = __webpack_require__(211);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "InteractionObject", function() { return __WEBPACK_IMPORTED_MODULE_55__internal_core_interaction_InteractionObject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__internal_core_interaction_InteractionObjectEvents__ = __webpack_require__(212);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "InteractionObjectEventDispatcher", function() { return __WEBPACK_IMPORTED_MODULE_56__internal_core_interaction_InteractionObjectEvents__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__internal_core_interaction_Mouse__ = __webpack_require__(95);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MouseCursorStyle", function() { return __WEBPACK_IMPORTED_MODULE_57__internal_core_interaction_Mouse__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__internal_core_rendering_AMElement__ = __webpack_require__(113);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AMElement", function() { return __WEBPACK_IMPORTED_MODULE_58__internal_core_rendering_AMElement__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__internal_core_rendering_Group__ = __webpack_require__(201);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Group", function() { return __WEBPACK_IMPORTED_MODULE_59__internal_core_rendering_Group__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__internal_core_rendering_Paper__ = __webpack_require__(112);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Paper", function() { return __WEBPACK_IMPORTED_MODULE_60__internal_core_rendering_Paper__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__internal_core_rendering_Smoothing__ = __webpack_require__(94);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Monotone", function() { return __WEBPACK_IMPORTED_MODULE_61__internal_core_rendering_Smoothing__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MonotoneX", function() { return __WEBPACK_IMPORTED_MODULE_61__internal_core_rendering_Smoothing__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MonotoneY", function() { return __WEBPACK_IMPORTED_MODULE_61__internal_core_rendering_Smoothing__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CatmullRom", function() { return __WEBPACK_IMPORTED_MODULE_61__internal_core_rendering_Smoothing__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Tension", function() { return __WEBPACK_IMPORTED_MODULE_61__internal_core_rendering_Smoothing__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Basis", function() { return __WEBPACK_IMPORTED_MODULE_61__internal_core_rendering_Smoothing__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__internal_core_rendering_SVGContainer__ = __webpack_require__(200);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SVGContainer", function() { return __WEBPACK_IMPORTED_MODULE_62__internal_core_rendering_SVGContainer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__internal_core_rendering_fills_ColorModifier__ = __webpack_require__(244);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColorModifier", function() { return __WEBPACK_IMPORTED_MODULE_63__internal_core_rendering_fills_ColorModifier__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__internal_core_rendering_fills_LinearGradient__ = __webpack_require__(82);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LinearGradient", function() { return __WEBPACK_IMPORTED_MODULE_64__internal_core_rendering_fills_LinearGradient__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__internal_core_rendering_fills_LinearGradientModifier__ = __webpack_require__(162);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LinearGradientModifier", function() { return __WEBPACK_IMPORTED_MODULE_65__internal_core_rendering_fills_LinearGradientModifier__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__internal_core_rendering_fills_LinePattern__ = __webpack_require__(519);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LinePattern", function() { return __WEBPACK_IMPORTED_MODULE_66__internal_core_rendering_fills_LinePattern__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__internal_core_rendering_fills_Pattern__ = __webpack_require__(116);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Pattern", function() { return __WEBPACK_IMPORTED_MODULE_67__internal_core_rendering_fills_Pattern__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__internal_core_rendering_fills_RadialGradient__ = __webpack_require__(210);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadialGradient", function() { return __WEBPACK_IMPORTED_MODULE_68__internal_core_rendering_fills_RadialGradient__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__internal_core_rendering_fills_RectPattern__ = __webpack_require__(520);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RectPattern", function() { return __WEBPACK_IMPORTED_MODULE_69__internal_core_rendering_fills_RectPattern__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__internal_core_rendering_filters_ColorizeFilter__ = __webpack_require__(521);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColorizeFilter", function() { return __WEBPACK_IMPORTED_MODULE_70__internal_core_rendering_filters_ColorizeFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_71__internal_core_rendering_filters_DesaturateFilter__ = __webpack_require__(147);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DesaturateFilter", function() { return __WEBPACK_IMPORTED_MODULE_71__internal_core_rendering_filters_DesaturateFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_72__internal_core_rendering_filters_DropShadowFilter__ = __webpack_require__(206);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DropShadowFilter", function() { return __WEBPACK_IMPORTED_MODULE_72__internal_core_rendering_filters_DropShadowFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_73__internal_core_rendering_filters_BlurFilter__ = __webpack_require__(522);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BlurFilter", function() { return __WEBPACK_IMPORTED_MODULE_73__internal_core_rendering_filters_BlurFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_74__internal_core_rendering_filters_Filter__ = __webpack_require__(51);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Filter", function() { return __WEBPACK_IMPORTED_MODULE_74__internal_core_rendering_filters_Filter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_75__internal_core_rendering_filters_FocusFilter__ = __webpack_require__(208);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "FocusFilter", function() { return __WEBPACK_IMPORTED_MODULE_75__internal_core_rendering_filters_FocusFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_76__internal_core_rendering_filters_LightenFilter__ = __webpack_require__(161);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LightenFilter", function() { return __WEBPACK_IMPORTED_MODULE_76__internal_core_rendering_filters_LightenFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_77__internal_core_responsive_Responsive__ = __webpack_require__(221);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Responsive", function() { return __WEBPACK_IMPORTED_MODULE_77__internal_core_responsive_Responsive__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_78__internal_core_utils_Adapter__ = __webpack_require__(30);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "GlobalAdapter", function() { return __WEBPACK_IMPORTED_MODULE_78__internal_core_utils_Adapter__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "globalAdapter", function() { return __WEBPACK_IMPORTED_MODULE_78__internal_core_utils_Adapter__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Adapter", function() { return __WEBPACK_IMPORTED_MODULE_78__internal_core_utils_Adapter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_79__internal_core_utils_Animation__ = __webpack_require__(45);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Animation", function() { return __WEBPACK_IMPORTED_MODULE_79__internal_core_utils_Animation__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return __WEBPACK_IMPORTED_MODULE_79__internal_core_utils_Animation__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_80__internal_core_utils_AsyncPending__ = __webpack_require__(79);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "nextFrame", function() { return __WEBPACK_IMPORTED_MODULE_80__internal_core_utils_AsyncPending__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "readFrame", function() { return __WEBPACK_IMPORTED_MODULE_80__internal_core_utils_AsyncPending__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "writeFrame", function() { return __WEBPACK_IMPORTED_MODULE_80__internal_core_utils_AsyncPending__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "whenIdle", function() { return __WEBPACK_IMPORTED_MODULE_80__internal_core_utils_AsyncPending__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "triggerIdle", function() { return __WEBPACK_IMPORTED_MODULE_80__internal_core_utils_AsyncPending__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_81__internal_core_utils_Cache__ = __webpack_require__(199);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Cache", function() { return __WEBPACK_IMPORTED_MODULE_81__internal_core_utils_Cache__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "cache", function() { return __WEBPACK_IMPORTED_MODULE_81__internal_core_utils_Cache__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_82__internal_core_utils_Color__ = __webpack_require__(18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return __WEBPACK_IMPORTED_MODULE_82__internal_core_utils_Color__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "color", function() { return __WEBPACK_IMPORTED_MODULE_82__internal_core_utils_Color__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isColor", function() { return __WEBPACK_IMPORTED_MODULE_82__internal_core_utils_Color__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "castColor", function() { return __WEBPACK_IMPORTED_MODULE_82__internal_core_utils_Color__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_83__internal_core_utils_ColorSet__ = __webpack_require__(63);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColorSet", function() { return __WEBPACK_IMPORTED_MODULE_83__internal_core_utils_ColorSet__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_84__internal_core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "InterfaceColorSet", function() { return __WEBPACK_IMPORTED_MODULE_84__internal_core_utils_InterfaceColorSet__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_85__internal_core_utils_Dictionary__ = __webpack_require__(26);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DictionaryDisposer", function() { return __WEBPACK_IMPORTED_MODULE_85__internal_core_utils_Dictionary__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Dictionary", function() { return __WEBPACK_IMPORTED_MODULE_85__internal_core_utils_Dictionary__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DictionaryTemplate", function() { return __WEBPACK_IMPORTED_MODULE_85__internal_core_utils_Dictionary__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_86__internal_core_utils_Disposer__ = __webpack_require__(10);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Disposer", function() { return __WEBPACK_IMPORTED_MODULE_86__internal_core_utils_Disposer__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MultiDisposer", function() { return __WEBPACK_IMPORTED_MODULE_86__internal_core_utils_Disposer__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MutableValueDisposer", function() { return __WEBPACK_IMPORTED_MODULE_86__internal_core_utils_Disposer__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CounterDisposer", function() { return __WEBPACK_IMPORTED_MODULE_86__internal_core_utils_Disposer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__ = __webpack_require__(44);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "StyleRule", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "StyleClass", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getElement", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["h"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "addClass", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "removeClass", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["l"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "blur", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "outerHTML", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["j"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isElement", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["i"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "copyAttributes", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "fixPixelPerfect", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ready", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_DOM__["k"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_88__internal_core_utils_EventDispatcher__ = __webpack_require__(28);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "EventDispatcher", function() { return __WEBPACK_IMPORTED_MODULE_88__internal_core_utils_EventDispatcher__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TargetedEventDispatcher", function() { return __WEBPACK_IMPORTED_MODULE_88__internal_core_utils_EventDispatcher__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Iterator__ = __webpack_require__(4);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ListIterator", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Iterator__["ListIterator"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Iterator__["min"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Iterator__["max"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "join", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Iterator__["join"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_Keyboard__ = __webpack_require__(55);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Keyboard", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_Keyboard__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "keyboard", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_Keyboard__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_91__internal_core_utils_Language__ = __webpack_require__(58);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Language", function() { return __WEBPACK_IMPORTED_MODULE_91__internal_core_utils_Language__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_List__ = __webpack_require__(7);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "IndexedIterable", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_List__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ListGrouper", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_List__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ListDisposer", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_List__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "List", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_List__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ListTemplate", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_List__["e"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_93__internal_core_utils_Morpher__ = __webpack_require__(290);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Morpher", function() { return __WEBPACK_IMPORTED_MODULE_93__internal_core_utils_Morpher__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_94__internal_core_utils_Order__ = __webpack_require__(111);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function() { return __WEBPACK_IMPORTED_MODULE_94__internal_core_utils_Order__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "or", function() { return __WEBPACK_IMPORTED_MODULE_94__internal_core_utils_Order__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_Percent__ = __webpack_require__(11);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Percent", function() { return __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_Percent__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "percent", function() { return __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_Percent__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isPercent", function() { return __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_Percent__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_96__internal_core_utils_SortedList__ = __webpack_require__(110);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "OrderedList", function() { return __WEBPACK_IMPORTED_MODULE_96__internal_core_utils_SortedList__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SortedList", function() { return __WEBPACK_IMPORTED_MODULE_96__internal_core_utils_SortedList__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "OrderedListTemplate", function() { return __WEBPACK_IMPORTED_MODULE_96__internal_core_utils_SortedList__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SortedListTemplate", function() { return __WEBPACK_IMPORTED_MODULE_96__internal_core_utils_SortedList__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__ = __webpack_require__(61);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PX", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["l"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "STRING", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["m"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NUMBER", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DATE", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DURATION", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER2", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER3", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER4", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER5", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Strings__["h"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__ = __webpack_require__(2);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isNaN", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["isNaN"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkString", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["checkString"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkBoolean", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["checkBoolean"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkNumber", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["checkNumber"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkObject", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["checkObject"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "castString", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["castString"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "castNumber", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["castNumber"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["isString"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["isNumber"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["isObject"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__["isArray"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_99__internal_core_utils_Validatable__ = __webpack_require__(150);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Validatable", function() { return __WEBPACK_IMPORTED_MODULE_99__internal_core_utils_Validatable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_100__internal_core_rendering_Path__ = __webpack_require__(12);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "path", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_rendering_Path__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Colors__ = __webpack_require__(80);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "colors", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Colors__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_102__internal_core_utils_Ease__ = __webpack_require__(39);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "ease", function() { return __WEBPACK_IMPORTED_MODULE_102__internal_core_utils_Ease__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_103__internal_core_utils_Math__ = __webpack_require__(3);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "math", function() { return __WEBPACK_IMPORTED_MODULE_103__internal_core_utils_Math__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_104__internal_core_utils_Number__ = __webpack_require__(92);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "number", function() { return __WEBPACK_IMPORTED_MODULE_104__internal_core_utils_Number__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_105__internal_core_utils_Object__ = __webpack_require__(20);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "object", function() { return __WEBPACK_IMPORTED_MODULE_105__internal_core_utils_Object__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_106__internal_core_utils_String__ = __webpack_require__(109);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "string", function() { return __WEBPACK_IMPORTED_MODULE_106__internal_core_utils_String__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_107__internal_core_utils_Time__ = __webpack_require__(226);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "time", function() { return __WEBPACK_IMPORTED_MODULE_107__internal_core_utils_Time__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_108__internal_core_utils_Utils__ = __webpack_require__(5);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "utils", function() { return __WEBPACK_IMPORTED_MODULE_108__internal_core_utils_Utils__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "iter", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Iterator__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "type", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Type__; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return __WEBPACK_IMPORTED_MODULE_108__internal_core_utils_Utils__["create"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "createFromConfig", function() { return __WEBPACK_IMPORTED_MODULE_108__internal_core_utils_Utils__["createFromConfig"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "useTheme", function() { return __WEBPACK_IMPORTED_MODULE_108__internal_core_utils_Utils__["useTheme"]; });
/**
 * This module houses all core/framework functionality and is required for
 * all charting components to work
 */
/**
 * Elements: core
 */








/**
 * Elements: data
 */






/**
 * Elements: elements
 */





























/**
 * Elements: 3d
 */



/**
 * Elements: export
 */


/**
 * Elements: formatters
 */




/**
 * Elements: interaction
 */






/**
 * Elements: rendering
 */





/**
 * Elements: fills
 */







/**
 * Elements: filters
 */







/**
 * Elements: responsive
 */

/**
 * Elements: utils
 */






















/**
 * Functions: rendering
 */


/**
 * Functions: utils
 */






















//# sourceMappingURL=core.js.map

/***/ }),
/* 516 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Image; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rendering_Paper__ = __webpack_require__(112);
/**
 * Functionality for adding images in SVG tree.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to add `<image>` elements to SVG.
 *
 * @see {@link IImageEvents} for a list of available events
 * @see {@link IImageAdapters} for a list of available Adapters
 */
var Image = /** @class */ (function (_super) {
    __extends(Image, _super);
    /**
     * Constructor
     */
    function Image() {
        var _this = _super.call(this) || this;
        _this.className = "Image";
        _this.element = _this.paper.add("image");
        _this.applyTheme();
        _this.width = 50;
        _this.height = 50;
        return _this;
    }
    /**
     * Draws an `<image>` element.
     *
     * @ignore Exclude from docs
     */
    Image.prototype.draw = function () {
        _super.prototype.draw.call(this);
        this.element.attr({
            "width": this.innerWidth,
            "height": this.innerHeight
        });
        this.element.attrNS(__WEBPACK_IMPORTED_MODULE_1__rendering_Paper__["a" /* Paper */].XLINK, "xlink:href", this.href);
    };
    Object.defineProperty(Image.prototype, "href", {
        /**
         * @return {string} Image URI
         */
        get: function () {
            return this.getPropertyValue("href");
        },
        /**
         * An image URI.
         *
         * @param {string}  value  Image URI
         */
        set: function (value) {
            this.setPropertyValue("href", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Image;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Image.js.map

/***/ }),
/* 517 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Slider; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__ = __webpack_require__(100);
/**
 * Slider is a scrollbar with just one selection grip.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a slider - a version of scrollbar with just one grip.
 *
 * @see {@link ISliderEvents} for a list of available events
 * @see {@link ISliderAdapters} for a list of available Adapters
 */
var Slider = /** @class */ (function (_super) {
    __extends(Slider, _super);
    /**
     * Constructor
     */
    function Slider() {
        var _this = _super.call(this) || this;
        _this.className = "Slider";
        _this.thumb.opacity = 0;
        _this.thumb.mouseEnabled = false;
        _this.endGrip.opacity = 0;
        _this.endGrip.mouseEnabled = false;
        _this.startGrip.events.on("drag", function () {
            _this.endGrip.x = _this.startGrip.x;
            _this.endGrip.y = _this.startGrip.y;
        });
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Slider.prototype, "__end", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this._start;
        },
        set: function (value) {
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "end", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this._start;
        },
        /**
         * Relative position (0-1) of the end grip.
         *
         * @param {number}  position  Position (0-1)
         */
        set: function (position) {
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "start", {
        /**
         * @return {number} Position (0-1)
         */
        get: function () {
            return this._start;
        },
        /**
         * Relative position (0-1) of the start grip.
         *
         * @param {number}  position  Position (0-1)
         */
        set: function (position) {
            if (!this._isBusy) {
                this.__start = position;
            }
        },
        enumerable: true,
        configurable: true
    });
    return Slider;
}(__WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__["a" /* Scrollbar */]));

//# sourceMappingURL=Slider.js.map

/***/ }),
/* 518 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PlayButton; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__RoundedRectangle__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Triangle__ = __webpack_require__(122);
/**
 * Play button functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a zoom out button.
 *
 * @see {@link IPlayButtonEvents} for a list of available events
 * @see {@link IPlayButtonAdapters} for a list of available Adapters
 */
var PlayButton = /** @class */ (function (_super) {
    __extends(PlayButton, _super);
    /**
     * Orientation of the resize direction.
     *
     * @deprecated Not used
     * @type {Orientation}
     */
    //protected _orientation: Orientation;
    /**
     * Constructor
     */
    function PlayButton() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "PlayButton";
        _this.padding(12, 12, 12, 12);
        _this.showSystemTooltip = true;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        var background = _this.background;
        background.cornerRadius(25, 25, 25, 25);
        background.fill = interfaceColors.getFor("primaryButton");
        background.stroke = interfaceColors.getFor("primaryButtonStroke");
        background.strokeOpacity = 0;
        background.states.getKey("hover").properties.fill = interfaceColors.getFor("primaryButtonHover");
        background.states.getKey("down").properties.fill = interfaceColors.getFor("primaryButtonActive");
        // Create a play icon
        var playIcon = new __WEBPACK_IMPORTED_MODULE_4__Triangle__["a" /* Triangle */]();
        playIcon.direction = "right";
        playIcon.width = 9;
        playIcon.height = 11;
        playIcon.marginLeft = 1;
        playIcon.marginRight = 1;
        playIcon.horizontalCenter = "middle";
        playIcon.verticalCenter = "middle";
        playIcon.stroke = interfaceColors.getFor("primaryButtonText");
        playIcon.fill = playIcon.stroke;
        _this.icon = playIcon;
        // Create a play icon
        var stopIcon = new __WEBPACK_IMPORTED_MODULE_1__RoundedRectangle__["a" /* RoundedRectangle */]();
        stopIcon.width = 11;
        stopIcon.height = 11;
        stopIcon.horizontalCenter = "middle";
        stopIcon.verticalCenter = "middle";
        stopIcon.cornerRadius(0, 0, 0, 0);
        stopIcon.stroke = interfaceColors.getFor("primaryButtonText");
        stopIcon.fill = playIcon.stroke;
        _this.togglable = true;
        var activeState = _this.states.create("active");
        activeState.transitionDuration = 0;
        activeState.properties.icon = stopIcon;
        _this.defaultState.transitionDuration = 0;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    PlayButton.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        this.readerTitle = this.language.translate("Play");
    };
    return PlayButton;
}(__WEBPACK_IMPORTED_MODULE_0__Button__["a" /* Button */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["a" /* registry */].registeredClasses["PlayButton"] = PlayButton;
//# sourceMappingURL=PlayButton.js.map

/***/ }),
/* 519 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LinePattern; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Pattern__ = __webpack_require__(116);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Line pattern.
 */
var LinePattern = /** @class */ (function (_super) {
    __extends(LinePattern, _super);
    /**
     * Constructor
     */
    function LinePattern() {
        var _this = _super.call(this) || this;
        _this._line = _this.paper.add("line");
        _this.addElement(_this._line);
        return _this;
    }
    /**
     * Draws the pattern.
     */
    LinePattern.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (this._line) {
            this._line.attr({ "x2": this.width * 2 }); // to solve rotation
        }
    };
    return LinePattern;
}(__WEBPACK_IMPORTED_MODULE_0__Pattern__["a" /* Pattern */]));

//# sourceMappingURL=LinePattern.js.map

/***/ }),
/* 520 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RectPattern; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Pattern__ = __webpack_require__(116);
/**
 * Rectangular pattern module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Rectangular pattern
 */
var RectPattern = /** @class */ (function (_super) {
    __extends(RectPattern, _super);
    /**
     * Collection of property values for the pattern
     *
     * @todo Remove?
     * @deprecated
     * @type {Dictionary<RectPatternProperties, any>}
     */
    //public propertyValues: Dictionary<RectPatternProperties, any>;
    /**
     * Constructor
     */
    function RectPattern() {
        var _this = _super.call(this) || this;
        _this.rectHeight = 1;
        _this.rectWidth = 1;
        return _this;
    }
    /**
     * Draws the rectangular element.
     */
    RectPattern.prototype.draw = function () {
        if (this._rect) {
            this.removeElement(this._rect);
        }
        this._rect = this.paper.add("rect");
        this._rect.attr({ "width": this.rectWidth, "height": this.rectHeight });
        this.addElement(this._rect);
        _super.prototype.draw.call(this);
    };
    Object.defineProperty(RectPattern.prototype, "rectWidth", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.properties["rectWidth"];
        },
        /**
         * Rectangle width in pixels.
         *
         * @param {number} value Width (px)
         */
        set: function (value) {
            this.properties["rectWidth"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RectPattern.prototype, "rectHeight", {
        /**
         * @return {number} Height (px)
         */
        get: function () {
            return this.properties["rectHeight"];
        },
        /**
         * Rectangle height in pixels.
         *
         * @param {number} value Height (px)
         */
        set: function (value) {
            this.properties["rectHeight"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    return RectPattern;
}(__WEBPACK_IMPORTED_MODULE_0__Pattern__["a" /* Pattern */]));

//# sourceMappingURL=RectPattern.js.map

/***/ }),
/* 521 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorizeFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(51);
/**
 * Module for "Colorize" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a "Colorize" filter.
 */
var ColorizeFilter = /** @class */ (function (_super) {
    __extends(ColorizeFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function ColorizeFilter() {
        var _this = _super.call(this) || this;
        _this.className = "ColorizeFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feColorMatrix = _this.paper.add("feColorMatrix");
        _this.feColorMatrix.attr({ "type": "matrix" });
        //this.feColorMatrix.setAttribute("in", "SourceAlpha");
        _this.filterPrimitives.push(_this.feColorMatrix);
        // Set default properties
        _this.intensity = 1;
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)applies colors to the already existing filter by modifying filyer's
     * color matrix element.
     *
     * @ignore Exclude from docs
     */
    ColorizeFilter.prototype.applyFilter = function () {
        var i = this.intensity;
        var ii = 1 - i;
        var r;
        var g;
        var b;
        if (!this.color) {
            r = 0;
            g = 0;
            b = 0;
        }
        else {
            r = this.color.rgb.r / 255 * i;
            g = this.color.rgb.g / 255 * i;
            b = this.color.rgb.b / 255 * i;
        }
        this.feColorMatrix.attr({ "values": ii + " 0 0 0 " + r + " 0 " + ii + " 0 0 " + g + " 0 0 " + ii + " 0 " + b + " 0 0 0 1 0" });
    };
    Object.defineProperty(ColorizeFilter.prototype, "color", {
        /**
         * @return {Color} Color
         */
        get: function () {
            return this.properties["color"];
        },
        /**
         * Color.
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.properties["color"] = value;
            this.applyFilter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorizeFilter.prototype, "intensity", {
        /**
         * @return {number} Intensity (0-1)
         */
        get: function () {
            return this.properties.intensity;
        },
        /**
         * Intensity of the color. (0-1)
         *
         * @default 1
         * @param {number} value Intensity (0-1)
         * @todo Describe possible values
         */
        set: function (value) {
            this.properties.intensity = value;
            this.applyFilter();
        },
        enumerable: true,
        configurable: true
    });
    return ColorizeFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=ColorizeFilter.js.map

/***/ }),
/* 522 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BlurFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(51);
/**
 * Module for "Blur" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a "Blur" filter.
 */
var BlurFilter = /** @class */ (function (_super) {
    __extends(BlurFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function BlurFilter() {
        var _this = _super.call(this) || this;
        _this.className = "BlurFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feGaussianBlur = _this.paper.add("feGaussianBlur");
        _this.feGaussianBlur.attr({ "result": "blurOut", "in": "SourceGraphic" });
        _this.filterPrimitives.push(_this.feGaussianBlur);
        // Set default properties
        _this.width = 200;
        _this.height = 200;
        _this.blur = 1.5;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(BlurFilter.prototype, "blur", {
        /**
         * @return {number} Blur
         */
        get: function () {
            return this.properties.blur;
        },
        /**
         * Blur value.
         *
         * @default 1.5
         * @param {number} value Blur
         */
        set: function (value) {
            this.properties.blur = value;
            this.feGaussianBlur.attr({ "stdDeviation": value / this.scale });
        },
        enumerable: true,
        configurable: true
    });
    return BlurFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=BlurFilter.js.map

/***/ })
/******/ ]);