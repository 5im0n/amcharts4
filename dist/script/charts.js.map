{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/series/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts"],"names":["__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","__webpack_require__","CategoryAxisDataItem","_super","_this","call","this","className","text","locations","category","startCategory","endCategory","applyTheme","__WEBPACK_IMPORTED_MODULE_0_tslib__","Object","defineProperty","prototype","properties","value","setProperty","__WEBPACK_IMPORTED_MODULE_1__Axis__","CategoryAxis","dataItemsByCategory","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","axisFieldName","_lastDataItem","createDataItem","component","_disposers","push","createAxisBreak","__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__","validateDataRange","dataCount","dataItems","length","startIndex","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","Math","floor","start","endIndex","ceil","end","renderer","invalid","validate","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","iterator","series","xAxis","yAxis","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","i","dataItem","getIndex","__disabled","round","isInBreak","appendDataItem","validateDataElement","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","b","index","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","position","indexToPosition","endPosition","isRange","axisFill","location","point","positionToPoint","tick","updateTickElement","grid","updateGridElement","label","updateLabelElement","fill","updateFillElement","fillRule","mask","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","difference","adjustDifference","cellStartLocation","cellEndLocation","breakStartIndex","breakEndIndex","max","min","categoryToPosition","categoryToPoint","angle","positionToAngle","x","y","anyToPoint","anyToPosition","zoomToCategories","zoomToIndexes","getAnyRangePath","startLocation","endLocation","startPos","endPos","getPositionRangePath","roundPosition","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","adapter","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","getPositionLabel","initRenderer","baseGrid","disabled","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","registeredClasses","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","AxisLabelCircular","padding","radius","getPropertyValue","setPropertyValue","fixPoint","axisRadius","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","atan2","sign","inside","relativeRotation","dy","measuredHeight","dx","measuredWidth","labelRadius","rotation","pixelWidth","bbox","width","pixelHeight","height","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__","XYSeriesDataItem","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","fields","working","stackValue","__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__","field","getWorkingValue","getValue","getMax","__WEBPACK_IMPORTED_MODULE_1__Series__","XYSeries","_xAxis","__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__","_yAxis","isMeasured","mainContainer","__WEBPACK_IMPORTED_MODULE_2__core_Sprite__","element","paper","add","stacked","tooltip","pointerOrientation","events","on","returnBulletDefaultState","applyInternalDefaults","readerTitle","language","translate","validateData","defineFields","dataFields","_xField","_yField","Error","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","e","_chart","raiseCriticalError","xAxisFieldName","xField","xOpenField","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","_xValueFields","_yValueFields","addValueField","axis","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","axisRanges","range","fillPath","attr","d","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","chart","xAxes","oldAxis","dataItemsByAxis","removeKey","dispose","removeValue","set","registerSeries","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","invalidateData","yAxes","_baseAxis","__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","processSeriesDataItems","xAxisId","yAxisId","_tmin","_tmax","dispatchImmediately","_smin","_smax","appeared","showTooltipAtPosition","xPosition","yPosition","visible","isHiding","toAxisPosition","updateLegendValue","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_prevTooltipDataItem","type","target","_a","bullets","_b","next","done","setState","showTooltip","hideTooltip","positionBullet","bullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","locationX","locationY","moveTo","bulletLocation","workingLocations","getBulletLocationY","show","duration","animation","a","interpolationDuration","delay","sequencedInterpolation","sequencedInterpolationDelay","hide","minZoomed","maxZoomed","isDisposed","once","handleDataItemWorkingValueChange","event","axisSeries","invalidateProcessedData","field_1","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","setCalculatedValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","hasKey","len","xKey","yKey","stackKeyX","stackKeyY","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Object__","DateAxisDataItem","endDate","dates","getTime","endValue","__WEBPACK_IMPORTED_MODULE_1__ValueAxis__","DateAxis","gridIntervals","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","dateFormats","periodChangeDateFormats","_markUnitChange","_boldUnitChange","_baseIntervalReal","timeUnit","count","_startLocation","_endLocation","_prevSeriesTime","_minSeriesDifference","Number","MAX_VALUE","gridInterval","_gridInterval","gridDuration","__WEBPACK_IMPORTED_MODULE_7__core_utils_Time__","pushAll","__WEBPACK_IMPORTED_MODULE_5__DateAxisBreak__","periodCount","baseDuration","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","dataChangeUpdate","data","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","clear","startTime","startTimeStr","this_1","undefined","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","valueToPosition","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","sameItemTime","prevSeriesTime","time","abs","differece","_baseInterval","timeInterval","invalidate","breakTemplate","template","startLine","endLine","fillShape","_tooltipDateFormat","tooltipDateFormat","dateFormat","getCurrentLabelFormat","ticks","__WEBPACK_IMPORTED_MODULE_2__Axis__","Start","labels","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","XYCursor","_lineX","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","_lineY","behavior","maxPanOut","interfaceColors","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","selection","createChild","shouldClone","fillOpacity","getFor","lineX","stroke","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","pixelY","w","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","_positionPrecision","h","validatePosition","triggerMoveReal","triggeredByPointer","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","xRange","yRange","endX","endY","handleXTooltipPosition","handleCursorPositionChange","handleYTooltipPosition","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","interactionsEnabled","parent","reset","_selection","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_1__Cursor__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","LineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__XYSeries__","LineSeries","minDistance","segments","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__","applyOnClones","_segmentsIterator","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","createNewItems","connect","tensionX","tensionY","segmentsContainer","__WEBPACK_IMPORTED_MODULE_3__core_Container__","bulletsContainer","toFront","previousDataItem","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","openSegment","_workingStartIndex","segment","sliceData","_workingEndIndex","openIndex","axisRange","closeIndex","points","propertiesChanged","getFirst","contents","__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","changed","propertyName","createLegendMarker","marker","disposeChildren","line","__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__","copyFrom","x2","__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__","copyToLegendMarker","hasLabels_1","children","child","__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__","clone","tooltipText","PieSeriesDataItem","radiusValue","uidAttr","slice","toValue","color","_legendDataItem","valueLabel","_tick","addSprite","_label","_slice","slices","hiddenInLegend","PieSeries","alignLabels","startAngle","endAngle","colors","__WEBPACK_IMPORTED_MODULE_7__core_utils_ColorSet__","calculatePercent","slicesContainer","__WEBPACK_IMPORTED_MODULE_6__core_Container__","ticksContainer","layout","labelsContainer","initSlice","__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_4__PieTick__","__WEBPACK_IMPORTED_MODULE_5__core_utils_List__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__","renderingFrequency","skipFocusThreshold","defaultState","transitionEasing","__WEBPACK_IMPORTED_MODULE_11__core_utils_Ease__","states","scale","itemReaderText","sliceType","observe","handleSliceScale","handleSliceMove","shiftRadius","togglable","hiddenState","opacity","_leftItems","_rightItems","_currentStartAngle","_arcRect","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","_maxRadiusPercent","radiusValuePercent","percent","reverse","arrangeLabels","slice_1","innerRadius","arc","normalizedMiddleAngle","middleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","itemsFocusable","role","focusable","ev","populateString","hoverable","nextLabel","getNextLabel","bottom","nextDataItem","__WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__","bind","source","getContainerBBox","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","AxisRendererCircular","pixelRadiusReal","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","pixelPerfect","tooltipLocation","setAxis","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","pixelRadius","cos","sin","PI","coordinate","positionToCoordinate","inversed","updateAxisLine","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","gridInnerRadius","zIndex","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","path","pixelInnerRadius","createGrid","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","createFill","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","createLabel","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","draw","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","RadarChartDataItem","__WEBPACK_IMPORTED_MODULE_1__XYChart__","RadarChart","_axisRendererX","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__","_axisRendererY","__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__","innerRadiusModifyer","radarContainer","plotContainer","__WEBPACK_IMPORTED_MODULE_4__core_Container__","align","valign","seriesContainer","_cursorContainer","_bulletMask","__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__","processAxis","gridContainer","breakContainer","toBack","handleXAxisRangeChange","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","handleYAxisRangeChange","createCursor","__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__","cursor","beforeDraw","rect","__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__","innerRect","wr","hr","mr","maxRadius","diameter","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","_pixelInnerRadius","definedBBox","createSeries","__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__","updateXAxis","updateYAxis","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_1__AxisBreak__","DateAxisBreak","startValue","__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__","Cursor","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","trackable","clickable","interaction","__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__","body","handleCursorDown","handleCursorUp","handleCursorMove","local","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","pointer","triggerMove","getPositions","triggerDown","setGlobalStyle","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__","grabbing","triggerUp","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","getHitOption","interactions","default","cancelable","preventDefault","lockElement","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","RadarSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__LineSeries__","RadarSeries","connectEnds","unshift","__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__","LineSeriesSegment","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__","fillElement","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_1__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","gridType","axisAngle","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","title","opposite","__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__","gridLocation","count_1","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__","updateTooltip","tooltipOrientation","bigNum","axisFullLength","__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__","ClockHand","_axis","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","pin","__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__","startWidth","endWidth","hand","__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__","leftSide","rightSide","x0","x1","_pin","removeDispose","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","PieChart","chartContainer","minHeight","minWidth","updateRadius","feedLegend","chartCont","seriesRadius","__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__","setLegend","pieSeriesDataItem","isHover","PieTick","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","y0","y1","y2","__WEBPACK_IMPORTED_MODULE_1__elements_Tick__","PieSeries3DDataItem","depthValue","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__","PieSeries3D","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__","depth","depthPercent","__WEBPACK_IMPORTED_MODULE_8__elements_Bullet__","ChordNode","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","updateRotation","background","__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__","invalidateLinks","sum_1","_outgoingSorted","_incomingSorted","arc_1","each","childAngle","childRadius","labelAngle","nextAngle","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","fromNode","mAngle","trueStartAngle","tx","ty","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__","ChordLink","middleLine","__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__","isTemplate","fromX","fromY","toX","toY","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","cp","maskBullets","bulletsMask","positionBullets","mAngle1","mAngle2","cpx","cpy","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__","TreeMapSeries","columns","configField","__WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__","seriesDataItem","showReal","hideReal","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","AxisRendererY3D","getWidth","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__","ColumnSeries3DDataItem","__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__","ColumnSeries3D","columnsContainer","_columnsContainer","createColumnTemplate","__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__","column3D","Column3D","createAssets","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Rectangle3D__","column","__WEBPACK_IMPORTED_MODULE_1__Column__","Candlestick","lowLine","__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__","highLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","ConeColumn","coneColumn","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","GaugeChartDataItem","__WEBPACK_IMPORTED_MODULE_1__RadarChart__","GaugeChart","hands","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","processHand","newValue","PieChart3DDataItem","__WEBPACK_IMPORTED_MODULE_1__PieChart__","PieChart3D","invalidateDataUsers","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__","ChordDiagramDataItem","__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__","ChordDiagram","nodePadding","chordContainer","nodesContainer","getNodeValue","node","sum","incomingDataItems","outgoingDataItems","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","total","_sorted","strNode","invalidateLayout","appear","links","createNode","__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__","createLink","__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_5__utils_Type__","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_2__utils_Color__","p1","p2","__WEBPACK_IMPORTED_MODULE_3__rendering_Path__","point1","__WEBPACK_IMPORTED_MODULE_4__utils_Math__","point2","__WEBPACK_IMPORTED_MODULE_1__Line__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__","TreeMapDataItem","rows","hasChildren","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","level","TreeMap","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","homeText","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","sorting","__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__","strictMinMax","xRenderer","axisFills","yRenderer","__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__","seriesTemplates","zoomOutButton","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","toggleBullets","sort","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","seriesAppeared","dataUsers","cursorOverStyle","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__","zoomToSeriesDataItem","rangeChangeAnimation","binaryTree","dice","sliceDice","handleDataItemValueChange","invalidateDataItems","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_2__core_Container__","fixLayout","marginTop","paddingRight","scrollbarX","scrollbarY","fixColumns","__WEBPACK_IMPORTED_MODULE_5__series_ColumnSeries3D__","clustered","depthIndex","s","i_1","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateDataElementReal","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","removeChildren","cw","ch","__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__","StepLineSeriesDataItem","StepLineSeries","prevPoint","point0","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","setColumnStates","sprites","disableUnusedColumns","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__","orientation","CircleBullet","circle","__WEBPACK_IMPORTED_MODULE_1__Bullet__","__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__","XYChartScrollbar","scrollbarChart","__WEBPACK_IMPORTED_MODULE_5__types_XYChart__","margin","_scrollbarChart","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","rangeChangeDuration","id","transitionDuration","zoomOutAxes","__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__","updateByOrientation","oldValue","off","handleDataChanged","dataProvider","updateThumb","__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__","NavigationBarDataItem","__WEBPACK_IMPORTED_MODULE_2__core_DataItem__","NavigationBar","textLink","__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__","paddingTop","paddingBottom","_linksIterator","triangle","__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__","direction","marginLeft","marginRight","separators","activeLink","fontWeight","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","validateDataElements","getLast","separator","__WEBPACK_IMPORTED_MODULE_1__core_Component__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__","ColumnSeriesDataItem","_column","setColumn","__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__","_rangesColumns","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","ColumnSeries","simplifiedProcessing","__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__","tooltipColorSource","baseAxisSeries","clusterCount","__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__","l","r","t","percentHeight","maxWidth","maxHeight","__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","paddingLeft","itemWidth","itemHeight","sprite","change","droppedFromOpen","_dropFromOpenState","_riseFromOpenState","droppedFromPrevious","isInTransition","_columns","__WEBPACK_IMPORTED_MODULE_9__elements_Column__","_dropFromPreviousState","_riseFromPreviousState","legendDataItem","fromOpenState_1","fromPreviousState_1","__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__","Column","__WEBPACK_IMPORTED_MODULE_2__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Utils__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__","topAxesCont","__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","rightAxesCont","rightAxesContainer","__WEBPACK_IMPORTED_MODULE_9__core_elements_ZoomOutButton__","MAX_SAFE_INTEGER","updatePlotElements","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","_parseDataFrom","leftAxesWidth","rightAxesWidth","handleXAxisChange","handleYAxisChange","processXAxis","axisLetter","processXAxisRemoval","processYAxis","processYAxisRemoval","getCommonAxisRange","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","_dataUsers","_xAxes","_yAxes","processSeries","_cursor","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__","showAxisTooltip","showSeriesTooltip","hideObjectTooltip","updateSeriesLegend","topLeft","bottomRight","seriesPoints","tooltipHTML","setBounds","top_1","topSeriesPoints","botSeriesPoints","nextY","pointY","pixelMarginBottom","nextHeight","pixelMarginTop","getUpdatedRange","priority","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","panStartRange","newStart","newEnd","newRange","_scrollbarX","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","realRange","dataInvalid","diff","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__","_zoomOutButton","button","__WEBPACK_IMPORTED_MODULE_11__core_Registry__"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.startCategory = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * An alias to `category`.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} Category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.ceil((endIndex - startIndex) / maxCount);\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor(let i = 0; i < startIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor(let i = endIndex; i < this.dataItems.length; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\t\t\t\r\n\t\t}\t\t\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tdataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\tdataItem.text = dataItem.text; //@todo if this is left, kills custom data item text. this.adapter.apply(\"label\", dataItem.category);\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet cellStartLocation = this.renderer.cellStartLocation;\r\n\t\tlet cellEndLocation = this.renderer.cellEndLocation;\r\n\r\n\t\tdifference -= cellStartLocation;\r\n\t\tdifference -= (1 - cellEndLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - cellStartLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory));\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels.\r\n\t *\r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this.measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this.measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * A maske used for series.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tprotected _rectangleMask: Rectangle;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t})\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem);\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem);\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (!this._xAxis.get()) {\r\n\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.xAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (!this._yAxis.get()) {\r\n\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.yAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\tbullet.setState(\"hover\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tbullet.setState(\"default\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationX(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanimation = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isDisposed() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates series appearance when working value changes.\r\n\t */\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<SeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?:boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue:number;\r\n\t\t\t\t\t\tif(working){\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Start date.\r\n\t *\r\n\t * Used for items that span several dates, like [[DateAxisBreak]].\r\n\t *\r\n\t * @param {Date} date Start date\r\n\t */\r\n\tpublic set startDate(date: Date) {\r\n\t\tthis.date = date;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @todo string?\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * [gridIntervals description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDateFormat: string;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _markUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _boldUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _startLocation: AxisItemLocation = 0;\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _endLocation: AxisItemLocation = 1;\r\n\r\n\t/**\r\n\t * A collection of timestamps of previously processed data items. Used\r\n\t * internally to track distance between data items when processing data.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _prevSeriesTime: Dictionary<string, number> = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to alternating cells.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\t// @todo: will this be visible in docs?\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tif (this.chart.data.length <= 1) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\t//label.invalidate();\r\n\t\t\t\t// when count == 1 this means label represents all the period between grid lines. so we center label because of that.\r\n\t\t\t\t// we don't do that through label.location because it would reset the setting\r\n\t\t\t\t/// and we do not do that to axis ranges\r\n\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\tposition = position + (endPosition - position) / 2;\r\n\t\t\t\t\tendPosition = position;\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// this is used to automatically define baseInterval\r\n\t\tlet sameItemTime: number;\r\n\t\t// actually here we should only get dates of this axis. But it's not likely that the chart will have more than one date axis with different baseInterval.\r\n\t\t// So using this approach would mean we'll have the same baseInterval for all date axes. In case user wants different timeIntervals for different date axes, he can manually set baseInterval\r\n\t\t$object.each(dataItem.dates, (key, date) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\t//let date: Date = dataItem.dates[key];\r\n\t\t\tlet prevSeriesTime: number = this._prevSeriesTime.getKey(key);\r\n\t\t\tlet time: number = date.getTime();\r\n\t\t\t// need to check time difference betweend dates of the same data item (for example open/close. they also influence minSeriesDifference)\r\n\t\t\tif ($type.isNumber(sameItemTime)) {\r\n\t\t\t\tlet difference: number = Math.abs(time - sameItemTime);\r\n\t\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsameItemTime = time;\r\n\r\n\t\t\tlet differece: number = time - prevSeriesTime;\r\n\t\t\tif (differece > 0) {\r\n\t\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._prevSeriesTime.setKey(key, time);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this._startLocation != value) {\r\n\t\t\tthis._startLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this._startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this._endLocation != value) {\r\n\t\t\tthis._endLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this._endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tif (this._tooltipDateFormat != value) {\r\n\t\t\tthis._tooltipDateFormat = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this._tooltipDateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this._markUnitChange != value) {\r\n\t\t\tthis._markUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this._markUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use bold for period beginning?\r\n\t */\r\n\tpublic set boldUnitChange(value: boolean) {\r\n\t\tif (this._boldUnitChange != value) {\r\n\t\t\tthis._boldUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use bold for period beginning?\r\n\t */\r\n\tpublic get boldUnitChange(): boolean {\r\n\t\treturn this._boldUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif(dateFormat){\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif(location > 0){\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif(this.isInBreak(date.getTime())){\r\n\t\t\twhile(date.getTime() < this.max){\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif(this.isInBreak(date.getTime())){\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.grid.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.labels.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight }) });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 }) });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.element.attr({ \"d\": $path.rectangle(w, h) });\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.element.attr({ \"d\": \"\" });\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point, triggeredByPointer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point, triggeredByPointer);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": $path.rectangle(width, this.innerHeight, -width / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": $path.rectangle(this.innerWidth, height, 0, -height / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentPropertiess } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<LineSeriesSegment>}\r\n\t */\r\n\tpublic segments: ListTemplate<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(new LineSeriesSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(0, range);\r\n\t\t});\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment?: LineSeriesSegment): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t//for (let propertyName in itemProperties) {\r\n\t\t\t//let value: any = itemProperties[propertyName];\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tif (segment) {\r\n\t\t\t\t\tif (segment.properties[<keyof ILineSeriesSegmentPropertiess>propertyName] != value) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\tline.copyFrom(<any>this);\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\tfill.copyFrom(<any>this);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"./PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, ILegendItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color, iRGB, color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends SeriesDataItem implements ILegendItem<DataItem, IDataItemEvents> {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tprotected _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tprotected _tick: PieTick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t *\r\n\t * @type {LegendDataItem<DataItem, IDataItemEvents>}\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem<DataItem, IDataItemEvents>;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @type {LegendSettings}\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Color of the slice.\r\n\t *\r\n\t * @todo why not Color?\r\n\t * @param {string}  value  Color\r\n\t */\r\n\tpublic set color(value: string) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Color\r\n\t */\r\n\tpublic get color(): string {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param {LegendDataItem<DataItem, IDataItemEvents>}  value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem<DataItem, IDataItemEvents>) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tvalue.label.dataItem = this;\r\n\t\tvalue.valueLabel.dataItem = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {LegendDataItem<DataItem, IDataItemEvents>} Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem<DataItem, IDataItemEvents> {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Pie Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {PieTick} Tick element\r\n\t */\r\n\tpublic get tick(): PieTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tthis._tick = this.component.ticks.create();\r\n\t\t\tthis._disposers.push(this._tick);\r\n\t\t\tthis.addSprite(this._tick);\r\n\t\t\tthis._tick.slice = this.slice;\r\n\t\t\tthis._tick.label = this.label;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\tif (!this._label) {\r\n\t\t\tthis._label = this.component.labels.create();\r\n\t\t\tthis._disposers.push(this._label);\r\n\t\t\tthis.addSprite(this._label);\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * A Slice element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {Slice} Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\t\t\tthis._slice = this.component.slices.create();\r\n\t\t\tthis._disposers.push(this._slice);\r\n\t\t\tthis.addSprite(this._slice);\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param {boolean} value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\thiddenInLegend?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t * @type {number}\r\n\t */\r\n\talignLabels?: number;\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends ISeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends Series {\r\n\r\n\tpublic _chart:PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t *\r\n\t * @type {ListTemplate<PieTick>}\r\n\t */\r\n\tpublic ticks: ListTemplate<PieTick>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t *\r\n\t * @type {ListTemplate<AxisLabelCircular>}\r\n\t */\r\n\tpublic labels: ListTemplate<AxisLabelCircular>;\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.initSlice(Slice);\r\n\r\n\t\t// Create tick list\r\n\t\tlet tick = new PieTick();\r\n\t\ttick.isMeasured = false;\r\n\t\tthis.ticks = new ListTemplate<PieTick>(tick);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.ticks));\r\n\t\tthis._disposers.push(this.ticks.template);\r\n\r\n\t\t// Create labels list\r\n\t\t// @todo create a labelText/labelHTML properties just like\r\n\t\t// tooltipText/tooltipHTML\r\n\t\tlet label = new AxisLabelCircular();\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.radius = 25;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t\tlabel.renderingFrequency = 2;\r\n\t\tthis.labels = new ListTemplate<AxisLabelCircular>(label);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\t//let hiddenState = this.hiddenState;\r\n\t\t//hiddenState.properties.opacity = 1;\r\n\t\t//hiddenState.properties.endAngle = -90;\r\n\t\t//hiddenState.properties.startAngle = -90;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\tlet hoverState = this.slices.template.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice}                    Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice): Slice {\r\n\t\t// Create a slice template\r\n\t\tlet slice = new sliceType();\r\n\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\t// Create slice hover state\r\n\t\tslice.states.create(\"hover\");\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\r\n\t\tlet hiddenState = slice.hiddenState;\r\n\t\thiddenState.properties.visible = true;\r\n\t\thiddenState.properties.opacity = 1;\r\n\r\n\t\t// Create slices list\r\n\t\tthis.slices = new ListTemplate<Slice>(slice);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.slices));\r\n\t\tthis._disposers.push(this.slices.template);\r\n\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (Math.abs(this.startAngle - this.endAngle) < 0.01) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.radius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t//if (percent > 0) {\r\n\r\n\t\t\t\tdataItem.__disabled = false;\r\n\r\n\t\t\t\t// SLICE\r\n\t\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t\tslice.parent = this.slicesContainer;\r\n\t\t\t\tslice.radius = this.radius;\r\n\r\n\t\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.innerRadius = this.innerRadius;\r\n\t\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\t\tslice.fill = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\t\tslice.stroke = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t\t// LABEL\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tlabel.parent = this.labelsContainer;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.parent = this.ticksContainer;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet x: number = tick.length + label.radius;\r\n\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = this.radius + tick.length + label.radius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t\t// Apply accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t\tslice.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t\tslice.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply screen reader label\r\n\t\t\t\tif (slice.focusable) {\r\n\t\t\t\t\tslice.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.hoverable) {\r\n\t\t\t\t\tslice.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t\t//}\r\n\t\t\t//else {\r\n\t\t\t//\tdataItem.__disabled = true;\r\n\t\t\t//}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"][]}  dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i: number = 0; i < dataItems.length; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label: AxisLabelCircular = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (i < dataItems.length - 1) {\r\n\t\t\t\t\tlet nextLabel: AxisLabelCircular = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet bottom: number = label.pixelY + label.measuredHeight;\r\n\r\n\t\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param  {number}              index      Current index\r\n\t * @param  {PieSerisDataItem[]}  dataItems  Data items\r\n\t * @return {AxisLabelCircular}              Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): AxisLabelCircular {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param {ColorSet}  value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ColorSet} Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}          marker    Container\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t// todo: make an easy possibility to bind visual properties\r\n\t\t\tchild.bind(\"fill\", slice);\r\n\t\t\tchild.bind(\"stroke\", slice);\r\n\t\t\tchild.bind(\"fillOpacity\", slice);\r\n\t\t\tchild.bind(\"strokeOpacity\", slice);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: Slice = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\tlet value = a[1];\r\n\t\t\tthis.positionBullet(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tlet slice: Slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tdataItem.label.dx = slice.dx + slice.pixelX;\r\n\t\t\tdataItem.label.dy = slice.dy + slice.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PieSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t}\r\n\r\n\tprotected getContainerBBox():IRectangle {\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.radius);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.radius);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal:number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.isMeasured = true;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis:Axis){\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal);\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet element = this.line.element;\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.chart;\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\telement.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius) });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) }) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n  public getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {[type]}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.element.attr({ \"d\": this.fillPath });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.element.attr({ \"d\": $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius) });\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category or a start value.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.background.fillOpacity = 0.5;\r\n\t\t//this.background.fill = color(\"#dadada\");\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionEvents[\"track\"]): IPoint {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * If `triggeredByPointer == false` the cursor will stay there, regardless\r\n\t * movement of the actual pointer(s). This is useful when you want to\r\n\t * manually place cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerMove(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tthis.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = point;\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerDown(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerDownReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerUp(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerUpReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerDown(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerUp(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentPropertiess extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentPropertiess { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentPropertiess;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.element = this.paper.add(\"path\");\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.element = this.paper.add(\"path\");\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\tlet path: string = $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t//if(this.strokeOpacity > 0 || this.strokeSprite.strokeOpacity > 0){ // not good, range stroke is not drawn then\r\n\t\t\tthis.strokeSprite.element.attr({ \"d\": path });\r\n\t\t\t//}\r\n\r\n\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\tthis.fillSprite.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, triggeredByPointer?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle)) {\r\n\r\n\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * Axis angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal);\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.element.attr({ \"d\": $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) }) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.element.attr({ \"d\": path });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend, ILegendItem } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends ISerialChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (radius - pixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\t\t\t// todo: set this on default state instead?\r\n\t\t\tseries.radius = pixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\tseries.innerRadius = pixelInnerRadius + seriesRadius * i;\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: ILegendItem<DataItem, IDataItemEvents>[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PieSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (pieSeriesDataItem.visible && !pieSeriesDataItem.isHiding) {\r\n\t\t\t\t\tpieSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tpieSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"./PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tx1 = x0 + label.radius * slice.ix;\r\n\t\t\t\ty1 = y0 + label.radius * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice3D>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice3D>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice3D}                  Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice3D): Slice3D {\r\n\t\tlet slice: Slice3D = <Slice3D>super.initSlice(Slice3D);\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/*\r\n\t\tset startAngle(value: number) {\r\n\t\t\t// 3d pie series can start at 90 angle increments, otherwise big slices might overlap incorrectly\r\n\t\t\tvalue = $math.normalizeAngle(value);\r\n\t\t\tvalue = $math.round(value / 90) * 90;\r\n\r\n\t\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t\t}\r\n\r\n\t\tget startAngle(): number {\r\n\t\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t\t}\r\n\t*/\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this);\r\n\r\n\t\tthis.background.fillOpacity = 0;\r\n\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = 0;\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet arc = slice.arc;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif(!$type.isNumber(locationX)){\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif(!$type.isNumber(locationY)){\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = slice.startAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = slice.startAngle + arc * label.location;\r\n\t\t\tlet startAngle = slice.startAngle + (1 - sum / this.value) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tlet x = (slice.radius + label.radius) * $math.cos(labelAngle);\r\n\t\t\tlet y = (slice.radius + label.radius) * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif(!$type.isNumber(percentWidth)){\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.startAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\r\n\t\t\t\t\tlink.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif(!$type.isNumber(percentWidth)){\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlink.arc = dataItem.getWorkingValue(\"value\") * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlink.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\r\n\t\tlet mAngle = this.trueStartAngle + this.slice.arc / 2;\r\n\r\n\t\tlet tx = this.slice.radius * $math.cos(mAngle);\r\n\t\tlet ty = this.slice.radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tthis.slice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tthis.link.element.attr({ \"d\": path });\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.element.attr({ \"d\": path });\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\treturn this.showReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\treturn this.hideReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.element.attr({\r\n\t\t\t\"d\": $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D })\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t *\r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumn3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 309\n// module chunks = 4","/**\r\n * Module: gauge\r\n */\r\n\r\n/**\r\n * Elements: types\r\n */\r\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\r\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\r\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\r\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\r\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\r\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\r\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\r\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\r\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\r\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\r\n\r\n/**\r\n * Elements: charts\r\n */\r\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\r\n\r\n/**\r\n * Elements: series\r\n */\r\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\r\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\r\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\r\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\r\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\r\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\r\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\r\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\r\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\r\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\r\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\r\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\r\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\r\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\r\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\r\n\r\n/**\r\n * Elements: axes\r\n */\r\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\r\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\r\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\r\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\r\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\r\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\r\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\r\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\r\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\r\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\r\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\r\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\r\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\r\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\r\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\r\n\r\n/**\r\n * Elements: elements\r\n */\r\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\r\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\r\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\r\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\r\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\r\n\r\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\r\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\r\n\r\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\r\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\r\n\r\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\r\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\r\n\r\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\r\n\r\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\r\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\r\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\r\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\r\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\r\n\r\n\r\n/**\r\n * Elements: cursors\r\n */\r\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\r\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\r\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @ignore\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * A list of Chord links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<ChordLink>}\r\n\t */\r\n\tpublic links: ListTemplate<ChordLink>;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param {FlowDiagramNode}  node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: ChordNode) {\r\n\t\tlet sum = 0;\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t});\r\n\r\n\t\tnode.value = sum;\r\n\r\n\t\tthis.fixMin(node);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\ttotal += node.value;\r\n\t\t\tcount++;\r\n\t\t});\r\n\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / total;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tnode.parent = nodesContainer;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * node.value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.invalidate();\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [appear description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic appear(): void {\r\n\t\tsuper.appear();\r\n\r\n\r\n\r\n\t\t/* quite useless - in case sequencedInterpolation = false, the animation is not visible, as the proportions\r\n\t\t   are the same. if true, then it doesn't look right either.\r\n\t\tlet duration = this.interpolationDuration;\r\n\t\tlet i = 0;\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet delay = 0;\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0.001, 0);\r\n\t\t\tdataItem.setWorkingValue(\"value\", dataItem.value, duration, delay);\r\n\t\t\ti++;\r\n\t\t})*/\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */ \r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */ \r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.element.attr({ \"d\": d });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.homeText = this.language.translate(\"Home\");\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = maxX * this.pixelHeight / this.pixelWidth;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\r\n\t\tthis._tempSeries = [];\r\n\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\tseries.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.show();\r\n\r\n\t\t\t\tif (series.level > this.currentLevel + this.maxLevels - 1) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.bulletsContainer.show(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to 0 to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleDataItemValueChange(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * List of \"low\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _lowLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * List of \"high\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _highLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, 0);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, 0);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, 1);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, 1);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem:RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column:RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\t// @todo use getPoint() instead of these\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\t\tif(arc > 0){\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returnsan SVG path that is used as mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: -dx,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tthis.circle = this.createChild(Circle);\r\n\t\tthis.circle.shouldClone = false;\r\n\t\tthis.circle.radius = 5;\r\n\t\tthis.circle.isMeasured = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.element = this.paper.add(\"path\");\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.events.on(\"validated\", this.zoomOutAxes, this);\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\r\n\t\tscrollbarChart.series.push(series);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX;\r\n\t\t\tlet y: number = thumb.pixelY;\r\n\t\t\tlet w: number = thumb.pixelWidth;\r\n\t\t\tlet h: number = thumb.pixelHeight;\r\n\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: this.pixelWidth - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: this.pixelHeight - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(this.links.template);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(this.separators.template);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @ignore\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <ColumnSeriesDataItem>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this.columns.iterator(), (column) => {\r\n\t\t\tif(column.dataItem.index < this.startIndex || column.dataItem.index >= this.endIndex){\r\n\t\t\t\tcolumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<ColumnSeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(event.target);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t}\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t//dataItem.column.removeTemporary();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t//rangeColumn.removeTemporary();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnProperties}\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\tthis.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", () => {\r\n\t\t\tif (this.layout == \"none\") {\r\n\t\t\t\tthis.layout = \"absolute\";\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tthis.column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param {Sprite} source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds series (graphs/plots).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartCont = this.chartContainer;\r\n\t\tchartCont.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartCont.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartCont.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartCont.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this.cursor) {\r\n\t\t\tif (this.data.length > 0) {\r\n\t\t\t\tthis.cursor.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// reset minimums\r\n\t\tthis.leftAxesContainer.minWidth = undefined;\r\n\t\tthis.rightAxesContainer.minWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processXAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processYAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\t\t\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\taxis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\taxis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 1;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", (event)=>{\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.processXAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.processYAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic processSeries(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.processSeries(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.data.length == 0) {\r\n\t\t\t\t\tcursor.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.tooltip.hide(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position: IPoint): void {\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.tooltip.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0; i < seriesPoints.length; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0; i < topSeriesPoints.length; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.pixelHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tprotected getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif(xRange){\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif(yRange){\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif(yAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < yAxes.length; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(xAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < xAxes.length; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts"],"sourceRoot":""}