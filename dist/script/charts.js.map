{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/types/PercentChart.ts","webpack:///../../../../../src/.internal/charts/elements/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts"],"names":["__webpack_require__","d","__webpack_exports__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","__WEBPACK_IMPORTED_MODULE_2__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__","__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_10__core_elements_ZoomOutButton__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_12__core_Registry__","__WEBPACK_IMPORTED_MODULE_13__elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Utils__","_super","_this","call","this","className","applyTheme","_axisRendererX","_axisRendererY","maskBullets","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","Object","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","_bulletMask","prototype","applyInternalDefaults","exportable","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","updatePlotElements","series","iterator","invalidate","validateData","_parseDataFrom","dataChangeUpdate","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","axis","newValue","chart","renderer","axisLetter","observe","handleXAxisRangeChange","dataProvider","processAxis","processYAxis","handleYAxisRangeChange","range","getCommonAxisRange","xAxes","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","start","end","yAxes","seriesAppeared","show","appeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","addDisposer","dataUsers","removeValue","inited","invalidateDataItems","defineProperty","_xAxes","handleAxisRemoval","oldValue","autoDispose","dispose","_yAxes","handleSeriesAdded","xAxis","yAxis","undefined","fill","colors","next","stroke","e","raiseCriticalError","_cursor","cursor","removeDispose","_disposers","push","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","visible","isHiding","xPosition","yPosition","showAxisTooltip","showSeriesTooltip","x","y","hideObjectTooltip","updateLegendValue","sprites","sprite","hideTooltip","position","topLeft","bottomRight","pixelWidth","pixelHeight","seriesPoints","each","tooltip","setBounds","point","showTooltipAtPosition","sort","a","b","length","top_1","bottom","topSeriesPoints","botSeriesPoints","i","len","nextY","pointY","invalid","validate","label","pixelY","measuredHeight","pixelMarginBottom","nextHeight","pixelMarginTop","dataItems","getUpdatedRange","difference","behavior","xRange","getIndex","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","maxPanOut","panStartRange","newStart","Math","max","newEnd","min","newRange","_scrollbarX","startGrip","endGrip","orientation","handleXScrollbarChange","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","round","realRange","dataInvalid","diff","roundPosition","axisRange","zoom","getPropertyValue","setPropertyValue","handleWheel","svgPoint","htmlContainer","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","locationY","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","type","Error","axisRanges","index","configOrder","createSeries","_zoomOutButton","button","copyFrom","source","disposeData","scrollbarChart","addData","rawDataItem","removeCount","registeredClasses","CategoryAxisDataItem","CategoryAxis","__WEBPACK_IMPORTED_MODULE_1__Axis__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","text","locations","category","endCategory","properties","setProperty","dataItemsByCategory","axisFieldName","_lastDataItem","createDataItem","component","createAxisBreak","validateDataRange","dataCount","startIndex","floor","endIndex","ceil","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","dataItem","__disabled","isInBreak","appendDataItem","validateDataElement","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","ghostLabel","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","indexToPosition","endPosition","isRange","axisFill","location","positionToPoint","tick","disabled","updateTickElement","grid","updateGridElement","updateLabelElement","updateFillElement","fillRule","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","adjustDifference","startLocation","endLocation","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","angle","positionToAngle","anyToPoint","anyToPosition","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","initRenderer","baseGrid","AxisLabelCircular","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","fdx","fdy","radius","isMeasured","setPercentProperty","pixelRadius","axisRadius","sign","inside","fixPoint","atan2","relativeRotation","dy","_measuredHeight","dx","_measuredWidth","labelRadius","bbox","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","XYSeriesDataItem","XYSeries","__WEBPACK_IMPORTED_MODULE_1__Series__","__WEBPACK_IMPORTED_MODULE_2__core_Sprite__","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_15__core_rendering_Path__","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","working","stackValue","field","getWorkingValue","getValue","getMax","_xAxis","_yAxis","mainContainer","setElement","paper","stacked","pointerOrientation","returnBulletDefaultState","_tmin","clear","_tmax","_smin","_smax","defineFields","data","updateItemReaderText","_xField","_yField","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","_chart","dataItemsX","dataItemsByAxis","dataItemsY","xAxisFieldName","xField","xOpenField","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","_xValueFields","_yValueFields","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","fillPath","path","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","oldAxis","removeKey","set","registerSeries","invalidateData","_baseAxis","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","dispatchImmediately","_prevTooltipDataItem","toAxisPosition","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_a","bullets","_b","done","isHover","showTooltip","tooltipText","bullet","isDisposed","positionBullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","moveTo","bulletLocation","workingLocations","duration","delay","interpolationDuration","defaultState","transitionDuration","sequencedInterpolation","sequencedInterpolationDelay","minZoomed","maxZoomed","hiddenState","animation","isFinished","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","field_1","setCalculatedValue","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","map","hasKey","xKey","yKey","stackKeyX","stackKeyY","val","itemReaderText","DateAxisDataItem","DateAxis","__WEBPACK_IMPORTED_MODULE_1__ValueAxis__","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","endDate","dates","getTime","endValue","gridIntervals","dateFormats","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minSeriesDifference","MAX_VALUE","gridInterval","_gridInterval","gridDuration","pushAll","periodCount","baseDuration","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","hasMoreThanOne","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","startTime","startTimeStr","this_1","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","markUnitChange","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","adjustedMax","endTimestamp","valueToPosition","location_1","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","time","openTime","openDate","prevSeriesTime","_prevSeriesTime","abs","differece","_baseInterval","timeInterval","breakTemplate","template","startLine","endLine","fillShape","tooltipDateFormat","dateFormat","leftCount","leftDataItem","leftDate","rightCount","rightDataItem","rightDate","getCurrentLabelFormat","ticks","labels","zoomToDates","skipRangeEvent","parse","zoomToValues","asIs","XYCursor","__WEBPACK_IMPORTED_MODULE_1__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","_lineX","_lineY","interfaceColors","selection","getFor","interactionsEnabled","lineX","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","w","_positionPrecision","h","validatePosition","triggerMoveReal","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","reset","_selection","element","LineSeriesDataItem","LineSeries","__WEBPACK_IMPORTED_MODULE_1__XYSeries__","__WEBPACK_IMPORTED_MODULE_3__core_Container__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__","__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__","__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","connect","tensionX","tensionY","segmentsContainer","previousDataItem","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegment","_workingStartIndex","sliceData","_workingEndIndex","openIndex","closeIndex","points","propertiesChanged","getFirst","contents","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","line","x2","copyToLegendMarker","hasLabels_1","children","child","clone","LineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","fillElement","PieSeriesDataItem","PieSeries","__WEBPACK_IMPORTED_MODULE_1__PercentSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__elements_PieTick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","radiusValue","toValue","alignLabels","startAngle","endAngle","createSlice","createTick","createLabel","initSlice","slice","scale","handleSliceScale","handleSliceMove","states","shiftRadius","togglable","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","percent","reverse","aAngle","middleAngle","bAngle","arrangeLabels","innerRadius","pixelInnerRadius","arc","normalizedMiddleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","_pixelRadius","_pixelInnerRadius","definedBBox","Candlestick","__WEBPACK_IMPORTED_MODULE_1__Column__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__","createAssets","lowLine","highLine","AxisRendererCircular","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","pixelRadiusReal","useChartAngles","pixelPerfect","tooltipLocation","setAxis","cos","sin","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","createGrid","createFill","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","RadarChartDataItem","RadarChart","__WEBPACK_IMPORTED_MODULE_1__XYChart__","__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_4__core_Container__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__","innerRadiusModifyer","radarContainer","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_1__AxisBreak__","DateAxisBreak","__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__","startValue","Cursor","__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","_stick","trackable","clickable","interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","isLocalElement","pointer","svg","local","_stickPoint","triggerMove","isHidden","hideReal","stick","invalidatePosition","getPositions","triggerDown","setGlobalStyle","grabbing","triggerUp","getHitOption","interactions","default","cancelable","preventDefault","lockElement","XYChartScrollbar","__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__types_XYChart__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__","__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","title","rangeChangeDuration","id","axisFills","zoomOutAxes","updateByOrientation","off","handleDataChanged","updateThumb","RadarSeriesDataItem","RadarSeries","__WEBPACK_IMPORTED_MODULE_1__LineSeries__","connectEnds","unshift","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_1__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__","__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__","__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","gridType","axisAngle","gridLocation","count_1","cellEndLocation","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","updateTooltip","tooltipOrientation","bigNum","axisFullLength","ClockHand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__","_axis","pin","startWidth","endWidth","hand","leftSide","rightSide","x0","x1","_pin","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","PieChart","__WEBPACK_IMPORTED_MODULE_1__PercentChart__","__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__","updateRadius","validateLayout","updateSeriesAngles","chartCont","chartRadius","chartPixelInnerRadius","seriesRadius","invalidateLayout","PercentChartDataItem","PercentChart","__WEBPACK_IMPORTED_MODULE_2__series_PercentSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","feedLegend","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","setLegend","PercentSeriesDataItem","PieTick","__WEBPACK_IMPORTED_MODULE_1__elements_Tick__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_label","_slice","y0","y1","y2","r","attr","PieSeries3DDataItem","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__","depthValue","depth","depthPercent","ChordNode","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__elements_Bullet__","updateRotation","setStateOnChildren","invalidateLinks","sum","total","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","_outgoingSorted","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","ChordLink","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__","middleLine","isTemplate","fromX","fromY","toX","toY","cp","bulletsMask","positionBullets","mAngle1","mAngle2","cpx","cpy","TreeMapSeriesDataItem","TreeMapSeries","__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_6__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__","treeMapDataItem","_dataContext","columns","configField","seriesDataItem","showReal","removeChildren","column","AxisRendererX3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","getWidth","ColumnSeries3DDataItem","ColumnSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__","column3D","columnsContainer","_columnsContainer","validateDataElementReal","createColumnTemplate","CandlestickSeriesDataItem","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__","lowValueX","lowValueY","highValueX","highValueY","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC","__WEBPACK_IMPORTED_MODULE_1__Candlestick__","openLine","highLowLine","closeLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","PyramidSeriesDataItem","PyramidSeries","__WEBPACK_IMPORTED_MODULE_1__FunnelSeries__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Utils__","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","_nextWidth","getNextValue","nextValue","slicesContainer","relValue","sliceLink","_pyramidHeight","_pyramidWidth","labelsContainer","ticksContainer","decorateSlice","pyramidWidth","linkWidth","linkHeight","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","s","sqrt","_nextY","sliceWidth","ConeColumn","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__","coneColumn","CurvedColumn","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","curvedColumn","realWidth","realHeight","realX","realY","tension","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__","__WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__","__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__","__WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__","__WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__","__WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__","__WEBPACK_IMPORTED_MODULE_6__internal_charts_types_SlicedChart__","__WEBPACK_IMPORTED_MODULE_7__internal_charts_types_FlowDiagram__","__WEBPACK_IMPORTED_MODULE_8__internal_charts_types_SankeyDiagram__","__WEBPACK_IMPORTED_MODULE_9__internal_charts_types_ChordDiagram__","__WEBPACK_IMPORTED_MODULE_10__internal_charts_types_TreeMap__","__WEBPACK_IMPORTED_MODULE_11__internal_charts_types_XYChart3D__","__WEBPACK_IMPORTED_MODULE_12__internal_charts_Chart__","__WEBPACK_IMPORTED_MODULE_13__internal_charts_Legend__","__WEBPACK_IMPORTED_MODULE_14__internal_charts_elements_HeatLegend__","__WEBPACK_IMPORTED_MODULE_15__internal_charts_series_Series__","__WEBPACK_IMPORTED_MODULE_16__internal_charts_series_XYSeries__","__WEBPACK_IMPORTED_MODULE_17__internal_charts_series_LineSeries__","__WEBPACK_IMPORTED_MODULE_18__internal_charts_series_LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_19__internal_charts_series_CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_series_OHLCSeries__","__WEBPACK_IMPORTED_MODULE_21__internal_charts_series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_22__internal_charts_series_StepLineSeries__","__WEBPACK_IMPORTED_MODULE_23__internal_charts_series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_24__internal_charts_series_RadarColumnSeries__","__WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries__","__WEBPACK_IMPORTED_MODULE_26__internal_charts_series_FunnelSeries__","__WEBPACK_IMPORTED_MODULE_27__internal_charts_series_PyramidSeries__","__WEBPACK_IMPORTED_MODULE_28__internal_charts_series_PictorialStackedSeries__","__WEBPACK_IMPORTED_MODULE_29__internal_charts_elements_PieTick__","__WEBPACK_IMPORTED_MODULE_30__internal_charts_elements_FunnelSlice__","__WEBPACK_IMPORTED_MODULE_31__internal_charts_series_PieSeries3D__","__WEBPACK_IMPORTED_MODULE_32__internal_charts_series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_33__internal_charts_series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_34__internal_charts_series_ConeSeries__","__WEBPACK_IMPORTED_MODULE_35__internal_charts_series_CurvedColumnSeries__","__WEBPACK_IMPORTED_MODULE_36__internal_charts_axes_Axis__","__WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_Grid__","__WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_AxisTick__","__WEBPACK_IMPORTED_MODULE_39__internal_charts_axes_AxisLabel__","__WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_AxisLine__","__WEBPACK_IMPORTED_MODULE_41__internal_charts_axes_AxisFill__","__WEBPACK_IMPORTED_MODULE_42__internal_charts_axes_AxisRenderer__","__WEBPACK_IMPORTED_MODULE_43__internal_charts_axes_AxisBreak__","__WEBPACK_IMPORTED_MODULE_44__internal_charts_axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_45__internal_charts_axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_46__internal_charts_axes_CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_47__internal_charts_axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_48__internal_charts_axes_DurationAxis__","__WEBPACK_IMPORTED_MODULE_49__internal_charts_axes_DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_50__internal_charts_axes_ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_51__internal_charts_axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_52__internal_charts_axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_53__internal_charts_axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_54__internal_charts_axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_55__internal_charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_56__internal_charts_axes_AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_57__internal_charts_axes_GridCircular__","__WEBPACK_IMPORTED_MODULE_58__internal_charts_axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_59__internal_charts_axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_60__internal_charts_elements_Tick__","__WEBPACK_IMPORTED_MODULE_61__internal_charts_elements_Bullet__","__WEBPACK_IMPORTED_MODULE_62__internal_charts_elements_LabelBullet__","__WEBPACK_IMPORTED_MODULE_63__internal_charts_elements_CircleBullet__","__WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_65__internal_charts_elements_ClockHand__","__WEBPACK_IMPORTED_MODULE_66__internal_charts_elements_FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_67__internal_charts_elements_FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_68__internal_charts_elements_SankeyNode__","__WEBPACK_IMPORTED_MODULE_69__internal_charts_elements_SankeyLink__","__WEBPACK_IMPORTED_MODULE_70__internal_charts_elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_71__internal_charts_elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_elements_NavigationBar__","__WEBPACK_IMPORTED_MODULE_73__internal_charts_elements_Column__","__WEBPACK_IMPORTED_MODULE_74__internal_charts_elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_75__internal_charts_elements_OHLC__","__WEBPACK_IMPORTED_MODULE_76__internal_charts_elements_RadarColumn__","__WEBPACK_IMPORTED_MODULE_77__internal_charts_elements_Column3D__","__WEBPACK_IMPORTED_MODULE_78__internal_charts_elements_ConeColumn__","__WEBPACK_IMPORTED_MODULE_79__internal_charts_elements_CurvedColumn__","__WEBPACK_IMPORTED_MODULE_80__internal_charts_cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_81__internal_charts_cursors_Cursor__","__WEBPACK_IMPORTED_MODULE_82__internal_charts_cursors_RadarCursor__","GaugeChartDataItem","GaugeChart","__WEBPACK_IMPORTED_MODULE_1__RadarChart__","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","hands","processHand","PieChart3DDataItem","PieChart3D","__WEBPACK_IMPORTED_MODULE_1__PieChart__","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__","invalidateDataUsers","SlicedChartDataItem","SlicedChart","ChordDiagramDataItem","ChordDiagram","__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__","__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","nodePadding","chordContainer","nodesContainer","newTotal","_sorted","strNode","node","getNodeValue","minNodeSize","links","createNode","createLink","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_1__Line__","__WEBPACK_IMPORTED_MODULE_2__utils_Color__","__WEBPACK_IMPORTED_MODULE_3__rendering_Path__","__WEBPACK_IMPORTED_MODULE_4__utils_Math__","__WEBPACK_IMPORTED_MODULE_5__utils_Type__","p1","p2","point1","point2","TreeMapDataItem","TreeMap","__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__","rows","hasChildren","level","color","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","cursorOverStyle","zoomToSeriesDataItem","toggleBullets","currentlyZoomed","rangeChangeAnimation","_dataDisposers","once","binaryTree","dice","sliceDice","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","i0","i1","row","handleDataItemValueChange","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_3__core_Sprite__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_6__series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","fixLayout","fixColumns","clustered","depthIndex","i_1","maskColumns","OHLCSeriesDataItem","OHLCSeries","__WEBPACK_IMPORTED_MODULE_1__CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_3__elements_OHLC__","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesDataItem","StepLineSeries","__WEBPACK_IMPORTED_MODULE_2__StepLineSeriesSegment__","noRisers","prevPoint","point0","vertical","StepLineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__LineSeriesSegment__","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","addSprite","setColumnStates","disableUnusedColumns","PictorialStackedSeriesDataItem","PictorialStackedSeries","__WEBPACK_IMPORTED_MODULE_1__PyramidSeries__","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","hs","expandDistance","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__","CurvedColumnSeriesDataItem","CurvedColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_CurvedColumn__","DurationAxisDataItem","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet","__WEBPACK_IMPORTED_MODULE_1__Bullet__","circle","NavigationBarDataItem","NavigationBar","__WEBPACK_IMPORTED_MODULE_1__core_Component__","__WEBPACK_IMPORTED_MODULE_2__core_DataItem__","__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__","textLink","paddingTop","paddingBottom","_linksIterator","triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","ColumnSeriesDataItem","ColumnSeries","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_9__elements_Column__","__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Disposer__","_column","setColumn","_rangesColumns","_startLocation","_endLocation","simplifiedProcessing","baseAxisSeries","clusterCount","cellStartLocation","l","t","percentHeight","outOfBounds","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","virtualParent","itemWidth","itemHeight","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","isInTransition","itemsFocusable","role","focusable","ev","populateString","_columns","legendDataItem","fromOpenState_1","fromPreviousState_1"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t// commented, because series does this.\r\n\t\t\t//$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t//$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t}\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0, len = topSeriesPoints.length; i < len; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, locationX);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, locationX);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, locationY);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, locationY);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"} mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"}  Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param {Object | Object[]} rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarX.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarY.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif(this.axisLength <= 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif(!dataItem.isRange || label.text == undefined){\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx:number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy:number = 0;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param {number} value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * returns label radius in pixels\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.fdx = this.dx;\t\t\t\r\n\t\tthis.fdy = this.dy;\t\t\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.dataChangeUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem && dataItem.visible) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\t\tbullet.isHover = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tif (!bullet.isDisposed()) {\r\n\t\t\t\t\tbullet.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\t\t\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\t\t\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, fields);\t\t\t\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\t\t\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay:number = 0;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (interpolationDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif(animation && !animation.isFinished()){\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tlet hasMoreThanOne = false;\r\n\r\n\t\tif (this.chart.data.length > 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.data.length > 1) {\r\n\t\t\t\t\thasMoreThanOne = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (!hasMoreThanOne) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._prevSeriesTime = time;\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem) {\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\r\n\t\t\twhile (leftDate.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t\tif (leftCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (rightDate.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t\tif (rightCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif(source[\"_baseInterval\"]){\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\t\t\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentProperties } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\t \r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<this[\"_segment\"]>}\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(this._workingStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\r\n\t /*\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tif (dataItem.segment) {\r\n\t\t\t$object.softCopyProperties(dataItem.segment, bullet, visualProperties);\r\n\t\t}\r\n\t}*/\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/** \r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/** \r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param  {Slice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\tlet point: IPoint;\r\n\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\r\n\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t// right half\r\n\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 90) { // 91 makes less chances for flickering\r\n\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\t// left half\r\n\t\t\t\telse {\r\n\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\tx *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t}\r\n\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRectangle}\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _seriesType: RadarSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionObjectEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param  {number}  duration  Fade out duration (ms)\r\n\t * @return {Animation}            Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param {IPoint}                    point  Point to place cursor at\r\n\t * @param {\"hard\" | \"soft\" | \"none\"}  stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}  point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\t\t\t\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\t\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.updateRadius, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Series>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis.updateSeriesAngles();\r\n\t}\t\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t\tseries.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\tseries.defaultState.properties.endAngle = this.endAngle;\t\t\t\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\r\n\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t}\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t}\r\n\r\n\t\t\tseries.pixelRadius = radius;\r\n\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\tthis.seriesContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t * \r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PercentChart}\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPercentChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPercentChartProperties}\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPercentChartEvents}\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PercentSeries}\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return {PercentSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (PercentSeriesDataItem.visible && !PercentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tPercentSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tPercentSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PercentChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar r = label.pixelRadius(slice.radius);\r\n\r\n\t\t\t\tx1 = x0 + r * slice.ix;\r\n\t\t\t\ty1 = y0 + r * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = slice.radius * $math.cos(labelAngle);\r\n\t\t\tlet y = slice.radius * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\t\t\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.showReal(interpolationDuration);\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\t\t\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\t\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\t\t}\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif(this.chart){\r\n\t\t\tthis.chart.invalidateLayout();\t\r\n\t\t}\t\t\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]){\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCEvents}\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PyramidSeries}\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @type {\"height\" | \"area\"}\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPyramidSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPyramidSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPyramidSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPyramidSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PyramidSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PyramidSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param  {FunnelSeriesDataItem} dataItem [description]\r\n\t * @return {number}                        [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t * \r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]} dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif(sum == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\t\t\t\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\t\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t * \r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t * @type {Cone}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @type {Orientation}\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\tlet ww = this.width;\r\n\t\tlet pw = 0.8;\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from other element of the same type.\r\n\t * \r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param {number}  value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param {Orientation}  value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {Orientation} Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 319\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { SlicedChart, SlicedChartDataItem, ISlicedChartAdapters, ISlicedChartDataFields, ISlicedChartEvents, ISlicedChartProperties } from \"./.internal/charts/types/SlicedChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentProperties, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { OHLCSeriesDataItem, IOHLCSeriesDataFields, IOHLCSeriesProperties, IOHLCSeriesEvents, IOHLCSeriesAdapters, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { FunnelSeries, FunnelSeriesDataItem, IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties } from \"./.internal/charts/series/FunnelSeries\";\nexport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./.internal/charts/series/PyramidSeries\";\nexport { IPictorialStackedSeriesAdapters, IPictorialStackedSeriesDataFields, IPictorialStackedSeriesEvents, IPictorialStackedSeriesProperties, PictorialStackedSeries, PictorialStackedSeriesDataItem } from \"./.internal/charts/series/PictorialStackedSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/elements/PieTick\";\nexport { FunnelSlice, IFunnelSliceAdapters, IFunnelSliceEvents, IFunnelSliceProperties } from \"./.internal/charts/elements/FunnelSlice\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\nexport { CurvedColumnSeries, CurvedColumnSeriesDataItem, ICurvedColumnSeriesAdapters, ICurvedColumnSeriesDataFields, ICurvedColumnSeriesProperties, ICurvedColumnSeriesEvents } from \"./.internal/charts/series/CurvedColumnSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { DurationAxisDataItem, DurationAxis, IDurationAxisAdapters, IDurationAxisDataFields, IDurationAxisEvents, IDurationAxisProperties } from \"./.internal/charts/axes/DurationAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { OHLC, IOHLCAdapters, IOHLCEvents, IOHLCProperties } from \"./.internal/charts/elements/OHLC\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\nexport { CurvedColumn, ICurvedColumnAdapters, ICurvedColumnEvents, ICurvedColumnProperties } from \"./.internal/charts/elements/CurvedColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"../series/FunnelSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {SlicedChart}\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ISlicedChartDataFields}\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ISlicedChartProperties}\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISlicedChartEvents}\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {FunnelSeries}\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"none\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tpublic get percent():number {\r\n\t\tif(this.parent){\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @type {TreeMapDataItem}\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to `1` to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (series.level == 1) {\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count );\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.columns.each((column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t * @type {OHLC}\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {OHLCSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {OHLCSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IOHLCSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCSeriesEvents}\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {OHLCSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"noRisers\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PictorialStackedSeries}\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\tpicture?: Sprite;\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PictorialStackedSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif(scale == Infinity){\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight;\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth;\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\r\n\t\tsuper.validateDataElements();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PictorialStackedSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return {Sprite} Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param  {FunnelSlice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * CurvedColumnSeries module.\r\n * \r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CurvedColumnSeries}\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t * \r\n\t * @type {CurvedColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t *\r\n\t * @type {CurvedColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DurationAxis}\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDurationAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDurationAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDurationAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDurationAxisEvents}\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DurationAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t * \r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}      min        [description]\r\n\t * @param  {number}      max        [description]\r\n\t * @param  {number}      difference [description]\r\n\t * @param  {number}      gridCount  [description]\r\n\t * @param  {boolean}     strictMode [description]\r\n\t * @return {IMinMaxStep}            [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\tlet unit = this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param {string}  value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param {TimeUnit} timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {TimeUnit} Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t *\r\n\t * @type {NavigationBarDataItem}\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.index < this.startIndex || dataItem.index >= this.endIndex) {\r\n\t\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\t\t\r\n\r\n\t\tlet outOfBounds:boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif(Math.abs(r - l) - paddingLeft - paddingRight == 0){\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif(Math.abs(t - b) - paddingTop - paddingBottom == 0){\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts"],"sourceRoot":""}