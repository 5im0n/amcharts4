{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/series/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts"],"names":["__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__webpack_require__","CategoryAxisDataItem","_super","_this","call","this","className","text","locations","category","startCategory","endCategory","applyTheme","__extends","Object","defineProperty","prototype","properties","value","setProperty","__WEBPACK_IMPORTED_MODULE_0__Axis__","CategoryAxis","dataItemsByCategory","__WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__","_preBuildCount","axisFieldName","adapter","add","replace","_prebuildDisposer","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","events","on","prebuildDataItem","_lastDataItem","createDataItem","component","dataItems","length","getIndex","dataItem","__disabled","appendDataItem","validateDataElement","dispose","createAxisBreak","__WEBPACK_IMPORTED_MODULE_3__CategoryAxisBreak__","validateDataRange","dataCount","startIndex","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","Math","floor","start","endIndex","ceil","end","renderer","invalid","validate","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","iterator","series","xAxis","yAxis","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","i","isInBreak","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","b","index","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","position","indexToPosition","endPosition","isRange","axisFill","location","point","positionToPoint","tick","updateTickElement","grid","updateGridElement","label","updateLabelElement","fill","updateFillElement","fillRule","mask","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","difference","adjustDifference","cellStartLocation","cellEndLocation","breakStartIndex","breakEndIndex","max","min","categoryToPosition","categoryToPoint","angle","positionToAngle","x","y","anyToPoint","anyToPosition","zoomToCategories","zoomToIndexes","getAnyRangePath","startLocation","endLocation","startPos","endPos","getPositionRangePath","roundPosition","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","round","getPositionLabel","initRenderer","baseGrid","disabled","registeredClasses","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","AxisLabelCircular","padding","radius","getPropertyValue","setPropertyValue","fixPoint","axisRadius","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","atan2","sign","inside","relativeRotation","dy","measuredHeight","dx","measuredWidth","labelRadius","rotation","pixelWidth","bbox","width","pixelHeight","height","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","__WEBPACK_IMPORTED_MODULE_0__AxisLabel__","__WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__","XYSeriesDataItem","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","fields","working","stackValue","__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Array__","field","getWorkingValue","getValue","getMax","__WEBPACK_IMPORTED_MODULE_0__Series__","XYSeries","_xAxis","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","_yAxis","isMeasured","mainContainer","__WEBPACK_IMPORTED_MODULE_1__core_Sprite__","element","paper","stacked","tooltip","pointerOrientation","returnBulletDefaultState","_disposers","push","applyInternalDefaults","readerTitle","language","translate","validateData","defineFields","dataFields","_xField","_yField","Error","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","e","_chart","raiseCriticalError","xAxisFieldName","xField","xOpenField","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","__WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__","_xValueFields","_yValueFields","addValueField","axis","__WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","axisRanges","range","fillPath","attr","d","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","chart","xAxes","oldAxis","dataItemsByAxis","removeKey","removeValue","set","registerSeries","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","invalidateData","yAxes","_baseAxis","__WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","processSeriesDataItems","xAxisId","yAxisId","_tmin","_tmax","dispatchImmediately","_smin","_smax","appeared","showTooltipAtPosition","xPosition","yPosition","visible","isHiding","toAxisPosition","updateLegendValue","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_prevTooltipDataItem","type","target","_a","__values","bullets","_b","next","done","setState","showTooltip","hideTooltip","positionBullet","bullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","locationX","locationY","moveTo","bulletLocation","workingLocations","getBulletLocationY","show","duration","animation","a","interpolationDuration","delay","sequencedInterpolation","sequencedInterpolationDelay","hide","minZoomed","maxZoomed","isDisposed","once","handleDataItemWorkingValueChange","event","axisSeries","invalidateProcessedData","field_1","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","setCalculatedValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","hasKey","len","xKey","yKey","stackKeyX","stackKeyY","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","DateAxisDataItem","endDate","dates","getTime","endValue","__WEBPACK_IMPORTED_MODULE_0__ValueAxis__","DateAxis","gridIntervals","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","dateFormats","periodChangeDateFormats","_markUnitChange","_boldUnitChange","_baseIntervalReal","timeUnit","count","_startLocation","_endLocation","_prevSeriesTime","_minSeriesDifference","Number","MAX_VALUE","gridInterval","_gridInterval","gridDuration","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","pushAll","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","periodCount","baseDuration","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","__assign","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","dataChangeUpdate","data","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","clear","startTime","startTimeStr","this_1","undefined","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","valueToPosition","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","sameItemTime","prevSeriesTime","time","abs","differece","_baseInterval","timeInterval","invalidate","breakTemplate","template","startLine","endLine","fillShape","_tooltipDateFormat","tooltipDateFormat","dateFormat","getCurrentLabelFormat","ticks","__WEBPACK_IMPORTED_MODULE_1__Axis__","Start","labels","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__","XYCursor","_lineX","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_lineY","behavior","maxPanOut","interfaceColors","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","selection","createChild","shouldClone","fillOpacity","getFor","lineX","stroke","__WEBPACK_IMPORTED_MODULE_4__core_utils_Color__","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","pixelY","w","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","_positionPrecision","h","validatePosition","triggerMoveReal","triggeredByPointer","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","xRange","yRange","endX","endY","handleXTooltipPosition","handleCursorPositionChange","handleYTooltipPosition","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","interactionsEnabled","parent","reset","_selection","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_0__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__","LineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_0__XYSeries__","LineSeries","minDistance","segments","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__LineSeriesSegment__","_segmentsIterator","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","createNewItems","connect","tensionX","tensionY","segmentsContainer","__WEBPACK_IMPORTED_MODULE_2__core_Container__","bulletsContainer","toFront","previousDataItem","__WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","openSegment","_workingStartIndex","segment","sliceData","_workingEndIndex","openIndex","axisRange","closeIndex","points","propertiesChanged","getFirst","contents","__WEBPACK_IMPORTED_MODULE_12__core_utils_Object__","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","changed","propertyName","createLegendMarker","marker","disposeChildren","line","__WEBPACK_IMPORTED_MODULE_8__core_elements_Line__","copyFrom","x2","__WEBPACK_IMPORTED_MODULE_10__core_elements_Rectangle__","copyToLegendMarker","hasLabels_1","children","child","__WEBPACK_IMPORTED_MODULE_9__core_elements_Label__","clone","tooltipText","PieSeriesDataItem","radiusValue","uidAttr","slice","toValue","color","_legendDataItem","valueLabel","_tick","addSprite","_label","_slice","slices","hiddenInLegend","PieSeries","alignLabels","startAngle","endAngle","colors","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","slicesContainer","__WEBPACK_IMPORTED_MODULE_5__core_Container__","ticksContainer","layout","labelsContainer","initSlice","__WEBPACK_IMPORTED_MODULE_1__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__PieTick__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","renderingFrequency","skipFocusThreshold","defaultState","transitionEasing","__WEBPACK_IMPORTED_MODULE_10__core_utils_Ease__","states","scale","itemReaderText","sliceType","observe","handleSliceScale","handleSliceMove","shiftRadius","togglable","hiddenState","opacity","_leftItems","_rightItems","_currentStartAngle","_arcRect","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","_maxRadiusPercent","radiusValuePercent","percent","reverse","arrangeLabels","slice_1","innerRadius","arc","normalizedMiddleAngle","middleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","itemsFocusable","role","focusable","ev","populateString","hoverable","nextLabel","getNextLabel","bottom","nextDataItem","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","bind","source","getContainerBBox","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","AxisRendererCircular","pixelRadiusReal","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","pixelPerfect","tooltipLocation","setAxis","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","pixelRadius","cos","sin","PI","coordinate","positionToCoordinate","inversed","updateAxisLine","__WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__","gridInnerRadius","zIndex","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","path","pixelInnerRadius","createGrid","__WEBPACK_IMPORTED_MODULE_2__GridCircular__","createFill","__WEBPACK_IMPORTED_MODULE_1__AxisFillCircular__","createLabel","__WEBPACK_IMPORTED_MODULE_3__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__","draw","__WEBPACK_IMPORTED_MODULE_0__AxisFill__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","GridCircular","__WEBPACK_IMPORTED_MODULE_0__Grid__","RadarChartDataItem","__WEBPACK_IMPORTED_MODULE_0__XYChart__","RadarChart","_axisRendererX","__WEBPACK_IMPORTED_MODULE_7__axes_AxisRendererCircular__","_axisRendererY","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererRadial__","innerRadiusModifyer","radarContainer","plotContainer","__WEBPACK_IMPORTED_MODULE_3__core_Container__","align","valign","seriesContainer","_cursorContainer","_bulletMask","__WEBPACK_IMPORTED_MODULE_4__core_elements_Circle__","processAxis","gridContainer","breakContainer","toBack","handleXAxisRangeChange","__WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__","handleYAxisRangeChange","createCursor","__WEBPACK_IMPORTED_MODULE_6__cursors_RadarCursor__","cursor","beforeDraw","rect","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","innerRect","wr","hr","mr","maxRadius","diameter","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","_pixelInnerRadius","definedBBox","createSeries","__WEBPACK_IMPORTED_MODULE_2__series_RadarSeries__","updateXAxis","updateYAxis","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_0__AxisBreak__","DateAxisBreak","startValue","__WEBPACK_IMPORTED_MODULE_0__ValueAxisBreak__","Cursor","__WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__","trackable","clickable","interaction","__WEBPACK_IMPORTED_MODULE_1__core_interaction_Interaction__","body","handleCursorDown","handleCursorUp","handleCursorMove","local","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","pointer","triggerMove","getPositions","triggerDown","setGlobalStyle","__WEBPACK_IMPORTED_MODULE_4__core_interaction_Mouse__","grabbing","triggerUp","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","getHitOption","interactions","default","cancelable","preventDefault","lockElement","__WEBPACK_IMPORTED_MODULE_0__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","RadarSeriesDataItem","__WEBPACK_IMPORTED_MODULE_0__LineSeries__","RadarSeries","connectEnds","unshift","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","LineSeriesSegment","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","__WEBPACK_IMPORTED_MODULE_4__core_utils_Object__","fillElement","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_0__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","gridType","axisAngle","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","title","opposite","__WEBPACK_IMPORTED_MODULE_1__CategoryAxis__","gridLocation","count_1","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","__WEBPACK_IMPORTED_MODULE_2__core_elements_WavedCircle__","updateTooltip","tooltipOrientation","bigNum","axisFullLength","__WEBPACK_IMPORTED_MODULE_0__AxisRendererY__","ClockHand","_axis","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","pin","__WEBPACK_IMPORTED_MODULE_1__core_elements_Circle__","startWidth","endWidth","hand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Trapezoid__","leftSide","rightSide","x0","x1","_pin","removeDispose","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","__WEBPACK_IMPORTED_MODULE_0__SerialChart__","PieChart","chartContainer","minHeight","minWidth","updateRadius","feedLegend","chartCont","seriesRadius","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries__","setLegend","pieSeriesDataItem","isHover","PieTick","__WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__","y0","y1","y2","__WEBPACK_IMPORTED_MODULE_0__elements_Tick__","PieSeries3DDataItem","depthValue","__WEBPACK_IMPORTED_MODULE_0__series_PieSeries__","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Slice3D__","depth","depthPercent","__WEBPACK_IMPORTED_MODULE_7__elements_Bullet__","ChordNode","__WEBPACK_IMPORTED_MODULE_1__axes_AxisLabelCircular__","updateRotation","background","__WEBPACK_IMPORTED_MODULE_3__core_elements_Slice__","invalidateLinks","sum_1","_outgoingSorted","_incomingSorted","arc_1","each","childAngle","childRadius","labelAngle","nextAngle","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","fromNode","mAngle","trueStartAngle","tx","ty","__WEBPACK_IMPORTED_MODULE_0__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","ChordLink","middleLine","__WEBPACK_IMPORTED_MODULE_2__core_elements_QuadraticCurve__","isTemplate","fromX","fromY","toX","toY","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","cp","maskBullets","bulletsMask","positionBullets","mAngle1","mAngle2","cpx","cpy","__WEBPACK_IMPORTED_MODULE_0__FlowDiagramLink__","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__","TreeMapSeries","columns","configField","__WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__","seriesDataItem","showReal","hideReal","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__","AxisRendererY3D","getWidth","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererY__","ColumnSeries3DDataItem","__WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__","ColumnSeries3D","columnsContainer","_columnsContainer","createColumnTemplate","__WEBPACK_IMPORTED_MODULE_1__elements_Column3D__","column3D","Column3D","createAssets","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Rectangle3D__","column","__WEBPACK_IMPORTED_MODULE_0__Column__","Candlestick","lowLine","__WEBPACK_IMPORTED_MODULE_1__core_elements_Line__","highLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","ConeColumn","coneColumn","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Cone__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","GaugeChartDataItem","__WEBPACK_IMPORTED_MODULE_0__RadarChart__","GaugeChart","hands","__WEBPACK_IMPORTED_MODULE_1__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__elements_ClockHand__","processHand","newValue","PieChart3DDataItem","__WEBPACK_IMPORTED_MODULE_0__PieChart__","PieChart3D","invalidateDataUsers","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries3D__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","ChordDiagramDataItem","__WEBPACK_IMPORTED_MODULE_0__FlowDiagram__","ChordDiagram","nodes","__WEBPACK_IMPORTED_MODULE_6__elements_ChordNode__","links","__WEBPACK_IMPORTED_MODULE_7__elements_ChordLink__","nodePadding","chordContainer","__WEBPACK_IMPORTED_MODULE_4__core_Container__","nodesContainer","getNodeValue","node","sum","incomingDataItems","outgoingDataItems","total","_sorted","strNode","invalidateLayout","appear","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_4__utils_Type__","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_1__utils_Color__","p1","p2","__WEBPACK_IMPORTED_MODULE_2__rendering_Path__","point1","__WEBPACK_IMPORTED_MODULE_3__utils_Math__","point2","__WEBPACK_IMPORTED_MODULE_0__Line__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Array__","TreeMapDataItem","rows","hasChildren","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","level","TreeMap","layoutAlgorithm","squarify","seriesTemplates","__WEBPACK_IMPORTED_MODULE_4__series_TreeMapSeries__","zoomable","maxLevels","currentLevel","homeText","__WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__","sorting","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","strictMinMax","xRenderer","axisFills","yRenderer","zoomOutButton","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","toggleBullets","sort","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","seriesAppeared","dataUsers","cursorOverStyle","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Mouse__","zoomToSeriesDataItem","rangeChangeAnimation","binaryTree","dice","sliceDice","handleDataItemValueChange","invalidateDataItems","validateRawData","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_2__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_1__core_Container__","fixLayout","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","marginTop","paddingRight","scrollbarX","scrollbarY","fixColumns","__WEBPACK_IMPORTED_MODULE_4__series_ColumnSeries3D__","clustered","depthIndex","s","i_1","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateDataElementReal","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","removeChildren","cw","ch","__WEBPACK_IMPORTED_MODULE_2__elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Object__","StepLineSeriesDataItem","StepLineSeries","prevPoint","point0","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","setColumnStates","sprites","disableUnusedColumns","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_1__elements_ConeColumn__","orientation","CircleBullet","circle","__WEBPACK_IMPORTED_MODULE_0__Bullet__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","XYChartScrollbar","scrollbarChart","__WEBPACK_IMPORTED_MODULE_4__types_XYChart__","margin","_scrollbarChart","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","rangeChangeDuration","id","transitionDuration","zoomOutAxes","__WEBPACK_IMPORTED_MODULE_7__core_rendering_filters_DesaturateFilter__","updateByOrientation","oldValue","off","handleDataChanged","dataProvider","updateThumb","__WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__","NavigationBarDataItem","__WEBPACK_IMPORTED_MODULE_1__core_DataItem__","NavigationBar","textLink","__WEBPACK_IMPORTED_MODULE_3__core_elements_TextLink__","paddingTop","paddingBottom","_linksIterator","triangle","__WEBPACK_IMPORTED_MODULE_4__core_elements_Triangle__","direction","marginLeft","marginRight","separators","activeLink","fontWeight","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","validateDataElements","getLast","separator","__WEBPACK_IMPORTED_MODULE_0__core_Component__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__","ColumnSeriesDataItem","_column","setColumn","__WEBPACK_IMPORTED_MODULE_14__core_utils_Array__","_rangesColumns","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","ColumnSeries","simplifiedProcessing","__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__","tooltipColorSource","baseAxisSeries","clusterCount","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","l","r","t","percentHeight","maxWidth","maxHeight","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Math__","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","paddingLeft","itemWidth","itemHeight","sprite","change","droppedFromOpen","_dropFromOpenState","_riseFromOpenState","droppedFromPrevious","isInTransition","_columns","__WEBPACK_IMPORTED_MODULE_8__elements_Column__","_dropFromPreviousState","_riseFromPreviousState","legendDataItem","fromOpenState_1","fromPreviousState_1","__WEBPACK_IMPORTED_MODULE_9__core_elements_RoundedRectangle__","Column","applyOnClones","__WEBPACK_IMPORTED_MODULE_1__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY__","topAxesCont","__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","rightAxesCont","rightAxesContainer","__WEBPACK_IMPORTED_MODULE_8__core_elements_ZoomOutButton__","MAX_SAFE_INTEGER","updatePlotElements","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","_parseDataFrom","leftAxesWidth","rightAxesWidth","handleXAxisChange","handleYAxisChange","processXAxis","axisLetter","processXAxisRemoval","processYAxis","processYAxisRemoval","getCommonAxisRange","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","_dataUsers","_xAxes","_yAxes","processSeries","_cursor","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleHideCursor","__WEBPACK_IMPORTED_MODULE_7__cursors_XYCursor__","showAxisTooltip","showSeriesTooltip","hideObjectTooltip","updateSeriesLegend","topLeft","bottomRight","seriesPoints","tooltipHTML","setBounds","top_1","topSeriesPoints","botSeriesPoints","nextY","pointY","pixelMarginBottom","nextHeight","pixelMarginTop","getUpdatedRange","priority","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","panStartRange","newStart","newEnd","newRange","_scrollbarX","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","realRange","dataInvalid","diff","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","__WEBPACK_IMPORTED_MODULE_6__series_XYSeries__","_zoomOutButton","button","__WEBPACK_IMPORTED_MODULE_10__core_Registry__"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.startCategory = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * An alias to `category`.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} Category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * [_preBuildCount description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _preBuildCount: number = 0;\r\n\r\n\t/**\r\n\t * [_prebuildDisposer description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IDisposer}\r\n\t */\r\n\tprotected _prebuildDisposer: IDisposer;\r\n\r\n\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\t// Add adapter to strip down `#id=xxx` from categories\r\n\t\tthis.adapter.add(\"label\", (value) => {\r\n\t\t\tvalue = value.replace(/\\#id=.*$/, \"\");\r\n\t\t\treturn value;\r\n\t\t});\r\n\r\n\t\tthis._prebuildDisposer = registry.events.on(\"enterframe\", this.prebuildDataItem, this);\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [prebuildDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic prebuildDataItem(): void {\r\n\t\tif (this.dataItems.length > 0) {\r\n\t\t\tthis.dataItems.getIndex(this._preBuildCount);\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(this._preBuildCount);\r\n\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis._preBuildCount++;\r\n\r\n\t\t\tif (this._preBuildCount >= this.dataItems.length - 1) {\r\n\t\t\t\tthis._prebuildDisposer.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.ceil((endIndex - startIndex) / maxCount);\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif(this.dataItems.length <= 0){\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t});\r\n\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\t\tfor (let i: number = startIndex; i < endIndex; i = i + this._frequency) {\r\n\t\t\tif (i <= this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t}\r\n\t\t\t\titemIndex++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.__disabled = false;\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\tdataItem.text = dataItem.text; //@todo if this is left, kills custom data item text. this.adapter.apply(\"label\", dataItem.category);\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet cellStartLocation = this.renderer.cellStartLocation;\r\n\t\tlet cellEndLocation = this.renderer.cellEndLocation;\r\n\r\n\t\tdifference -= cellStartLocation;\r\n\t\tdifference -= (1 - cellEndLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - cellStartLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory));\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels.\r\n\t *\r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this.measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this.measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * A maske used for series.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tprotected _rectangleMask: Rectangle;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t})\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem);\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem);\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (!this._xAxis.get()) {\r\n\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.xAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (!this._yAxis.get()) {\r\n\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.yAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\tbullet.setState(\"hover\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tbullet.setState(\"default\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationX(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanimation = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isDisposed() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates series appearance when working value changes.\r\n\t */\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<SeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?:boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue:number;\r\n\t\t\t\t\t\tif(working){\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Start date.\r\n\t *\r\n\t * Used for items that span several dates, like [[DateAxisBreak]].\r\n\t *\r\n\t * @param {Date} date Start date\r\n\t */\r\n\tpublic set startDate(date: Date) {\r\n\t\tthis.date = date;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @todo string?\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * [gridIntervals description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDateFormat: string;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _markUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _boldUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _startLocation: AxisItemLocation = 0;\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _endLocation: AxisItemLocation = 1;\r\n\r\n\t/**\r\n\t * A collection of timestamps of previously processed data items. Used\r\n\t * internally to track distance between data items when processing data.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _prevSeriesTime: Dictionary<string, number> = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to alternating cells.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\t// @todo: will this be visible in docs?\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tif (this.chart.data.length <= 1) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t//let dataItem = dataItemsIterator.getFirst();\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t//dataItem.visible = true;\r\n\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\t//label.invalidate();\r\n\t\t\t\t// when count == 1 this means label represents all the period between grid lines. so we center label because of that.\r\n\t\t\t\t// we don't do that through label.location because it would reset the setting\r\n\t\t\t\t/// and we do not do that to axis ranges\r\n\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\tposition = position + (endPosition - position) / 2;\r\n\t\t\t\t\tendPosition = position;\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// this is used to automatically define baseInterval\r\n\t\tlet sameItemTime: number;\r\n\t\t// actually here we should only get dates of this axis. But it's not likely that the chart will have more than one date axis with different baseInterval.\r\n\t\t// So using this approach would mean we'll have the same baseInterval for all date axes. In case user wants different timeIntervals for different date axes, he can manually set baseInterval\r\n\t\t$object.each(dataItem.dates, (key, date) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\t//let date: Date = dataItem.dates[key];\r\n\t\t\tlet prevSeriesTime: number = this._prevSeriesTime.getKey(key);\r\n\t\t\tlet time: number = date.getTime();\r\n\t\t\t// need to check time difference betweend dates of the same data item (for example open/close. they also influence minSeriesDifference)\r\n\t\t\tif ($type.isNumber(sameItemTime)) {\r\n\t\t\t\tlet difference: number = Math.abs(time - sameItemTime);\r\n\t\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsameItemTime = time;\r\n\r\n\t\t\tlet differece: number = time - prevSeriesTime;\r\n\t\t\tif (differece > 0) {\r\n\t\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._prevSeriesTime.setKey(key, time);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this._startLocation != value) {\r\n\t\t\tthis._startLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this._startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this._endLocation != value) {\r\n\t\t\tthis._endLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this._endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tif (this._tooltipDateFormat != value) {\r\n\t\t\tthis._tooltipDateFormat = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this._tooltipDateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this._markUnitChange != value) {\r\n\t\t\tthis._markUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this._markUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use bold for period beginning?\r\n\t */\r\n\tpublic set boldUnitChange(value: boolean) {\r\n\t\tif (this._boldUnitChange != value) {\r\n\t\t\tthis._boldUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use bold for period beginning?\r\n\t */\r\n\tpublic get boldUnitChange(): boolean {\r\n\t\treturn this._boldUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif(dateFormat){\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif(location > 0){\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif(this.isInBreak(date.getTime())){\r\n\t\t\twhile(date.getTime() < this.max){\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif(this.isInBreak(date.getTime())){\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.grid.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.labels.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight }) });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 }) });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.element.attr({ \"d\": $path.rectangle(w, h) });\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.element.attr({ \"d\": \"\" });\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point, triggeredByPointer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point, triggeredByPointer);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": $path.rectangle(width, this.innerHeight, -width / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": $path.rectangle(this.innerWidth, height, 0, -height / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentPropertiess } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<LineSeriesSegment>}\r\n\t */\r\n\tpublic segments: ListTemplate<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(new LineSeriesSegment());\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(0, range);\r\n\t\t});\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment?: LineSeriesSegment): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t//for (let propertyName in itemProperties) {\r\n\t\t\t//let value: any = itemProperties[propertyName];\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tif (segment) {\r\n\t\t\t\t\tif (segment.properties[<keyof ILineSeriesSegmentPropertiess>propertyName] != value) {\r\n\t\t\t\t\t\tsegment.setPropertyValue(<keyof ILineSeriesSegmentPropertiess>propertyName, value);\r\n\t\t\t\t\t\tsegment.invalidate(); // because setPropertyValue doesn't do this\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\tline.copyFrom(<any>this);\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\tfill.copyFrom(<any>this);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"./PieTick\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, ILegendItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color, iRGB, color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends SeriesDataItem implements ILegendItem<DataItem, IDataItemEvents> {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tprotected _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tprotected _tick: PieTick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t *\r\n\t * @type {LegendDataItem<DataItem, IDataItemEvents>}\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem<DataItem, IDataItemEvents>;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @type {LegendSettings}\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Color of the slice.\r\n\t *\r\n\t * @todo why not Color?\r\n\t * @param {string}  value  Color\r\n\t */\r\n\tpublic set color(value: string) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Color\r\n\t */\r\n\tpublic get color(): string {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param {LegendDataItem<DataItem, IDataItemEvents>}  value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem<DataItem, IDataItemEvents>) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tvalue.label.dataItem = this;\r\n\t\tvalue.valueLabel.dataItem = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {LegendDataItem<DataItem, IDataItemEvents>} Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem<DataItem, IDataItemEvents> {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Pie Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {PieTick} Tick element\r\n\t */\r\n\tpublic get tick(): PieTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tthis._tick = this.component.ticks.create();\r\n\t\t\tthis.addSprite(this._tick);\r\n\t\t\tthis._tick.slice = this.slice;\r\n\t\t\tthis._tick.label = this.label;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\tif (!this._label) {\r\n\t\t\tthis._label = this.component.labels.create();\r\n\t\t\tthis.addSprite(this._label);\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * A Slice element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {Slice} Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\t\t\tthis._slice = this.component.slices.create();\r\n\t\t\tthis.addSprite(this._slice);\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param {boolean} value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\thiddenInLegend?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t * @type {number}\r\n\t */\r\n\talignLabels?: number;\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends ISeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends Series {\r\n\r\n\tpublic _chart:PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t *\r\n\t * @type {ListTemplate<PieTick>}\r\n\t */\r\n\tpublic ticks: ListTemplate<PieTick>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t *\r\n\t * @type {ListTemplate<AxisLabelCircular>}\r\n\t */\r\n\tpublic labels: ListTemplate<AxisLabelCircular>;\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.initSlice(Slice);\r\n\r\n\t\t// Create tick list\r\n\t\tlet tick = new PieTick();\r\n\t\ttick.isMeasured = false;\r\n\t\tthis.ticks = new ListTemplate<PieTick>(tick);\r\n\r\n\t\t// Create labels list\r\n\t\t// @todo create a labelText/labelHTML properties just like\r\n\t\t// tooltipText/tooltipHTML\r\n\t\tlet label = new AxisLabelCircular();\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.radius = 25;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t\tlabel.renderingFrequency = 2;\r\n\t\tthis.labels = new ListTemplate<AxisLabelCircular>(label);\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\t//let hiddenState = this.hiddenState;\r\n\t\t//hiddenState.properties.opacity = 1;\r\n\t\t//hiddenState.properties.endAngle = -90;\r\n\t\t//hiddenState.properties.startAngle = -90;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\tlet hoverState = this.slices.template.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice}                    Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice): Slice {\r\n\t\t// Create a slice template\r\n\t\tlet slice = new sliceType();\r\n\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\t// Create slice hover state\r\n\t\tslice.states.create(\"hover\");\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\r\n\t\tlet hiddenState = slice.hiddenState;\r\n\t\thiddenState.properties.visible = true;\r\n\t\thiddenState.properties.opacity = 1;\r\n\r\n\t\t// Create slices list\r\n\t\tthis.slices = new ListTemplate<Slice>(slice);\r\n\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (Math.abs(this.startAngle - this.endAngle) < 0.01) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.radius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t//if (percent > 0) {\r\n\r\n\t\t\t\tdataItem.__disabled = false;\r\n\r\n\t\t\t\t// SLICE\r\n\t\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t\tslice.parent = this.slicesContainer;\r\n\t\t\t\tslice.radius = this.radius;\r\n\r\n\t\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.innerRadius = this.innerRadius;\r\n\t\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\t\tslice.fill = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\t\tslice.stroke = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t\t// LABEL\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tlabel.parent = this.labelsContainer;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.parent = this.ticksContainer;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet x: number = tick.length + label.radius;\r\n\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = this.radius + tick.length + label.radius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t\t// Apply accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t\tslice.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t\tslice.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply screen reader label\r\n\t\t\t\tif (slice.focusable) {\r\n\t\t\t\t\tslice.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.hoverable) {\r\n\t\t\t\t\tslice.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t\t//}\r\n\t\t\t//else {\r\n\t\t\t//\tdataItem.__disabled = true;\r\n\t\t\t//}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"][]}  dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i: number = 0; i < dataItems.length; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label: AxisLabelCircular = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (i < dataItems.length - 1) {\r\n\t\t\t\t\tlet nextLabel: AxisLabelCircular = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet bottom: number = label.pixelY + label.measuredHeight;\r\n\r\n\t\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param  {number}              index      Current index\r\n\t * @param  {PieSerisDataItem[]}  dataItems  Data items\r\n\t * @return {AxisLabelCircular}              Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): AxisLabelCircular {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param {ColorSet}  value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ColorSet} Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}          marker    Container\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t// todo: make an easy possibility to bind visual properties\r\n\t\t\tchild.bind(\"fill\", slice);\r\n\t\t\tchild.bind(\"stroke\", slice);\r\n\t\t\tchild.bind(\"fillOpacity\", slice);\r\n\t\t\tchild.bind(\"strokeOpacity\", slice);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: Slice = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\tlet value = a[1];\r\n\t\t\tthis.positionBullet(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tlet slice: Slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tdataItem.label.dx = slice.dx + slice.pixelX;\r\n\t\t\tdataItem.label.dy = slice.dy + slice.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PieSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t}\r\n\r\n\tprotected getContainerBBox():IRectangle {\t\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.radius);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.radius);\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal:number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.isMeasured = true;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis:Axis){\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal);\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet element = this.line.element;\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.chart;\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\telement.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius) });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.isNumber(grid.radius) ? grid.radius : this.radius, this.pixelRadius);\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) }) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n  public getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {[type]}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.element.attr({ \"d\": this.fillPath });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.element.attr({ \"d\": $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius) });\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category or a start value.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.background.fillOpacity = 0.5;\r\n\t\t//this.background.fill = color(\"#dadada\");\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionEvents[\"track\"]): IPoint {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * If `triggeredByPointer == false` the cursor will stay there, regardless\r\n\t * movement of the actual pointer(s). This is useful when you want to\r\n\t * manually place cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerMove(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tthis.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = point;\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerDown(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerDownReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerUp(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerUpReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerDown(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerUp(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentPropertiess extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentPropertiess { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentPropertiess;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.element = this.paper.add(\"path\");\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.element = this.paper.add(\"path\");\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\tlet path: string = $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t//if(this.strokeOpacity > 0 || this.strokeSprite.strokeOpacity > 0){ // not good, range stroke is not drawn then\r\n\t\t\tthis.strokeSprite.element.attr({ \"d\": path });\r\n\t\t\t//}\r\n\r\n\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\tthis.fillSprite.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, triggeredByPointer?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle)) {\r\n\r\n\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * Axis angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal);\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.element.attr({ \"d\": $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) }) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.element.attr({ \"d\": path });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend, ILegendItem } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends ISerialChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class PieChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (radius - pixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\t\t\t// todo: set this on default state instead?\r\n\t\t\tseries.radius = pixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\tseries.innerRadius = pixelInnerRadius + seriesRadius * i;\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: ILegendItem<DataItem, IDataItemEvents>[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PieSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (pieSeriesDataItem.visible && !pieSeriesDataItem.isHiding) {\r\n\t\t\t\t\tpieSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tpieSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"./PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tx1 = x0 + label.radius * slice.ix;\r\n\t\t\t\ty1 = y0 + label.radius * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice3D>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice3D>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice3D}                  Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice3D): Slice3D {\r\n\t\tlet slice: Slice3D = <Slice3D>super.initSlice(Slice3D);\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/*\r\n\t\tset startAngle(value: number) {\r\n\t\t\t// 3d pie series can start at 90 angle increments, otherwise big slices might overlap incorrectly\r\n\t\t\tvalue = $math.normalizeAngle(value);\r\n\t\t\tvalue = $math.round(value / 90) * 90;\r\n\r\n\t\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t\t}\r\n\r\n\t\tget startAngle(): number {\r\n\t\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t\t}\r\n\t*/\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this);\r\n\r\n\t\tthis.background.fillOpacity = 0;\r\n\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = 0;\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet arc = slice.arc;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif(!$type.isNumber(locationX)){\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif(!$type.isNumber(locationY)){\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = slice.startAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = slice.startAngle + arc * label.location;\r\n\t\t\tlet startAngle = slice.startAngle + (1 - sum / this.value) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tlet x = (slice.radius + label.radius) * $math.cos(labelAngle);\r\n\t\t\tlet y = (slice.radius + label.radius) * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif(!$type.isNumber(percentWidth)){\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.startAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\r\n\t\t\t\t\tlink.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif(!$type.isNumber(percentWidth)){\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlink.arc = dataItem.getWorkingValue(\"value\") * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlink.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\r\n\t\tlet mAngle = this.trueStartAngle + this.slice.arc / 2;\r\n\r\n\t\tlet tx = this.slice.radius * $math.cos(mAngle);\r\n\t\tlet ty = this.slice.radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tthis.slice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tthis.link.element.attr({ \"d\": path });\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.element.attr({ \"d\": path });\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\treturn this.showReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\treturn this.hideReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.element.attr({\r\n\t\t\t\"d\": $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D })\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t *\r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumn3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 308\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"insert\", this.processHand, this);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"insert\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"insert\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @ignore\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode> = new DictionaryTemplate<string, ChordNode>(new ChordNode());\r\n\r\n\t/**\r\n\t * A list of Chord links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<ChordLink>}\r\n\t */\r\n\tpublic links: ListTemplate<ChordLink> = new ListTemplate<ChordLink>(new ChordLink());\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\tpublic chordContainer:Container;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\t\t\t\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param {FlowDiagramNode}  node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: ChordNode) {\r\n\t\tlet sum = 0;\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t});\r\n\r\n\t\tnode.value = sum;\r\n\r\n\t\tthis.fixMin(node);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\ttotal += node.value;\r\n\t\t\tcount++;\r\n\t\t});\r\n\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / total;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tnode.parent = nodesContainer;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * node.value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.invalidate();\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [appear description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic appear(): void {\r\n\t\tsuper.appear();\r\n\r\n\r\n\r\n\t\t/* quite useless - in case sequencedInterpolation = false, the animation is not visible, as the proportions\r\n\t\t   are the same. if true, then it doesn't look right either.\r\n\t\tlet duration = this.interpolationDuration;\r\n\t\tlet i = 0;\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet delay = 0;\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0.001, 0);\r\n\t\t\tdataItem.setWorkingValue(\"value\", dataItem.value, duration, delay);\r\n\t\t\ti++;\r\n\t\t})*/\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.element.attr({ \"d\": d });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]> = new DictionaryTemplate<string, this[\"_seriesType\"]>(new TreeMapSeries());\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.homeText = this.language.translate(\"Home\");\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = maxX * this.pixelHeight / this.pixelWidth;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\r\n\t\tthis._tempSeries = [];\r\n\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\tseries.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.show();\r\n\r\n\t\t\t\tif (series.level > this.currentLevel + this.maxLevels - 1) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.bulletsContainer.show(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to 0 to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleDataItemValueChange(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset. (px)\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset. (px)\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * List of \"low\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _lowLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * List of \"high\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _highLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, 0);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, 0);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, 1);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, 1);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem:RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column:RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\t// @todo use getPoint() instead of these\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\t\tif(arc > 0){\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returnsan SVG path that is used as mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: -dx,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tthis.circle = this.createChild(Circle);\r\n\t\tthis.circle.shouldClone = false;\r\n\t\tthis.circle.radius = 5;\r\n\t\tthis.circle.isMeasured = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.element = this.paper.add(\"path\");\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._series.events.on(\"insert\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"remove\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"insert\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"insert\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.events.on(\"validated\", this.zoomOutAxes, this);\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\r\n\t\tscrollbarChart.series.push(series);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"remove\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"remove\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX;\r\n\t\t\tlet y: number = thumb.pixelY;\r\n\t\t\tlet w: number = thumb.pixelWidth;\r\n\t\t\tlet h: number = thumb.pixelHeight;\r\n\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: this.pixelWidth - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: this.pixelHeight - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @ignore\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <ColumnSeriesDataItem>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this.columns.iterator(), (column) => {\r\n\t\t\tcolumn.__disabled = true;\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<ColumnSeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(event.target);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t}\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnProperties}\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\tthis.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", ()=>{\r\n\t\t\tif(this.layout == \"none\"){\r\n\t\t\t\tthis.layout = \"absolute\";\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tthis.column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source:this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif(this.column){\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds series (graphs/plots).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartCont = this.chartContainer;\r\n\t\tchartCont.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartCont.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartCont.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartCont.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this.cursor) {\r\n\t\t\tif (this.data.length > 0) {\r\n\t\t\t\tthis.cursor.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// reset minimums\r\n\t\tthis.leftAxesContainer.minWidth = undefined;\r\n\t\tthis.rightAxesContainer.minWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"insert\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"insert\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"remove\"]}  event  Event\r\n\t */\r\n\tpublic processXAxisRemoval(event: IListEvents<Axis>[\"remove\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"insert\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"insert\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"remove\"]}  event  Event\r\n\t */\r\n\tpublic processYAxisRemoval(event: IListEvents<Axis>[\"remove\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\t\t\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\taxis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\taxis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 1;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", (event)=>{\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"insert\", this.processXAxis, this);\r\n\t\t\tthis._xAxes.events.on(\"remove\", this.processXAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"insert\", this.processYAxis, this);\r\n\t\t\tthis._yAxes.events.on(\"remove\", this.processYAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"insert\"]}  event  Event\r\n\t */\r\n\tpublic processSeries(event: IListEvents<XYSeries>[\"insert\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.processSeries(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.data.length == 0) {\r\n\t\t\t\t\tcursor.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.tooltip.hide(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position: IPoint): void {\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.tooltip.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0; i < seriesPoints.length; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0; i < topSeriesPoints.length; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.pixelHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tprotected getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif(xRange){\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif(yRange){\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif(yAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < yAxes.length; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(xAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < xAxes.length; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts"],"sourceRoot":""}