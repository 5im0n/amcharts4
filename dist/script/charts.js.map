{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/series/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts"],"names":["__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__webpack_require__","CategoryAxisDataItem","_super","_this","call","this","className","text","locations","category","startCategory","endCategory","applyTheme","__extends","Object","defineProperty","prototype","properties","value","setProperty","__WEBPACK_IMPORTED_MODULE_0__Axis__","CategoryAxis","dataItemsByCategory","__WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__","_preBuildCount","axisFieldName","adapter","add","replace","_prebuildDisposer","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","events","on","prebuildDataItem","_lastDataItem","createDataItem","component","dataItems","length","getIndex","dataItem","__disabled","appendDataItem","validateDataElement","dispose","createAxisBreak","__WEBPACK_IMPORTED_MODULE_3__CategoryAxisBreak__","validateDataRange","dataCount","startIndex","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","Math","floor","start","endIndex","ceil","end","renderer","invalid","validate","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","iterator","series","xAxis","yAxis","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","i","isInBreak","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","b","index","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","position","indexToPosition","endPosition","isRange","axisFill","location","point","positionToPoint","tick","updateTickElement","grid","updateGridElement","label","updateLabelElement","fill","updateFillElement","fillRule","mask","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","difference","adjustDifference","cellStartLocation","cellEndLocation","breakStartIndex","breakEndIndex","max","min","categoryToPosition","categoryToPoint","angle","positionToAngle","x","y","anyToPoint","anyToPosition","zoomToCategories","zoomToIndexes","getAnyRangePath","startLocation","endLocation","startPos","endPos","getPositionRangePath","roundPosition","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","round","getPositionLabel","initRenderer","baseGrid","disabled","registeredClasses","__WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__","XYSeriesDataItem","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","fields","working","stackValue","__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Array__","field","getWorkingValue","getValue","getMax","__WEBPACK_IMPORTED_MODULE_0__Series__","XYSeries","_xAxis","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","_yAxis","isMeasured","mainContainer","__WEBPACK_IMPORTED_MODULE_1__core_Sprite__","element","paper","stacked","tooltip","pointerOrientation","returnBulletDefaultState","_disposers","push","applyInternalDefaults","readerTitle","language","translate","validateData","defineFields","dataFields","_xField","_yField","Error","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","e","_chart","raiseCriticalError","xAxisFieldName","xField","xOpenField","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","__WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__","_xValueFields","_yValueFields","addValueField","axis","__WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","axisRanges","range","fillPath","attr","d","width","height","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","chart","xAxes","oldAxis","dataItemsByAxis","removeKey","removeValue","set","registerSeries","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","invalidateData","yAxes","_baseAxis","__WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","processSeriesDataItems","xAxisId","yAxisId","_tmin","_tmax","dispatchImmediately","_smin","_smax","appeared","showTooltipAtPosition","xPosition","yPosition","visible","isHiding","toAxisPosition","updateLegendValue","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_prevTooltipDataItem","type","target","_a","__values","bullets","_b","next","done","setState","showTooltip","hideTooltip","positionBullet","bullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","locationX","locationY","moveTo","bulletLocation","workingLocations","getBulletLocationY","getPropertyValue","setPropertyValue","show","duration","animation","a","interpolationDuration","delay","sequencedInterpolation","sequencedInterpolationDelay","hide","minZoomed","maxZoomed","isDisposed","once","handleDataItemWorkingValueChange","event","axisSeries","invalidateProcessedData","field_1","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","setCalculatedValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","hasKey","len","xKey","yKey","stackKeyX","stackKeyY","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","AxisLabelCircular","padding","radius","fixPoint","axisRadius","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","atan2","sign","inside","relativeRotation","dy","measuredHeight","dx","measuredWidth","labelRadius","rotation","pixelWidth","_bbox","pixelHeight","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","__WEBPACK_IMPORTED_MODULE_0__AxisLabel__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","DateAxisDataItem","endDate","dates","getTime","endValue","__WEBPACK_IMPORTED_MODULE_0__ValueAxis__","DateAxis","gridIntervals","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","dateFormats","periodChangeDateFormats","_markUnitChange","_boldUnitChange","_baseIntervalReal","timeUnit","count","_startLocation","_endLocation","_prevSeriesTime","_minSeriesDifference","Number","MAX_VALUE","gridInterval","_gridInterval","gridDuration","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","pushAll","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","periodCount","baseDuration","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","__assign","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","dataChangeUpdate","data","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","clear","startTime","startTimeStr","this_1","undefined","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","valueToPosition","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","sameItemTime","prevSeriesTime","time","abs","differece","_baseInterval","timeInterval","invalidate","breakTemplate","template","startLine","endLine","fillShape","_tooltipDateFormat","tooltipDateFormat","dateFormat","getCurrentLabelFormat","ticks","__WEBPACK_IMPORTED_MODULE_1__Axis__","Start","labels","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__","XYCursor","_lineX","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_lineY","behavior","maxPanOut","interfaceColors","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","selection","createChild","shouldClone","fillOpacity","getFor","lineX","stroke","__WEBPACK_IMPORTED_MODULE_4__core_utils_Color__","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","pixelY","w","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","_positionPrecision","h","validatePosition","triggerMoveReal","triggeredByPointer","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","xRange","yRange","endX","endY","handleXTooltipPosition","handleCursorPositionChange","handleYTooltipPosition","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","parent","reset","_selection","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_0__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__","LineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_0__XYSeries__","LineSeries","minDistance","segments","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__LineSeriesSegment__","_segmentsIterator","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","createNewItems","connect","tensionX","tensionY","segmentsContainer","__WEBPACK_IMPORTED_MODULE_2__core_Container__","bulletsContainer","toFront","previousDataItem","__WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","openSegment","_workingStartIndex","segment","sliceData","_workingEndIndex","openIndex","axisRange","closeIndex","points","propertiesChanged","getFirst","contents","__WEBPACK_IMPORTED_MODULE_12__core_utils_Object__","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","changed","propertyName","createLegendMarker","marker","disposeChildren","line","__WEBPACK_IMPORTED_MODULE_8__core_elements_Line__","copyFrom","x2","__WEBPACK_IMPORTED_MODULE_10__core_elements_Rectangle__","copyToLegendMarker","hasLabels_1","children","child","__WEBPACK_IMPORTED_MODULE_9__core_elements_Label__","clone","tooltipText","PieSeriesDataItem","radiusValue","uidAttr","slice","toValue","color","_legendDataItem","valueLabel","_tick","addSprite","_label","_slice","slices","hiddenInLegend","PieSeries","alignLabels","startAngle","endAngle","colors","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","slicesContainer","__WEBPACK_IMPORTED_MODULE_5__core_Container__","layout","ticksContainer","labelsContainer","initSlice","__WEBPACK_IMPORTED_MODULE_1__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__PieTick__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","renderingFrequency","skipFocusThreshold","defaultState","transitionEasing","__WEBPACK_IMPORTED_MODULE_10__core_utils_Ease__","states","scale","itemReaderText","sliceType","observe","handleSliceScale","handleSliceMove","shiftRadius","togglable","hiddenState","opacity","_leftItems","_rightItems","_currentStartAngle","_arcRect","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","_maxRadiusPercent","radiusValuePercent","percent","reverse","arrangeLabels","slice_1","innerRadius","arc","normalizedMiddleAngle","middleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","itemsFocusable","role","focusable","ev","populateString","hoverable","nextLabel","getNextLabel","bottom","nextDataItem","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","bind","source","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","AxisRendererCircular","pixelRadiusReal","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","pixelPerfect","tooltipLocation","setAxis","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","pixelRadius","cos","sin","PI","coordinate","positionToCoordinate","inversed","updateAxisLine","__WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__","gridInnerRadius","zIndex","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","path","pixelInnerRadius","createGrid","__WEBPACK_IMPORTED_MODULE_2__GridCircular__","createFill","__WEBPACK_IMPORTED_MODULE_1__AxisFillCircular__","createLabel","__WEBPACK_IMPORTED_MODULE_3__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__","draw","__WEBPACK_IMPORTED_MODULE_0__AxisFill__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","GridCircular","__WEBPACK_IMPORTED_MODULE_0__Grid__","RadarChartDataItem","__WEBPACK_IMPORTED_MODULE_0__XYChart__","RadarChart","_axisRendererX","__WEBPACK_IMPORTED_MODULE_7__axes_AxisRendererCircular__","_axisRendererY","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererRadial__","innerRadiusModifyer","radarContainer","plotContainer","__WEBPACK_IMPORTED_MODULE_3__core_Container__","seriesContainer","_cursorContainer","_bulletMask","__WEBPACK_IMPORTED_MODULE_4__core_elements_Circle__","processAxis","gridContainer","breakContainer","toBack","handleXAxisRangeChange","__WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__","handleYAxisRangeChange","createCursor","__WEBPACK_IMPORTED_MODULE_6__cursors_RadarCursor__","cursor","beforeDraw","radarCont","rect","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","innerRect","wr","hr","mr","maxRadius","diameter","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","_pixelInnerRadius","x0","y0","x1","y1","maxWidth","maxHeight","createSeries","__WEBPACK_IMPORTED_MODULE_2__series_RadarSeries__","updateXAxis","updateYAxis","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_0__AxisBreak__","DateAxisBreak","startValue","__WEBPACK_IMPORTED_MODULE_0__ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","Cursor","__WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__","trackable","clickable","interaction","__WEBPACK_IMPORTED_MODULE_1__core_interaction_Interaction__","body","handleCursorDown","handleCursorUp","handleCursorMove","interactionsEnabled","local","pointer","triggerMove","getPositions","triggerDown","setGlobalStyle","__WEBPACK_IMPORTED_MODULE_4__core_interaction_Mouse__","grabbing","triggerUp","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","getHitOption","interactions","default","cancelable","preventDefault","__WEBPACK_IMPORTED_MODULE_0__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","RadarSeriesDataItem","__WEBPACK_IMPORTED_MODULE_0__LineSeries__","RadarSeries","connectEnds","unshift","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","LineSeriesSegment","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","__WEBPACK_IMPORTED_MODULE_4__core_utils_Object__","fillElement","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_0__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","gridType","axisAngle","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","title","valign","opposite","__WEBPACK_IMPORTED_MODULE_1__CategoryAxis__","gridLocation","count_1","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","__WEBPACK_IMPORTED_MODULE_2__core_elements_WavedCircle__","updateTooltip","tooltipOrientation","bigNum","axisFullLength","__WEBPACK_IMPORTED_MODULE_0__AxisRendererY__","ClockHand","_axis","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","pin","__WEBPACK_IMPORTED_MODULE_1__core_elements_Circle__","startWidth","endWidth","hand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Trapezoid__","leftSide","rightSide","_pin","removeDispose","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","__WEBPACK_IMPORTED_MODULE_0__SerialChart__","PieChart","align","chartContainer","updateRadius","feedLegend","chartCont","seriesRadius","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries__","setLegend","pieSeriesDataItem","isHover","PieTick","__WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__","y2","__WEBPACK_IMPORTED_MODULE_0__elements_Tick__","PieSeries3DDataItem","depthValue","__WEBPACK_IMPORTED_MODULE_0__series_PieSeries__","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Slice3D__","depth","depthPercent","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__","TreeMapSeries","columns","configField","__WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__","seriesDataItem","showReal","hideReal","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__","AxisRendererY3D","getWidth","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererY__","ColumnSeries3DDataItem","__WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__","ColumnSeries3D","columnsContainer","_columnsContainer","createColumnTemplate","__WEBPACK_IMPORTED_MODULE_1__elements_Column3D__","column3D","Column3D","createAssets","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Rectangle3D__","column","__WEBPACK_IMPORTED_MODULE_0__Column__","Candlestick","lowLine","__WEBPACK_IMPORTED_MODULE_1__core_elements_Line__","highLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","ConeColumn","coneColumn","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Cone__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_66__internal_charts_cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","GaugeChartDataItem","__WEBPACK_IMPORTED_MODULE_0__RadarChart__","GaugeChart","hands","__WEBPACK_IMPORTED_MODULE_1__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__elements_ClockHand__","processHand","newValue","PieChart3DDataItem","__WEBPACK_IMPORTED_MODULE_0__PieChart__","PieChart3D","invalidateDataUsers","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries3D__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Array__","TreeMapDataItem","rows","hasChildren","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","level","TreeMap","layoutAlgorithm","squarify","seriesTemplates","__WEBPACK_IMPORTED_MODULE_4__series_TreeMapSeries__","zoomable","maxLevels","currentLevel","homeText","__WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__","sorting","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","strictMinMax","xRenderer","axisFills","yRenderer","zoomOutButton","zoomToChartDataItem","_homeDataItem","isTemplate","_navigationBar","navigationBar","links","createTreeSeries","homeDataItem","_homeText","layoutItems","toggleBullets","sort","node","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","seriesAppeared","dataUsers","cursorOverStyle","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Mouse__","zoomToSeriesDataItem","rangeChangeAnimation","binaryTree","dice","sliceDice","handleDataItemValueChange","invalidateDataItems","validateRawData","sum","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_2__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_1__core_Container__","fixLayout","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","marginTop","paddingRight","scrollbarX","scrollbarY","fixColumns","__WEBPACK_IMPORTED_MODULE_4__series_ColumnSeries3D__","clustered","depthIndex","s","i_1","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateDataElementReal","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","removeChildren","cw","ch","__WEBPACK_IMPORTED_MODULE_2__elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Object__","StepLineSeriesDataItem","StepLineSeries","prevPoint","point0","point1","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","percentWidth","offset","temp","setColumnStates","sprites","disableUnusedColumns","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_1__elements_ConeColumn__","orientation","CircleBullet","circle","__WEBPACK_IMPORTED_MODULE_0__Bullet__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","XYChartScrollbar","scrollbarChart","__WEBPACK_IMPORTED_MODULE_4__types_XYChart__","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","_unselectedOverlay","background","thumbBackground","thumb","hoverState","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","rangeChangeDuration","id","transitionDuration","zoomOutAxes","__WEBPACK_IMPORTED_MODULE_7__core_rendering_filters_DesaturateFilter__","updateByOrientation","oldValue","off","handleDataChanged","dataProvider","updateThumb","__WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__","NavigationBarDataItem","__WEBPACK_IMPORTED_MODULE_1__core_DataItem__","NavigationBar","textLink","__WEBPACK_IMPORTED_MODULE_3__core_elements_TextLink__","paddingTop","paddingBottom","_linksIterator","triangle","__WEBPACK_IMPORTED_MODULE_4__core_elements_Triangle__","direction","marginLeft","marginRight","separators","activeLink","fontWeight","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","validateDataElements","getLast","separator","__WEBPACK_IMPORTED_MODULE_0__core_Component__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__","ColumnSeriesDataItem","_column","setColumn","__WEBPACK_IMPORTED_MODULE_14__core_utils_Array__","_rangesColumns","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","ColumnSeries","simplifiedProcessing","__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__","tooltipColorSource","baseAxisSeries","clusterCount","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","l","r","t","percentHeight","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Math__","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","paddingLeft","itemWidth","itemHeight","sprite","change","droppedFromOpen","_dropFromOpenState","_riseFromOpenState","droppedFromPrevious","isInTransition","_columns","__WEBPACK_IMPORTED_MODULE_8__elements_Column__","_dropFromPreviousState","_riseFromPreviousState","legendDataItem","fromOpenState_1","fromPreviousState_1","__WEBPACK_IMPORTED_MODULE_9__core_elements_RoundedRectangle__","Column","applyOnClones","__WEBPACK_IMPORTED_MODULE_1__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY__","maskBullets","topAxesCont","__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","rightAxesCont","rightAxesContainer","__WEBPACK_IMPORTED_MODULE_8__core_elements_ZoomOutButton__","MAX_SAFE_INTEGER","updatePlotElements","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","_parseDataFrom","leftAxesWidth","rightAxesWidth","handleXAxisChange","handleYAxisChange","processXAxis","axisLetter","processXAxisRemoval","processYAxis","processYAxisRemoval","getCommonAxisRange","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","_dataUsers","_xAxes","_yAxes","processSeries","_cursor","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleHideCursor","__WEBPACK_IMPORTED_MODULE_7__cursors_XYCursor__","showAxisTooltip","showSeriesTooltip","hideObjectTooltip","updateSeriesLegend","topLeft","bottomRight","seriesPoints","each","tooltipHTML","setBounds","top_1","topSeriesPoints","botSeriesPoints","nextY","pointY","pixelMarginBottom","nextHeight","pixelMarginTop","getUpdatedRange","priority","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","panStartRange","newStart","newEnd","newRange","_scrollbarX","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","realRange","dataInvalid","diff","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","__WEBPACK_IMPORTED_MODULE_6__series_XYSeries__","_zoomOutButton","button","__WEBPACK_IMPORTED_MODULE_10__core_Registry__"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.startCategory = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * An alias to `category`.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} Category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<CategoryAxis, ICategoryAxisEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<CategoryAxis, ICategoryAxisEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * [_preBuildCount description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _preBuildCount: number = 0;\r\n\r\n\t/**\r\n\t * [_prebuildDisposer description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IDisposer}\r\n\t */\r\n\tprotected _prebuildDisposer: IDisposer;\r\n\r\n\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\t// Add adapter to strip down `#id=xxx` from categories\r\n\t\tthis.adapter.add(\"label\", (value) => {\r\n\t\t\tvalue = value.replace(/\\#id=.*$/, \"\");\r\n\t\t\treturn value;\r\n\t\t});\r\n\r\n\t\tthis._prebuildDisposer = registry.events.on(\"enterframe\", this.prebuildDataItem, this);\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [prebuildDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic prebuildDataItem(): void {\r\n\t\tif (this.dataItems.length > 0) {\r\n\t\t\tthis.dataItems.getIndex(this._preBuildCount);\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(this._preBuildCount);\r\n\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis._preBuildCount++;\r\n\r\n\t\t\tif (this._preBuildCount >= this.dataItems.length - 1) {\r\n\t\t\t\tthis._prebuildDisposer.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.ceil((endIndex - startIndex) / maxCount);\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif(this.dataItems.length <= 0){\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t});\r\n\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\t\tfor (let i: number = startIndex; i < endIndex; i = i + this._frequency) {\r\n\t\t\tif (i <= this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t}\r\n\t\t\t\titemIndex++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.__disabled = false;\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\tdataItem.text = dataItem.text; //@todo if this is left, kills custom data item text. this.adapter.apply(\"label\", dataItem.category);\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet cellStartLocation = this.renderer.cellStartLocation;\r\n\t\tlet cellEndLocation = this.renderer.cellEndLocation;\r\n\r\n\t\tdifference -= cellStartLocation;\r\n\t\tdifference -= (1 - cellEndLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - cellStartLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory));\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<XYSeries, IXYSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<XYSeries, IXYSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * A maske used for series.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tprotected _rectangleMask: Rectangle;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t})\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem);\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem);\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (!this._xAxis.get()) {\r\n\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.xAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (!this._yAxis.get()) {\r\n\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.yAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecen.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\t\t\t\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\tbullet.setState(\"hover\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tbullet.setState(\"default\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationX(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanimation = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isDisposed() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates series appearance when working value changes.\r\n\t */\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<SeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?:boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue:number;\r\n\t\t\t\t\t\tif(working){\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\t\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisLabelCircular, IAxisLabelCircularEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<AxisLabelCircular, IAxisLabelCircularEvents>>;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels.\r\n\t *\r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this.measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this.measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\t\t\tlet pixelWidth = this._bbox.width;\r\n\t\t\tlet pixelHeight = this._bbox.height;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Start date.\r\n\t *\r\n\t * Used for items that span several dates, like [[DateAxisBreak]].\r\n\t *\r\n\t * @param {Date} date Start date\r\n\t */\r\n\tpublic set startDate(date: Date) {\r\n\t\tthis.date = date;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @todo string?\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<DateAxis, IDateAxisEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<DateAxis, IDateAxisEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * [gridIntervals description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDateFormat: string;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _markUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _boldUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _startLocation: AxisItemLocation = 0;\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _endLocation: AxisItemLocation = 1;\r\n\r\n\t/**\r\n\t * A collection of timestamps of previously processed data items. Used\r\n\t * internally to track distance between data items when processing data.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _prevSeriesTime: Dictionary<string, number> = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to alternating cells.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\t// @todo: will this be visible in docs?\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tif (this.chart.data.length <= 1) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\t\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t//let dataItem = dataItemsIterator.getFirst();\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t//dataItem.visible = true;\r\n\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\t//label.invalidate();\r\n\t\t\t\t// when count == 1 this means label represents all the period between grid lines. so we center label because of that.\r\n\t\t\t\t// we don't do that through label.location because it would reset the setting\r\n\t\t\t\t/// and we do not do that to axis ranges\r\n\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\tposition = position + (endPosition - position) / 2;\r\n\t\t\t\t\tendPosition = position;\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// this is used to automatically define baseInterval\r\n\t\tlet sameItemTime: number;\r\n\t\t// actually here we should only get dates of this axis. But it's not likely that the chart will have more than one date axis with different baseInterval.\r\n\t\t// So using this approach would mean we'll have the same baseInterval for all date axes. In case user wants different timeIntervals for different date axes, he can manually set baseInterval\r\n\t\t$object.each(dataItem.dates, (key, date) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\t//let date: Date = dataItem.dates[key];\r\n\t\t\tlet prevSeriesTime: number = this._prevSeriesTime.getKey(key);\r\n\t\t\tlet time: number = date.getTime();\r\n\t\t\t// need to check time difference betweend dates of the same data item (for example open/close. they also influence minSeriesDifference)\r\n\t\t\tif ($type.isNumber(sameItemTime)) {\r\n\t\t\t\tlet difference: number = Math.abs(time - sameItemTime);\r\n\t\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsameItemTime = time;\r\n\r\n\t\t\tlet differece: number = time - prevSeriesTime;\r\n\t\t\tif (differece > 0) {\r\n\t\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._prevSeriesTime.setKey(key, time);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this._startLocation != value) {\r\n\t\t\tthis._startLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this._startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this._endLocation != value) {\r\n\t\t\tthis._endLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this._endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tif (this._tooltipDateFormat != value) {\r\n\t\t\tthis._tooltipDateFormat = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this._tooltipDateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this._markUnitChange != value) {\r\n\t\t\tthis._markUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this._markUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use bold for period beginning?\r\n\t */\r\n\tpublic set boldUnitChange(value: boolean) {\r\n\t\tif (this._boldUnitChange != value) {\r\n\t\t\tthis._boldUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use bold for period beginning?\r\n\t */\r\n\tpublic get boldUnitChange(): boolean {\r\n\t\treturn this._boldUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif(dateFormat){\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif(location > 0){\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif(this.isInBreak(date.getTime())){\r\n\t\t\twhile(date.getTime() < this.max){\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif(this.isInBreak(date.getTime())){\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.grid.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.labels.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Cursor's event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher}\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<XYCursor, IXYCursorEvents>>;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight }) });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 }) });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.element.attr({ \"d\": $path.rectangle(w, h) });\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.element.attr({ \"d\": \"\" });\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point, triggeredByPointer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point, triggeredByPointer);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": $path.rectangle(width, this.innerHeight, -width / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": $path.rectangle(this.innerWidth, height, 0, -height / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineY.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentPropertiess } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<LineSeries, ILineSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<LineSeries, ILineSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<LineSeriesSegment>}\r\n\t */\r\n\tpublic segments: ListTemplate<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(new LineSeriesSegment());\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(0, range);\r\n\t\t});\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex) {\r\n\t\t\tthis.openSegment(closeIndex + 1, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment?: LineSeriesSegment): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t//for (let propertyName in itemProperties) {\r\n\t\t\t//let value: any = itemProperties[propertyName];\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tif (segment) {\r\n\t\t\t\t\tif (segment.properties[<keyof ILineSeriesSegmentPropertiess>propertyName] != value) {\r\n\t\t\t\t\t\tsegment.setPropertyValue(<keyof ILineSeriesSegmentPropertiess>propertyName, value);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\tline.copyFrom(<any>this);\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\tfill.copyFrom(<any>this);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"./PieTick\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, ILegendItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color, iRGB, color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends SeriesDataItem implements ILegendItem<DataItem, IDataItemEvents> {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tprotected _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tprotected _tick: PieTick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t *\r\n\t * @type {LegendDataItem<DataItem, IDataItemEvents>}\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem<DataItem, IDataItemEvents>;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem \r\n\t *\r\n\t * @type {LegendSettings}\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Color of the slice.\r\n\t *\r\n\t * @todo why not Color?\r\n\t * @param {string}  value  Color\r\n\t */\r\n\tpublic set color(value: string) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Color\r\n\t */\r\n\tpublic get color(): string {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param {LegendDataItem<DataItem, IDataItemEvents>}  value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem<DataItem, IDataItemEvents>) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tvalue.label.dataItem = this;\r\n\t\tvalue.valueLabel.dataItem = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {LegendDataItem<DataItem, IDataItemEvents>} Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem<DataItem, IDataItemEvents> {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Pie Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {PieTick} Tick element\r\n\t */\r\n\tpublic get tick(): PieTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tthis._tick = this.component.ticks.create();\r\n\t\t\tthis.addSprite(this._tick);\r\n\t\t\tthis._tick.slice = this.slice;\r\n\t\t\tthis._tick.label = this.label;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\tif (!this._label) {\r\n\t\t\tthis._label = this.component.labels.create();\r\n\t\t\tthis.addSprite(this._label);\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * A Slice element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {Slice} Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\t\t\tthis._slice = this.component.slices.create();\r\n\t\t\tthis.addSprite(this._slice);\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param {boolean} value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\thiddenInLegend?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t * @type {number}\r\n\t */\r\n\talignLabels?: number;\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends ISeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<PieSeries, IPieSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<PieSeries, IPieSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t *\r\n\t * @type {ListTemplate<PieTick>}\r\n\t */\r\n\tpublic ticks: ListTemplate<PieTick>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t *\r\n\t * @type {ListTemplate<AxisLabelCircular>}\r\n\t */\r\n\tpublic labels: ListTemplate<AxisLabelCircular>;\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tslicesContainer.layout = \"none\";\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.initSlice(Slice);\r\n\r\n\t\t// Create tick list\r\n\t\tlet tick = new PieTick();\r\n\t\ttick.isMeasured = false;\r\n\t\tthis.ticks = new ListTemplate<PieTick>(tick);\r\n\r\n\t\t// Create labels list\r\n\t\t// @todo create a labelText/labelHTML properties just like\r\n\t\t// tooltipText/tooltipHTML\r\n\t\tlet label = new AxisLabelCircular();\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.radius = 25;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t\tlabel.renderingFrequency = 2;\r\n\t\tthis.labels = new ListTemplate<AxisLabelCircular>(label);\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\t//let hiddenState = this.hiddenState;\r\n\t\t//hiddenState.properties.opacity = 1;\r\n\t\t//hiddenState.properties.endAngle = -90;\r\n\t\t//hiddenState.properties.startAngle = -90;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\tlet hoverState = this.slices.template.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice}                    Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice): Slice {\r\n\t\t// Create a slice template\r\n\t\tlet slice = new sliceType();\r\n\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\t// Create slice hover state\r\n\t\tslice.states.create(\"hover\");\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\r\n\t\tlet hiddenState = slice.hiddenState;\r\n\t\thiddenState.properties.visible = true;\r\n\t\thiddenState.properties.opacity = 1;\r\n\r\n\t\t// Create slices list\r\n\t\tthis.slices = new ListTemplate<Slice>(slice);\r\n\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (Math.abs(this.startAngle - this.endAngle) < 0.01) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.radius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\tif (percent > 0) {\r\n\r\n\t\t\t\tdataItem.__disabled = false;\r\n\r\n\t\t\t\t// SLICE\r\n\t\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t\tslice.parent = this.slicesContainer;\r\n\t\t\t\tslice.radius = this.radius;\r\n\r\n\t\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.innerRadius = this.innerRadius;\r\n\t\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\t\tslice.fill = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\t\tslice.stroke = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t\t// LABEL\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tlabel.parent = this.labelsContainer;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.parent = this.ticksContainer;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet x: number = tick.length + label.radius;\r\n\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = this.radius + tick.length + label.radius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t\t// Apply accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t\tslice.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t\tslice.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply screen reader label\r\n\t\t\t\tif (slice.focusable) {\r\n\t\t\t\t\tslice.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.hoverable) {\r\n\t\t\t\t\tslice.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"][]}  dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i: number = 0; i < dataItems.length; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label: AxisLabelCircular = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (i < dataItems.length - 1) {\r\n\t\t\t\t\tlet nextLabel: AxisLabelCircular = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet bottom: number = label.pixelY + label.measuredHeight;\r\n\r\n\t\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param  {number}              index      Current index\r\n\t * @param  {PieSerisDataItem[]}  dataItems  Data items\r\n\t * @return {AxisLabelCircular}              Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): AxisLabelCircular {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param {ColorSet}  value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ColorSet} Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}          marker    Container\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t// todo: make an easy possibility to bind visual properties\r\n\t\t\tchild.bind(\"fill\", slice);\r\n\t\t\tchild.bind(\"stroke\", slice);\r\n\t\t\tchild.bind(\"fillOpacity\", slice);\r\n\t\t\tchild.bind(\"strokeOpacity\", slice);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet location = 1;\r\n\t\tif ($type.isNumber(bullet.locationX)) {\r\n\t\t\tlocation = bullet.locationX;\r\n\t\t}\r\n\t\tif ($type.isNumber(bullet.locationY)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo({ x: slice.ix * slice.radius * slice.scale * location, y: slice.iy * slice.radius * slice.scale * location });\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: Slice = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\tlet value = a[1];\r\n\t\t\tthis.positionBullet(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tlet slice: Slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tdataItem.label.dx = slice.dx + slice.pixelX;\r\n\t\t\tdataItem.label.dy = slice.dy + slice.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PieSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRenderer, IAxisRendererEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<AxisRendererCircular, IAxisRendererCircularEvents>>;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal:number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.isMeasured = true;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis:Axis){\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal);\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet element = this.line.element;\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.chart;\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\telement.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius) });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.isNumber(grid.radius) ? grid.radius : this.radius, this.pixelRadius);\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) }) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n  public getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {[type]}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {AxisFillEventDispatcher<AMEvent<AxisFillCircular, IAxisFillCircularEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<AxisFillCircular, IAxisFillCircularEvents>>;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.isNumber(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.element.attr({ \"d\": this.fillPath });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {GridEventDispatcher<AMEvent<GridCircular, IGridCircularEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<GridCircular, IGridCircularEvents>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<RadarChart, IRadarChartEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<RadarChart, IRadarChartEvents>>;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.width = percent(100);\r\n\t\tradarContainer.height = percent(100);\r\n\t\tradarContainer.layout = \"none\";\r\n\r\n\t\tradarContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = radarCont.innerWidth / rect.width;\r\n\t\tlet hr = radarCont.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(radarCont.innerHeight, radarCont.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(radarCont.innerWidth / rect.width, radarCont.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, diameter / 2);\r\n\r\n\t\tthis._bulletMask.element.attr({ \"d\": $path.arc(startAngle, endAngle - startAngle, diameter / 2, this._pixelInnerRadius) });\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = diameter / 2;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = diameter / 2;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tlet x0 = rect.x;\r\n\t\tlet y0 = rect.y;\r\n\t\tlet x1 = rect.x + rect.width;\r\n\t\tlet y1 = rect.y + rect.height;\r\n\r\n\t\tlet point: IPoint = { x: this.seriesContainer.maxWidth / 2 - diameter / 2 * (x0 + (x1 - x0) / 2), y: this.seriesContainer.maxHeight / 2 - diameter / 2 * (y0 + (y1 - y0) / 2) };\r\n\r\n\t\tthis.radarContainer.moveTo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Event disptacher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<CategoryAxisBreak, ICategoryAxisBreakEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<CategoryAxisBreak, ICategoryAxisBreakEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category or a start value.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<DateAxisBreak, IDateAxisBreakEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<DateAxisBreak, IDateAxisBreakEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Cursor's event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher}\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<Cursor, ICursorEvents>>;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.background.fillOpacity = 0.5;\r\n\t\t//this.background.fill = color(\"#dadada\");\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionEvents[\"track\"]): IPoint {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * If `triggeredByPointer == false` the cursor will stay there, regardless\r\n\t * movement of the actual pointer(s). This is useful when you want to\r\n\t * manually place cursor.\r\n\t * \r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerMove(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tthis.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t * \r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = point;\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t * \r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerDown(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerDownReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t * \r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t * \r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerUp(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerUpReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t * \r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\t\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerDown(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerUp(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<RadarSeries, IRadarSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<RadarSeries, IRadarSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentPropertiess extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentPropertiess { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentPropertiess;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<LineSeriesSegment, ILineSeriesSegmentEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<LineSeriesSegment, ILineSeriesSegmentEvents>>;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.element = this.paper.add(\"path\");\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.element = this.paper.add(\"path\");\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\tlet path: string = $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t//if(this.strokeOpacity > 0 || this.strokeSprite.strokeOpacity > 0){ // not good, range stroke is not drawn then\r\n\t\t\tthis.strokeSprite.element.attr({ \"d\": path });\r\n\t\t\t//}\r\n\r\n\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\tthis.fillSprite.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.horizontalCenter = \"none\";\r\n\t\tlineElement.verticalCenter = \"none\";\r\n\t\tlineElement.visible = true;\r\n\t\tlineElement.fillOpacity = 0;\r\n\t\tlineElement.tooltipText = undefined;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.horizontalCenter = \"none\";\r\n\t\tfillElement.verticalCenter = \"none\";\r\n\t\tfillElement.visible = true;\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t\tfillElement.tooltipText = undefined;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Cursor's event dispatcher\r\n\t * @type {SpriteEventDispatcher}\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<RadarCursor, IRadarCursorEvents>>;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, triggeredByPointer?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle)) {\r\n\r\n\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * Axis angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRenderer, AxisRendererEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<AxisRendererRadial, IAxisRendererRadialEvents>>;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal);\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.element.attr({ \"d\": $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) }) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.element.attr({ \"d\": path });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<ClockHand, IClockHandEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<ClockHand, IClockHandEvents>>;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend, ILegendItem } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends ISerialChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class PieChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<PieChart, IPieChartEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<PieChart, IPieChartEvents>>;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", ()=>{\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (radius - pixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\t\t\t// todo: set this on default state instead?\r\n\t\t\tseries.radius = pixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\tseries.innerRadius = pixelInnerRadius + seriesRadius * i;\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t});\r\n\r\n\t\tlet x0 = rect.x;\r\n\t\tlet y0 = rect.y;\r\n\t\tlet x1 = rect.x + rect.width;\r\n\t\tlet y1 = rect.y + rect.height;\r\n\r\n\r\n\t\tlet point: IPoint = { x: this.seriesContainer.maxWidth / 2 - radius * (x0 + (x1 - x0) / 2), y: this.seriesContainer.maxHeight / 2 - radius * (y0 + (y1 - y0) / 2) };\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.moveTo(point);\r\n\t\t});\r\n\r\n\t\tthis.bulletsContainer.moveTo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: ILegendItem<DataItem, IDataItemEvents>[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PieSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif(legendSettings){\r\n\t\t\t\t\t\tif(legendSettings.labelText){\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(legendSettings.itemLabelText){\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tif(legendSettings.valueText){\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(legendSettings.itemValueText){\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (pieSeriesDataItem.visible && !pieSeriesDataItem.isHiding) {\r\n\t\t\t\t\tpieSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tpieSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"./PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<PieTick, IPieTickEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<PieTick, IPieTickEvents>>;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tx1 = x0 + label.radius * slice.ix;\r\n\t\t\t\ty1 = y0 + label.radius * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<PieSeries3D, IPieSeries3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<PieSeries3D, IPieSeries3DEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice3D>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice3D>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice3D}                  Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice3D): Slice3D {\r\n\t\tlet slice: Slice3D = <Slice3D>super.initSlice(Slice3D);\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/*\r\n\t\tset startAngle(value: number) {\r\n\t\t\t// 3d pie series can start at 90 angle increments, otherwise big slices might overlap incorrectly\r\n\t\t\tvalue = $math.normalizeAngle(value);\r\n\t\t\tvalue = $math.round(value / 90) * 90;\r\n\r\n\t\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t\t}\r\n\r\n\t\tget startAngle(): number {\r\n\t\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t\t}\r\n\t*/\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<TreeMapSeries, ITreeMapSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<TreeMapSeries, ITreeMapSeriesEvents>>;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\treturn this.showReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\treturn this.hideReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRendererX3D, IAxisRendererX3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<AxisRendererX3D, IAxisRendererX3DEvents>>;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRendererY3D, IAxisRendererY3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<AxisRendererY3D, IAxisRendererY3DEvents>>;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.element.attr({\r\n\t\t\t\"d\": $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D })\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<ColumnSeries3D, IColumnSeries3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<ColumnSeries3D, IColumnSeries3DEvents>>;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t *\r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<Column3D, IColumn3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<Column3D, IColumn3DEvents>>;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<Candlestick, ICandlestickEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<Candlestick, ICandlestickEvents>>;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<RadarColumn, IRadarColumnEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<RadarColumn, IRadarColumnEvents>>;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<ConeColumn, IConeColumnEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<ConeColumn, IConeColumnEvents>>;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 303\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<GaugeChart, IGaugeChartEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<GaugeChart, IGaugeChartEvents>>;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"insert\", this.processHand, this);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"insert\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"insert\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<PieChart3D, IPieChart3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<PieChart3D, IPieChart3DEvents>>;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<TreeMap, ITreeMapEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<TreeMap, ITreeMapEvents>>;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]> = new DictionaryTemplate<string, this[\"_seriesType\"]>(new TreeMapSeries());\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.homeText = this.language.translate(\"Home\");\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = maxX * this.pixelHeight / this.pixelWidth;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\r\n\t\tthis._tempSeries = [];\r\n\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\tseries.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.show();\r\n\r\n\t\t\t\tif (series.level > this.currentLevel + this.maxLevels - 1) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.bulletsContainer.show(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to 0 to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleDataItemValueChange(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<XYChart3D, IXYChart3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<XYChart3D, IXYChart3DEvents>>;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset. (px)\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset. (px)\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<CandlestickSeries, ICandlestickSeriesEvents>>} Event dispatcher instance\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public events!: SpriteEventDispatcher<AMEvent<CandlestickSeries, CandlestickSeriesEvents>>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * List of \"low\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _lowLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * List of \"high\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _highLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<StepLineSeries, IStepLineSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<StepLineSeries, IStepLineSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, 0);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, 0);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, 1);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, 1);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem:RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column:RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<RadarColumnSeries, IRadarColumnSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<RadarColumnSeries, IRadarColumnSeriesEvents>>;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\t// @todo use getPoint() instead of these\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\t\tif(arc > 0){\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returnsan SVG path that is used as mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<ConeSeries, IConeSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<ConeSeries, IConeSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: -dx,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<CircleBullet, ICircleBulletEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<CircleBullet, ICircleBulletEvents>>;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tthis.circle = this.createChild(Circle);\r\n\t\tthis.circle.shouldClone = false;\r\n\t\tthis.circle.radius = 5;\r\n\t\tthis.circle.isMeasured = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<XYChartScrollbar, IXYChartScrollbarEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<XYChartScrollbar, IXYChartScrollbarEvents>>;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.element = this.paper.add(\"path\");\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._series.events.on(\"insert\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"remove\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"insert\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"insert\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.events.on(\"validated\", this.zoomOutAxes, this);\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\r\n\t\tscrollbarChart.series.push(series);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"remove\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"remove\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX;\r\n\t\t\tlet y: number = thumb.pixelY;\r\n\t\t\tlet w: number = thumb.pixelWidth;\r\n\t\t\tlet h: number = thumb.pixelHeight;\r\n\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: this.pixelWidth - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: this.pixelHeight - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<NavigationBar, INavigationBarEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<NavigationBar, INavigationBarEvents>>;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @ignore\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <ColumnSeriesDataItem>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<ColumnSeries, IColumnSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<ColumnSeries, IColumnSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this.columns.iterator(), (column) => {\r\n\t\t\tcolumn.__disabled = true;\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<ColumnSeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(event.target);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t}\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnProperties}\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<Column, IColumnEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<Column, IColumnEvents>>;\r\n\r\n\t/**\r\n\t * column element\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", ()=>{\r\n\t\t\tif(this.layout == \"none\"){\r\n\t\t\t\tthis.layout = \"absolute\";\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tthis.column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source:this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif(this.column){\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<XYChart, IXYChartEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events!: SpriteEventDispatcher<AMEvent<XYChart, IXYChartEvents>>;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds series (graphs/plots).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartCont = this.chartContainer;\r\n\t\tchartCont.layout = \"vertical\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartCont.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartCont.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartCont.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this.cursor) {\r\n\t\t\tif (this.data.length > 0) {\r\n\t\t\t\tthis.cursor.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// reset minimums\r\n\t\tthis.leftAxesContainer.minWidth = undefined;\r\n\t\tthis.rightAxesContainer.minWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.pixelWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.pixelWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"insert\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"insert\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"remove\"]}  event  Event\r\n\t */\r\n\tpublic processXAxisRemoval(event: IListEvents<Axis>[\"remove\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"insert\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"insert\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"remove\"]}  event  Event\r\n\t */\r\n\tpublic processYAxisRemoval(event: IListEvents<Axis>[\"remove\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\taxis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\taxis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 1;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", (event)=>{\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t})\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"insert\", this.processXAxis, this);\r\n\t\t\tthis._xAxes.events.on(\"remove\", this.processXAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"insert\", this.processYAxis, this);\r\n\t\t\tthis._yAxes.events.on(\"remove\", this.processYAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"insert\"]}  event  Event\r\n\t */\r\n\tpublic processSeries(event: IListEvents<XYSeries>[\"insert\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.processSeries(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.data.length == 0) {\r\n\t\t\t\t\tcursor.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.tooltip.hide(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position: IPoint): void {\t\t\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.tooltip.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0; i < seriesPoints.length; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0; i < topSeriesPoints.length; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.pixelHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tprotected getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif(xRange){\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif(yRange){\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif(yAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < yAxes.length; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(xAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < xAxes.length; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts"],"sourceRoot":""}