{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/types/PercentChart.ts","webpack:///../../../../../src/.internal/charts/elements/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/ErrorBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts"],"names":["__webpack_require__","d","__webpack_exports__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","__WEBPACK_IMPORTED_MODULE_2__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__","__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_10__core_elements_ZoomOutButton__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_12__core_Registry__","__WEBPACK_IMPORTED_MODULE_13__elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Utils__","_super","_this","call","this","className","applyTheme","_axisRendererX","_axisRendererY","maskBullets","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","Object","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","_bulletMask","prototype","applyInternalDefaults","exportable","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","updatePlotElements","series","iterator","invalidate","validateData","_parseDataFrom","xAxes","axis","dataChangeUpdate","yAxes","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","newValue","chart","renderer","axisLetter","observe","handleXAxisRangeChange","dataProvider","processAxis","processYAxis","handleYAxisRangeChange","range","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","start","end","seriesAppeared","show","appeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","addDisposer","dataUsers","removeValue","inited","invalidateDataItems","defineProperty","_xAxes","handleAxisRemoval","oldValue","autoDispose","dispose","_yAxes","handleSeriesAdded","xAxis","yAxis","undefined","fill","colors","next","stroke","e","raiseCriticalError","_cursor","cursor","removeDispose","_disposers","push","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","visible","isHiding","xPosition","yPosition","showAxisTooltip","showSeriesTooltip","x","y","hideObjectTooltip","updateLegendValue","sprites","sprite","hideTooltip","position","topLeft","bottomRight","pixelWidth","pixelHeight","seriesPoints","each","tooltip","setBounds","point","showTooltipAtPosition","sort","a","b","length","top_1","bottom","topSeriesPoints","botSeriesPoints","i","len","nextY","pointY","invalid","validate","label","pixelY","measuredHeight","pixelMarginBottom","nextHeight","pixelMarginTop","dataItems","getUpdatedRange","difference","behavior","xRange","getIndex","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","maxPanOut","panStartRange","newStart","Math","max","newEnd","min","newRange","_scrollbarX","startGrip","endGrip","orientation","handleXScrollbarChange","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","round","realRange","dataInvalid","diff","roundPosition","axisRange","zoom","getPropertyValue","setPropertyValue","handleWheel","svgPoint","htmlContainer","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","locationY","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","type","Error","axisRanges","index","configOrder","createSeries","_zoomOutButton","button","copyFrom","source","disposeData","scrollbarChart","addData","rawDataItem","removeCount","registeredClasses","CategoryAxisDataItem","CategoryAxis","__WEBPACK_IMPORTED_MODULE_1__Axis__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Adapter__","text","locations","category","endCategory","isEnabled","apply","properties","setProperty","dataItemsByCategory","axisFieldName","_lastDataItem","createDataItem","component","createAxisBreak","validateDataRange","_series","invalidateDataRange","axisBreaks","dataCount","startIndex","floor","endIndex","ceil","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","maxZoomFactor","resetIterators","itemIndex","dataItem","__disabled","isInBreak","appendDataItem","validateDataElement","axisBreak","adjustedStartValue","adjustedEndValue","frequency_1","breakSize","itemIndex_1","validateBreaks","validateAxisRanges","ghostLabel","invalidateLayout","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","indexToPosition","endPosition","isRange","axisFill","location","positionToPoint","tick","disabled","updateTickElement","grid","updateGridElement","updateLabelElement","currentText","updateFillElement","fillRule","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","adjustDifference","startLocation","endLocation","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","angle","positionToAngle","anyToPoint","anyToPosition","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","breakStartPosition","startPosition","breakEndPosition","breakPosition","initRenderer","baseGrid","AxisLabelCircular","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","fdx","fdy","radius","isMeasured","setPercentProperty","pixelRadius","axisRadius","sign","inside","fixPoint","atan2","relativeRotation","dy","_measuredHeight","dx","_measuredWidth","labelRadius","bbox","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","XYSeriesDataItem","XYSeries","__WEBPACK_IMPORTED_MODULE_1__Series__","__WEBPACK_IMPORTED_MODULE_2__core_Sprite__","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_15__core_rendering_Path__","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","working","stackValue","field","getWorkingValue","getValue","getMax","_xAxis","_yAxis","mainContainer","setElement","paper","stacked","snapTooltip","pointerOrientation","returnBulletDefaultState","_tmin","clear","_tmax","_smin","_smax","seriesDataChangeUpdate","defineFields","data","updateItemReaderText","_xField","_yField","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","_chart","dataItemsX","dataItemsByAxis","dataItemsY","xAxisFieldName","xField","xOpenField","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","_xValueFields","_yValueFields","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","fillPath","path","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","oldAxis","removeKey","set","registerSeries","invalidateData","_baseAxis","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","stackedSeries","dispatchImmediately","_prevTooltipDataItem","toAxisPosition","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_a","bullets","_b","done","isHover","showTooltip","tooltipText","bullet","isDisposed","positionBullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","moveTo","bulletLocation","workingLocations","duration","anim","delay","interpolationDuration","defaultState","transitionDuration","sequencedInterpolation","sequencedInterpolationDelay","animation","isFinished","minZoomed","maxZoomed","hiddenState","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","field_1","setCalculatedValue","backwards","prevSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","map","hasKey","xKey","yKey","stackKeyX","stackKeyY","val","itemReaderText","DateAxisDataItem","DateAxis","__WEBPACK_IMPORTED_MODULE_1__ValueAxis__","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","endDate","dates","getTime","endValue","gridIntervals","dateFormats","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minDifference","gridInterval","_gridInterval","gridDuration","pushAll","periodCount","baseDuration","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","minDifference","MAX_VALUE","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","startTime","startTimeStr","this_1","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","durationBreaksRemoved","getBreaklessDate","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","markUnitChange","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","adjustedMax","endTimestamp","valueToPosition","location_1","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","time","openTime","openDate","prevSeriesTime","_prevSeriesTime","abs","differece","_baseInterval","timeInterval","breakTemplate","template","startLine","endLine","fillShape","tooltipDateFormat","dateFormat","findNearest","leftCount","leftDataItem","leftDate","rightCount","rightDataItem","rightDate","getCurrentLabelFormat","ticks","labels","zoomToDates","skipRangeEvent","parse","zoomToValues","asIs","XYCursor","__WEBPACK_IMPORTED_MODULE_1__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","_lineX","_lineY","interfaceColors","selection","getFor","interactionsEnabled","lineX","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","w","_positionPrecision","h","validatePosition","triggerMoveReal","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","reset","_selection","element","LineSeriesDataItem","LineSeries","__WEBPACK_IMPORTED_MODULE_1__XYSeries__","__WEBPACK_IMPORTED_MODULE_3__core_Container__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__","__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__","__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","connect","tensionX","tensionY","segmentsContainer","previousDataItem","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegment","_workingStartIndex","sliceData","_workingEndIndex","openIndex","closeIndex","points","propertiesChanged","getFirst","contents","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","line","x2","copyToLegendMarker","hasLabels_1","children","child","clone","LineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","fillElement","PieSeriesDataItem","PieSeries","__WEBPACK_IMPORTED_MODULE_1__PercentSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__elements_PieTick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","radiusValue","toValue","alignLabels","startAngle","endAngle","createSlice","createTick","createLabel","initSlice","slice","scale","handleSliceScale","handleSliceMove","states","shiftRadius","togglable","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","percent","reverse","aAngle","middleAngle","bAngle","arrangeLabels","innerRadius","pixelInnerRadius","arc","normalizedMiddleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","_pixelRadius","_pixelInnerRadius","definedBBox","Candlestick","__WEBPACK_IMPORTED_MODULE_1__Column__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__","createAssets","lowLine","highLine","AxisRendererCircular","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","pixelRadiusReal","useChartAngles","pixelPerfect","tooltipLocation","setAxis","cos","sin","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","createGrid","createFill","pointToPosition","coordinateToPosition","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","RadarChartDataItem","RadarChart","__WEBPACK_IMPORTED_MODULE_1__XYChart__","__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_4__core_Container__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__","innerRadiusModifyer","radarContainer","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_1__AxisBreak__","invalidateSeries","DateAxisBreak","__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__","startValue","Cursor","__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","_stick","trackable","clickable","interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","isLocalElement","pointer","svg","local","_stickPoint","triggerMove","isHidden","hideReal","stick","invalidatePosition","getPositions","triggerDown","setGlobalStyle","grabbing","triggerUp","getHitOption","interactions","default","cancelable","preventDefault","lockElement","XYChartScrollbar","__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__types_XYChart__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__","__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","title","rangeChangeDuration","id","axisFills","zoomOutAxes","updateByOrientation","off","handleDataChanged","updateThumb","RadarSeriesDataItem","RadarSeries","__WEBPACK_IMPORTED_MODULE_1__LineSeries__","connectEnds","unshift","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_1__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__","__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__","__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","gridType","axisAngle","gridLocation","count_1","cellEndLocation","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","updateTooltip","tooltipOrientation","bigNum","axisFullLength","ClockHand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__","_axis","pin","startWidth","endWidth","hand","leftSide","rightSide","x0","x1","_pin","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","PieChart","__WEBPACK_IMPORTED_MODULE_1__PercentChart__","__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__","updateRadius","validateLayout","updateSeriesAngles","chartCont","chartRadius","chartPixelInnerRadius","seriesRadius","PercentChartDataItem","PercentChart","__WEBPACK_IMPORTED_MODULE_2__series_PercentSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","feedLegend","legend","legendData_1","hiddenInLegend","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","setLegend","itemContainers","PercentSeriesDataItem","PieTick","__WEBPACK_IMPORTED_MODULE_1__elements_Tick__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_label","_slice","y0","y1","y2","r","attr","PieSeries3DDataItem","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__","depthValue","depth","depthPercent","ChordNode","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__elements_Bullet__","updateRotation","setStateOnChildren","invalidateLinks","sum","total","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","_outgoingSorted","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","ChordLink","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__","middleLine","isTemplate","fromX","fromY","toX","toY","cp","bulletsMask","mAngle1","mAngle2","cpx","cpy","positionBullets","TreeMapSeriesDataItem","TreeMapSeries","__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_6__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__","treeMapDataItem","_dataContext","columns","configField","seriesDataItem","showReal","removeChildren","column","AxisRendererX3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","getWidth","ColumnSeries3DDataItem","ColumnSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__","column3D","columnsContainer","_columnsContainer","validateDataElementReal","createColumnTemplate","CandlestickSeriesDataItem","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__","lowValueX","lowValueY","highValueX","highValueY","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC","__WEBPACK_IMPORTED_MODULE_1__Candlestick__","openLine","highLowLine","closeLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","PyramidSeriesDataItem","PyramidSeries","__WEBPACK_IMPORTED_MODULE_1__FunnelSeries__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Utils__","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","_nextWidth","getNextValue","nextValue","slicesContainer","relValue","sliceLink","_pyramidHeight","_pyramidWidth","labelsContainer","ticksContainer","decorateSlice","pyramidWidth","linkWidth","linkHeight","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","s","sqrt","_nextY","sliceWidth","ConeColumn","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__","coneColumn","CurvedColumn","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","curvedColumn","realWidth","realHeight","realX","realY","tension","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__","__WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__","__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__","__WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__","__WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__","__WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__","__WEBPACK_IMPORTED_MODULE_6__internal_charts_types_SlicedChart__","__WEBPACK_IMPORTED_MODULE_7__internal_charts_types_FlowDiagram__","__WEBPACK_IMPORTED_MODULE_8__internal_charts_types_SankeyDiagram__","__WEBPACK_IMPORTED_MODULE_9__internal_charts_types_ChordDiagram__","__WEBPACK_IMPORTED_MODULE_10__internal_charts_types_TreeMap__","__WEBPACK_IMPORTED_MODULE_11__internal_charts_types_XYChart3D__","__WEBPACK_IMPORTED_MODULE_12__internal_charts_Chart__","__WEBPACK_IMPORTED_MODULE_13__internal_charts_Legend__","__WEBPACK_IMPORTED_MODULE_14__internal_charts_elements_HeatLegend__","__WEBPACK_IMPORTED_MODULE_15__internal_charts_series_Series__","__WEBPACK_IMPORTED_MODULE_16__internal_charts_series_XYSeries__","__WEBPACK_IMPORTED_MODULE_17__internal_charts_series_LineSeries__","__WEBPACK_IMPORTED_MODULE_18__internal_charts_series_LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_19__internal_charts_series_CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_series_OHLCSeries__","__WEBPACK_IMPORTED_MODULE_21__internal_charts_series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_22__internal_charts_series_StepLineSeries__","__WEBPACK_IMPORTED_MODULE_23__internal_charts_series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_24__internal_charts_series_RadarColumnSeries__","__WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries__","__WEBPACK_IMPORTED_MODULE_26__internal_charts_series_FunnelSeries__","__WEBPACK_IMPORTED_MODULE_27__internal_charts_series_PyramidSeries__","__WEBPACK_IMPORTED_MODULE_28__internal_charts_series_PictorialStackedSeries__","__WEBPACK_IMPORTED_MODULE_29__internal_charts_elements_PieTick__","__WEBPACK_IMPORTED_MODULE_30__internal_charts_elements_FunnelSlice__","__WEBPACK_IMPORTED_MODULE_31__internal_charts_series_PieSeries3D__","__WEBPACK_IMPORTED_MODULE_32__internal_charts_series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_33__internal_charts_series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_34__internal_charts_series_ConeSeries__","__WEBPACK_IMPORTED_MODULE_35__internal_charts_series_CurvedColumnSeries__","__WEBPACK_IMPORTED_MODULE_36__internal_charts_axes_Axis__","__WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_Grid__","__WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_AxisTick__","__WEBPACK_IMPORTED_MODULE_39__internal_charts_axes_AxisLabel__","__WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_AxisLine__","__WEBPACK_IMPORTED_MODULE_41__internal_charts_axes_AxisFill__","__WEBPACK_IMPORTED_MODULE_42__internal_charts_axes_AxisRenderer__","__WEBPACK_IMPORTED_MODULE_43__internal_charts_axes_AxisBreak__","__WEBPACK_IMPORTED_MODULE_44__internal_charts_axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_45__internal_charts_axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_46__internal_charts_axes_CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_47__internal_charts_axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_48__internal_charts_axes_DurationAxis__","__WEBPACK_IMPORTED_MODULE_49__internal_charts_axes_DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_50__internal_charts_axes_ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_51__internal_charts_axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_52__internal_charts_axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_53__internal_charts_axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_54__internal_charts_axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_55__internal_charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_56__internal_charts_axes_AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_57__internal_charts_axes_GridCircular__","__WEBPACK_IMPORTED_MODULE_58__internal_charts_axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_59__internal_charts_axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_60__internal_charts_elements_Tick__","__WEBPACK_IMPORTED_MODULE_61__internal_charts_elements_Bullet__","__WEBPACK_IMPORTED_MODULE_62__internal_charts_elements_LabelBullet__","__WEBPACK_IMPORTED_MODULE_63__internal_charts_elements_CircleBullet__","__WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_ErrorBullet__","__WEBPACK_IMPORTED_MODULE_65__internal_charts_elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_66__internal_charts_elements_ClockHand__","__WEBPACK_IMPORTED_MODULE_67__internal_charts_elements_FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_68__internal_charts_elements_FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_69__internal_charts_elements_SankeyNode__","__WEBPACK_IMPORTED_MODULE_70__internal_charts_elements_SankeyLink__","__WEBPACK_IMPORTED_MODULE_71__internal_charts_elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_73__internal_charts_elements_NavigationBar__","__WEBPACK_IMPORTED_MODULE_74__internal_charts_elements_Column__","__WEBPACK_IMPORTED_MODULE_75__internal_charts_elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_76__internal_charts_elements_OHLC__","__WEBPACK_IMPORTED_MODULE_77__internal_charts_elements_RadarColumn__","__WEBPACK_IMPORTED_MODULE_78__internal_charts_elements_Column3D__","__WEBPACK_IMPORTED_MODULE_79__internal_charts_elements_ConeColumn__","__WEBPACK_IMPORTED_MODULE_80__internal_charts_elements_CurvedColumn__","__WEBPACK_IMPORTED_MODULE_81__internal_charts_cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_82__internal_charts_cursors_Cursor__","__WEBPACK_IMPORTED_MODULE_83__internal_charts_cursors_RadarCursor__","GaugeChartDataItem","GaugeChart","__WEBPACK_IMPORTED_MODULE_1__RadarChart__","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","hands","processHand","PieChart3DDataItem","PieChart3D","__WEBPACK_IMPORTED_MODULE_1__PieChart__","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__","invalidateDataUsers","SlicedChartDataItem","SlicedChart","ChordDiagramDataItem","ChordDiagram","__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__","__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","nodePadding","chordContainer","nodesContainer","newTotal","_sorted","strNode","node","getNodeValue","minNodeSize","links","createNode","createLink","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_1__Line__","__WEBPACK_IMPORTED_MODULE_2__utils_Color__","__WEBPACK_IMPORTED_MODULE_3__rendering_Path__","__WEBPACK_IMPORTED_MODULE_4__utils_Math__","__WEBPACK_IMPORTED_MODULE_5__utils_Type__","p1","p2","point1","point2","TreeMapDataItem","TreeMap","__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__","rows","hasChildren","level","color","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","cursorOverStyle","zoomToSeriesDataItem","toggleBullets","currentlyZoomed","rangeChangeAnimation","_dataDisposers","once","binaryTree","dice","sliceDice","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","i0","i1","row","handleDataItemValueChange","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_3__core_Sprite__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_6__series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","fixLayout","fixColumns","clustered","depthIndex","i_1","maskColumns","OHLCSeriesDataItem","OHLCSeries","__WEBPACK_IMPORTED_MODULE_1__CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_3__elements_OHLC__","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesDataItem","StepLineSeries","__WEBPACK_IMPORTED_MODULE_2__StepLineSeriesSegment__","noRisers","prevPoint","point0","vertical","StepLineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__LineSeriesSegment__","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","addSprite","setColumnStates","disableUnusedColumns","PictorialStackedSeriesDataItem","PictorialStackedSeries","__WEBPACK_IMPORTED_MODULE_1__PyramidSeries__","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","hs","expandDistance","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__","CurvedColumnSeriesDataItem","CurvedColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_CurvedColumn__","DurationAxisDataItem","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet","__WEBPACK_IMPORTED_MODULE_1__Bullet__","circle","ErrorBullet","errorLine","isDynamic","NavigationBarDataItem","NavigationBar","__WEBPACK_IMPORTED_MODULE_1__core_Component__","__WEBPACK_IMPORTED_MODULE_2__core_DataItem__","__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__","textLink","paddingTop","paddingBottom","_linksIterator","triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","ColumnSeriesDataItem","ColumnSeries","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_9__elements_Column__","__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Disposer__","_column","setColumn","_rangesColumns","_startLocation","_endLocation","simplifiedProcessing","baseAxisSeries","clusterCount","cellStartLocation","l","t","percentHeight","outOfBounds","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","column_1","itemsFocusable","role","focusable","ev","populateString","virtualParent","itemWidth","itemHeight","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","_columns","legendDataItem","fromOpenState_1","fromPreviousState_1"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"startchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\taxis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"startchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\taxis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t}\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0, len = topSeriesPoints.length; i < len; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, locationX);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, locationX);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, locationY);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, locationY);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"} mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"}  Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param {Object | Object[]} rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarX.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarY.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Adapter } from \"../../core/utils/Adapter\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t *\r\n\t * @type {Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>}\r\n\t */\r\n\tpublic adapter = new Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>(this);\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this.adapter.isEnabled(\"category\")) {\r\n\t\t\treturn this.adapter.apply(\"category\", this.properties[\"category\"]);\r\n\t\t}\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\t\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif (dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || dataItem.label.measuredHeight > this.ghostLabel.measuredHeight) {\r\n\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param {number} value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * returns label radius in pixels\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.fdx = this.dx;\r\n\t\tthis.fdy = this.dy;\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the current cursor position\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tminY = $math.min(minY, stackY);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tminX = $math.min(minX, stackX);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tif (this.stackedSeries) {\r\n\t\t\t\t\tthis.stackedSeries.processValues(false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem && dataItem.visible) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\tbullet.isHover = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tif (!bullet.isDisposed()) {\r\n\t\t\t\t\tbullet.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (interpolationDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference():number{\r\n\t\tvar minDifference = Number.MAX_VALUE;\t\t\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tif(minDifference > this._minDifference[series.uid]){\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif(minDifference == Number.MAX_VALUE || minDifference == 0){\r\n\t\t\tminDifference = $time.getDuration(\"day\");\t\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\tlet gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count);\r\n\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(newDate, timeUnit, realIntervalCount);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tif (this._gridInterval.count > 1) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / this._gridInterval.count;\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count).getTime() + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count).getTime() + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime = time;\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\t//baseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?:boolean): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\r\n\t\t\twhile (leftDate.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t\tif (leftCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (rightDate.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t\tif (rightCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif (source[\"_baseInterval\"]) {\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\t\t\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentProperties } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\t \r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<this[\"_segment\"]>}\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(this._workingStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif(this.setPropertyValue(\"connect\", value)){\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\r\n\t /*\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tif (dataItem.segment) {\r\n\t\t\t$object.softCopyProperties(dataItem.segment, bullet, visualProperties);\r\n\t\t}\r\n\t}*/\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/** \r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/** \r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param  {Slice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\tlet point: IPoint;\r\n\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\r\n\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t// right half\r\n\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 90) { // 91 makes less chances for flickering\r\n\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\t// left half\r\n\t\t\t\telse {\r\n\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\tx *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t}\r\n\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRectangle}\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param {Candlestick} source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\t\t\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param  {IPoint}  point  Point\r\n\t * @return {number}         Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\t\t\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\t\t\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {RadarSeries | RadarColumnSeries}\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionObjectEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param  {number}  duration  Fade out duration (ms)\r\n\t * @return {Animation}            Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param {IPoint}                    point  Point to place cursor at\r\n\t * @param {\"hard\" | \"soft\" | \"none\"}  stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}  point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\t\t\t\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\t\t\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param  {IPoint}  point  Point\r\n\t * @return {number}         Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\t\t\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\t\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\t\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.updateRadius, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Series>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis.updateSeriesAngles();\r\n\t}\t\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t\tseries.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\tseries.defaultState.properties.endAngle = this.endAngle;\t\t\t\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\r\n\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t}\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t}\r\n\r\n\t\t\tseries.pixelRadius = radius;\r\n\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\tthis.seriesContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t * \r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PercentChart}\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPercentChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPercentChartProperties}\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPercentChartEvents}\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PercentSeries}\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return {PercentSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (PercentSeriesDataItem.visible && !PercentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tPercentSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tPercentSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PercentChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar r = label.pixelRadius(slice.radius);\r\n\r\n\t\t\t\tx1 = x0 + r * slice.ix;\r\n\t\t\t\ty1 = y0 + r * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = slice.radius * $math.cos(labelAngle);\r\n\t\t\tlet y = slice.radius * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\t\t\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.showReal(interpolationDuration);\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\t\t\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\t\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\t\t}\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif(this.chart){\r\n\t\t\tthis.chart.invalidateLayout();\t\r\n\t\t}\t\t\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]){\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCEvents}\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param {OHLC} source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param {RadarColumn} source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PyramidSeries}\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @type {\"height\" | \"area\"}\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPyramidSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPyramidSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPyramidSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPyramidSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PyramidSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PyramidSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param  {FunnelSeriesDataItem} dataItem [description]\r\n\t * @return {number}                        [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t * \r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]} dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif(sum == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\t\t\t\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\t\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t * \r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t * @type {Cone}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param {ConeColumn} source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @type {Orientation}\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\tlet ww = this.width;\r\n\t\tlet pw = 0.8;\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t * \r\n\t * @param {CurvedColumn}  source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param {number}  value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param {Orientation}  value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {Orientation} Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 319\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { SlicedChart, SlicedChartDataItem, ISlicedChartAdapters, ISlicedChartDataFields, ISlicedChartEvents, ISlicedChartProperties } from \"./.internal/charts/types/SlicedChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentProperties, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { OHLCSeriesDataItem, IOHLCSeriesDataFields, IOHLCSeriesProperties, IOHLCSeriesEvents, IOHLCSeriesAdapters, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { FunnelSeries, FunnelSeriesDataItem, IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties } from \"./.internal/charts/series/FunnelSeries\";\nexport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./.internal/charts/series/PyramidSeries\";\nexport { IPictorialStackedSeriesAdapters, IPictorialStackedSeriesDataFields, IPictorialStackedSeriesEvents, IPictorialStackedSeriesProperties, PictorialStackedSeries, PictorialStackedSeriesDataItem } from \"./.internal/charts/series/PictorialStackedSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/elements/PieTick\";\nexport { FunnelSlice, IFunnelSliceAdapters, IFunnelSliceEvents, IFunnelSliceProperties } from \"./.internal/charts/elements/FunnelSlice\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\nexport { CurvedColumnSeries, CurvedColumnSeriesDataItem, ICurvedColumnSeriesAdapters, ICurvedColumnSeriesDataFields, ICurvedColumnSeriesProperties, ICurvedColumnSeriesEvents } from \"./.internal/charts/series/CurvedColumnSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { DurationAxisDataItem, DurationAxis, IDurationAxisAdapters, IDurationAxisDataFields, IDurationAxisEvents, IDurationAxisProperties } from \"./.internal/charts/axes/DurationAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { ErrorBullet, IErrorBulletAdapters, IErrorBulletEvents, IErrorBulletProperties } from \"./.internal/charts/elements/ErrorBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { OHLC, IOHLCAdapters, IOHLCEvents, IOHLCProperties } from \"./.internal/charts/elements/OHLC\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\nexport { CurvedColumn, ICurvedColumnAdapters, ICurvedColumnEvents, ICurvedColumnProperties } from \"./.internal/charts/elements/CurvedColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"../series/FunnelSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {SlicedChart}\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ISlicedChartDataFields}\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ISlicedChartProperties}\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISlicedChartEvents}\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {FunnelSeries}\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false); \r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @type {TreeMapDataItem}\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to `1` to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (series.level == 1) {\r\n\t\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count );\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.columns.each((column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t * @type {OHLC}\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {OHLCSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {OHLCSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IOHLCSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCSeriesEvents}\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {OHLCSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PictorialStackedSeries}\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\tpicture?: Sprite;\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PictorialStackedSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif(scale == Infinity){\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight;\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth;\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\r\n\t\tsuper.validateDataElements();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PictorialStackedSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return {Sprite} Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param  {FunnelSlice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * CurvedColumnSeries module.\r\n * \r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CurvedColumnSeries}\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t * \r\n\t * @type {CurvedColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t *\r\n\t * @type {CurvedColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DurationAxis}\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDurationAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDurationAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDurationAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDurationAxisEvents}\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DurationAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t * \r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}      min        [description]\r\n\t * @param  {number}      max        [description]\r\n\t * @param  {number}      difference [description]\r\n\t * @param  {number}      gridCount  [description]\r\n\t * @param  {boolean}     strictMode [description]\r\n\t * @return {IMinMaxStep}            [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\tlet unit = this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param {string}  value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param {TimeUnit} timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {TimeUnit} Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IErrorBulletProperties}\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IErrorBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IErrorBulletEvents}\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ErrorBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t *\r\n\t * @type {NavigationBarDataItem}\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.index < this.startIndex || dataItem.index >= this.endIndex) {\r\n\t\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts"],"sourceRoot":""}