{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/series/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts"],"names":["__WEBPACK_IMPORTED_MODULE_15__core_utils_Utils__","__webpack_require__","XYChartDataItem","_super","_this","call","this","className","applyTheme","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","XYChart","_axisRendererX","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__","_axisRendererY","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__","maskBullets","chartContainer","layout","padding","topAxesCont","createChild","__WEBPACK_IMPORTED_MODULE_2__core_Container__","shouldClone","width","Object","__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","plotContainer","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","__WEBPACK_IMPORTED_MODULE_9__core_elements_ZoomOutButton__","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","_bulletMask","prototype","applyInternalDefaults","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","readerTitle","language","translate","draw","toFront","mask","updatePlotElements","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","series","iterator","invalidate","validateData","_parseDataFrom","xAxes","axis","dataChangeUpdate","yAxes","cursor","data","length","__disabled","minWidth","undefined","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","newValue","chart","renderer","axisLetter","observe","handleXAxisRangeChange","dataProvider","processAxis","processXAxisRemoval","oldValue","off","processYAxis","handleYAxisRangeChange","processYAxisRemoval","range","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","start","end","seriesAppeared","show","appeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","opposite","toBack","processRenderer","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","_dataUsers","moveValue","gridContainer","breakContainer","invalidateDataItems","defineProperty","_xAxes","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","_yAxes","handleSeriesAdded","xAxis","yAxis","fill","colors","next","stroke","e","raiseCriticalError","_cursor","removeDispose","_disposers","push","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__","visible","isHiding","xPosition","yPosition","showAxisTooltip","showSeriesTooltip","x","y","hideObjectTooltip","updateSeriesLegend","updateLegendValue","sprites","sprite","tooltip","position","topLeft","bottomRight","pixelWidth","pixelHeight","seriesPoints","each","tooltipText","tooltipHTML","setBounds","point","showTooltipAtPosition","sort","a","b","top_1","bottom","topSeriesPoints","botSeriesPoints","i","nextY","pointY","invalid","validate","label","pixelY","pixelMarginBottom","nextHeight","pixelMarginTop","dataItems","getUpdatedRange","difference","behavior","xRange","getIndex","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","maxPanOut","panStartRange","newStart","Math","max","newEnd","min","newRange","_scrollbarX","orientation","handleXScrollbarChange","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","round","realRange","dataInvalid","diff","roundPosition","axisRange","zoom","getPropertyValue","setPropertyValue","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","len","type","Error","axisRanges","index","configOrder","createSeries","__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__","_zoomOutButton","button","copyFrom","source","__WEBPACK_IMPORTED_MODULE_11__core_Registry__","registeredClasses","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","CategoryAxisDataItem","text","locations","category","endCategory","properties","setProperty","__WEBPACK_IMPORTED_MODULE_1__Axis__","CategoryAxis","dataItemsByCategory","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","axisFieldName","_lastDataItem","createDataItem","component","createAxisBreak","__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__","validateDataRange","dataCount","startIndex","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","floor","endIndex","ceil","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","dataItem","isInBreak","appendDataItem","validateDataElement","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","indexToPosition","endPosition","isRange","axisFill","location","positionToPoint","tick","updateTickElement","grid","updateGridElement","updateLabelElement","updateFillElement","fillRule","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","adjustDifference","cellStartLocation","cellEndLocation","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","angle","positionToAngle","anyToPoint","anyToPosition","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startLocation","endLocation","startPos","endPos","getPositionRangePath","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","initRenderer","baseGrid","disabled","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","AxisLabelCircular","radius","isMeasured","fixPoint","axisRadius","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","atan2","sign","inside","relativeRotation","dy","measuredHeight","dx","labelRadius","bbox","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__","XYSeriesDataItem","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","working","stackValue","__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__","field","getWorkingValue","getValue","getMax","__WEBPACK_IMPORTED_MODULE_1__Series__","XYSeries","_xAxis","__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__","_yAxis","mainContainer","__WEBPACK_IMPORTED_MODULE_2__core_Sprite__","element","paper","stacked","pointerOrientation","returnBulletDefaultState","defineFields","_xField","_yField","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","_chart","xAxisFieldName","xField","xOpenField","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","_xValueFields","_yValueFields","addValueField","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","fillPath","attr","d","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","oldAxis","dataItemsByAxis","removeKey","dispose","removeValue","set","registerSeries","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","invalidateData","_baseAxis","__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","processSeriesDataItems","xAxisId","yAxisId","_tmin","_tmax","dispatchImmediately","_smin","_smax","toAxisPosition","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_prevTooltipDataItem","_a","bullets","_b","done","setState","showTooltip","hideTooltip","positionBullet","bullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","locationX","locationY","moveTo","bulletLocation","workingLocations","getBulletLocationY","duration","animation","interpolationDuration","delay","sequencedInterpolation","sequencedInterpolationDelay","minZoomed","maxZoomed","isDisposed","once","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","field_1","setCalculatedValue","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","map","hasKey","xKey","yKey","stackKeyX","stackKeyY","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","DateAxisDataItem","endDate","dates","getTime","endValue","__WEBPACK_IMPORTED_MODULE_1__ValueAxis__","DateAxis","gridIntervals","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","dateFormats","periodChangeDateFormats","_markUnitChange","_baseIntervalReal","timeUnit","count","_startLocation","_endLocation","_prevSeriesTime","_minSeriesDifference","MAX_VALUE","gridInterval","_gridInterval","gridDuration","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","pushAll","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","periodCount","baseDuration","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","findClosestIndex","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","clear","startTime","startTimeStr","this_1","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","adjustedMax","endTimestamp","valueToPosition","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","sameItemTime","prevSeriesTime","time","abs","differece","_baseInterval","timeInterval","breakTemplate","template","startLine","endLine","fillShape","_tooltipDateFormat","tooltipDateFormat","dateFormat","leftCount","leftDataItem","leftDate","rightCount","rightDataItem","rightDate","getCurrentLabelFormat","ticks","labels","zoomToDates","skipRangeEvent","parse","zoomToValues","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","XYCursor","_lineX","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","_lineY","interfaceColors","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","selection","fillOpacity","getFor","lineX","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","w","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","_positionPrecision","h","validatePosition","triggerMoveReal","triggeredByPointer","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","endX","endY","handleXTooltipPosition","handleYTooltipPosition","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","interactionsEnabled","reset","_selection","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_1__Cursor__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","LineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__XYSeries__","LineSeries","minDistance","segments","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__","applyOnClones","_segmentsIterator","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","createNewItems","connect","tensionX","tensionY","segmentsContainer","__WEBPACK_IMPORTED_MODULE_3__core_Container__","previousDataItem","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","openSegment","_workingStartIndex","segment","sliceData","_workingEndIndex","openIndex","closeIndex","points","propertiesChanged","getFirst","contents","__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","changed","propertyName","createLegendMarker","marker","disposeChildren","line","__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__","x2","__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__","copyToLegendMarker","hasLabels_1","children","child","__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__","clone","PieSeriesDataItem","radiusValue","setVisibility","uidAttr","slice","toValue","_legendDataItem","valueLabel","_tick","addSprite","_label","_slice","slices","hiddenInLegend","PieSeries","alignLabels","startAngle","endAngle","__WEBPACK_IMPORTED_MODULE_7__core_utils_ColorSet__","calculatePercent","slicesContainer","__WEBPACK_IMPORTED_MODULE_6__core_Container__","ticksContainer","labelsContainer","initSlice","__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_4__PieTick__","__WEBPACK_IMPORTED_MODULE_5__core_utils_List__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__","renderingFrequency","skipFocusThreshold","defaultState","transitionEasing","__WEBPACK_IMPORTED_MODULE_11__core_utils_Ease__","states","scale","itemReaderText","sliceType","handleSliceScale","handleSliceMove","shiftRadius","togglable","hiddenState","opacity","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","percent","reverse","arrangeLabels","slice_1","innerRadius","arc","normalizedMiddleAngle","middleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","itemsFocusable","role","focusable","ev","populateString","hoverable","nextLabel","getNextLabel","nextDataItem","__WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__","property","isActive","getContainerBBox","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","AxisRendererCircular","pixelRadiusReal","useChartAngles","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","pixelPerfect","tooltipLocation","setAxis","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","pixelRadius","cos","sin","PI","coordinate","positionToCoordinate","updateAxisLine","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","gridInnerRadius","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","path","pixelInnerRadius","createGrid","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","createFill","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","createLabel","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","RadarChartDataItem","__WEBPACK_IMPORTED_MODULE_1__XYChart__","RadarChart","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__","innerRadiusModifyer","radarContainer","__WEBPACK_IMPORTED_MODULE_4__core_Container__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__","beforeDraw","rect","__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__","innerRect","wr","hr","mr","maxRadius","diameter","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","_pixelInnerRadius","definedBBox","__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_1__AxisBreak__","DateAxisBreak","startValue","__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","Cursor","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","trackable","clickable","interaction","__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__","body","handleCursorDown","handleCursorUp","handleCursorMove","local","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","pointer","triggerMove","getPositions","triggerDown","setGlobalStyle","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__","grabbing","triggerUp","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","getHitOption","interactions","default","cancelable","preventDefault","lockElement","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","RadarSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__LineSeries__","RadarSeries","connectEnds","unshift","__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__","LineSeriesSegment","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__","fillElement","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_1__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","gridType","axisAngle","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","title","__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__","gridLocation","count_1","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__","updateTooltip","tooltipOrientation","bigNum","axisFullLength","__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__","ClockHand","_axis","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","pin","__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__","startWidth","endWidth","hand","__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__","leftSide","rightSide","x0","x1","_pin","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","to","updateValue","PieChartDataItem","PieChart","minHeight","updateRadius","feedLegend","chartCont","seriesRadius","__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__","setLegend","pieSeriesDataItem","isHover","PieTick","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","y0","y1","y2","__WEBPACK_IMPORTED_MODULE_1__elements_Tick__","PieSeries3DDataItem","depthValue","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__","PieSeries3D","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__","depth","depthPercent","__WEBPACK_IMPORTED_MODULE_9__elements_Bullet__","ChordNode","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","updateRotation","__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","invalidateLinks","sum","total","arc_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","_outgoingSorted","__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__","ChordLink","middleLine","__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__","isTemplate","fromX","fromY","toX","toY","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","cp","bulletsMask","positionBullets","mAngle1","mAngle2","cpx","cpy","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__","TreeMapSeries","columns","configField","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","seriesDataItem","showReal","invalidateLayout","hideReal","appear","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","removeChildren","column","__WEBPACK_IMPORTED_MODULE_6__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","AxisRendererY3D","getWidth","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__","ColumnSeries3DDataItem","__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__","ColumnSeries3D","columnsContainer","_columnsContainer","createColumnTemplate","__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__","column3D","Column3D","createAssets","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Rectangle3D__","__WEBPACK_IMPORTED_MODULE_1__Column__","Candlestick","lowLine","__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__","highLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","ConeColumn","coneColumn","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_cursors_RadarCursor__","GaugeChartDataItem","__WEBPACK_IMPORTED_MODULE_1__RadarChart__","GaugeChart","hands","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","processHand","PieChart3DDataItem","__WEBPACK_IMPORTED_MODULE_1__PieChart__","PieChart3D","invalidateDataUsers","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__","ChordDiagramDataItem","__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__","ChordDiagram","nodePadding","chordContainer","nodesContainer","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","newTotal","_sorted","strNode","node","getNodeValue","minNodeSize","links","createNode","__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__","createLink","__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_5__utils_Type__","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_2__utils_Color__","p1","p2","__WEBPACK_IMPORTED_MODULE_3__rendering_Path__","point1","__WEBPACK_IMPORTED_MODULE_4__utils_Math__","point2","__WEBPACK_IMPORTED_MODULE_1__Line__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__","TreeMapDataItem","rows","hasChildren","level","color","TreeMap","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","sorting","__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__","strictMinMax","xRenderer","axisFills","yRenderer","__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","toggleBullets","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","dataUsers","cursorOverStyle","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__","zoomToSeriesDataItem","currentlyZoomed","rangeChangeAnimation","homeText","binaryTree","dice","sliceDice","handleDataItemValueChange","validateLayout","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY3D__","fixLayout","fixColumns","__WEBPACK_IMPORTED_MODULE_5__series_ColumnSeries3D__","clustered","depthIndex","s","i_1","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateDataElementReal","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__","StepLineSeriesDataItem","StepLineSeries","prevPoint","point0","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","setColumnStates","disableUnusedColumns","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__","CircleBullet","circle","__WEBPACK_IMPORTED_MODULE_1__Bullet__","__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__","XYChartScrollbar","scrollbarChart","__WEBPACK_IMPORTED_MODULE_5__types_XYChart__","margin","_scrollbarChart","unselectedOverlay","_unselectedOverlay","background","thumbBackground","thumb","hoverState","downState","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","rangeChangeDuration","id","transitionDuration","zoomOutAxes","__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__","updateByOrientation","handleDataChanged","updateThumb","__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__","NavigationBarDataItem","__WEBPACK_IMPORTED_MODULE_2__core_DataItem__","NavigationBar","textLink","__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__","paddingTop","paddingBottom","_linksIterator","triangle","__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__","direction","marginLeft","separators","activeLink","fontWeight","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","validateDataElements","getLast","separator","__WEBPACK_IMPORTED_MODULE_1__core_Component__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__","ColumnSeriesDataItem","_column","setColumn","__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__","_rangesColumns","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","ColumnSeries","simplifiedProcessing","__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__","tooltipColorSource","baseAxisSeries","clusterCount","__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__","l","r","t","percentHeight","maxWidth","maxHeight","__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","itemWidth","itemHeight","change","droppedFromOpen","_dropFromOpenState","_riseFromOpenState","droppedFromPrevious","isInTransition","_columns","__WEBPACK_IMPORTED_MODULE_9__elements_Column__","_dropFromPreviousState","_riseFromPreviousState","legendDataItem","fromOpenState_1","fromPreviousState_1","__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__","Column","__WEBPACK_IMPORTED_MODULE_2__core_elements_RoundedRectangle__"],"mappings":";;;;;;;;;;;;;;;;;;;8OAAAA,EAAAC,EAAA,GAkDAC,EAAA,SAAAC,GAYC,SAAAD,IAAA,IAAAE,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,kBACjBH,EAAKI,eAGP,OAlBqCC,EAAA,EAAAP,EAAAC,GAkBrCD,EAlBA,CAAqCQ,EAAA,GAiMrCC,EAAA,SAAAR,GA4LC,SAAAQ,IAAA,IAAAP,EAGCD,EAAAE,KAAAC,OAAOA,KAvDEF,EAAAQ,eAAuCC,EAAA,EAOvCT,EAAAU,eAAuCC,EAAA,EAkDhDX,EAAKG,UAAY,UAIjBH,EAAKY,aAAc,EAGnB,IAAIC,EAAiBb,EAAKa,eAC1BA,EAAeC,OAAS,WACxBd,EAAKe,QAAQ,GAAI,GAAI,GAAI,IAGzB,IAAIC,EAAcH,EAAeI,YAAYC,EAAA,GAC7CF,EAAYG,aAAc,EAC1BH,EAAYF,OAAS,WACrBE,EAAYI,MAAQC,OAAAC,EAAA,EAAAD,CAAQ,KAC5BL,EAAYO,OAAS,EACrBvB,EAAKwB,iBAAmBR,EAMxB,IAAIS,EAAmBZ,EAAeI,YAAYC,EAAA,GAClDO,EAAiBN,aAAc,EAC/BM,EAAiBX,OAAS,aAC1BW,EAAiBL,MAAQC,OAAAC,EAAA,EAAAD,CAAQ,KACjCI,EAAiBC,OAASL,OAAAC,EAAA,EAAAD,CAAQ,KAClCI,EAAiBF,OAAS,EAC1BvB,EAAK2B,sBAAwBF,EAG7B,IAAIG,EAAiBf,EAAeI,YAAYC,EAAA,GAChDU,EAAeT,aAAc,EAC7BS,EAAeR,MAAQC,OAAAC,EAAA,EAAAD,CAAQ,KAC/BO,EAAed,OAAS,WACxBc,EAAeL,OAAS,EACxBvB,EAAK6B,oBAAsBD,EAG3B,IAAIE,EAAeL,EAAiBR,YAAYC,EAAA,GAChDY,EAAaX,aAAc,EAC3BW,EAAahB,OAAS,aACtBgB,EAAaJ,OAASL,OAAAC,EAAA,EAAAD,CAAQ,KAC9BS,EAAaC,aAAe,QAC5BD,EAAaE,OAAOC,GAAG,cAAejC,EAAKkC,mBAAoBlC,GAC/D8B,EAAaP,OAAS,EACtBvB,EAAKmC,kBAAoBL,EAGzB,IAAIM,EAAWX,EAAiBR,YAAYC,EAAA,GAC5CkB,EAASjB,aAAc,EACvBiB,EAASV,OAASL,OAAAC,EAAA,EAAAD,CAAQ,KAC1Be,EAAShB,MAAQC,OAAAC,EAAA,EAAAD,CAAQ,KACzBrB,EAAKqC,cAAgBD,EAErBpC,EAAKsC,iBAAmBF,EAGxB,IAAIG,EAAgBd,EAAiBR,YAAYC,EAAA,GACjDqB,EAAcpB,aAAc,EAC5BoB,EAAczB,OAAS,aACvByB,EAAcb,OAASL,OAAAC,EAAA,EAAAD,CAAQ,KAC/BkB,EAAchB,OAAS,EACvBgB,EAAcP,OAAOC,GAAG,cAAejC,EAAKkC,mBAAoBlC,GAChEA,EAAKwC,mBAAqBD,EAE1BvC,EAAKyC,gBAAgBC,OAASN,EAC9BpC,EAAK2C,iBAAiBD,OAASN,EAE/B,IAAIQ,EAAgBR,EAASnB,YAAY4B,EAAA,UACzCD,EAAczB,aAAc,EAC5ByB,EAAcE,MAAQ,QACtBF,EAAcG,OAAS,MACvBH,EAAcrB,OAASyB,OAAOC,iBAC9BL,EAAcM,UAAY,EAC1BN,EAAcO,YAAc,EAE5BP,EAAcQ,KAAK,GACnBpD,EAAK4C,cAAgBA,EAErB5C,EAAKqD,YAAcrD,EAAKqC,cAGxBrC,EAAKI,eAmuCP,OAx/C6BC,EAAA,EAAAE,EAAAR,GA6RlBQ,EAAA+C,UAAAC,sBAAV,WAECxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MAItBsD,EAAA,SAAetD,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,eAUtCpD,EAAA+C,UAAAM,KAAP,WACC7D,EAAAuD,UAAMM,KAAI3D,KAAAC,MAEVA,KAAKuC,gBAAgBoB,UACrB3D,KAAKyC,iBAAiBkB,UAElB3D,KAAKU,cACRV,KAAKyC,iBAAiBmB,KAAO5D,KAAKmD,cAS7B9C,EAAA+C,UAAAS,mBAAP,WACCC,EAAA,KAAW9D,KAAK+D,OAAOC,WAAY,SAACD,GACnCA,EAAOE,gBAUF5D,EAAA+C,UAAAc,aAAP,WAG4B,GAAvBlE,KAAKmE,iBACRL,EAAA,KAAW9D,KAAKoE,MAAMJ,WAAY,SAACK,GAClCA,EAAKC,qBAGNR,EAAA,KAAW9D,KAAKuE,MAAMP,WAAY,SAACK,GAClCA,EAAKC,sBAQPzE,EAAAuD,UAAMc,aAAYnE,KAAAC,MAEdA,KAAKwE,QACJxE,KAAKyE,KAAKC,OAAS,IACtB1E,KAAKwE,OAAOG,YAAa,GAK3B3E,KAAKiC,kBAAkB2C,cAAWC,EAClC7E,KAAKsC,mBAAmBsC,cAAWC,GAQ1BxE,EAAA+C,UAAApB,mBAAV,WAEC,IAAI8C,EAAgB9E,KAAKiC,kBAAkB8C,cACvCC,EAAiBhF,KAAKsC,mBAAmByC,cACzCrD,EAAiB1B,KAAK2B,oBAEtBD,EAAeuD,aAAeH,GAAiBpD,EAAewD,cAAgBF,IACjFtD,EAAeuD,YAAcH,EAC7BpD,EAAewD,aAAeF,GAG/B,IAAIlE,EAAcd,KAAKsB,iBAEnBR,EAAYmE,aAAeH,GAAiBhE,EAAYoE,cAAgBF,IAC3ElE,EAAYmE,YAAcH,EAC1BhE,EAAYoE,aAAeF,IAWtB3E,EAAA+C,UAAA+B,kBAAP,SAAyBC,GACxBpF,KAAKqF,YAAYD,EAAME,SAUjBjF,EAAA+C,UAAAmC,kBAAP,SAAyBH,GACxBpF,KAAKwF,YAAYJ,EAAME,SASjBjF,EAAA+C,UAAAqC,aAAP,SAAoBL,GAEnB,IAAIf,EAAae,EAAMM,SACvBrB,EAAKsB,MAAQ3F,KAEbqE,EAAKuB,SAAW,IAAI5F,KAAKM,eACzB+D,EAAKwB,WAAa,IAElBxB,EAAKuB,SAASE,SAAS,WAAY,SAAU,WAAY,mBAAoB9F,KAAKmF,kBAAmBnF,MACrGqE,EAAKvC,OAAOC,GAAG,mBAAoB/B,KAAK+F,uBAAwB/F,MAKhEqE,EAAK2B,aAAehG,KAEpBA,KAAKqF,YAAYhB,EAAKuB,UACtB5F,KAAKiG,YAAY5B,IAUXhE,EAAA+C,UAAA8C,oBAAP,SAA2Bd,GACTA,EAAMe,SAClBrE,OAAOsE,IAAI,mBAAoBpG,KAAK+F,uBAAwB/F,OAS3DK,EAAA+C,UAAAiD,aAAP,SAAoBjB,GAEnB,IAAIf,EAAae,EAAMM,SACvBrB,EAAKsB,MAAQ3F,KAEbqE,EAAKuB,SAAW,IAAI5F,KAAKQ,eACzB6D,EAAKwB,WAAa,IAElBxB,EAAKuB,SAASE,SAAS,WAAY,SAAU,WAAY,mBAAoB9F,KAAKuF,kBAAmBvF,MACrGqE,EAAKvC,OAAOC,GAAG,mBAAoB/B,KAAKsG,uBAAwBtG,MAKhEqE,EAAK2B,aAAehG,KAEpBA,KAAKwF,YAAYnB,EAAKuB,UACtB5F,KAAKiG,YAAY5B,IASXhE,EAAA+C,UAAAmD,oBAAP,SAA2BnB,GACTA,EAAMe,SAClBrE,OAAOsE,IAAI,mBAAoBpG,KAAKsG,uBAAwBtG,OASxDK,EAAA+C,UAAA2C,uBAAV,SAAiCX,GAChC,IAAIoB,EAAgBxG,KAAKyG,mBAAmBzG,KAAKoE,OAC7CpE,KAAK0G,YACR1G,KAAK2G,SAAS3G,KAAKoE,MAAOoC,GAAO,GAElCxG,KAAK4G,sBACL5G,KAAK6G,gBAAgB7G,KAAK0G,WAAYF,IAO7BnG,EAAA+C,UAAAwD,oBAAV,WACC,GAAI5G,KAAK0C,cAAe,CACvB,IAAIoE,GAAO,EAEXhD,EAAA,aAAmB9D,KAAKoE,MAAMJ,WAAY,SAACK,GAC1C,OAAkC,GAA9B0C,EAAA,MAAY1C,EAAK2C,MAAO,IAAuC,GAA5BD,EAAA,MAAY1C,EAAK4C,IAAK,KAC5DH,GAAO,GACA,KAIThD,EAAA,aAAmB9D,KAAKuE,MAAMP,WAAY,SAACK,GAC1C,OAAkC,GAA9B0C,EAAA,MAAY1C,EAAK2C,MAAO,IAAuC,GAA5BD,EAAA,MAAY1C,EAAK4C,IAAK,KAC5DH,GAAO,GACA,KAKJ9G,KAAKkH,iBACTJ,GAAO,GAGJA,EACH9G,KAAK0C,cAAcyE,OAGnBnH,KAAK0C,cAAcQ,SASZ7C,EAAA+C,UAAA8D,eAAV,WACC,IAAIE,GAAoB,EAOxB,OANAtD,EAAA,KAAW9D,KAAK+D,OAAOC,WAAY,SAACD,GACnC,IAAKA,EAAOqD,SAEX,OADAA,GAAW,GACJ,IAGFA,GASE/G,EAAA+C,UAAAkD,uBAAV,SAAiClB,GAChC,IAAIoB,EAAgBxG,KAAKyG,mBAAmBzG,KAAKuE,OAE7CvE,KAAKqH,YACRrH,KAAK2G,SAAS3G,KAAKuE,MAAOiC,GAAO,GAElCxG,KAAK4G,sBACL5G,KAAK6G,gBAAgB7G,KAAKqH,WAAYb,IAS7BnG,EAAA+C,UAAAyD,gBAAV,SAA0BS,EAAsBd,GAC3Cc,IACHA,EAAUC,kBACVD,EAAUN,MAAQR,EAAMQ,MACxBM,EAAUL,IAAMT,EAAMS,MAajB5G,EAAA+C,UAAAqD,mBAAP,SAA0Be,GACzB,IAAIR,EACAC,EAmBJ,OAjBAnD,EAAA,KAAW0D,EAAKxD,WAAY,SAACK,GAC5B,IAAIoD,EAAYpD,EAAK2C,MACjBU,EAAUrD,EAAK4C,IAEf5C,EAAKuB,SAAS+B,WACjBF,EAAY,EAAIpD,EAAK4C,IACrBS,EAAU,EAAIrD,EAAK2C,SAGf1D,EAAA,SAAe0D,IAAWS,EAAYT,KAC1CA,EAAQS,KAEJnE,EAAA,SAAe2D,IAASS,EAAUT,KACtCA,EAAMS,MAICV,MAAOA,EAAOC,IAAKA,IAStB5G,EAAA+C,UAAAiC,YAAP,SAAmBO,GAClB,IAAIvB,EAAOuB,EAASvB,KAChBuB,EAASgC,UACZvD,EAAK7B,OAASxC,KAAKsB,iBACnB+C,EAAKV,YAGLU,EAAK7B,OAASxC,KAAK2B,oBACnB0C,EAAKwD,UAEFxD,EAAKuB,UACRvB,EAAKuB,SAASkC,mBAUTzH,EAAA+C,UAAAoC,YAAP,SAAmBI,GAClB,IAAIvB,EAAOuB,EAASvB,KAChBuB,EAASgC,UACZvD,EAAK7B,OAASxC,KAAKsC,mBACnB+B,EAAKwD,WAGLxD,EAAK7B,OAASxC,KAAKiC,kBACnBoC,EAAKV,WAEFU,EAAKuB,UACRvB,EAAKuB,SAASkC,mBAUNzH,EAAA+C,UAAA6C,YAAV,SAAsB5B,GAEjBA,aAAgB0D,EAAA,GACnB/H,KAAKgI,WAAWC,UAAU5D,GAG3B,IAAIuB,EAAyBvB,EAAKuB,SAElCA,EAASsC,cAAc1F,OAASxC,KAAKmC,cACrCyD,EAASsC,cAAcL,SAEvBjC,EAASuC,eAAe3F,OAASxC,KAAKmC,cACtCyD,EAASuC,eAAexE,UACxBiC,EAASuC,eAAe9G,OAAS,GAEjCrB,KAAKmC,cAAcL,OAAOC,GAAG,iBAAkB,SAACqD,GAC/Cf,EAAK+D,yBASPjH,OAAAkH,eAAWhI,EAAA+C,UAAA,aAAX,WAOC,OANKpD,KAAKsI,SACTtI,KAAKsI,OAAS,IAAIC,EAAA,EAClBvI,KAAKsI,OAAOxG,OAAOC,GAAG,WAAY/B,KAAKyF,aAAczF,MACrDA,KAAKsI,OAAOxG,OAAOC,GAAG,UAAW/B,KAAKkG,oBAAqBlG,OAGrDA,KAAKsI,wCAQbnH,OAAAkH,eAAWhI,EAAA+C,UAAA,aAAX,WAOC,OANKpD,KAAKwI,SACTxI,KAAKwI,OAAS,IAAID,EAAA,EAClBvI,KAAKwI,OAAO1G,OAAOC,GAAG,WAAY/B,KAAKqG,aAAcrG,MACrDA,KAAKwI,OAAO1G,OAAOC,GAAG,UAAW/B,KAAKuG,oBAAqBvG,OAGrDA,KAAKwI,wCAUNnI,EAAA+C,UAAAqF,kBAAP,SAAyBrD,GACxB,IACCvF,EAAAuD,UAAMqF,kBAAiB1I,KAAAC,KAACoF,GACxB,IAAIrB,EAAmBqB,EAAMM,SAC7B3B,EAAO2E,MACP3E,EAAO4E,WAEY9D,GAAfd,EAAO6E,OACV7E,EAAO6E,KAAO5I,KAAK6I,OAAOC,aAGNjE,GAAjBd,EAAOgF,SACVhF,EAAOgF,OAAShF,EAAO6E,MAGzB,MAAOI,GACNhJ,KAAKiJ,mBAAmBD,KAS1B7H,OAAAkH,eAAWhI,EAAA+C,UAAA,cAiCX,WACC,OAAOpD,KAAKkJ,aAlCb,SAAkB1E,GACbxE,KAAKkJ,SAAW1E,IACfxE,KAAKkJ,SACRlJ,KAAKmJ,cAAcnJ,KAAKkJ,SAGzBlJ,KAAKkJ,QAAU1E,EAEXA,IAEHxE,KAAKoJ,WAAWC,KAAK7E,GACrBA,EAAOmB,MAAQ3F,KACfwE,EAAOhC,OAASxC,KAAKoC,iBACrBoC,EAAO1C,OAAOC,GAAG,wBAAyB/B,KAAKsJ,2BAA4BtJ,MAC3EwE,EAAO1C,OAAOC,GAAG,cAAe/B,KAAKuJ,sBAAuBvJ,MAC5DwE,EAAO1C,OAAOC,GAAG,YAAa/B,KAAKwJ,oBAAqBxJ,MACxDwE,EAAO1C,OAAOC,GAAG,aAAc/B,KAAKyJ,qBAAsBzJ,MAC1DwE,EAAO1C,OAAOC,GAAG,UAAW/B,KAAK0J,oBAAqB1J,MACtDwE,EAAO1C,OAAOC,GAAG,WAAY/B,KAAK2J,mBAAoB3J,MACtDwE,EAAO1C,OAAOC,GAAG,mBAAoB/B,KAAK4J,qBAAsB5J,MAChEwE,EAAO1C,OAAOC,GAAG,SAAU/B,KAAK6J,iBAAkB7J,MAClDwE,EAAOnD,OAASyB,OAAOC,iBAAmB,EAElB,GAApB/C,KAAKyE,KAAKC,SACbF,EAAOG,YAAa,sCAkBdtE,EAAA+C,UAAA0G,aAAV,WACC,OAAO,IAAIC,EAAA,GASL1J,EAAA+C,UAAAkG,2BAAP,WAEC,GAAItJ,KAAKwE,OAAOwF,UAAYhK,KAAKwE,OAAOyF,SAAU,CACjD,IAAIC,EAAoBlK,KAAKwE,OAAO0F,UAChCC,EAAoBnK,KAAKwE,OAAO2F,UAEpCnK,KAAKoK,gBAAgBpK,KAAKoE,MAAO8F,GACjClK,KAAKoK,gBAAgBpK,KAAKuE,MAAO4F,GAEjCnK,KAAKqK,mBACJC,EAAGJ,EACHK,EAAGJ,MAUC9J,EAAA+C,UAAAyG,iBAAP,WACC7J,KAAKwK,kBAAkBxK,KAAKoE,OAC5BpE,KAAKwK,kBAAkBxK,KAAKuE,OAC5BvE,KAAKwK,kBAAkBxK,KAAK+D,QAE5B/D,KAAKyK,sBAQCpK,EAAA+C,UAAAqH,mBAAP,WACC3G,EAAA,KAAW9D,KAAK+D,OAAOC,WAAY,SAACD,GACnCA,EAAO2G,uBAUFrK,EAAA+C,UAAAoH,kBAAP,SAAyBG,GACxB7G,EAAA,KAAW6G,EAAQ3G,WAAY,SAAC4G,GAC/BA,EAAOC,QAAQ3H,KAAK,MAcf7C,EAAA+C,UAAAiH,kBAAP,SAAyBS,GAAzB,IAAAhL,EAAAE,KACK+K,EAAUrL,EAAA,kBAA0B4K,GAAI,GAAKC,GAAI,IAAOvK,KAAKmC,eAC7D6I,EAActL,EAAA,kBAA0B4K,EAAGtK,KAAKmC,cAAc8I,WAAa,GAAKV,EAAGvK,KAAKmC,cAAc+I,YAAc,IAAOlL,KAAKmC,eAEhIgJ,KAuBJ,GAtBAnL,KAAK+D,OAAOqH,KAAK,SAACrH,GACjB,GAAIA,EAAOsH,aAAetH,EAAOuH,YAAa,CAC7CvH,EAAO8G,QAAQU,WAAYjB,EAAG,EAAGC,EAAG,EAAGrJ,MAAOpB,EAAKmL,WAAYzJ,OAAQ1B,EAAKoL,cAC5E,IAAIM,EAAQzH,EAAO0H,sBAAsBX,EAASR,EAAGQ,EAASP,GAC1DiB,GAASzE,EAAA,cAAoByE,GAASlB,EAAGS,EAAQT,EAAGC,EAAGQ,EAAQR,EAAGrJ,MAAO8J,EAAYV,EAAIS,EAAQT,EAAG9I,OAAQwJ,EAAYT,EAAIQ,EAAQR,IACvIY,EAAa9B,MAAOmC,MAAOA,EAAOzH,OAAQA,IAG1CA,EAAO8G,QAAQ3H,KAAK,MAKvBiI,EAAaO,KAAK,SAACC,EAAGC,GACrB,OAAID,EAAEH,MAAMjB,EAAIqB,EAAEJ,MAAMjB,EAChB,EAGA,IAILY,EAAazG,OAAS,EAAG,CAQ5B,IANA,IAAImH,EAAMd,EAAQR,EACduB,EAASd,EAAYT,EAErBwB,KACAC,KAEKC,EAAI,EAAGA,EAAId,EAAazG,OAAQuH,IACpCd,EAAac,GAAGT,MAAMjB,EAAIsB,GAAOC,EAASD,GAAO,EACpDE,EAAgB1C,KAAK8B,EAAac,IAGlCD,EAAgB3C,KAAK8B,EAAac,IAIpC,IAAIC,EAAQL,EAGZ,IAASI,EAAI,EAAGA,EAAIF,EAAgBrH,OAAQuH,IAAK,CAChD,IAAIlI,EAASgI,EAAgBE,GAAGlI,OAC5BoI,EAASJ,EAAgBE,GAAGT,MAAMjB,GAClCM,EAAU9G,EAAO8G,SAEbU,WAAYjB,EAAG,EAAGC,EAAG2B,EAAOhL,MAAOlB,KAAKiL,WAAYzJ,OAAQsK,IAEhEjB,EAAQuB,SACXvB,EAAQwB,WAETxB,EAAQhD,SAERqE,EAAQxM,EAAA,kBAA0B4K,EAAG,EAAGC,EAAGM,EAAQyB,MAAMC,OAAS1B,EAAQyB,MAAMpB,YAAcL,EAAQ0B,OAASJ,EAAStB,EAAQ2B,mBAAqB3B,GAASN,EAG/J,IAAIkC,EAAaX,EACjB,IAASG,EAAID,EAAgBtH,OAAS,EAAGuH,GAAK,EAAGA,IAAK,CACrD,IACIpB,GADA9G,EAASiI,EAAgBC,GAAGlI,QACX8G,QACjBsB,EAASH,EAAgBC,GAAGT,MAAMjB,EAEtCM,EAAQU,WAAYjB,EAAG,EAAGC,EAAG,EAAGrJ,MAAOlB,KAAKiL,WAAYzJ,OAAQiL,IAC5D5B,EAAQuB,SACXvB,EAAQwB,WAGTxB,EAAQhD,SAER4E,EAAa/M,EAAA,kBAA0B4K,EAAG,EAAGC,EAAGM,EAAQyB,MAAMC,OAAS1B,EAAQ0B,OAASJ,EAAStB,EAAQ6B,gBAAkB7B,GAASN,KAehIlK,EAAA+C,UAAAgH,gBAAP,SAAuB5C,EAAkBsD,GAAzC,IAAAhL,EAAAE,KACC8D,EAAA,KAAW0D,EAAKxD,WAAY,SAACK,IACxBvE,EAAK6M,UAAUjI,OAAS,GAAKL,EAAKsI,UAAUjI,OAAS,IACxDL,EAAKoH,sBAAsBX,MAYvBzK,EAAA+C,UAAAwJ,gBAAP,SAAuBvI,EAAYmC,GAClC,IAAIQ,EACAC,EACAU,EAAWtD,EAAKuB,SAAS+B,SAEzBtD,EAAKuB,oBAAoBnF,EAAA,IAC5B+F,EAAQO,EAAA,YAAkBP,IAGvBmB,GACHZ,EAAA,YAAkBP,GAElBQ,EAAQ,EAAI3C,EAAK4C,IACjBA,EAAM,EAAI5C,EAAK2C,QAGfA,EAAQ3C,EAAK2C,MACbC,EAAM5C,EAAK4C,KAGZ,IAAI4F,EAAqB5F,EAAMD,EAE/B,OACCA,MAAOA,EAAQR,EAAMQ,MAAQ6F,EAC7B5F,IAAKD,EAAQR,EAAMS,IAAM4F,IAUjBxM,EAAA+C,UAAAoG,oBAAV,SAA8BpE,GAC7B,IAAIZ,EAAmBxE,KAAKwE,OACxBsI,EAAWtI,EAAOsI,SACtB,GAAgB,SAAZA,GAAmC,UAAZA,EAAsB,CAChD,IAAIC,EAAiBvI,EAAOuI,OACzBA,KACFA,EAAS/M,KAAK4M,gBAAgB5M,KAAKoE,MAAM4I,SAAS,GAAID,IAC/CE,SAAW,QAClBjN,KAAK2G,SAAS3G,KAAKoE,MAAO2I,IAI5B,GAAgB,SAAZD,GAAmC,UAAZA,EAAsB,CAChD,IAAII,EAAiB1I,EAAO0I,OACzBA,KACFA,EAASlN,KAAK4M,gBAAgB5M,KAAKuE,MAAMyI,SAAS,GAAIE,IAC/CD,SAAW,QAClBjN,KAAK2G,SAAS3G,KAAKuE,MAAO2I,IAI5BlN,KAAK6J,oBASIxJ,EAAA+C,UAAAqG,qBAAV,SAA+BrE,GAC9B,IAAIsD,EAAQ1I,KAAKoE,MAAM4I,SAAS,GAC5BtE,IACH1I,KAAKmN,iBAAoBnG,MAAO0B,EAAM1B,MAAOC,IAAKyB,EAAMzB,MAGzD,IAAI0B,EAAQ3I,KAAKuE,MAAMyI,SAAS,GAC5BrE,IACH3I,KAAKoN,iBAAoBpG,MAAO2B,EAAM3B,MAAOC,IAAK0B,EAAM1B,OAShD5G,EAAA+C,UAAAuG,mBAAV,SAA6BvE,GAC5B,IACI0H,EADmB9M,KAAKwE,OACNsI,SAEtB,GAAI9M,KAAKqN,gBAA8B,QAAZP,GAAkC,SAAZA,GAAsB,CACtE,IACIQ,EAAQ,GADRC,EAAcvN,KAAKqN,eAEPrG,MAAQ,IACvBsG,EAAQC,EAAYvG,OAEjBuG,EAAYtG,IAAM,IACrBqG,EAAQC,EAAYtG,IAAM,GAE3BjH,KAAK2G,SAAS3G,KAAKoE,OAAS4C,MAAOuG,EAAYvG,MAAQsG,EAAOrG,IAAKsG,EAAYtG,IAAMqG,IAAS,GAAO,GACrGtN,KAAKqN,mBAAgBxI,EACrB7E,KAAKmN,qBAAkBtI,EAExB,GAAI7E,KAAKwN,gBAA8B,QAAZV,GAAkC,SAAZA,GAAsB,CACtE,IAAIS,EAEAD,EAAQ,GAFRC,EAAcvN,KAAKwN,eAGPxG,MAAQ,IACvBsG,EAAQC,EAAYvG,OAEjBuG,EAAYtG,IAAM,IACrBqG,EAAQC,EAAYtG,IAAM,GAG3BjH,KAAK2G,SAAS3G,KAAKuE,OAASyC,MAAOuG,EAAYvG,MAAQsG,EAAOrG,IAAKsG,EAAYtG,IAAMqG,IAAS,GAAO,GACrGtN,KAAKwN,mBAAgB3I,EACrB7E,KAAKoN,qBAAkBvI,IAIfxE,EAAA+C,UAAAwG,qBAAV,WACC5J,KAAKqN,mBAAgBxI,EACrB7E,KAAKmN,qBAAkBtI,GAQdxE,EAAA+C,UAAAsG,oBAAV,SAA8BtE,GAC7B,IAAIZ,EAAmBxE,KAAKwE,OACxBsI,EAAWtI,EAAOsI,SAClBW,EAAYjJ,EAAOiJ,UACvB,GAAIzN,KAAKmN,kBAAgC,QAAZL,GAAkC,SAAZA,GAAsB,CACxE,IAAIY,EAAgB1N,KAAKmN,gBACrB3G,EAAQhC,EAAOuI,OAEfF,EAAaa,EAAczG,IAAMyG,EAAc1G,MAC/CsG,EAAQ9G,EAAMQ,MAEd2G,EAAWC,KAAKC,KAAKJ,EAAWH,EAAQI,EAAc1G,OACtD8G,EAASF,KAAKG,IAAIvH,EAAMQ,MAAQ0G,EAAczG,IAAK,EAAIwG,GAEvDE,GAAY,IACfG,EAASH,EAAWd,GAGjBiB,GAAU,IACbH,EAAWG,EAASjB,GAGrB,IAAImB,GACHhH,MAAO2G,EACP1G,IAAK6G,GAEN9N,KAAKqN,cAAgBW,EAErBhO,KAAK2G,SAAS3G,KAAKoE,MAAO4J,GAG3B,GAAIhO,KAAKoN,kBAAgC,QAAZN,GAAkC,SAAZA,GAAsB,CACpEY,EAAgB1N,KAAKoN,gBACrB5G,EAAQhC,EAAO0I,OAEfL,EAAaa,EAAczG,IAAMyG,EAAc1G,MAC/CsG,EAAQ9G,EAAMQ,MAEd2G,EAAWC,KAAKC,KAAKJ,EAAWH,EAAQI,EAAc1G,OACtD8G,EAASF,KAAKG,IAAIvH,EAAMQ,MAAQ0G,EAAczG,IAAK,EAAIwG,GAEvDE,GAAY,IACfG,EAASH,EAAWd,GAGjBiB,GAAU,IACbH,EAAWG,EAASjB,GAGjBmB,GACHhH,MAAO2G,EACP1G,IAAK6G,GAEN9N,KAAKwN,cAAgBQ,EACrBhO,KAAK2G,SAAS3G,KAAKuE,MAAOyJ,GAG3BhO,KAAK6J,oBASIxJ,EAAA+C,UAAAmG,sBAAV,SAAgCnE,KAahCjE,OAAAkH,eAAWhI,EAAA+C,UAAA,kBA0BX,WACC,OAAOpD,KAAKiO,iBA3Bb,SAAsB3G,GAAtB,IAAAxH,EAAAE,KACKA,KAAKiO,aACRjO,KAAKmJ,cAAcnJ,KAAKiO,aAEzBjO,KAAKiO,YAAc3G,EAEfA,IACHtH,KAAKoJ,WAAWC,KAAK/B,GACrBA,EAAU9E,OAASxC,KAAKsB,iBACxBgG,EAAUO,SACVP,EAAU4G,YAAc,aACxB5G,EAAUxF,OAAOC,GAAG,eAAgB/B,KAAKmO,uBAAwBnO,MAEjEsH,EAAU8G,QAAQC,IAAI,gBAAiB,SAACC,GACvC,IAAI5F,EAAQ5I,EAAKsE,MAAM4I,SAAS,GAIhC,OAHItE,IACH4F,EAAIC,MAAQ7F,EAAM8F,iBAAiBF,EAAIxD,WAEjCwD,sCAiBVnN,OAAAkH,eAAWhI,EAAA+C,UAAA,kBA0BX,WACC,OAAOpD,KAAKyO,iBA3Bb,SAAsBnH,GAAtB,IAAAxH,EAAAE,KACKA,KAAKyO,aACRzO,KAAKmJ,cAAcnJ,KAAKyO,aAEzBzO,KAAKyO,YAAcnH,EAEfA,IACHtH,KAAKoJ,WAAWC,KAAK/B,GACrBA,EAAU9E,OAASxC,KAAKsC,mBACxBgF,EAAU3D,UACV2D,EAAU4G,YAAc,WACxB5G,EAAUxF,OAAOC,GAAG,eAAgB/B,KAAK0O,uBAAwB1O,MAEjEsH,EAAU8G,QAAQC,IAAI,gBAAiB,SAACC,GACvC,IAAI3F,EAAQ7I,EAAKyE,MAAMyI,SAAS,GAIhC,OAHIrE,IACH2F,EAAIC,MAAQ5F,EAAM6F,iBAAiBF,EAAIxD,WAEjCwD,sCAkBAjO,EAAA+C,UAAA+K,uBAAV,SAAiC/I,GAChC,IAAIkC,EAAuBlC,EAAME,OAC7BkB,EAAgBxG,KAAK2G,SAAS3G,KAAKoE,MAAOkD,EAAUd,OACxDc,EAAUqH,SAASnI,IASVnG,EAAA+C,UAAAsL,uBAAV,SAAiCtJ,GAChC,IAAIkC,EAAuBlC,EAAME,OAC7BkB,EAAgBxG,KAAK2G,SAAS3G,KAAKuE,MAAO+C,EAAUd,OACxDc,EAAUqH,SAASnI,IAWVnG,EAAA+C,UAAAuD,SAAV,SAAmBa,EAAkBhB,EAAeoI,EAAqBC,GACxE,IAAIC,GAAsB9H,MAAO,EAAGC,IAAK,GAsBzC,OArBKjH,KAAK+O,aACTjL,EAAA,KAAW0D,EAAKxD,WAAY,SAACK,GAK5B,GAJIA,EAAKuB,SAAS+B,WACjBnB,EAAQO,EAAA,YAAkBP,IAGvBqI,EAAO,CACV,IAAIG,EAAOxI,EAAMS,IAAMT,EAAMQ,MAC7BR,EAAMQ,MAAQ3C,EAAK4K,cAAczI,EAAMQ,MAAQ,KAAQ,GACvDR,EAAMS,IAAMT,EAAMQ,MAAQgI,EAG3B,IAAIE,EAAoB7K,EAAK8K,KAAK3I,EAAOoI,EAAWA,GAEhDvK,EAAKuB,SAAS+B,WACjBuH,EAAYnI,EAAA,YAAkBmI,IAG/BJ,EAAYI,IAGPJ,GAYR3N,OAAAkH,eAAWhI,EAAA+C,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GAAO,oCAkBnClO,EAAA+C,UAAAkM,qBAAV,SAA+BC,GAA/B,IAAAzP,EAAAE,KAaC,OAXAuP,EAAS1P,EAAAuD,UAAMkM,qBAAoBvP,KAAAC,KAACuP,GAGpCzL,EAAA,KAAW9D,KAAK+D,OAAOC,WAAY,SAACD,GACnCwL,EAASzP,EAAK0P,yBACbD,EACKxL,EAAO0L,YACX,QAAS,QAAS,YAAa,gBAI3BF,GAWElP,EAAA+C,UAAAsM,uBAAV,SAAiCH,GAAjC,IAAAzP,EAAAE,KAYC,OAXAuP,EAAS1P,EAAAuD,UAAMkM,qBAAoBvP,KAAAC,KAACuP,GAGpCzL,EAAA,KAAW9D,KAAK+D,OAAOC,WAAY,SAACD,GACnCwL,EAASzP,EAAK0P,yBACbD,EACKxL,EAAO0L,YACX,SAAU,SAAU,aAAc,iBAI9BF,GASDlP,EAAA+C,UAAAuM,cAAP,SAAqBC,GAEpB,GAAIA,EAAQ,CAGX,IAAIxL,KACAG,KAGJ,GAAIjB,EAAA,SAAesM,EAAOxL,QAAUd,EAAA,QAAcsM,EAAOxL,OACxD,IAAK,IAAI6H,EAAI,EAAG4D,EAAMD,EAAOxL,MAAMM,OAAQuH,EAAI4D,EAAK5D,IAAK,CACxD,IAAK2D,EAAOxL,MAAM6H,GAAG6D,KACpB,MAAMC,MAAM,yCAA2C9D,EAAI,MAEnD3I,EAAA,SAAesM,EAAOxL,MAAM6H,GAAe,cACnD7H,EAAMiF,MACL2G,WAAYJ,EAAOxL,MAAM6H,GAAe,WACxCgE,MAAOhE,WAEA2D,EAAOxL,MAAM6H,GAAgB,YAIxC,GAAI3I,EAAA,SAAesM,EAAOrL,QAAUjB,EAAA,QAAcsM,EAAOrL,OACxD,IAAS0H,EAAI,EAAG4D,EAAMD,EAAOrL,MAAMG,OAAQuH,EAAI4D,EAAK5D,IAAK,CACxD,IAAK2D,EAAOrL,MAAM0H,GAAG6D,KACpB,MAAMC,MAAM,yCAA2C9D,EAAI,MAEnD3I,EAAA,SAAesM,EAAOrL,MAAM0H,GAAe,cACnD1H,EAAM8E,MACL2G,WAAYJ,EAAOrL,MAAM0H,GAAe,WACxCgE,MAAOhE,WAEA2D,EAAOrL,MAAM0H,GAAgB,YAMxC,GAAI3I,EAAA,SAAesM,EAAO7L,SAAWT,EAAA,QAAcsM,EAAO7L,QACzD,IAASkI,EAAI,EAAG4D,EAAMD,EAAO7L,OAAOW,OAAQuH,EAAI4D,EAAK5D,IACpD2D,EAAO7L,OAAOkI,GAAG6D,KAAOF,EAAO7L,OAAOkI,GAAG6D,MAAQ,aAwBnD,GAnBIxM,EAAA,SAAesM,EAAOpL,UAAYlB,EAAA,SAAesM,EAAOpL,OAAOsL,QAClEF,EAAOpL,OAAOsL,KAAO,YAIlBxM,EAAA,SAAesM,EAAOlJ,cAAgBpD,EAAA,SAAesM,EAAOlJ,WAAWoJ,QAC1EF,EAAOlJ,WAAWoJ,KAAO,aAGtBxM,EAAA,SAAesM,EAAOvI,cAAgB/D,EAAA,SAAesM,EAAOvI,WAAWyI,QAC1EF,EAAOvI,WAAWyI,KAAO,aAG1BjQ,EAAAuD,UAAMuM,cAAa5P,KAAAC,KAAC4P,GAMjBrL,EAAMG,OACR,IAAQuH,EAAI,EAAGA,EAAI1H,EAAMG,OAAQuH,IAChCjM,KAAKuE,MAAMyI,SAASzI,EAAM0H,GAAGgE,OAAOL,QACnCI,WAAYzL,EAAM0H,GAAG+D,YAIxB,GAAG5L,EAAMM,OACR,IAAQuH,EAAI,EAAGA,EAAI7H,EAAMM,OAAQuH,IAChCjM,KAAKoE,MAAM4I,SAAS5I,EAAM6H,GAAGgE,OAAOL,QACnCI,WAAY5L,EAAM6H,GAAG+D,cAkBhB3P,EAAA+C,UAAA8M,YAAV,SAAsBvE,EAAWC,GAChC,OAAID,GAAKC,EACD,EAGM,cAALD,EACD,EAEM,cAALC,GACA,EAEK,cAALD,EACD,EAEM,cAALC,GACA,EAEK,UAALD,EACD,EAEM,UAALC,GACA,EAGD/L,EAAAuD,UAAM8M,YAAWnQ,KAAAC,KAAC2L,EAAGC,IASpBvL,EAAA+C,UAAA+M,aAAV,WACC,OAAO,IAAIC,EAAA,GAWZjP,OAAAkH,eAAWhI,EAAA+C,UAAA,qBAaX,WACC,OAAOpD,KAAKqQ,oBAdb,SAAyBC,GAAzB,IAAAxQ,EAAAE,KACCA,KAAKqQ,eAAiBC,EAClBA,GACHA,EAAOxO,OAAOC,GAAG,MAAO,WACvBjC,EAAK6G,SAAS7G,EAAKsE,OAAS4C,MAAO,EAAGC,IAAK,IAC3CnH,EAAK6G,SAAS7G,EAAKyE,OAASyC,MAAO,EAAGC,IAAK,uCAkBvC5G,EAAA+C,UAAAmN,SAAP,SAAgBC,GACf3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACfxQ,KAAKoE,MAAMmM,SAASC,EAAOpM,OAC3BpE,KAAKuE,MAAMgM,SAASC,EAAOjM,OAE3BvE,KAAK0C,cAAc6N,SAASC,EAAO9N,gBAGrCrC,EAx/CA,CAA6BD,EAAA,GAggD7BqQ,EAAA,EAASC,kBAA2B,QAAIrQ,8JCnvDxCsQ,EAAAhR,EAAA,GAyCAiR,EAAA,SAAA/Q,GAaC,SAAA+Q,IAAA,IAAA9Q,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBACjBH,EAAK+Q,KAAO,aAEZ/Q,EAAKgR,UAAUC,SAAW,EAC1BjR,EAAKgR,UAAUE,YAAc,EAE7BlR,EAAKI,eAoCP,OAzD0CC,EAAA,EAAAyQ,EAAA/Q,GA6BzCsB,OAAAkH,eAAWuI,EAAAxN,UAAA,gBAOX,WACC,OAAOpD,KAAKiR,WAAqB,cARlC,SAAoB1C,GACnBvO,KAAKkR,YAAY,WAAY3C,oCAiB9BpN,OAAAkH,eAAWuI,EAAAxN,UAAA,mBAOX,WACC,OAAOpD,KAAKiR,WAAwB,iBARrC,SAAuB1C,GACtBvO,KAAKkR,YAAY,cAAe3C,oCASlCqC,EAzDA,CAA0CO,EAAA,GA2I1CC,EAAA,SAAAvR,GA+EC,SAAAuR,IAAA,IAAAtR,EAGCD,EAAAE,KAAAC,OAAOA,YAbDF,EAAAuR,oBAA6D,IAAIC,EAAA,EAcvExR,EAAKG,UAAY,eAGjBH,EAAKyR,cAAgB,WAErBzR,EAAK0R,cAAgB1R,EAAK2R,iBAC1B3R,EAAK0R,cAAcE,UAAY5R,EAC/BA,EAAKsJ,WAAWC,KAAKvJ,EAAK0R,eAI1B1R,EAAKI,eA0nBP,OAxtByEC,EAAA,EAAAiR,EAAAvR,GAwG9DuR,EAAAhO,UAAAqO,eAAV,WACC,OAAO,IAAIb,GAQFQ,EAAAhO,UAAAuO,gBAAV,WACC,OAAO,IAAIC,EAAA,GASLR,EAAAhO,UAAAyO,kBAAP,eAAA/R,EAAAE,KACK8R,EAAoB9R,KAAK2M,UAAUjI,OAEnCqN,EAAaC,EAAA,WAAiBpE,KAAKqE,MAAMjS,KAAKgH,MAAQ8K,EAAY,GAAI,EAAGA,GACzEI,EAAWF,EAAA,WAAiBpE,KAAKuE,KAAKnS,KAAKiH,IAAM6K,GAAY,EAAGA,GAEhE9R,KAAK4F,SAASwG,SACjBpM,KAAK4F,SAASyG,WAIf,IAAI+F,EAAmBpS,KAAK4F,SAASyM,WAAarS,KAAK4F,SAAS0M,gBAC5DC,EAAoB3E,KAAKG,IAAI/N,KAAK2M,UAAUjI,OAAQkJ,KAAKuE,MAAMD,EAAWH,GAAcK,IAE5FpS,KAAKwS,YAAc5E,KAAKqE,MAAMF,EAAaQ,GAAaA,EACxDvS,KAAKyS,UAAY7E,KAAKuE,KAAKnS,KAAKiH,IAAM6K,GAEtC9R,KAAK0S,gBAED1S,KAAKwS,aAAexS,KAAKyS,WAC5BzS,KAAKyS,YAGNzS,KAAK2S,WAAaJ,EAElB1S,EAAAuD,UAAMyO,kBAAiB9R,KAAAC,MAEvB2Q,EAAA,KAAW3Q,KAAK4S,QAAQ5O,WAAY,SAACD,GAC/BA,EAAO2E,iBAAiB0I,GAAkBrN,EAAO4E,iBAAiByI,EACtErN,EAAO8O,uBAGP9O,EAAOiD,MAAQlH,EAAKkH,MACpBjD,EAAOkD,IAAMnH,EAAKmH,IAGdnH,EAAKgT,WAAWpO,OAAS,GAC5BX,EAAO8O,0BAYJzB,EAAAhO,UAAAiJ,SAAP,eAAAvM,EAAAE,KAIC,GAFAH,EAAAuD,UAAMiJ,SAAQtM,KAAAC,QAEXA,KAAKqS,YAAc,GAAtB,CAIArS,KAAK+S,cAAgB/S,KAAK2M,UAAUjI,OAChC1E,KAAK2M,UAAUjI,QAAU,IAC5B1E,KAAK+S,cAAgB,GAGtB/S,KAAKgT,iBAUL,IALA,IAAIjB,EAAaC,EAAA,IAAU,EAAGhS,KAAKwS,YAAcxS,KAAK2S,YAClDT,EAAWF,EAAA,IAAUhS,KAAK2M,UAAUjI,OAAQ1E,KAAKyS,UAAYzS,KAAK2S,YAElEM,EAAY,EAEPhH,EAAI,EAAGA,EAAI8F,EAAY9F,IAAK,EAChCiH,EAAWlT,KAAK2M,UAAUK,SAASf,IAC9BtH,YAAa,EAGvB,IAASsH,EAAIiG,EAAUjG,EAAIjM,KAAK2M,UAAUjI,OAAQuH,IAAK,EAClDiH,EAAWlT,KAAK2M,UAAUK,SAASf,IAC9BtH,YAAa,EAGvB,IAASsH,EAAI8F,EAAY9F,EAAIiG,EAAUjG,IACtC,GAAIA,EAAIjM,KAAK2M,UAAUjI,OAAQ,CAC9B,IAAIwO,EAA8BlT,KAAK2M,UAAUK,SAASf,GAC1D,GAAIA,EAAIjM,KAAK2S,YAAc/E,KAAKiB,MAAM5C,EAAIjM,KAAK2S,YACQ3S,KAAKmT,UAAUlH,KAEpEjM,KAAKoT,eAAeF,GACpBlT,KAAKqT,oBAAoBH,EAAUD,IAEpCA,SAIAjT,KAAKqT,oBAAoBH,EAAUD,GACnCC,EAASvO,YAAa,EAKzB3E,KAAKoT,eAAepT,KAAKwR,eACzBxR,KAAKqT,oBAAoBrT,KAAKwR,cAAeyB,EAAY,EAAGjT,KAAK2M,UAAUjI,QAE3E,IAAIoO,EAAa9S,KAAK8S,WAEtBnC,EAAA,KAAWmC,EAAW9O,WAAY,SAACsP,GAClC,IAAIC,EAA6BD,EAAUC,mBACvCC,EAA2BF,EAAUE,iBAEzC,GAAIxB,EAAA,WAAkBhL,MAAOuM,EAAoBtM,IAAKuM,IAAsBxM,MAAOlH,EAAK0S,YAAavL,IAAKnH,EAAK2S,YAK9G,IAHA,IAAIF,EAAoBP,EAAA,WAAiBpE,KAAKuE,KAAKrS,EAAK6S,WAAaW,EAAUG,WAAY,EAAGD,EAAmBD,GAC7GG,EAAY,EAEP9H,EAAI2H,EAAoB3H,GAAK4H,EAAkB5H,GAAQ2G,EAAW,CAC1E,IAAIW,EAA8BpT,EAAK6M,UAAUK,SAASpB,GAC1D9L,EAAKsT,eAAeF,GACpBpT,EAAKuT,oBAAoBH,EAAUQ,GACnCA,SAcGtC,EAAAhO,UAAAiQ,oBAAP,SAA2BH,EAA6BD,EAAoBhD,GAC3EpQ,EAAAuD,UAAMiQ,oBAAmBtT,KAAAC,KAACkT,GAE1BA,EAASvO,YAAa,EAEtB,IAAIiB,EAAyB5F,KAAK4F,SAC7B+N,EAAA,SAAe1D,KACnBA,EAAQjQ,KAAK4T,gBAAgBV,EAASnC,WAGvC,IAAImB,EAAWlS,KAAK4T,gBAAgBV,EAASlC,aAExC2C,EAAA,SAAezB,KACnBA,EAAWjC,GAGZ,IAKI4D,EACAC,EACAC,EAPAjJ,EAAmB9K,KAAKgU,gBAAgB/D,EAAOiD,EAASpC,UAAUC,UAClEkD,EAAsBjU,KAAKgU,gBAAgB9B,EAAUgB,EAASpC,UAAUE,aAE5EkC,EAASpI,SAAWA,EAMhBoI,EAASgB,SACZL,EAAe3B,EACf4B,EAAe9T,KAAKgU,gBAAgB/D,EAAOiD,EAASpC,UAAUC,UAC9DgD,EAAkB/T,KAAKgU,gBAAgBH,EAAcX,EAASpC,UAAUE,eAGxE6C,EAAe5D,EAAQjQ,KAAK2S,WAC5BmB,EAAe9T,KAAKgU,gBAAgB/D,EAAOiD,EAASiB,SAASC,UAC7DL,EAAkB/T,KAAKgU,gBAAgBH,EAAcX,EAASiB,SAASC,WAGxElB,EAAS1H,MAAQ5F,EAASyO,gBAAgBvJ,GAE1C,IAAIwJ,EAAiBpB,EAASoB,KAC1BA,GACH1O,EAAS2O,kBAAkBD,EAAMxJ,EAAUmJ,GAG5C,IAAIO,EAAatB,EAASsB,KACtBA,GACH5O,EAAS6O,kBAAkBD,EAAM1J,EAAUmJ,GAG5C,IAAI3H,EAAmB4G,EAAS5G,MAC5BA,IACH4G,EAASrC,KAAOqC,EAASrC,KACzBjL,EAAS8O,mBAAmBpI,EAAOxB,EAAUmJ,IAG9C,IAAIrL,EAAiBsK,EAASiB,SAC1BvL,IACHhD,EAAS+O,kBAAkB/L,EAAMkL,EAAcC,GAC1Cb,EAASgB,SACblU,KAAK4U,SAAS1B,EAAUD,IAI1B,IAAIrP,EAAiBsP,EAAStP,KAC1BA,GACHgC,EAAS+O,kBAAkB/Q,EAAMkQ,EAAcC,IAW1C3C,EAAAhO,UAAAyR,gBAAP,SAAuB3B,EAA6B4B,GAEnDjV,EAAAuD,UAAMyR,gBAAe9U,KAAAC,KAACkT,EAAU4B,GAEhC,IAAIC,EAAyC/U,KAAKqR,oBAAoB2D,OAAO9B,EAASnC,UAClFgE,GAAoB7B,GACvBlT,KAAK2M,UAAUsI,OAAOF,GAGvB/U,KAAKqR,oBAAoB6D,OAAOhC,EAASnC,SAAUmC,IAa7C9B,EAAAhO,UAAA4Q,gBAAP,SAAuB/D,EAAemE,GAChCT,EAAA,SAAeS,KACnBA,EAAW,IAGZ,IAAIrC,EAAqB/R,KAAK+R,WAC1BG,EAAmBlS,KAAKkS,SAExBrF,EAAqB7M,KAAKmV,iBAAiBpD,EAAYG,GAEvDkD,EAAoBpV,KAAK4F,SAASwP,kBAGtCvI,GAAcuI,EACdvI,GAAe,EAHO7M,KAAK4F,SAASyP,gBAKpC,IAAIvC,EAAa9S,KAAK8S,WAiCtB,OA/BAnC,EAAA,aAAmBmC,EAAW9O,WAAY,SAACsP,GAC1C,IAAIgC,EAA0BhC,EAAUC,mBACpCgC,EAAwBjC,EAAUE,iBAEtC,GAAIvD,EAAQ8B,EACX,OAAO,EAGR,GAAIC,EAAA,WAAkBhL,MAAOsO,EAAiBrO,IAAKsO,IAAmBvO,MAAO+K,EAAY9K,IAAKiL,IAAa,CAC1GoD,EAAkB1H,KAAKC,IAAIkE,EAAYuD,GACvCC,EAAgB3H,KAAKG,IAAImE,EAAUqD,GAEnC,IAAI9B,EAAoBH,EAAUG,UAG9BxD,EAAQsF,EACXxD,IAAewD,EAAgBD,IAAoB,EAAI7B,GAG/CxD,EAAQqF,IAKhBrF,EAAQqF,GAAmBrF,EAAQqF,GAAmB7B,GAIxD,OAAO,IAGDzB,EAAA,OAAa/B,EAAQmE,EAAWgB,EAAoBrD,GAAclF,EAAY,IAa/EuE,EAAAhO,UAAAoS,mBAAP,SAA0BzE,EAAkBqD,GAC3C,IAAInE,EAAgBjQ,KAAK4T,gBAAgB7C,GACzC,OAAO/Q,KAAKgU,gBAAgB/D,EAAOmE,IAY7BhD,EAAAhO,UAAAqS,gBAAP,SAAuB1E,EAAkBqD,GACxC,IAAItJ,EAAW9K,KAAKwV,mBAAmBzE,EAAUqD,GAC7C5I,EAAQxL,KAAK4F,SAASyO,gBAAgBvJ,GACtC4K,EAAQ1V,KAAK4F,SAAS+P,gBAAgB7K,GAC1C,OAASR,EAAGkB,EAAMlB,EAAGC,EAAGiB,EAAMjB,EAAGmL,MAAOA,IAazCtE,EAAAhO,UAAAwS,WAAA,SAAW7E,EAAkBqD,GAC5B,OAAOpU,KAAKyV,gBAAgB1E,EAAUqD,IAahChD,EAAAhO,UAAAyS,cAAP,SAAqB9E,EAAkBqD,GACtC,OAAOpU,KAAKwV,mBAAmBzE,EAAUqD,IASnChD,EAAAhO,UAAAwQ,gBAAP,SAAuB7C,GACtB,IAAImC,EAA8BlT,KAAKqR,oBAAoB2D,OAAOjE,GAClE,GAAImC,EACH,OAAOA,EAASjD,OAUXmB,EAAAhO,UAAA0S,iBAAP,SAAwBC,EAAuB/E,GAC9ChR,KAAKgW,cAAchW,KAAK4T,gBAAgBmC,GAAgB/V,KAAK4T,gBAAgB5C,GAAe,IActFI,EAAAhO,UAAA6S,gBAAP,SAAuBjP,EAAeC,EAAaiP,EAAkCC,GACpF,IAAIC,EAAmBpW,KAAKwV,mBAAmBxO,EAAOkP,GAClDG,EAAiBrW,KAAKwV,mBAAmBvO,EAAKkP,GAClD,OAAOnW,KAAKsW,qBAAqBF,EAAUC,IAWrCjF,EAAAhO,UAAA6L,cAAP,SAAqBnE,EAAkBsJ,GACtC,IAAInE,EAAgBjQ,KAAKuW,gBAAgBzL,GACzC,OAAO9K,KAAKgU,gBAAgB/D,EAAOmE,IAW7BhD,EAAAhO,UAAAoT,kBAAP,SAAyBzS,EAAkB+G,GAC1C,OAAyB/G,EAAO4I,UAAUK,SAAShN,KAAKuW,gBAAgBzL,KAalEsG,EAAAhO,UAAAqT,KAAP,SAAYvD,EAA4BwD,EAActC,GACrD,IAAItJ,EAIJ,OAHI6I,EAAA,SAAe+C,KAClB5L,EAAW9K,KAAKwV,mBAAmBtC,EAASyD,WAAWD,GAAMtC,IAE1DT,EAAA,MAAY7I,GACR9K,KAAK4W,UAAUtM,EAGftK,KAAK4F,SAASyO,gBAAgBvJ,GAAUR,GAc1C8G,EAAAhO,UAAAyT,KAAP,SAAY3D,EAA4BwD,EAActC,GACrD,IAAItJ,EAIJ,OAHI6I,EAAA,SAAe+C,KAClB5L,EAAW9K,KAAKwV,mBAAmBtC,EAASyD,WAAWD,GAAMtC,IAE1DT,EAAA,MAAY7I,GACR9K,KAAK4W,UAAUrM,EAGfvK,KAAK4F,SAASyO,gBAAgBvJ,GAAUP,GAe1C6G,EAAAhO,UAAA0T,SAAP,SAAgB5D,EAA4BwD,EAAatC,EAAmB2C,GAC3E,OAAO/W,KAAK2V,gBAAgB3V,KAAKwV,mBAAmBtC,EAASyD,WAAWD,GAAMtC,KAYxEhD,EAAAhO,UAAA4T,qBAAP,SAA4BlM,GAC3B,OAAO9K,KAAKiP,cAAcnE,EAAU,IAY9BsG,EAAAhO,UAAA6T,mBAAP,SAA0BnM,GACzB,OAAO9K,KAAKiP,cAAcnE,EAAU,IAW9BsG,EAAAhO,UAAA8T,eAAP,SAAsBpM,GACrB,IAAIoI,EAA8BlT,KAAK2M,UAAUK,SAAShN,KAAKuW,gBAAgBzL,IAC/E,GAAIoI,EACH,OAAOlT,KAAKoO,QAAQ+I,MAAM,iBAAkBjE,EAASnC,WAWhDK,EAAAhO,UAAAmT,gBAAP,SAAuBzL,GACtBA,EAAWkH,EAAA,MAAYlH,EAAU,IAEjC,IAAIiH,EAAqB/R,KAAK+R,WAC1BG,EAAmBlS,KAAKkS,SACxBrF,EAAqBqF,EAAWH,EAEhCe,EAAa9S,KAAK8S,WAElB7C,EAAgB,KA0CpB,OAvCAU,EAAA,aAAmBmC,EAAW9O,WAAY,SAACsP,GAC1C,IAAI8D,EAA6B9D,EAAU+D,cACvCC,EAA2BhE,EAAUW,YAErCqB,EAA0BhC,EAAUC,mBACpCgC,EAAwBjC,EAAUE,iBAEtC8B,EAAkBtD,EAAA,IAAUsD,EAAiBvD,GAC7CwD,EAAgBvD,EAAA,IAAUuD,EAAerD,GAEzC,IAAIuB,EAAoBH,EAAUG,UAKlC,GAHA5G,IAAe0I,EAAgBD,IAAoB,EAAI7B,GAGnD3I,EAAWwM,EACdvF,IAAewD,EAAgBD,IAAoB,EAAI7B,QAGnD,KAAI3I,EAAWsM,GAIf,CACJ,IAAIG,GAAiBzM,EAAWsM,IAAuBE,EAAmBF,GAE1E,OADAnH,EAAQqF,EAAkB1H,KAAKiB,MAAM0I,GAAiBhC,EAAgBD,KAC/D,EAGR,OAAO,IAGH3B,EAAA,SAAe1D,KACnBA,EAAQrC,KAAKqE,MAAMnH,EAAW+B,EAAakF,IAExC9B,GAASiC,GACZjC,IAGMA,GASDmB,EAAAhO,UAAAoL,iBAAP,SAAwB1D,GACvB,IAAIoI,EAA8BlT,KAAK2M,UAAUK,SAAShN,KAAKuW,gBAAgBzL,IAC/E,GAAIoI,EACH,OAAOA,EAASnC,UAUlB5P,OAAAkH,eAAW+I,EAAAhO,UAAA,iBAAX,WAGC,OAAOpD,KAAK4F,SAASyO,gBAAgB,oCAQ/BjD,EAAAhO,UAAAoU,aAAP,WACC3X,EAAAuD,UAAMoU,aAAYzX,KAAAC,MAEHA,KAAK4F,SACX6R,SAASC,UAAW,GAE/BtG,EAxtBA,CAAyED,EAAA,GAguBzEwG,EAAA,EAASjH,kBAAgC,aAAIU,EAC7CuG,EAAA,EAASjH,kBAAwC,qBAAIE,sGCr5BrDgH,EAAAjY,EAAA,GAwEAkY,EAAA,SAAAhY,GAqCC,SAAAgY,IAAA,IAAA/X,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,oBACjBH,EAAKe,QAAQ,EAAG,EAAG,EAAG,GACtBf,EAAKsU,SAAW,GAChBtU,EAAKgY,OAAS,EACdhY,EAAKiY,YAAa,EAClBjY,EAAKI,eA0HP,OAtKuCC,EAAA,EAAA0X,EAAAhY,GAuDtCsB,OAAAkH,eAAWwP,EAAAzU,UAAA,wBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,yBAR9B,SAA4Bb,GAC3BvO,KAAKqP,iBAAiB,mBAAoBd,GAAO,oCAelDpN,OAAAkH,eAAWwP,EAAAzU,UAAA,cASX,WACC,OAAOpD,KAAKoP,iBAAiB,eAV9B,SAAkBb,GAGjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAmBjCsJ,EAAAzU,UAAA4U,SAAP,SAAgBxM,EAAeyM,GAC9B,IAAIvC,EAAgBwC,EAAA,QAAgBtK,KAAKuK,MAAM3M,EAAMjB,EAAGiB,EAAMlB,GAE1DtK,KAAKoM,SACRpM,KAAKqM,WAGN,IAAI+L,EAAe,EACfpY,KAAKqY,SACRD,GAAQ,GAGT,IAAIE,EAAmBtY,KAAKsY,iBAI5BtY,KAAKuY,IAAMvY,KAAKwY,gBAAkB,GAAKhN,EAAMjB,EAAI0N,IAAe,EAAIA,IAEpEjY,KAAKyY,IAAMzY,KAAK+E,eAAiB,GAAKyG,EAAMlB,EAAI2N,IAAe,EAAIA,IAEnE,IAAIS,EAAsB1Y,KAAK8X,OAASM,EAExC,GAAIR,EAAA,SAAeU,GAAmB,CAErC,IAAIrN,EAAajL,KAAK2Y,KAAKzX,MACvBgK,EAAclL,KAAK2Y,KAAKnX,OAExBkU,EAAQ,IAAMA,GAAS,IACD,IAArB4C,IACHA,EAAmB,GACnBrN,EAAa,KAIW,IAArBqN,IACHpN,GAAgBA,GAEO,IAApBoN,IACHA,GAAoB,GACpBrN,EAAa,EACbC,GAAgBA,IAIlBlL,KAAK4Y,SAAWN,EAAmB5C,EAAQ,GAE3C,IAAImD,EAAKX,EAAA,IAAUI,GAAoB,EACnCQ,EAAKZ,EAAA,IAAUI,GAAoB,EAEnCM,EAAW5Y,KAAK4Y,SAEpB5Y,KAAKyY,GAAKvN,EAAc2N,EAAKX,EAAA,IAAUU,GAAY3N,EAAa6N,EAAKZ,EAAA,IAAUU,GAC/E5Y,KAAKuY,IAAMrN,EAAc2N,EAAKX,EAAA,IAAUU,GAAY3N,EAAa6N,EAAKZ,EAAA,IAAUU,GAEhF,IAAIG,EAAqB/Y,KAAK+Y,mBAC1BC,EAAkBhZ,KAAKgZ,gBACvBC,EAAmBjZ,KAAKiZ,iBACxBC,EAAoBlZ,KAAKkZ,kBAExBlZ,KAAKqY,OAITK,IAAgBK,EAAqBC,GAAmBd,EAAA,IAAUI,IAAqBW,EAAmBC,GAAqBhB,EAAA,IAAUI,GAHzII,IAAgBxN,EAAc6N,EAAqBC,GAAmBd,EAAA,IAAUI,IAAqBrN,EAAagO,EAAmBC,GAAqBhB,EAAA,IAAUI,GAUtK,OAHA9M,EAAMlB,GAAK4N,EAAA,IAAUxC,GAASgD,EAC9BlN,EAAMjB,GAAK2N,EAAA,IAAUxC,GAASgD,EAEvBlN,GAGTqM,EAtKA,CAAuCsB,EAAA,GA8KvCxB,EAAA,EAASjH,kBAAqC,kBAAImH,oNCtPlDuB,EAAAzZ,EAAA,IAgDA0Z,EAAA,SAAAxZ,GA6CC,SAAAwZ,IAAA,IAAAvZ,EACCD,EAAAE,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,mBAEjBH,EAAKwZ,OAAOC,QAAWC,MAAO,GAC9B1Z,EAAKwZ,OAAOG,QAAWD,MAAO,GAC9B1Z,EAAKwZ,OAAOI,cACZ5Z,EAAKwZ,OAAOK,cAEZ7Z,EAAKwZ,OAAOM,SACZ9Z,EAAKwZ,OAAOO,SACZ/Z,EAAKwZ,OAAOQ,aACZha,EAAKwZ,OAAOS,aAEZja,EAAKka,YAAY,QAAS,GAAK,GAC/Bla,EAAKka,YAAY,QAAS,GAAK,GAE/Bla,EAAKka,YAAY,YAAa,GAAK,GACnCla,EAAKka,YAAY,YAAa,GAAK,GAEnCla,EAAKI,eA8QP,OAhVsCC,EAAA,EAAAkZ,EAAAxZ,GA0ErCsB,OAAAkH,eAAWgR,EAAAjW,UAAA,cAOX,WACC,OAAOpD,KAAKsZ,OAAOC,OAAOhL,WAR3B,SAAkBA,GACjBvO,KAAKia,SAAS,SAAU1L,oCAezBpN,OAAAkH,eAAWgR,EAAAjW,UAAA,cAOX,WACC,OAAOpD,KAAKsZ,OAAOG,OAAOlL,WAR3B,SAAkBA,GACjBvO,KAAKia,SAAS,SAAU1L,oCAezBpN,OAAAkH,eAAWgR,EAAAjW,UAAA,aAOX,WACC,OAAOpD,KAAKka,QAAQ,cARrB,SAAiBC,GAChBna,KAAKoa,QAAQ,QAASD,oCAevBhZ,OAAAkH,eAAWgR,EAAAjW,UAAA,aAOX,WACC,OAAOpD,KAAKka,QAAQ,cARrB,SAAiBC,GAChBna,KAAKoa,QAAQ,QAASD,oCAevBhZ,OAAAkH,eAAWgR,EAAAjW,UAAA,iBAOX,WACC,OAAOpD,KAAK2W,WAAW0D,eARxB,SAAqBtJ,GACpB/Q,KAAKsa,YAAY,YAAavJ,oCAe/B5P,OAAAkH,eAAWgR,EAAAjW,UAAA,iBAOX,WACC,OAAOpD,KAAK2W,WAAW4D,eARxB,SAAqBxJ,GACpB/Q,KAAKsa,YAAY,YAAavJ,oCAe/B5P,OAAAkH,eAAWgR,EAAAjW,UAAA,kBAOX,WACC,OAAOpD,KAAKsZ,OAAOI,WAAWnL,WAR/B,SAAsBA,GACrBvO,KAAKia,SAAS,aAAc1L,oCAe7BpN,OAAAkH,eAAWgR,EAAAjW,UAAA,kBAOX,WACC,OAAOpD,KAAKsZ,OAAOK,WAAWpL,WAR/B,SAAsBA,GACrBvO,KAAKia,SAAS,aAAc1L,oCAe7BpN,OAAAkH,eAAWgR,EAAAjW,UAAA,iBAOX,WACC,OAAOpD,KAAKka,QAAQ,kBARrB,SAAqBC,GACpBna,KAAKoa,QAAQ,YAAaD,oCAe3BhZ,OAAAkH,eAAWgR,EAAAjW,UAAA,iBAOX,WACC,OAAOpD,KAAKka,QAAQ,kBARrB,SAAqBC,GACpBna,KAAKoa,QAAQ,YAAaD,oCAe3BhZ,OAAAkH,eAAWgR,EAAAjW,UAAA,qBAOX,WACC,OAAOpD,KAAK2W,WAAW6D,mBARxB,SAAyBzJ,GACxB/Q,KAAKkR,YAAY,gBAAiBH,oCAenC5P,OAAAkH,eAAWgR,EAAAjW,UAAA,qBAOX,WACC,OAAOpD,KAAK2W,WAAW8D,mBARxB,SAAyB1J,GACxB/Q,KAAKkR,YAAY,gBAAiBH,oCAmB5BsI,EAAAjW,UAAAsX,OAAP,SAAcnL,EAAkBoL,EAAmBC,GAAnD,IAEK7M,EAFLjO,EAAAE,KAwBC,OApBK6a,EAAA,SAAeD,KACnBA,EAAa,GAGdE,EAAA,EAAYvL,EAAQ,SAACwL,GACpB,IAAIxM,EAGHA,EADGoM,EACK7a,EAAKkb,gBAAgBD,GAGrBjb,EAAKmb,SAASF,KAGvBxM,GAASqM,GAEG7M,IAAQ8M,EAAA,SAAe9M,MAClCA,EAAMQ,KAGDR,GAaDsL,EAAAjW,UAAA8X,OAAP,SAAc3L,EAAkBoL,EAAmBC,GAAnD,IAEK/M,EAFL/N,EAAAE,KAyBC,OArBK6a,EAAA,SAAeD,KACnBA,EAAa,GAGdE,EAAA,EAAYvL,EAAQ,SAACwL,GACpB,IAAIxM,EAGHA,EADGoM,EACK7a,EAAKkb,gBAAgBD,GAGrBjb,EAAKmb,SAASF,KAGvBxM,GAASqM,GAEG/M,IAAQgN,EAAA,SAAehN,MAClCA,EAAMU,KAIDV,GAITwL,EAhVA,CAAsC8B,EAAA,GAshBtCC,EAAA,SAAAvb,GA0KC,SAAAub,IAAA,IAAAtb,EACCD,EAAAE,KAAAC,OAAOA,YA5HEF,EAAAub,OAAS,IAAIC,EAAA,EAObxb,EAAAyb,OAAS,IAAID,EAAA,EAsHtBxb,EAAKG,UAAY,WACjBH,EAAKiY,YAAa,EAElBjY,EAAK0b,cAAc5X,KAAO,IAAI6X,EAAA,EAC9B3b,EAAK0b,cAAc5X,KAAK8X,QAAU5b,EAAK6b,MAAMtN,IAAI,QAEjDvO,EAAK8b,SAAU,EAEf9b,EAAK+K,QAAQgR,mBAAqB,aAClC/b,EAAK+K,QAAQ/I,OAAOC,GAAG,SAAU,WAChCjC,EAAKgc,6BAGNhc,EAAKsJ,WAAWC,KAAKvJ,EAAKub,QAC1Bvb,EAAKsJ,WAAWC,KAAKvJ,EAAKyb,QAE1Bzb,EAAKI,eAoiCP,OAhuC8BC,EAAA,EAAAib,EAAAvb,GAmMnBub,EAAAhY,UAAAC,sBAAV,WACCxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MACtB6a,EAAA,SAAe7a,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,gBAUnC2X,EAAAhY,UAAAqO,eAAV,WACC,OAAO,IAAI4H,GAQL+B,EAAAhY,UAAAc,aAAP,WAKC,GAJAlE,KAAK+b,eAELlc,EAAAuD,UAAMc,aAAYnE,KAAAC,OAEb6a,EAAA,SAAe7a,KAAKyP,WAAsCzP,KAAKgc,YAAcnB,EAAA,SAAe7a,KAAKyP,WAAsCzP,KAAKic,UAChJ,MAAMlM,MAAM,4BAA+B/P,KAAKkc,KAAOlc,KAAKkc,KAAOlc,KAAKmc,KAAO,gCAWvEf,EAAAhY,UAAAyR,gBAAV,SAA0B3B,EAA6B4B,GACtD,IACCjV,EAAAuD,UAAMyR,gBAAe9U,KAAAC,KAACkT,EAAU4B,GAChC5B,EAASpR,OAAOsa,UAChBpc,KAAK0I,MAAM2T,sBAAsBnJ,GACjClT,KAAK2I,MAAM0T,sBAAsBnJ,GAEjCA,EAASpR,OAAOwa,SAEhBtc,KAAKuc,wBAAwBrJ,GAE9B,MAAOlK,GACNhJ,KAAKwc,OAAOvT,mBAAmBD,KAWvBoS,EAAAhY,UAAAmZ,wBAAV,SAAkCrJ,KAQxBkI,EAAAhY,UAAA2Y,aAAV,WACC,IAAIrT,EAAc1I,KAAK0I,MACnBC,EAAc3I,KAAK2I,MAEnB8T,EAAyB/T,EAAM6I,cAC/BmL,EAAgED,EAAiB,IACjFE,EAAoE,OAASC,EAAA,WAAkBH,GAAkB,IAEjHI,EAAyBlU,EAAM4I,cAC/BuL,EAAgED,EAAiB,IACjFE,EAAoE,OAASH,EAAA,WAAkBC,GAAkB,IAErH7c,KAAKgc,QAAUU,EACf1c,KAAKic,QAAUa,EAEX9c,KAAKyP,WAAWkN,KACnB3c,KAAKgd,YAAcL,GAGhB3c,KAAKyP,WAAWsN,KACnB/c,KAAKid,YAAcF,GAGf/c,KAAKyP,WAAWsN,IAAe/c,KAAKkd,UAAYld,KAAK2I,QACzD3I,KAAKid,YAAcH,GAGf9c,KAAKyP,WAAWkN,IAAe3c,KAAKkd,UAAYld,KAAK0I,QACzD1I,KAAKgd,YAAcN,GAGhB1c,KAAK4b,SAAW5b,KAAKkd,UAAYld,KAAK0I,QACzC1I,KAAKgd,YAAcN,GAGhB1c,KAAK4b,SAAW5b,KAAKkd,UAAYld,KAAK2I,QACzC3I,KAAKid,YAAcH,GAGf9c,KAAK0I,iBAAiBX,EAAA,GAAkB/H,KAAK2I,iBAAiBZ,EAAA,IAC7D/H,KAAKid,cACTjd,KAAKid,YAAcH,IAIrB9c,KAAKmd,iBACLnd,KAAKod,iBAELpd,KAAKqd,cAAcrd,KAAK0I,MAAY1I,KAAKmd,cAAoBnd,KAAKgc,SAClEhc,KAAKqd,cAAcrd,KAAK0I,MAAY1I,KAAKmd,cAAoBnd,KAAKgd,aAElEhd,KAAKqd,cAAcrd,KAAK2I,MAAY3I,KAAKod,cAAoBpd,KAAKic,SAClEjc,KAAKqd,cAAcrd,KAAK2I,MAAY3I,KAAKod,cAAoBpd,KAAKid,cAWzD7B,EAAAhY,UAAAia,cAAV,SAA+DhZ,EAAYkL,EAAoBwL,GAC1F1W,aAAgBiZ,EAAA,GACfzC,EAAA,SAAe7a,KAAKyP,WAAWsL,MAAqC,GAA1BxL,EAAOgO,QAAQxC,IAC5DxL,EAAOlG,KAAK0R,IAcLK,EAAAhY,UAAAoa,qBAAV,SAAsEzC,EAAY1W,GAC5EwW,EAAA,SAAe7a,KAAKyP,WAAWsL,MACnC/a,KAAKyP,WAAWsL,GAAc1W,EAAKoL,WAAWsB,WAatCqK,EAAAhY,UAAAqa,iBAAV,SAAkE1C,EAAY1W,GACxEwW,EAAA,SAAe7a,KAAKyP,WAAWsL,MACnC/a,KAAKyP,WAAWsL,GAAc1W,EAAKoL,WAAW0K,OAOtCiB,EAAAhY,UAAAsa,UAAV,WACC7d,EAAAuD,UAAMsa,UAAS3d,KAAAC,MACfA,KAAK2d,cAQCvC,EAAAhY,UAAAua,WAAP,WAEC,GAAI3d,KAAKwb,cAAc5X,KAAM,CAC5B,IAAIga,EAAe5d,KAAK6d,cAGxBC,EAAA,KAAW9d,KAAKgQ,WAAWhM,WAAY,SAACwC,GACnCA,EAAM2N,SAAS4J,WAClBvX,EAAM2N,SAAS9H,WACfuR,GAAQpX,EAAM2N,SAAS4J,YAIzB/d,KAAKwb,cAAc5X,KAAK8X,QAAQsC,MAAOC,EAAKL,MASpCxC,EAAAhY,UAAAya,YAAV,WACC,OAAOzE,EAAA,YACN9O,EAAG,EACHC,EAAG,EACHrJ,MAAOlB,KAAK0I,MAAM2J,WAClB7Q,OAAQxB,KAAK2I,MAAM0J,cAUd+I,EAAAhY,UAAA8a,aAAP,SAAoB7Z,GACnB,OAAIA,GAAQrE,KAAK0I,MACT1I,KAAK0c,OAETrY,GAAQrE,KAAK2I,MACT3I,KAAK8c,YADb,GAUM1B,EAAAhY,UAAA+a,kBAAP,WAECne,KAAK0I,MAAM0V,qBACXpe,KAAK2I,MAAMyV,qBAEXve,EAAAuD,UAAM+a,kBAAiBpe,KAAAC,MAEvBA,KAAK0I,MAAM2V,6BACXre,KAAK2I,MAAM0V,8BAQLjD,EAAAhY,UAAAyO,kBAAP,WACK7R,KAAK0I,MAAM4V,kBACdte,KAAK0I,MAAMmJ,oBAGR7R,KAAK2I,MAAM2V,kBACdte,KAAK2I,MAAMkJ,oBAGZhS,EAAAuD,UAAMyO,kBAAiB9R,KAAAC,OAQjBob,EAAAhY,UAAAiJ,SAAP,WACKrM,KAAK0I,MAAM0D,SACdpM,KAAK0I,MAAM2D,WAGRrM,KAAK2I,MAAMyD,SACdpM,KAAK2I,MAAM0D,WAGZrM,KAAKue,cAAe,EACpB,IAAIC,EAA4Bxe,KAAKwe,kBACjC3D,EAAA,SAAe2D,IACdxe,KAAKkd,SAAS7K,YAAcrS,KAAKkS,SAAWlS,KAAK+R,YAAcyM,IAClExe,KAAKue,cAAe,GAItB1e,EAAAuD,UAAMiJ,SAAQtM,KAAAC,OAQfmB,OAAAkH,eAAW+S,EAAAhY,UAAA,aAqBX,WACC,IAAKpD,KAAKqb,OAAOoD,MAAO,CACvB,IAAMpa,EAAOrE,KAAK2F,MAAMvB,MAAM4I,SAAS,GAEvC,IAAK3I,EACJ,MAAM0L,MAAM,iCAGb/P,KAAK0I,MAAQrE,EAGd,OAAOrE,KAAKqb,OAAOoD,WAhCpB,SAAiBpa,GAChB,IAAIqa,EAAU1e,KAAKqb,OAAOoD,MACtBC,GAAWra,IACVqa,IACH1e,KAAK2e,gBAAgBC,UAAUF,EAAQvC,KAEvCnc,KAAKqb,OAAOwD,UAEZH,EAAQ3a,OAAO+a,YAAY9e,OAG5BA,KAAKqb,OAAO0D,IAAI1a,EAAMA,EAAK2a,eAAehf,OAE1CA,KAAK2e,gBAAgBzJ,OAAO7Q,EAAK8X,IAAK,IAAI8C,EAAA,GAC1Cjf,KAAKkf,mDA0BP/d,OAAAkH,eAAW+S,EAAAhY,UAAA,aAqBX,WACC,IAAKpD,KAAKub,OAAOkD,MAAO,CACvB,IAAMpa,EAAOrE,KAAK2F,MAAMpB,MAAMyI,SAAS,GAEvC,IAAK3I,EACJ,MAAM0L,MAAM,iCAGb/P,KAAK2I,MAAQtE,EAGd,OAAOrE,KAAKub,OAAOkD,WAhCpB,SAAiBpa,GAChB,IAAIqa,EAAU1e,KAAKub,OAAOkD,MACtBC,GAAWra,IACVqa,IACH1e,KAAK2e,gBAAgBC,UAAUF,EAAQvC,KAEvCnc,KAAKub,OAAOsD,UAEZH,EAAQ3a,OAAO+a,YAAY9e,OAG5BA,KAAKub,OAAOwD,IAAI1a,EAAMA,EAAK2a,eAAehf,OAE1CA,KAAK2e,gBAAgBzJ,OAAO7Q,EAAK8X,IAAK,IAAI8C,EAAA,GAC1Cjf,KAAKkf,mDA6BP/d,OAAAkH,eAAW+S,EAAAhY,UAAA,gBAQX,WAsBC,OArBKpD,KAAKmf,YACLnf,KAAK2I,iBAAiByW,EAAA,IACzBpf,KAAKmf,UAAYnf,KAAK2I,OAGnB3I,KAAK0I,iBAAiB0W,EAAA,IACzBpf,KAAKmf,UAAYnf,KAAK0I,OAGnB1I,KAAK2I,iBAAiBZ,EAAA,IACzB/H,KAAKmf,UAAYnf,KAAK2I,OAGnB3I,KAAK0I,iBAAiBX,EAAA,IACzB/H,KAAKmf,UAAYnf,KAAK0I,OAGlB1I,KAAKmf,YACTnf,KAAKmf,UAAYnf,KAAK0I,QAGjB1I,KAAKmf,eA9Bb,SAAoB5Q,GACnBvO,KAAKmf,UAAY5Q,EACjBvO,KAAK6S,uDAqCCuI,EAAAhY,UAAAic,cAAP,SAAqB1E,GAGpB9a,EAAAuD,UAAMic,cAAatf,KAAAC,KAAC2a,GAapB,IAXA,IAAIhO,EAAY3M,KAAK2M,UAEjB2S,EAAOC,IACPC,GAASD,IAETE,EAAOF,IACPG,GAASH,IAETxN,EAAa/R,KAAK+R,WAClBG,EAAWlS,KAAKkS,SAEXjG,EAAI8F,EAAY9F,EAAIiG,EAAUjG,IAAK,CAC3C,IAAIiH,EAAWvG,EAAUK,SAASf,GAElCjM,KAAK2f,cAAczM,EAAUyH,GAE7B,IAAIiF,EAAS1M,EAAS+H,SAAS,SAAU,SACrC4E,EAAS3M,EAAS+H,SAAS,SAAU,SAEzCqE,EAAOQ,EAAA,IAAU5M,EAASwH,OAAO1a,KAAKmd,cAAexC,EAASiF,GAASN,GACvEG,EAAOK,EAAA,IAAU5M,EAASwH,OAAO1a,KAAKod,cAAezC,EAASkF,GAASJ,GAEvED,EAAOM,EAAA,IAAU5M,EAASgI,OAAOlb,KAAKmd,cAAexC,EAASiF,GAASJ,GACvEE,EAAOI,EAAA,IAAU5M,EAASgI,OAAOlb,KAAKod,cAAezC,EAASkF,GAASH,GAKxE1f,KAAK0I,MAAMqX,yBACX/f,KAAK2I,MAAMoX,yBAEX,IAAIC,EAAkBhgB,KAAK0I,MAAMyT,IAC7B8D,EAAkBjgB,KAAK2I,MAAMwT,IAE5BxB,GACA3a,KAAKkgB,MAAMlL,OAAOgL,IAAYV,GAAQtf,KAAKmgB,MAAMnL,OAAOgL,IAAYR,GAAQxf,KAAKkgB,MAAMlL,OAAOiL,IAAYR,GAAQzf,KAAKmgB,MAAMnL,OAAOiL,IAAYP,IACnJ1f,KAAKkgB,MAAMhL,OAAO8K,EAASV,GAC3Btf,KAAKmgB,MAAMjL,OAAO8K,EAASR,GAC3Bxf,KAAKkgB,MAAMhL,OAAO+K,EAASR,GAC3Bzf,KAAKmgB,MAAMjL,OAAO+K,EAASP,GAC3B1f,KAAKogB,oBAAoB,oBAIvBpgB,KAAKqgB,MAAMrL,OAAOgL,IAAYV,GAAQtf,KAAKsgB,MAAMtL,OAAOgL,IAAYR,GAAQxf,KAAKqgB,MAAMrL,OAAOiL,IAAYR,GAAQzf,KAAKsgB,MAAMtL,OAAOiL,IAAYP,IACnJ1f,KAAKqgB,MAAMnL,OAAO8K,EAASV,GAC3Btf,KAAKsgB,MAAMpL,OAAO8K,EAASR,GAC3Bxf,KAAKqgB,MAAMnL,OAAO+K,EAASR,GAC3Bzf,KAAKsgB,MAAMpL,OAAO+K,EAASP,GACvB1f,KAAKoH,UACRpH,KAAKogB,oBAAoB,8BAarBhF,EAAAhY,UAAAqI,sBAAP,SAA6BvB,EAAmBC,GAC/C,IAAI+I,MAEJ,GAAIlT,KAAKgK,UAAYhK,KAAKiK,SAAU,CAEnC,IAAIvB,EAAc1I,KAAKqb,OAAOoD,MAC1B9V,EAAc3I,KAAKub,OAAOkD,MAW9B,GATI/V,GAAS1I,KAAKkd,WACjBhK,EAA8BxK,EAAM8N,kBAAkBxW,KAAM0I,EAAM6X,eAAerW,KAE9EvB,GAAS3I,KAAKkd,WACjBhK,EAA8BvK,EAAM6N,kBAAkBxW,KAAM2I,EAAM4X,eAAepW,KAGlFnK,KAAK8b,yBAAyB5I,GAE1BA,EAAU,CACblT,KAAK0K,kBAAkBwI,GACvBlT,KAAKwgB,gBAAkBtN,EAGvB,IAAIuN,EAAgBzgB,KAAKygB,cACrBC,EAAgB1gB,KAAK0gB,cAErBC,EAAe3gB,KAAK4gB,SAAS1N,EAAUuN,EAAeC,EAAexN,EAASpC,UAAU2P,GAAgBvN,EAASpC,UAAU4P,IAE/H,GAAIC,EAAc,CAKjB,GAHA3gB,KAAK6gB,SAAWF,EAAarW,EAC7BtK,KAAK8gB,SAAWH,EAAapW,EAEzBvK,KAAK+gB,sBAAwB7N,EAAU,CAC1ClT,KAAKogB,oBAAoB,kBACxBtQ,KAAM,iBACNxK,OAAQtF,KACRkT,SAAUA,QAGX,IAAc,IAAA8N,EAAA7gB,EAAA,EAAA+S,EAAS+N,SAAOC,EAAAF,EAAAlY,QAAAoY,EAAAC,KAAAD,EAAAF,EAAAlY,OAAA,CAApBoY,EAAA3S,MACM,GACR6S,SAAS,2GAGjBphB,KAAK+gB,qBAAuB7N,EAG7B,OAAIlT,KAAKqhB,cACDzE,EAAA,kBAA0BtS,EAAGqW,EAAarW,EAAGC,EAAGoW,EAAapW,GAAKvK,WAE1E,IAKHA,KAAKshB,eAQIlG,EAAAhY,UAAA0Y,yBAAV,SAAmC5I,GAClC,GAAIlT,KAAK+gB,sBAAwB/gB,KAAK+gB,sBAAwB7N,MAC7D,IAAc,IAAA8N,EAAA7gB,EAAA,EAAAH,KAAK+gB,qBAAqBE,SAAOC,EAAAF,EAAAlY,QAAAoY,EAAAC,KAAAD,EAAAF,EAAAlY,OAAA,CAArCoY,EAAA3S,MACM,GACR6S,SAAS,sHAWZhG,EAAAhY,UAAAme,eAAP,SAAsBC,GACrB3hB,EAAAuD,UAAMme,eAAcxhB,KAAAC,KAACwhB,GAErB,IAAItO,EAA+CsO,EAAOtO,SAGtDwJ,EAAiB8E,EAAO9E,OACvB7B,EAAA,SAAe6B,KACnBA,EAAS1c,KAAK0c,QAGf,IAAII,EAAiB0E,EAAO1E,OAK5B,GAJKjC,EAAA,SAAeiC,KACnBA,EAAS9c,KAAK8c,QAGV9c,KAAK0I,iBAAiB4U,EAAA,IAAcpK,EAASuO,UAAU/E,KAAc1c,KAAK2I,iBAAiB2U,EAAA,IAAcpK,EAASuO,UAAU3E,IAChI0E,EAAOxX,SAAU,MAEb,CACJ,IAAI0X,EAA0B1hB,KAAK2hB,mBAAmBH,EAAQ9E,GAC1DkF,EAA0B5hB,KAAK2hB,mBAAmBH,EAAQ1E,GAE1DtR,EAAQxL,KAAK4gB,SAAS1N,EAAUwJ,EAAQI,EAAQ4E,EAAiBE,GACrE,GAAIpW,EAAO,CACV,IAAIlB,EAAYkB,EAAMlB,EAClBC,EAAYiB,EAAMjB,EAEtB,GAAIsQ,EAAA,SAAe2G,EAAOK,YAAc7hB,KAAK2c,YAAc3c,KAAK0c,OAE/DpS,IAASA,EADWtK,KAAK0I,MAAM+N,KAAKvD,EAAUlT,KAAK2c,aAC7B6E,EAAOK,UAI9B,GAAIhH,EAAA,SAAe2G,EAAOM,YAAc9hB,KAAK+c,YAAc/c,KAAK8c,OAE/DvS,IAASA,EADWvK,KAAK2I,MAAMkO,KAAK3D,EAAUlT,KAAK+c,aAC7ByE,EAAOM,UAG9BN,EAAOO,QAASzX,EAAGA,EAAGC,EAAGA,SAGzBiX,EAAOxX,SAAU,IASVoR,EAAAhY,UAAAue,mBAAV,SAA6BH,EAAgBzG,GAC5C,IAAIiH,EAAyBR,EAAOK,UAChC3O,EAAWsO,EAAOtO,SAItB,OAHK2H,EAAA,SAAemH,KACnBA,EAAiB9O,EAAS+O,iBAAiBlH,IAErCiH,GAQE5G,EAAAhY,UAAA8e,mBAAV,SAA6BV,EAAgBzG,GAC5C,IAAIiH,EAAyBR,EAAOM,UAChC5O,EAAWsO,EAAOtO,SAItB,OAHK2H,EAAA,SAAemH,KACnBA,EAAiB9O,EAAS+O,iBAAiBlH,IAErCiH,GASR7gB,OAAAkH,eAAW+S,EAAAhY,UAAA,eAOX,WACC,OAAOpD,KAAKoP,iBAAiB,gBAR9B,SAAmBwM,GAClB5b,KAAKqP,iBAAiB,UAAWuM,GAAS,oCAgBpCR,EAAAhY,UAAA+D,KAAP,SAAYgb,GAAZ,IAGK5S,EAHLzP,EAAAE,KACKoiB,EAAYviB,EAAAuD,UAAM+D,KAAIpH,KAAAC,KAACmiB,GAGvBniB,KAAK0I,iBAAiB4U,EAAA,GAAatd,KAAK0I,OAAS1I,KAAKkd,WACzD3N,EAASvP,KAAKmd,eAGXnd,KAAK2I,iBAAiB2U,EAAA,GAAatd,KAAK2I,OAAS3I,KAAKkd,WACzD3N,EAASvP,KAAKod,eAIf,IAAIrL,EAAqB/R,KAAK+R,WAC1BG,EAAmBlS,KAAKkS,SAmB5B,OAjBA4L,EAAA,KAAWA,EAAA,QAAc9d,KAAK2M,UAAU3I,YAAa,SAAC2H,GACrD,IAAI0W,EAAwBviB,EAAKuiB,sBAE7BxH,EAAA,SAAesH,KAClBE,EAAwBF,GAGzB,IAAIlW,EAAIN,EAAE,GACNuH,EAAWvH,EAAE,GACb2W,EAAgB,EAEhBxiB,EAAKyiB,yBACRD,EAAQxiB,EAAK0iB,4BAA8BvW,EAAIoW,GAAyBpW,EAAI8F,IAAeG,EAAWH,IAEvGqQ,EAAYlP,EAAS/L,KAAKkb,EAAuBC,EAAO/S,KAGlD6S,GASDhH,EAAAhY,UAAAF,KAAP,SAAYif,GAAZ,IAGK5S,EACAhB,EAJLzO,EAAAE,KACKoiB,EAAYviB,EAAAuD,UAAMF,KAAInD,KAAAC,KAACmiB,GAIvBzZ,EAAc1I,KAAK0I,MAEnBA,aAAiB4U,EAAA,GAAa5U,GAAS1I,KAAKkd,WAC/C3N,EAASvP,KAAKmd,cAGb5O,EADGvO,KAAK4b,SAAYlT,EAAM+Z,UAAY,GAAK/Z,EAAMga,UAAY,EACrD,EAGAha,EAAMqF,KAIhB,IAAIpF,EAAc3I,KAAK2I,MACnBA,aAAiB2U,EAAA,GAAa3U,GAAS3I,KAAKkd,WAC/C3N,EAASvP,KAAKod,cAGb7O,EADGvO,KAAK4b,SAAYjT,EAAM8Z,UAAY,GAAK9Z,EAAM+Z,UAAY,EACrD,EAGA/Z,EAAMoF,KAKhB,IAAIgE,EAAqB/R,KAAK+R,WAC1BG,EAAmBlS,KAAKkS,SAwB5B,OAtBA4L,EAAA,KAAWA,EAAA,QAAc9d,KAAK2M,UAAU3I,YAAa,SAAC2H,GACrD,IAAIM,EAAIN,EAAE,GACNuH,EAAWvH,EAAE,GACb2W,EAAgB,EAChBD,EAAwBviB,EAAKuiB,sBAC7BxH,EAAA,SAAesH,KAClBE,EAAwBF,GAErBC,IAAcA,EAAUO,cAAyC,GAAzBN,GAA8BD,EAAUD,SAAW,EAC9FC,EAAUtgB,OAAO8gB,KAAK,iBAAkB,WACvC1P,EAAShQ,KAAK,EAAG,EAAGqL,EAAOgB,MAIxBzP,EAAKyiB,yBACRD,EAAQxiB,EAAK0iB,4BAA8BvW,EAAIoW,GAAyBpW,EAAI8F,IAAeG,EAAWH,IAEvGmB,EAAShQ,KAAKmf,EAAuBC,EAAO/T,EAAOgB,MAK9C6S,GAMEhH,EAAAhY,UAAAyf,iCAAV,SAA2Czd,GAC1CvF,EAAAuD,UAAMyf,iCAAgC9iB,KAAAC,KAACoF,GAGvC,IAAI0d,EAA6C9iB,KAAKkd,SAASnZ,OAE/D+Z,EAAA,KAAWgF,EAAW9e,WAAY,SAACD,GAC9BA,EAAO6X,SACV7X,EAAOgf,6BAYH3H,EAAAhY,UAAAuc,cAAP,SAAqBzM,EAA6ByH,GAAlD,IAAA7a,EAAAE,KAIC,GAAKA,KAAK4b,QAAV,CAKC,IAGIoH,EAHArd,EAAiB3F,KAAK2F,MACtBsK,EAAgBtK,EAAM5B,OAAOwZ,QAAQvd,MAIrCA,KAAK0I,OAAS1I,KAAKkd,UAAYld,KAAK0I,iBAAiB4U,EAAA,IACxD0F,EAAQhjB,KAAK0c,QAEV1c,KAAK2I,OAAS3I,KAAKkd,UAAYld,KAAK2I,iBAAiB2U,EAAA,IACxD0F,EAAQhjB,KAAK8c,QAId5J,EAAS+P,mBAAmBD,EAAO,EAAG,SAEtClF,EAAA,aAAmBnY,EAAM5B,OAAOyC,MAAM,EAAGyJ,GAAOiT,YAAYlf,WAAY,SAACmf,GAExE,GAAIA,EAAWza,OAAS5I,EAAK4I,OAASya,EAAWxa,OAAS7I,EAAK6I,MAAO,CAErEwa,EAAWC,cAAgBtjB,EAE3B,IAAIujB,EAAeF,EAAWxW,UAAUK,SAASkG,EAASjD,OAE1D,GAAIoT,EAAa5B,SAAS3hB,EAAKqd,gBAAkBkG,EAAa5B,SAAS3hB,EAAKsd,eAAgB,CAE3F,IAAI7O,EAAQ2E,EAAS+H,SAAS+H,GAC1BM,OAAS,EAQb,GANCA,EADG3I,EACS0I,EAAarI,gBAAgBgI,GAASK,EAAapI,SAAS+H,EAAO,SAGnEK,EAAapI,SAAS+H,GAASK,EAAapI,SAAS+H,EAAO,SAGpEzU,GAAS,GAAK+U,GAAa,GAAO/U,EAAQ,GAAK+U,EAAY,EAI/D,OAFApQ,EAAS+P,mBAAmBD,EAAOM,EAAW,UAEvC,OAGJ,IAAKH,EAAWvH,QACpB,OAAO,EAIT,OAAO,MAYVza,OAAAkH,eAAW+S,EAAAhY,UAAA,cAAX,WACC,OAAOpD,KAAKgc,yCAUb7a,OAAAkH,eAAW+S,EAAAhY,UAAA,cAAX,WACC,OAAOpD,KAAKic,yCAUb9a,OAAAkH,eAAW+S,EAAAhY,UAAA,kBAAX,WACC,OAAOpD,KAAKgd,6CAUb7b,OAAAkH,eAAW+S,EAAAhY,UAAA,kBAAX,WACC,OAAOpD,KAAKid,6CAUb9b,OAAAkH,eAAW+S,EAAAhY,UAAA,qBASX,WACC,OAAIpD,KAAKujB,eACDvjB,KAAKujB,eAENvjB,KAAKgc,aAbb,SAAyBzN,GACxBvO,KAAKujB,eAAiBhV,mCAsBvBpN,OAAAkH,eAAW+S,EAAAhY,UAAA,qBASX,WACC,OAAIpD,KAAKwjB,eACDxjB,KAAKwjB,eAENxjB,KAAKic,aAbb,SAAyB1N,GACxBvO,KAAKwjB,eAAiBjV,mCAsBhB6M,EAAAhY,UAAA2K,IAAP,SAAW1J,GACV,OAAOrE,KAAKkgB,MAAMlL,OAAO3Q,EAAK8X,MAUxBf,EAAAhY,UAAAyK,IAAP,SAAWxJ,GACV,OAAOrE,KAAKmgB,MAAMnL,OAAO3Q,EAAK8X,MAWxBf,EAAAhY,UAAAqgB,aAAP,SAAoBpf,GACnB,IAAIkK,EAAQvO,KAAKqgB,MAAMrL,OAAO3Q,EAAK8X,KAInC,OAHKtB,EAAA,SAAetM,KACnBA,EAAQvO,KAAK+N,IAAI1J,IAEXkK,GAWD6M,EAAAhY,UAAAsgB,aAAP,SAAoBrf,GACnB,IAAIkK,EAAQvO,KAAKsgB,MAAMtL,OAAO3Q,EAAK8X,KAInC,OAHKtB,EAAA,SAAetM,KACnBA,EAAQvO,KAAK6N,IAAIxJ,IAEXkK,GASD6M,EAAAhY,UAAAuM,cAAP,SAAqBC,GAEpB,GAAIA,EAAQ,CAWX,GARIiL,EAAA,SAAejL,EAAOlH,QAAUmS,EAAA,SAAejL,EAAOlH,QAAU1I,KAAK2jB,IAAIC,OAAOhU,EAAOlH,SAC1FkH,EAAOlH,MAAQ1I,KAAK2jB,IAAI3O,OAAOpF,EAAOlH,QAEnCmS,EAAA,SAAejL,EAAOjH,QAAUkS,EAAA,SAAejL,EAAOjH,QAAU3I,KAAK2jB,IAAIC,OAAOhU,EAAOjH,SAC1FiH,EAAOjH,MAAQ3I,KAAK2jB,IAAI3O,OAAOpF,EAAOjH,QAInCkS,EAAA,SAAejL,EAAOI,aAAe6K,EAAA,QAAcjL,EAAOI,YAC7D,IAAK,IAAI/D,EAAI,EAAG4D,EAAMD,EAAOI,WAAWtL,OAAQuH,EAAI4D,EAAK5D,IAAK,CAC7D,IAAIzF,EAAQoJ,EAAOI,WAAW/D,GACzB4O,EAAA,SAAerU,EAAMsJ,QACzBtJ,EAAMsJ,KAAO,gBAEV+K,EAAA,SAAerU,EAAMnC,OAASwW,EAAA,SAAerU,EAAMnC,OAASrE,KAAK2jB,IAAIC,OAAOpd,EAAMnC,MACrFmC,EAAMkL,UAAY1R,KAAK2jB,IAAI3O,OAAOxO,EAAMnC,MAEhCwW,EAAA,SAAerU,EAAMkL,YAAcmJ,EAAA,SAAerU,EAAMkL,YAAc1R,KAAK2jB,IAAIC,OAAOpd,EAAMkL,aACpGlL,EAAMkL,UAAY1R,KAAK2jB,IAAI3O,OAAOxO,EAAMkL,YAM3C,IAAKmJ,EAAA,SAAejL,EAAOH,cAAgBoL,EAAA,SAAejL,EAAOH,YAChE,MAAMM,MAAM,uCAAyC/P,KAAKkc,KAAO,KAKnErc,EAAAuD,UAAMuM,cAAa5P,KAAAC,KAAC4P,IAgBXwL,EAAAhY,UAAAwd,SAAV,SAAmB1N,EAA4B2Q,EAAcC,EAAcjC,EAAoBC,EAAoBiC,EAAoBC,GACtI,IAAI1Z,EAAYtK,KAAK0I,MAAM+N,KAAKvD,EAAU2Q,EAAMhC,GAC5CtX,EAAYvK,KAAK2I,MAAMkO,KAAK3D,EAAU4Q,EAAMhC,GAKhD,OAASxX,EAHTA,EAAIwV,EAAA,WAAiBxV,GAAI,IAAO,KAGjBC,EAFfA,EAAIuV,EAAA,WAAiBvV,GAAI,IAAO,OAKlC6Q,EAhuCA,CAA8BD,EAAA,GAwuC9B8I,EAAA,EAASvT,kBAA4B,SAAI0K,EACzC6I,EAAA,EAASvT,kBAAoC,iBAAI2I,oLC/yDjD6K,EAAAvkB,EAAA,IA+CAwkB,EAAA,SAAAtkB,GAaC,SAAAskB,IAAA,IAAArkB,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,mBACjBH,EAAKI,aAELJ,EAAKwZ,OAAOa,QACZra,EAAKwZ,OAAO8K,aAsCd,OAzDsCjkB,EAAA,EAAAgkB,EAAAtkB,GA2BrCsB,OAAAkH,eAAW8b,EAAA/gB,UAAA,YAQX,WACC,OAAOpD,KAAKqkB,MAAY,UATzB,SAAgBlK,GACfna,KAAKoa,QAAQ,OAAQD,GACrBna,KAAKuO,MAAQ4L,EAAKmK,2CAgBnBnjB,OAAAkH,eAAW8b,EAAA/gB,UAAA,eAQX,WACC,OAAOpD,KAAKqkB,MAAe,aAT5B,SAAmBlK,GAClBna,KAAKoa,QAAQ,UAAWD,GACxBna,KAAKukB,SAAWpK,EAAKmK,2CAUvBH,EAzDA,CAAsCK,EAAA,GA0ItCC,EAAA,SAAA5kB,GA2RC,SAAA4kB,IAAA,IAAA3kB,EAGCD,EAAAE,KAAAC,OAAOA,YAzLDF,EAAA4kB,cAAqC,IAAIC,EAAA,EA6BzC7kB,EAAA8kB,YAA4C,IAAItT,EAAA,EAuBhDxR,EAAA+kB,wBAAwD,IAAIvT,EAAA,EAiBzDxR,EAAAglB,iBAA2B,EA6C3BhlB,EAAAilB,mBAAqCC,SAAU,MAAOC,MAAO,GAW7DnlB,EAAAolB,eAAmC,EAWnCplB,EAAAqlB,aAAiC,EAQjCrlB,EAAAslB,gBAA8C,IAAI9T,EAAA,EAQlDxR,EAAAulB,qBAA+BviB,OAAOwiB,UAazCxlB,EAAA8U,SAAgD,SAAS1B,GAC/D,IAAI3E,EAAQ2E,EAAS3E,MACjBlK,EAAO6O,EAASxB,UAChB6T,EAAelhB,EAAKmhB,cACpBC,EAAeC,EAAA,YAAkBH,EAAaP,SAAUO,EAAaN,OAErErX,KAAKiB,OAAON,EAAQlK,EAAK0J,KAAO0X,GAAgB,GAAK7X,KAAKiB,MAAMjB,KAAKiB,OAAON,EAAQlK,EAAK0J,KAAO0X,GAAgB,GACnHvS,EAASiB,SAASxP,YAAa,EAG/BuO,EAASiB,SAASxP,YAAa,GAWhC7E,EAAKG,UAAY,WAMjBH,EAAK4kB,cAAciB,UAChBX,SAAU,cAAeC,MAAO,IAChCD,SAAU,cAAeC,MAAO,IAChCD,SAAU,cAAeC,MAAO,KAChCD,SAAU,cAAeC,MAAO,KAChCD,SAAU,cAAeC,MAAO,MAChCD,SAAU,cAAeC,MAAO,MAChCD,SAAU,SAAUC,MAAO,IAC3BD,SAAU,SAAUC,MAAO,IAC3BD,SAAU,SAAUC,MAAO,KAC3BD,SAAU,SAAUC,MAAO,KAC3BD,SAAU,SAAUC,MAAO,IAC3BD,SAAU,SAAUC,MAAO,IAC3BD,SAAU,SAAUC,MAAO,KAC3BD,SAAU,SAAUC,MAAO,KAC3BD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,KACzBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,QAASC,MAAO,IAC1BD,SAAU,QAASC,MAAO,IAC1BD,SAAU,QAASC,MAAO,IAC1BD,SAAU,QAASC,MAAO,IAC1BD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,KACzBD,SAAU,OAAQC,MAAO,KACzBD,SAAU,OAAQC,MAAO,OAI5BnlB,EAAKyR,cAAgB,OAGrBzR,EAAKI,eA4qCP,OA1/CqEC,EAAA,EAAAskB,EAAA5kB,GAsV1D4kB,EAAArhB,UAAAC,sBAAV,WACCxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MAGtBA,KAAK4kB,YAAYhB,OAAO,gBAC5B5jB,KAAK4kB,YAAY1P,OAAO,cAAelV,KAAKwD,SAASC,UAAU,sBAE3DzD,KAAK4kB,YAAYhB,OAAO,WAC5B5jB,KAAK4kB,YAAY1P,OAAO,SAAUlV,KAAKwD,SAASC,UAAU,iBAEtDzD,KAAK4kB,YAAYhB,OAAO,WAC5B5jB,KAAK4kB,YAAY1P,OAAO,SAAUlV,KAAKwD,SAASC,UAAU,iBAEtDzD,KAAK4kB,YAAYhB,OAAO,SAC5B5jB,KAAK4kB,YAAY1P,OAAO,OAAQlV,KAAKwD,SAASC,UAAU,eAEpDzD,KAAK4kB,YAAYhB,OAAO,QAC5B5jB,KAAK4kB,YAAY1P,OAAO,MAAOlV,KAAKwD,SAASC,UAAU,cAEnDzD,KAAK4kB,YAAYhB,OAAO,SAC5B5jB,KAAK4kB,YAAY1P,OAAO,OAAQlV,KAAKwD,SAASC,UAAU,cAEpDzD,KAAK4kB,YAAYhB,OAAO,UAC5B5jB,KAAK4kB,YAAY1P,OAAO,QAASlV,KAAKwD,SAASC,UAAU,gBAErDzD,KAAK4kB,YAAYhB,OAAO,SAC5B5jB,KAAK4kB,YAAY1P,OAAO,OAAQlV,KAAKwD,SAASC,UAAU,eAGpDzD,KAAK6kB,wBAAwBjB,OAAO,gBACxC5jB,KAAK6kB,wBAAwB3P,OAAO,cAAelV,KAAKwD,SAASC,UAAU,sBAEvEzD,KAAK6kB,wBAAwBjB,OAAO,WACxC5jB,KAAK6kB,wBAAwB3P,OAAO,SAAUlV,KAAKwD,SAASC,UAAU,iBAElEzD,KAAK6kB,wBAAwBjB,OAAO,WACxC5jB,KAAK6kB,wBAAwB3P,OAAO,SAAUlV,KAAKwD,SAASC,UAAU,iBAElEzD,KAAK6kB,wBAAwBjB,OAAO,SACxC5jB,KAAK6kB,wBAAwB3P,OAAO,OAAQlV,KAAKwD,SAASC,UAAU,eAEhEzD,KAAK6kB,wBAAwBjB,OAAO,QACxC5jB,KAAK6kB,wBAAwB3P,OAAO,MAAOlV,KAAKwD,SAASC,UAAU,cAE/DzD,KAAK6kB,wBAAwBjB,OAAO,SACxC5jB,KAAK6kB,wBAAwB3P,OAAO,OAAQlV,KAAKwD,SAASC,UAAU,cAEhEzD,KAAK6kB,wBAAwBjB,OAAO,UACxC5jB,KAAK6kB,wBAAwB3P,OAAO,QAASlV,KAAKwD,SAASC,UAAU,eAAiB,IAAMzD,KAAKwD,SAASC,UAAU,gBAW5GghB,EAAArhB,UAAAqO,eAAV,WACC,OAAO,IAAI0S,GAQFM,EAAArhB,UAAAuO,gBAAV,WACC,OAAO,IAAIiU,EAAA,GAQLnB,EAAArhB,UAAA+a,kBAAP,WAEC,IAAInX,EAAgBhH,KAAKgH,MACrBC,EAAcjH,KAAKiH,IACnB4e,GAAuB7lB,KAAK6N,IAAM7N,KAAK+N,KAAO/N,KAAK8lB,aAEvDjmB,EAAAuD,UAAM+a,kBAAiBpe,KAAAC,MAEvBA,KAAK+S,eAAiB/S,KAAK6N,IAAM7N,KAAK+N,KAAO/N,KAAK8lB,aAIlD9e,IAAiBC,EAAMD,IAAU,EAAI6e,IADP7lB,KAAK6N,IAAM7N,KAAK+N,KAAO/N,KAAK8lB,eAE1D9lB,KAAKmP,MAAOnI,MAAOA,EAAOC,IAAKA,IAAO,GAAO,IASvCwd,EAAArhB,UAAA2iB,8BAAP,aASOtB,EAAArhB,UAAA4iB,cAAP,eAAAlmB,EAAAE,KACCH,EAAAuD,UAAM4iB,cAAajmB,KAAAC,MAEnB,IAAIulB,EAA8BvlB,KAAKimB,eAAe,EAAGjmB,KAAKmV,iBAAiBnV,KAAKkmB,WAAYlmB,KAAKmmB,YAAanmB,KAAKomB,YAEnHV,EAAA,YAAkBH,EAAaP,SAAUO,EAAaN,OAASjlB,KAAK8lB,eACvEP,EAAYplB,EAAA,KAAQH,KAAKqmB,eAG1BrmB,KAAKwlB,cAAgBD,EAErBvlB,KAAKsmB,UAAYZ,EAAA,MAAY,IAAIa,KAAKvmB,KAAK+N,KAAMwX,EAAaP,UAC9DhlB,KAAKwmB,cAAgBd,EAAA,YAAkBH,EAAaP,UAGpDhlB,KAAKymB,kBAAoBf,EAAA,YAAkBH,EAAaP,SAAUO,EAAaN,OAC/E,IAAIA,EAAgBrX,KAAKuE,KAAKnS,KAAK0mB,YAAc1mB,KAAKymB,mBACtDxB,EAAQrX,KAAKqE,MAAMjS,KAAKgH,MAAQie,GAAS,EAEzCS,EAAA,IAAU1lB,KAAKsmB,UAAWf,EAAaP,SAAUC,EAAQM,EAAaN,OAGtE0B,EAAA,KAAW3mB,KAAK+D,OAAOC,WAAY,SAACD,GACnC,GAAIA,EAAOmZ,UAAYpd,EAAM,CAC5B,IAAIkjB,EAAgCjf,EAAOma,aAAape,GAGpDiS,EAAqBhO,EAAO4I,UAAUia,iBAAiB9mB,EAAKomB,WAAY,SAAC5b,GAAM,OAAQA,EAAE0Y,IAAQ,QAEjG9Q,EAAmBnO,EAAO4I,UAAUia,iBAAiB9mB,EAAKqmB,WAAa,EAAG,SAAC7b,GAAM,OAAQA,EAAE0Y,IAAQ,QAAU,EAEjHjf,EAAOgO,WAAaA,EACpBhO,EAAOmO,SAAWA,MAUduS,EAAArhB,UAAAc,aAAP,WACCrE,EAAAuD,UAAMc,aAAYnE,KAAAC,MACb6mB,EAAA,SAAe7mB,KAAKqmB,aAAapB,SACrCjlB,KAAKqmB,aAAapB,MAAQ,IAWrBR,EAAArhB,UAAAkB,iBAAP,WACCzE,EAAAuD,UAAMkB,iBAAgBvE,KAAAC,MACtBA,KAAKqlB,qBAAuBviB,OAAOwiB,UAG/BtlB,KAAK2F,MAAMlB,KAAKC,QAAU,IAC7B1E,KAAKqlB,qBAAuBK,EAAA,YAAkB,SAUzCjB,EAAArhB,UAAAib,2BAAP,eAAAve,EAAAE,KACC2mB,EAAA,KAAW3mB,KAAK+D,OAAOC,WAAY,SAACD,GACnC4iB,EAAA,KAAW5iB,EAAO4I,UAAU3I,WAAY,SAACkP,GACxCpT,EAAKgnB,0BAA0B5T,OAIjClT,KAAK+mB,uBAUCtC,EAAArhB,UAAA0jB,0BAAP,SAAiC5T,GAAjC,IAAApT,EAAAE,KAEKqmB,EAA8BrmB,KAAKqmB,aAEvCnC,EAAA,KAAahR,EAASmR,MAAO,SAAC3N,GAE7B,IAAIyD,EAAajH,EAASgH,QAAQxD,GAC9BsQ,EAAkBtB,EAAA,MAAYA,EAAA,KAAWvL,GAAOkM,EAAarB,SAAUqB,EAAapB,OACpFb,EAAgBsB,EAAA,IAAUA,EAAA,KAAWsB,GAAYX,EAAarB,SAAUqB,EAAapB,OAEzF/R,EAAS+P,mBAAmBvM,EAAKsQ,EAAU1C,UAAW,QACtDpR,EAAS+P,mBAAmBvM,EAAK0N,EAAQE,UAAW,SAE7BpR,EAASxB,UACzBiN,gBAAgB3J,OAAOlV,EAAKqc,KAAKjH,OAAO8R,EAAU1C,UAAU2C,WAAY/T,MAe1EuR,EAAArhB,UAAA2jB,oBAAP,eAAAjnB,EAAAE,KAEC,GAAIA,KAAKknB,kBAAoBL,EAAA,SAAe7mB,KAAK+N,MAAQ8Y,EAAA,SAAe7mB,KAAK6N,KAAM,CAClF,IAAImX,EAAqBhlB,KAAKqmB,aAAarB,SACvCC,EAAgBjlB,KAAKqmB,aAAapB,MAEtCjlB,KAAK8S,WAAWqU,QAKhB,IAHA,IAAIhN,EAAauL,EAAA,MAAY,IAAIa,KAAKvmB,KAAK+N,KAAMiX,EAAUC,GACvD3R,OAAS,eAGZoS,EAAA,IAAUvL,EAAM6K,EAAUC,GAE1B,IAAImC,EAAoBjN,EAAKmK,UACzB+C,EAAuBD,EAAUH,WAEvBN,EAAA,SAAeW,EAAKvjB,OAAOC,WAAY,SAACD,GACrD,QAASA,EAAO4a,gBAAgB3J,OAAOlV,EAAKqc,KAAKnH,OAAOqS,KAYpD/T,IAEHA,EAAU8Q,QAAU,IAAImC,KAAKa,EAAY,GACzC9T,OAAYzO,GAVRyO,KACJA,EAA2BgU,EAAKxU,WAAWyU,UACjCP,UAAY,IAAIT,KAAKa,YAd3BjN,EAAKmK,UAAYtkB,KAAK6N,IAAM7N,KAAK8lB,oBAkCnCrB,EAAArhB,UAAAsP,cAAP,eAAA5S,EAAAE,KACCH,EAAAuD,UAAMsP,cAAa3S,KAAAC,MACnB,IAAI8S,EAAa9S,KAAKwnB,YACtBb,EAAA,KAAW7T,EAAW9O,WAAY,SAACsP,GAClC,IAAImU,EAAyB3nB,EAAKsmB,YAAcxY,KAAKG,IAAIjO,EAAKmH,IAAKqM,EAAUW,aAAerG,KAAKC,IAAI/N,EAAKkH,MAAOsM,EAAU+D,iBAAmBvX,EAAKmH,IAAMnH,EAAKkH,OAC9JsM,EAAUiS,aAAezlB,EAAKmmB,eAAe,EAAG3S,EAAUE,iBAAmBF,EAAUC,mBAAoBkU,GAC3GnU,EAAUoU,SAAWhC,EAAA,MAAY,IAAIa,KAAKjT,EAAUC,oBAAqBD,EAAUiS,aAAaP,aAa3FP,EAAArhB,UAAAukB,YAAP,SAAmBxN,EAAYyN,GAC9B,IAAI5C,EAAqBhlB,KAAKwlB,cAAcR,SACxC6C,EAA4B7nB,KAAKwlB,cAAcP,MAEnDS,EAAA,MAAYvL,EAAM6K,GAElB,IAAI8C,EAAwB3N,EAAKmK,UAE7ByD,EAAgBrC,EAAA,KAAWvL,GAE3B6N,EAAoBtC,EAAA,IAAUqC,EAAS/C,EAAU4C,GAAetD,UAGhEhR,EAA0CtT,KAAKmT,UAAU6U,GACzD1U,IAEH0U,GADAD,EAAU/nB,KAAKioB,iBAAiB3U,EAAWtT,KAAKqmB,aAAarB,SAAUhlB,KAAKqmB,aAAapB,QACrEX,WAIrB,IAAI4D,EAAgCloB,KAAKmV,iBAAiB2S,EAAeE,GAKzE,OAFiCpa,KAAKiB,MAAMqZ,EAAwBxC,EAAA,YAAkBV,IAE7D6C,EACjB7nB,KAAK2nB,YAAYxN,EAAMyN,EAAgB,GAGxCG,GAaDtD,EAAArhB,UAAA6kB,iBAAP,SAAwB3U,EAA0B0R,EAAoBC,GACrE,IAAI9K,EAAO,IAAIoM,KAAKjT,EAAUiR,UAC9BmB,EAAA,MAAYvL,EAAM6K,EAAUC,GAC5BS,EAAA,IAAUvL,EAAM6K,EAAUC,GAE1B,IAAI+C,EAAY7N,EAAKmK,UAGrB,OADAhR,EAA2BtT,KAAKmT,UAAU6U,IAElChoB,KAAKioB,iBAAiB3U,EAAW0R,EAAUC,GAE5C9K,GASDsK,EAAArhB,UAAA+kB,qBAAP,eAAAroB,EAAAE,KACC,GAAI6mB,EAAA,SAAe7mB,KAAK6N,MAAQgZ,EAAA,SAAe7mB,KAAK+N,KAAM,CAEzD/N,KAAKgmB,gBAGL,IAAIgC,EAAYhoB,KAAKsmB,UAAUhC,UAC3BU,EAAWhlB,KAAKwlB,cAAcR,SAC9B4C,EAAgB5nB,KAAKwlB,cAAcP,MACnCmD,EAAe1C,EAAA,KAAW1lB,KAAKsmB,WAE/B+B,EAAoBroB,KAAKsoB,mBAC7BtoB,KAAKgT,iBAEL,qBACC,IAAImH,EAAOoO,EAAKZ,YAAY,IAAIpB,KAAK6B,GAAeR,GAEpDI,EAAY7N,EAAKmK,UAEjB,IAAIF,EAAUsB,EAAA,KAAWvL,GACzBiK,EAAUsB,EAAA,IAAUtB,EAASY,EAAU4C,GAEvC,IAAIY,EAASD,EAAK3D,YAAY5P,OAAOgQ,GAEjCuD,EAAKzD,iBAAmBsD,GACvB1C,EAAA,YAAkBvL,EAAMiO,EAAcG,EAAK/B,gBAC7B,SAAbxB,IACHwD,EAASD,EAAK1D,wBAAwB7P,OAAOgQ,IAKhD,IAAInU,EAAO0X,EAAKE,cAAcD,OAAOrO,EAAMqO,GAEvCtV,EAAWmV,EAAkBK,KAAK,SAACpe,GAAM,OAAAA,EAAEuG,OAASA,IACxD0X,EAAKnV,eAAeF,GAEpBA,EAASI,eAAYzO,EACrBqO,EAASiH,KAAOA,EAChBjH,EAASkR,QAAUA,EAEnBlR,EAASrC,KAAOA,EAEhBuX,EAAejO,EAEfoO,EAAKlV,oBAAoBH,WA/BnB8U,GAAahoB,KAAKmmB,gBAmCzB,IAAIwC,EAAyB3oB,KAAK4F,SAElC+gB,EAAA,KAAW3mB,KAAK8S,WAAW9O,WAAY,SAACsP,GACvC,GAAIA,EAAUG,UAAY,EAAG,CAC5B,IAAImV,EAAqBtV,EAAUiS,aAAaP,SAC5C6D,EAAwBvV,EAAUiS,aAAaN,MAGnD,GAAI6D,EAAA,YAAkBxV,EAAUyV,WAAYzV,EAAU0V,UAAYL,EAASrW,gBAK1E,IAJA,IAEI2W,EAFAC,EAAoB5V,EAAUoU,SAASpD,UAGvCW,EAAgB,eAEnB,IAAI9K,EAAauL,EAAA,KAAWpS,EAAUoU,UAGtC,GAFAwB,EAAYxD,EAAA,IAAUvL,EAAMyO,EAAUC,EAAgB5D,GAAOX,UAC7DW,IACIiE,EAAY5V,EAAUC,oBAAsB2V,EAAY5V,EAAUE,iBAAkB,CACvF,IAAI4Q,EAAUsB,EAAA,KAAWvL,GACzBiK,EAAUsB,EAAA,IAAUtB,EAASwE,EAAUC,GAEvC,IAAIL,EAAiB1oB,EAAK8kB,YAAY5P,OAAO4T,GAEzC9oB,EAAKglB,iBAAmBmE,GACvBvD,EAAA,YAAkBvL,EAAM8O,EAAcnpB,EAAK0mB,gBAC7B,SAAboC,IACHJ,EAAS1oB,EAAK+kB,wBAAwB7P,OAAO4T,IAKhD,IAAIO,EAAerpB,EAAK2oB,cAAcD,OAAOrO,EAAMqO,GAE/CtV,EAA8BmV,EAAkBK,KAAK,SAACpe,GAAM,OAAAA,EAAEuG,OAASsY,IAE3ErpB,EAAKsT,eAAeF,GACpBA,EAASI,UAAYA,EACrBA,EAAU3G,UAAU1E,UAAUiL,GAE9BA,EAASiH,KAAOA,EAChBjH,EAASkR,QAAUA,EACnBlR,EAASrC,KAAOsY,EAChBF,EAAe9O,EACfra,EAAKuT,oBAAoBH,KA9BpBgW,GAAa5V,EAAU8V,sBA6C5B3E,EAAArhB,UAAAiQ,oBAAP,SAA2BH,GAE1B,GAAI2T,EAAA,SAAe7mB,KAAK6N,MAAQgZ,EAAA,SAAe7mB,KAAK+N,KAAM,CACzD,IAAInI,EAAyB5F,KAAK4F,SAE9BoiB,EAAY9U,EAAS3E,MACrB8a,EAAenW,EAASqR,SAEvBsC,EAAA,SAAewC,KACnBA,EAAerB,GAGhB,IAAIld,EAAmB9K,KAAKspB,gBAAgBtB,GACxC/T,EAAsBjU,KAAKspB,gBAAgBD,GAE/CnW,EAASpI,SAAWA,EAEpB,IAAIwJ,EAAiBpB,EAASoB,KAC1BA,GACH1O,EAAS2O,kBAAkBD,EAAMxJ,EAAUmJ,GAG5C,IAAIO,EAAatB,EAASsB,KACtBA,GACH5O,EAAS6O,kBAAkBD,EAAM1J,EAAUmJ,GAG5C,IAAIrL,EAAiBsK,EAASiB,SAC1BvL,IACHhD,EAAS+O,kBAAkB/L,EAAMkC,EAAUmJ,GACtCf,EAASgB,SACblU,KAAK4U,SAAS1B,IAIhB,IAAItP,EAAiBsP,EAAStP,KAC1BA,GACHgC,EAAS+O,kBAAkB/Q,EAAMkH,EAAUmJ,GAG5C,IAAI3H,EAAmB4G,EAAS5G,MAC5BA,IAK6B,GAA5BtM,KAAKwlB,cAAcP,OAA6C,QAA/BjlB,KAAKwlB,cAAcR,UAAuB9R,EAASgB,UAEvFD,EADAnJ,IAAuBmJ,EAAcnJ,GAAYwB,EAAM8H,UAGxDxO,EAAS8O,mBAAmBpI,EAAOxB,EAAUmJ,MAUhD9S,OAAAkH,eAAWoc,EAAArhB,UAAA,oBAAX,WACC,OAAOsiB,EAAA,YAAkB1lB,KAAKqmB,aAAarB,SAAUhlB,KAAKqmB,aAAapB,wCAYjER,EAAArhB,UAAAmmB,aAAP,SAAoBxb,EAAaF,GAChC,OAASE,IAAKA,EAAKF,IAAKA,EAAK2b,KAAMxpB,KAAK8lB,eAS/BrB,EAAArhB,UAAAqmB,OAAV,SAAiBlb,GAChB,OAAOA,EAAQvO,KAAK8lB,aAAe9lB,KAAKkW,eAS/BuO,EAAArhB,UAAAsmB,OAAV,SAAiBnb,GAChB,OAAOA,EAAQvO,KAAK8lB,aAAe9lB,KAAKmW,aAalCsO,EAAArhB,UAAA6iB,eAAP,SAAsBhW,EAAekS,EAAkBwH,GACtD,IAAIjF,EAAqC1kB,KAAK0kB,cAE1Ca,EAA8Bb,EAAc1X,SAASiD,GAErD2Z,EAA2BlE,EAAA,YAAkBH,EAAaP,SAAUO,EAAaN,OAEjF4E,EAAoBnF,EAAchgB,OAAS,EAC/C,GAAIuL,GAAS4Z,EACZ,OAAA1pB,EAAA,KAAYukB,EAAc1X,SAAS6c,IAGpC,IAAI5E,EAAgBrX,KAAKuE,KAAKgQ,EAAWyH,GAEzC,OAAIzH,EAAWyH,GAAoB3Z,EAAQ,EAC1C9P,EAAA,KAAYukB,EAAc1X,SAASiD,EAAQ,IAGxCgV,GAAS0E,EACZxpB,EAAA,KAAYukB,EAAc1X,SAASiD,IAE/BA,EAAQ,EAAIyU,EAAchgB,OACtB1E,KAAKimB,eAAehW,EAAQ,EAAGkS,EAAUwH,GAEhDxpB,EAAA,KAAYukB,EAAc1X,SAASiD,KAW/BwU,EAAArhB,UAAA0mB,YAAP,SAAmBvb,GAClB,OAAOvO,KAAKyoB,cAAcD,OAAOja,IAS3BkW,EAAArhB,UAAA2mB,eAAP,SAAsB5P,GACrB,OAAOna,KAAKspB,gBAAgBnP,EAAKmK,YAS3BG,EAAArhB,UAAAyS,cAAP,SAAqBsE,GACpB,OAAIA,aAAgBoM,KACZvmB,KAAK+pB,eAAe5P,GAGpBna,KAAKspB,gBAAgBnP,IAUvBsK,EAAArhB,UAAA4mB,YAAP,SAAmB7P,GAClB,IAAIrP,EAAW9K,KAAK+pB,eAAe5P,GAC/B3O,EAAQxL,KAAK4F,SAASyO,gBAAgBvJ,GACtC4K,EAAQ1V,KAAK4F,SAAS+P,gBAAgB7K,GAC1C,OAASR,EAAGkB,EAAMlB,EAAGC,EAAGiB,EAAMjB,EAAGmL,MAAOA,IAUlC+O,EAAArhB,UAAAwS,WAAP,SAAkBuE,GACjB,OAAIA,aAAgBoM,KACZvmB,KAAKgqB,YAAY7P,GAGjBna,KAAKiqB,aAAa9P,IAUpBsK,EAAArhB,UAAA8mB,eAAP,SAAsBpf,GACrB,OAAO,IAAIyb,KAAKvmB,KAAKmqB,gBAAgBrf,KAa/B2Z,EAAArhB,UAAAqT,KAAP,SAAYvD,EAA4BwD,EAAatC,GACpD,IAAI7F,EAAgBvO,KAAKoqB,kBAAkBlX,EAAUwD,EAAKtC,GAO1D,OAJKyS,EAAA,SAAetY,KACnBA,EAAQvO,KAAKqqB,WAGPrqB,KAAK4F,SAASyO,gBAAgBrU,KAAKspB,gBAAgB/a,IAAQjE,GAa5Dma,EAAArhB,UAAAyT,KAAP,SAAY3D,EAA4BwD,EAAatC,GACpD,IAAI7F,EAAgBvO,KAAKoqB,kBAAkBlX,EAAUwD,EAAKtC,GACtDoF,EAAgBtG,EAAS+H,SAAS,SAAU,SAMhD,OAJK4L,EAAA,SAAetY,KACnBA,EAAQvO,KAAKqqB,WAGPrqB,KAAK4F,SAASyO,gBAAgBrU,KAAKspB,gBAAgB/a,EAAQiL,IAAQjP,GAcpEka,EAAArhB,UAAA0T,SAAP,SAAgB5D,EAA4BwD,EAAatC,EAAmB2C,GAC3E,IAAIxI,EAAgBvO,KAAKoqB,kBAAkBlX,EAAUwD,EAAKtC,GACtDoF,EAAgBtG,EAAS+H,SAASlE,EAAU,SAMhD,OAJK8P,EAAA,SAAetY,KACnBA,EAAQvO,KAAKqqB,WAGPrqB,KAAK2V,gBAAgB3V,KAAKspB,gBAAgB/a,EAAQiL,KAahDiL,EAAArhB,UAAAgnB,kBAAV,SAA4BlX,EAA4BwD,EAAatC,GACpE,GAAKyS,EAAA,SAAenQ,GAApB,CAIKmQ,EAAA,SAAezS,KACnBA,EAAWlB,EAAS+O,iBAAiBvL,GAEhCmQ,EAAA,SAAezS,KACnBA,EAAW,IAIb,IAAIgT,EAAoBlU,EAASoG,OAAO5C,GAAW,KAC/C4T,EAAkBpX,EAASoG,OAAO5C,GAAY,MAElD,OAAImQ,EAAA,SAAeO,IAAcP,EAAA,SAAeyD,GACxClD,GAAakD,EAAUlD,GAAahT,OAD5C,IAYMqQ,EAAArhB,UAAAiZ,sBAAP,SAA6BnJ,GAA7B,IAEKqX,EAFLzqB,EAAAE,KAKCkkB,EAAA,KAAahR,EAASmR,MAAO,SAAC3N,EAAKyD,GAGlC,IAAIqQ,EAAyB1qB,EAAKslB,gBAAgBpQ,OAAO0B,GACrD+T,EAAetQ,EAAKmK,UAExB,GAAIuC,EAAA,SAAe0D,GAAe,CACjC,IAAI1d,EAAqBe,KAAK8c,IAAID,EAAOF,GACrCzqB,EAAKulB,qBAAuBxY,IAC/B/M,EAAKulB,qBAAuBxY,GAI9B0d,EAAeE,EAEf,IAAIE,EAAoBF,EAAOD,EAC3BG,EAAY,GACX7qB,EAAKulB,qBAAuBsF,IAC/B7qB,EAAKulB,qBAAuBsF,GAG9B7qB,EAAKslB,gBAAgBlQ,OAAOwB,EAAK+T,MAU5BhG,EAAArhB,UAAAgb,mBAAP,WACCve,EAAAuD,UAAMgb,mBAAkBre,KAAAC,MAExB,IAAIqmB,EAA8BrmB,KAAKimB,eAAe,EAAGjmB,KAAKqlB,qBAAsB,GAEhFrlB,KAAKqlB,sBAAwBK,EAAA,YAAkB,MAAO,KAAgC,QAAzBW,EAAarB,WAC7EqB,EAAarB,SAAW,SAGrBhlB,KAAKqlB,sBAAwBK,EAAA,YAAkB,OAAQ,KAAgC,QAAzBW,EAAarB,WAC9EqB,EAAarB,SAAW,OAGzBqB,EAAapB,MAAQ,EACrBjlB,KAAK+kB,kBAAoBsB,GAiB1BllB,OAAAkH,eAAWoc,EAAArhB,UAAA,oBAOX,WACC,OAAIpD,KAAK4qB,cACD5qB,KAAK4qB,cAGL5qB,KAAK+kB,uBAZd,SAAwB8F,GACvB7qB,KAAK4qB,cAAgBC,mCAwBtB1pB,OAAAkH,eAAWoc,EAAArhB,UAAA,qBAUX,WACC,OAAOpD,KAAKklB,oBAXb,SAAyB3W,GACpBvO,KAAKklB,gBAAkB3W,IAC1BvO,KAAKklB,eAAiB3W,EACtBvO,KAAKiE,+CAoBP9C,OAAAkH,eAAWoc,EAAArhB,UAAA,mBAUX,WACC,OAAOpD,KAAKmlB,kBAXb,SAAuB5W,GAClBvO,KAAKmlB,cAAgB5W,IACxBvO,KAAKmlB,aAAe5W,EACpBvO,KAAKiE,+CA+BP9C,OAAAkH,eAAWoc,EAAArhB,UAAA,wBAiBX,WACC,OAAOpD,KAAKoP,iBAAiB,yBAlB9B,SAA4Bb,GAK3B,GAJIvO,KAAKqP,iBAAiB,mBAAoBd,IAC7CvO,KAAKkf,iBAGF3Q,EAAO,CACV,IAAIuc,EAAgB9qB,KAAK8S,WAAWiY,SACpCD,EAAcE,UAAUtT,UAAW,EACnCoT,EAAcG,QAAQvT,UAAW,EACjCoT,EAAcI,UAAUxT,UAAW,EACnCoT,EAAcrX,UAAY,oCAkB5BtS,OAAAkH,eAAWoc,EAAArhB,UAAA,yBASX,WACC,OAAOpD,KAAKmrB,wBAVb,SAA6B5c,GACxBvO,KAAKmrB,oBAAsB5c,IAC9BvO,KAAKmrB,mBAAqB5c,oCAkB5BpN,OAAAkH,eAAWoc,EAAArhB,UAAA,sBAUX,WACC,OAAOpD,KAAK8kB,qBAXb,SAA0BvW,GACrBvO,KAAK8kB,iBAAmBvW,IAC3BvO,KAAK8kB,gBAAkBvW,EACvBvO,KAAKkf,mDAqBAuF,EAAArhB,UAAA8T,eAAP,SAAsBpM,GACrB,IAAI+F,EACAsJ,EAAOna,KAAKkqB,eAAepf,GAE/B,GADAqP,EAAOuL,EAAA,MAAYvL,EAAMna,KAAKqmB,aAAarB,SAAUhlB,KAAKqmB,aAAapB,OACnE4B,EAAA,SAAe7mB,KAAKorB,mBACvBva,EAAO7Q,KAAKyoB,cAAcD,OAAOrO,EAAMna,KAAKorB,uBAExC,CACJ,IAAIC,EAAarrB,KAAK4kB,YAAY5P,OAAOhV,KAAKqmB,aAAarB,UAE1DnU,EADGwa,EACIrrB,KAAKyoB,cAAcD,OAAOrO,EAAMkR,GAGhCrrB,KAAKwO,iBAAiB1D,GAG/B,OAAO9K,KAAKoO,QAAQ+I,MAAM,iBAAkBtG,IAWtC4T,EAAArhB,UAAA6L,cAAP,SAAqBnE,EAAkBsJ,GACtC,IAAIiS,EAAermB,KAAKqmB,aACpBrB,EAAWqB,EAAarB,SACxBC,EAAQoB,EAAapB,MAErB9K,EAAana,KAAKkqB,eAAepf,GAOrC,GANA4a,EAAA,MAAYvL,EAAM6K,EAAUC,GAExB7Q,EAAW,GACdsR,EAAA,IAAUvL,EAAM6K,EAAU5Q,GAGvBpU,KAAKmT,UAAUgH,EAAKmK,WACvB,KAAOnK,EAAKmK,UAAYtkB,KAAK6N,MAC5B6X,EAAA,IAAUvL,EAAM6K,EAAUC,IACtBjlB,KAAKmT,UAAUgH,EAAKmK,cAM1B,OAAOtkB,KAAK+pB,eAAe5P,IAWrBsK,EAAArhB,UAAA4T,qBAAP,SAA4BlM,GAC3B,OAAO9K,KAAKiP,cAAcnE,EAAU,IAW9B2Z,EAAArhB,UAAA6T,mBAAP,SAA0BnM,GACzB,OAAO9K,KAAKiP,cAAcnE,EAAU,IAY9B2Z,EAAArhB,UAAAoT,kBAAP,SAAyBzS,EAAkB+G,GAC1C,IAAIyD,EAAgBvO,KAAKmqB,gBAAgBrf,GACrCqP,EAAauL,EAAA,MAAY,IAAIa,KAAKhY,GAAQvO,KAAKqmB,aAAarB,SAAUhlB,KAAKqmB,aAAapB,OACxF/R,EAAWnP,EAAO4a,gBAAgB3J,OAAOhV,KAAKmc,KAAKnH,OAAOmF,EAAKmK,UAAU2C,YAG7E,IAAK/T,EAAU,CAKd,IAHA,IAAIoY,EAAY,EACZC,OAAY,EACZC,EAAW,IAAIjF,KAAKpM,EAAKmK,WACtBnK,EAAKmK,UAAYtkB,KAAKyiB,YAC5B+I,EAAW9F,EAAA,IAAU8F,EAAUxrB,KAAKqmB,aAAarB,UAAWhlB,KAAKqmB,aAAapB,SAC9EsG,EAAexnB,EAAO4a,gBAAgB3J,OAAOhV,KAAKmc,KAAKnH,OAAOwW,EAASlH,UAAU2C,eAIjFqE,IAMD,IAHA,IAAIG,EAAa,EACbC,OAAa,EACbC,EAAY,IAAIpF,KAAKpM,EAAKmK,WACvBnK,EAAKmK,UAAYtkB,KAAK0iB,YAC5BiJ,EAAYjG,EAAA,IAAUiG,EAAW3rB,KAAKqmB,aAAarB,SAAUhlB,KAAKqmB,aAAapB,SAC/EyG,EAAgB3nB,EAAO4a,gBAAgB3J,OAAOhV,KAAKmc,KAAKnH,OAAO2W,EAAUrH,UAAU2C,eAInFwE,IAGD,GAAIF,IAAiBG,EACpB,OAAOH,EAEH,IAAKA,GAAgBG,EACzB,OAAOA,EAEH,GAAIH,GAAgBG,EACxB,OAAIJ,EAAYG,EACRF,EAGAG,EAIV,OAAOxY,GAUDuR,EAAArhB,UAAAoL,iBAAP,SAAwB1D,GACvB,IAAIqP,EAAOna,KAAKkqB,eAAepf,GAC/B,OAAO9K,KAAKyoB,cAAcD,OAAOrO,EAAMna,KAAK4rB,0BAQnCnH,EAAArhB,UAAAwoB,sBAAV,WACC,OAAO5rB,KAAK4kB,YAAY5P,OAAOhV,KAAKwlB,cAAgBxlB,KAAKwlB,cAAcR,SAAW,QAQ5EP,EAAArhB,UAAAoU,aAAP,WACC3X,EAAAuD,UAAMoU,aAAYzX,KAAAC,MAClB,IAAI4F,EAAW5F,KAAK4F,SAChBA,IAEHA,EAASimB,MAAMd,SAAS3W,SAAW,EACnCxO,EAAS4O,KAAKuW,SAAS3W,SAAW,EAClCxO,EAASkmB,OAAOf,SAAS3W,SAAW,GACpCxO,EAAS6R,SAASC,UAAW,IAU/BvW,OAAAkH,eAAWoc,EAAArhB,UAAA,iBAAX,WACC,OAASkH,EAAG,EAAGC,EAAG,oCAYZka,EAAArhB,UAAA2oB,YAAP,SAAmB/E,EAAiB5C,EAAe4H,EAA0Bpd,GAC5EoY,EAAYhnB,KAAKyoB,cAAcwD,MAAMjF,GACrC5C,EAAUpkB,KAAKyoB,cAAcwD,MAAM7H,GACnCpkB,KAAKksB,aAAalF,EAAU1C,UAAWF,EAAQE,UAAW0H,EAAgBpd,IAE5E6V,EA1/CA,CAAqED,EAAA,GAkgDrE2H,EAAA,EAASzb,kBAA4B,SAAI+T,EACzC0H,EAAA,EAASzb,kBAAoC,iBAAIyT,mJC5rDjDiI,EAAAzsB,EAAA,IAiHA0sB,EAAA,SAAAxsB,GAsFC,SAAAwsB,IAAA,IAAAvsB,EAGCD,EAAAE,KAAAC,OAAOA,KA1DEF,EAAAwsB,OAAS,IAAIC,EAAA,EAObzsB,EAAA0sB,OAAS,IAAID,EAAA,EA4BbzsB,EAAAub,OAAS,IAAIkR,EAAA,EAObzsB,EAAAyb,OAAS,IAAIgR,EAAA,EAiBtBzsB,EAAKG,UAAY,WAGjBH,EAAKgN,SAAW,QAEhBhN,EAAK2N,UAAY,GAEjB,IAAIgf,EAAkB,IAAIC,EAAA,EAGtBC,EAAoB7sB,EAAKiB,YAAY0a,EAAA,GACzCkR,EAAU1rB,aAAc,EACxB0rB,EAAUC,YAAc,GACxBD,EAAU/jB,KAAO6jB,EAAgBI,OAAO,yBACxCF,EAAU5U,YAAa,EACvBjY,EAAK6sB,UAAYA,EACjB7sB,EAAKsJ,WAAWC,KAAKvJ,EAAK6sB,WAG1B,IAAIG,EAAgBhtB,EAAKiB,YAAY0a,EAAA,GACrCqR,EAAM7rB,aAAc,EACpB6rB,EAAM/jB,OAAS0jB,EAAgBI,OAAO,QACtCC,EAAMlkB,KAAOzH,OAAA4rB,EAAA,EAAA5rB,GACb2rB,EAAME,gBAAkB,MACxBF,EAAM/U,YAAa,EACnB+U,EAAMG,cAAgB,GACtBntB,EAAKgtB,MAAQA,EACbhtB,EAAKsJ,WAAWC,KAAKvJ,EAAKgtB,OAG1B,IAAII,EAAgBptB,EAAKiB,YAAY0a,EAAA,UACrCyR,EAAMjsB,aAAc,EACpBisB,EAAMnkB,OAAS0jB,EAAgBI,OAAO,QACtCK,EAAMtkB,KAAOzH,OAAA4rB,EAAA,EAAA5rB,GACb+rB,EAAMF,gBAAkB,MACxBE,EAAMnV,YAAa,EACnBmV,EAAMD,cAAgB,GACtBntB,EAAKotB,MAAQA,EACbptB,EAAKsJ,WAAWC,KAAKvJ,EAAKotB,OAG1BptB,EAAKgC,OAAOC,GAAG,cAAejC,EAAKqtB,WAAYrtB,GAE/CA,EAAKsJ,WAAWC,KAAKvJ,EAAKwsB,QAC1BxsB,EAAKsJ,WAAWC,KAAKvJ,EAAK0sB,QAC1B1sB,EAAKsJ,WAAWC,KAAKvJ,EAAKub,QAC1Bvb,EAAKsJ,WAAWC,KAAKvJ,EAAKyb,QAG1Bzb,EAAKI,eAsjBP,OAjsB8BC,EAAA,EAAAksB,EAAAxsB,GAoJtBwsB,EAAAjpB,UAAA+pB,WAAP,WACKntB,KAAK8sB,OACR9sB,KAAK8sB,MAAMpR,QAAQsC,MAAOC,EAAKmO,EAAA,QAAe9hB,EAAG,EAAGC,EAAG,IAAO6hB,EAAA,QAAe9hB,EAAG,EAAGC,EAAGvK,KAAKotB,gBAExFptB,KAAKktB,OACRltB,KAAKktB,MAAMxR,QAAQsC,MAAOC,EAAKmO,EAAA,QAAe9hB,EAAG,EAAGC,EAAG,IAAO6hB,EAAA,QAAe9hB,EAAGtK,KAAKqtB,WAAY9iB,EAAG,OAS/F8hB,EAAAjpB,UAAAkqB,gBAAP,WACC,GAAIttB,KAAKutB,eAAgB,CACxB,IAAIC,EAAoBxtB,KAAKwtB,UAE7B,GAAIA,EAAW,CACd,IAAIhiB,EAAgBxL,KAAKwL,MAErBxL,KAAK8sB,QACRthB,EAAMlB,EAAItK,KAAK8sB,MAAMW,QAGlBztB,KAAKktB,QACR1hB,EAAMjB,EAAIvK,KAAKktB,MAAM3gB,QAGtB,IAAIogB,EAAoB3sB,KAAK2sB,UAEzBriB,EAAYsD,KAAKG,IAAIvC,EAAMlB,EAAGkjB,EAAUljB,GACxCC,EAAYqD,KAAKG,IAAIvC,EAAMjB,EAAGijB,EAAUjjB,GAExCmjB,EAAYC,EAAA,MAAY/f,KAAK8c,IAAI8C,EAAUljB,EAAIkB,EAAMlB,GAAItK,KAAK4tB,oBAC9DC,EAAYF,EAAA,MAAY/f,KAAK8c,IAAI8C,EAAUjjB,EAAIiB,EAAMjB,GAAIvK,KAAK4tB,oBAElE,OAAQ5tB,KAAK8M,UACZ,IAAK,QACJvC,EAAI,EACJsjB,EAAI7tB,KAAKkL,YACT,MACD,IAAK,QACJZ,EAAI,EACJojB,EAAI1tB,KAAKiL,WACT,MACD,IAAK,UACJV,EAAI,EACJsjB,EAAI7tB,KAAKkL,YACT,MACD,IAAK,UACJZ,EAAI,EACJojB,EAAI1tB,KAAKiL,WAIX0hB,EAAUriB,EAAIA,EACdqiB,EAAUpiB,EAAIA,EAEdoiB,EAAUjR,QAAQsC,MAAOC,EAAKmO,EAAA,UAAgBsB,EAAGG,KAEjDlB,EAAUmB,wBAGV9tB,KAAK2sB,UAAUzpB,SAWRmpB,EAAAjpB,UAAA4U,SAAV,SAAmBxM,GAMlB,OALAA,EAAMlB,EAAIsD,KAAKC,IAAI,EAAGrC,EAAMlB,GAC5BkB,EAAMjB,EAAIqD,KAAKC,IAAI,EAAGrC,EAAMjB,GAC5BiB,EAAMlB,EAAIsD,KAAKG,IAAI/N,KAAKiL,WAAYO,EAAMlB,GAC1CkB,EAAMjB,EAAIqD,KAAKG,IAAI/N,KAAKkL,YAAaM,EAAMjB,GAEpCiB,GAIE6gB,EAAAjpB,UAAA2qB,gBAAV,SAA0BviB,EAAewiB,GACxCnuB,EAAAuD,UAAM2qB,gBAAehuB,KAAAC,KAACwL,EAAOwiB,GAE7BhuB,KAAKiuB,oBAAoBziB,GAErBxL,KAAKwtB,WACqB,OAAzBxtB,KAAKkuB,mBACRluB,KAAKmuB,mBACLnuB,KAAKouB,SAAS,aASP/B,EAAAjpB,UAAA6qB,oBAAV,SAA8BziB,GAC7BA,EAAQxL,KAAKgY,SAAShY,KAAKwL,OAEvBxL,KAAK8sB,OAAS9sB,KAAK8sB,MAAM9iB,UAAYhK,KAAK0I,QAC7C1I,KAAK8sB,MAAMxiB,EAAIkB,EAAMlB,GAElBtK,KAAKktB,OAASltB,KAAKktB,MAAMljB,UAAYhK,KAAK2I,QAC7C3I,KAAKktB,MAAM3iB,EAAIiB,EAAMjB,GAEtBvK,KAAKstB,mBAIIjB,EAAAjpB,UAAAirB,gBAAV,SAA0B7iB,EAAewiB,GACxC,GAAIhuB,KAAKgK,UAAYhK,KAAKiK,SAEzB,GAAIjK,KAAKsuB,aAAa9iB,GAAQ,CAC7BxL,KAAKwtB,UAAYhiB,EAEjBxL,KAAKuuB,YAAY/iB,GAIjBxL,KAAKwL,MAAMlB,EAAItK,KAAKwtB,UAAUljB,EAC9BtK,KAAKwL,MAAMjB,EAAIvK,KAAKwtB,UAAUjjB,EAE9B,IAAIoiB,EAAoB3sB,KAAK2sB,UACzB6B,EAAqBxuB,KAAKwtB,UAAUljB,EACpCmkB,EAAqBzuB,KAAKwtB,UAAUjjB,EAEpCvK,KAAKutB,iBACRZ,EAAUriB,EAAIkkB,EACd7B,EAAUpiB,EAAIkkB,EACd9B,EAAUjR,QAAQsC,MAAOC,EAAK,KAC9B0O,EAAUxlB,QAEXtH,EAAAuD,UAAMirB,gBAAetuB,KAAAC,KAACwL,EAAOwiB,QAG7BhuB,KAAKwtB,eAAY3oB,OAIlB7E,KAAKwtB,eAAY3oB,GAQTwnB,EAAAjpB,UAAAmrB,YAAV,SAAsB/iB,GACjBxL,KAAK8sB,QACRthB,EAAMlB,EAAItK,KAAK8sB,MAAMW,QAElBztB,KAAKktB,QACR1hB,EAAMjB,EAAIvK,KAAKktB,MAAM3gB,SAKb8f,EAAAjpB,UAAAsrB,cAAV,SAAwBljB,EAAewiB,GAClChuB,KAAKwtB,YACRxtB,KAAK2uB,QAAUnjB,EAEfxL,KAAKuuB,YAAYvuB,KAAK2uB,SAEtB3uB,KAAK4uB,YAEgB,WAAjB5uB,KAAK8M,UAA0C,WAAjB9M,KAAK8M,UAA0C,YAAjB9M,KAAK8M,UAIpE9M,KAAK2sB,UAAUzpB,OAGhBrD,EAAAuD,UAAMsrB,cAAa3uB,KAAAC,KAACwL,EAAOwiB,IAG5BhuB,KAAKwtB,eAAY3oB,EACjB7E,KAAKstB,mBASIjB,EAAAjpB,UAAA+qB,iBAAV,WAEC,IAAIU,EAASlB,EAAA,MAAY3tB,KAAKwtB,UAAUljB,EAAItK,KAAKqtB,WAAY,GACzDyB,EAASnB,EAAA,MAAY3tB,KAAKwtB,UAAUjjB,EAAIvK,KAAKotB,YAAa,GAK1D2B,EAASF,EAHElB,EAAA,MAAY3tB,KAAKwL,MAAMlB,EAAItK,KAAKqtB,WAAY,GAIvD2B,GAAUF,EAHCnB,EAAA,MAAY3tB,KAAKwL,MAAMjB,EAAIvK,KAAKotB,YAAa,GAK5DptB,KAAK+M,QAAW/F,MAAO+nB,EAAQ9nB,IAAK,EAAI8nB,GACxC/uB,KAAKkN,QAAWlG,MAAOgoB,EAAQ/nB,IAAK,EAAI+nB,GAEnB,QAAjBhvB,KAAK8M,WACR9M,KAAKkN,OAAOlG,MAAQ,EACpBhH,KAAKkN,OAAOjG,IAAM,GAEE,QAAjBjH,KAAK8M,WACR9M,KAAK+M,OAAO/F,MAAQ,EACpBhH,KAAK+M,OAAO9F,IAAM,IASVolB,EAAAjpB,UAAAwrB,UAAV,WACK5uB,KAAK8sB,QACR9sB,KAAK2uB,QAAQrkB,EAAItK,KAAK8sB,MAAMW,QAEzBztB,KAAKktB,QACRltB,KAAK2uB,QAAQpkB,EAAIvK,KAAKktB,MAAM3gB,QAI7BvM,KAAK2sB,UAEL,IAAIkC,EAAiBlB,EAAA,MAAY3tB,KAAKwtB,UAAUljB,EAAItK,KAAKqtB,WAAY,GACjE4B,EAAetB,EAAA,MAAa3tB,KAAK2uB,QAAS,EAAI3uB,KAAKqtB,WAAY,GAE/DyB,EAAiBnB,EAAA,MAAY3tB,KAAKwtB,UAAUjjB,EAAIvK,KAAKotB,YAAa,GAClE8B,EAAevB,EAAA,MAAa3tB,KAAK2uB,QAAS,EAAI3uB,KAAKotB,YAAa,GAEpEptB,KAAK+M,QAAW/F,MAAO2mB,EAAA,IAAUkB,EAAQI,GAAOhoB,IAAK0mB,EAAA,IAAUkB,EAAQI,IACvEjvB,KAAKkN,QAAWlG,MAAO2mB,EAAA,IAAUmB,EAAQI,GAAOjoB,IAAK0mB,EAAA,IAAUmB,EAAQI,KAsBxE/tB,OAAAkH,eAAWgkB,EAAAjpB,UAAA,gBAsBX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAvB9B,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,GAEzCvO,KAAKutB,gBAAiB,GAEQ,GAA1Bhf,EAAMgP,QAAQ,UACjBvd,KAAKkuB,iBAAmB,OACxBluB,KAAKutB,gBAAiB,IAES,GAA5Bhf,EAAMgP,QAAQ,YACjBvd,KAAKkuB,iBAAmB,SACxBluB,KAAKutB,gBAAiB,IAEM,GAAzBhf,EAAMgP,QAAQ,SACjBvd,KAAKkuB,iBAAmB,MACxBluB,KAAKutB,gBAAiB,oCAoBxBpsB,OAAAkH,eAAWgkB,EAAAjpB,UAAA,sBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,uBAR9B,SAA0Bb,GACzBvO,KAAKqP,iBAAiB,iBAAkBd,oCAmBzCpN,OAAAkH,eAAWgkB,EAAAjpB,UAAA,sBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,uBAR9B,SAA0Bb,GACzBvO,KAAKqP,iBAAiB,iBAAkBd,oCAgBzCpN,OAAAkH,eAAWgkB,EAAAjpB,UAAA,iBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,kBAR9B,SAAqBb,GACpBvO,KAAKqP,iBAAiB,YAAad,oCAuBpCpN,OAAAkH,eAAWgkB,EAAAjpB,UAAA,aAaX,WACC,OAAOpD,KAAKqb,OAAOoD,WAdpB,SAAiBpa,GAChB,GAAIrE,KAAKqb,OAAOoD,OAASpa,EAAM,CAC9B,IAAIsB,EAA0BtB,EAAKsB,MACnC3F,KAAKqb,OAAO0D,IAAI1a,EAAM,IAAIkoB,EAAA,GACzBloB,EAAKwG,QAAQ/I,OAAOC,GAAG,kBAAmB/B,KAAKmvB,uBAAwBnvB,MACvEqE,EAAKvC,OAAOC,GAAG,YAAa4D,EAAM2D,2BAA4B3D,wCAyBjExE,OAAAkH,eAAWgkB,EAAAjpB,UAAA,aAaX,WACC,OAAOpD,KAAKub,OAAOkD,WAdpB,SAAiBpa,GAChB,GAAIrE,KAAKub,OAAOkD,OAASpa,EAAM,CAC9B,IAAIsB,EAA0BtB,EAAKsB,MACnC3F,KAAKub,OAAOwD,IAAI1a,EAAM,IAAIkoB,EAAA,GACzBloB,EAAKwG,QAAQ/I,OAAOC,GAAG,kBAAmB/B,KAAKovB,uBAAwBpvB,MACvEqE,EAAKvC,OAAOC,GAAG,YAAa4D,EAAM2D,2BAA4B3D,wCAkBvD0mB,EAAAjpB,UAAA+rB,uBAAV,SAAiC/pB,GAChC,IAAIyF,EAAmB7K,KAAK0I,MAAMmC,QAC9BW,EAAgB6jB,EAAA,kBAA0B/kB,EAAGO,EAAQ4iB,OAAQljB,EAAGM,EAAQ0B,QAAUvM,MAClFsK,EAAYkB,EAAMlB,EAStB,GAPItK,KAAK8sB,QACR9sB,KAAK8sB,MAAMxiB,EAAIA,EACVtK,KAAKsuB,aAAa9iB,IACtBxL,KAAKkD,QAIHlD,KAAK0I,OAAS1I,KAAKsvB,eAAgB,CACtC,IAAIvG,EAAqB/oB,KAAK0I,MAAM6mB,sBAChCvG,EAAmBhpB,KAAK0I,MAAM8mB,oBAClC,GAAIzG,GAAcC,EAAU,CAC3BhpB,KAAK8sB,MAAMxiB,EAAIA,EACf,IAAIpJ,EAAgB8nB,EAAS1e,EAAIye,EAAWze,EAC5CtK,KAAK8sB,MAAMpR,QAAQsC,MAAOC,EAAKmO,EAAA,UAAgBlrB,EAAOlB,KAAKotB,aAAclsB,EAAQ,QAW1EmrB,EAAAjpB,UAAAgsB,uBAAV,SAAiChqB,GAChC,IAAIyF,EAAmB7K,KAAK2I,MAAMkC,QAC9BW,EAAgB6jB,EAAA,kBAA0B/kB,EAAGO,EAAQ4iB,OAAQljB,EAAGM,EAAQ0B,QAAUvM,MAClFuK,EAAYiB,EAAMjB,EAUtB,GARIvK,KAAKktB,QACRltB,KAAKktB,MAAM3iB,EAAIA,EAEVvK,KAAKsuB,aAAa9iB,IACtBxL,KAAKkD,QAIHlD,KAAK2I,OAAS3I,KAAKyvB,eAAgB,CACtC,IAAI1G,EAAqB/oB,KAAK2I,MAAM4mB,sBAChCvG,EAAmBhpB,KAAK2I,MAAM6mB,oBAClC,GAAIzG,GAAcC,EAAU,CAC3BhpB,KAAKktB,MAAM3iB,EAAIA,EACf,IAAI/I,EAAiBwnB,EAASze,EAAIwe,EAAWxe,EAC7CvK,KAAKktB,MAAMxR,QAAQsC,MAAOC,EAAKmO,EAAA,UAAgBpsB,KAAKqtB,WAAY7rB,EAAQ,GAAIA,EAAS,QAUxFL,OAAAkH,eAAWgkB,EAAAjpB,UAAA,aAeX,WACC,OAAOpD,KAAKssB,OAAO7N,WAhBpB,SAAiBqO,GACZA,GACHA,EAAMpR,QAAU1b,KAAK2b,MAAMtN,IAAI,QAC/BrO,KAAKssB,OAAOvN,IAAI+N,EAAOA,EAAMhrB,OAAOC,GAAG,kBAAmB/B,KAAKstB,gBAAiBttB,OAChF8sB,EAAM4C,qBAAsB,EAC5B5C,EAAMtqB,OAASxC,MAGfA,KAAKssB,OAAOqD,yCAgBdxuB,OAAAkH,eAAWgkB,EAAAjpB,UAAA,aAeX,WACC,OAAOpD,KAAKwsB,OAAO/N,WAhBpB,SAAiByO,GACZA,GACHA,EAAMxR,QAAU1b,KAAK2b,MAAMtN,IAAI,QAC/BrO,KAAKwsB,OAAOzN,IAAImO,EAAOA,EAAMprB,OAAOC,GAAG,kBAAmB/B,KAAKstB,gBAAiBttB,OAChFktB,EAAM1qB,OAASxC,KACfktB,EAAMwC,qBAAsB,GAG5B1vB,KAAKwsB,OAAOmD,yCAgBdxuB,OAAAkH,eAAWgkB,EAAAjpB,UAAA,iBAWX,WACC,OAAOpD,KAAK4vB,gBAZb,SAAqBjD,GACpB3sB,KAAK4vB,WAAajD,EACdA,IACHA,EAAUjR,QAAU1b,KAAK2b,MAAMtN,IAAI,QACnCse,EAAUnqB,OAASxC,uCAoBdqsB,EAAAjpB,UAAAuM,cAAP,SAAqBC,GAEhBA,IAGCigB,EAAA,SAAejgB,EAAOlH,QAAUmnB,EAAA,SAAejgB,EAAOlH,QAAU1I,KAAK2jB,IAAIC,OAAOhU,EAAOlH,SAC1FkH,EAAOlH,MAAQ1I,KAAK2jB,IAAI3O,OAAOpF,EAAOlH,QAEnCmnB,EAAA,SAAejgB,EAAOjH,QAAUknB,EAAA,SAAejgB,EAAOjH,QAAU3I,KAAK2jB,IAAIC,OAAOhU,EAAOjH,SAC1FiH,EAAOjH,MAAQ3I,KAAK2jB,IAAI3O,OAAOpF,EAAOjH,SAKxC9I,EAAAuD,UAAMuM,cAAa5P,KAAAC,KAAC4P,IAItByc,EAjsBA,CAA8ByD,EAAA,GAysB9BC,EAAA,EAASrf,kBAA4B,SAAI2b,sNC1zBzC/oB,EAAA3D,EAAA,GA2CAqwB,EAAA,SAAAnwB,GAmBC,SAAAmwB,IAAA,IAAAlwB,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBAKnB,OA1BwCE,EAAA,EAAA6vB,EAAAnwB,GA0BxCmwB,EA1BA,CAAwCC,EAAA,GAwGxCC,EAAA,SAAArwB,GAoFC,SAAAqwB,IAAA,IAAApwB,EACCD,EAAAE,KAAAC,OAAOA,YAbDF,EAAAqwB,YAAsB,GAe5BrwB,EAAKswB,SAAW,IAAIC,EAAA,EAAgC,IAAIC,EAAA,GACxDxwB,EAAKswB,SAASrF,SAASwF,eAAgB,EAEvCzwB,EAAKsJ,WAAWC,KAAK,IAAIgnB,EAAA,EAAavwB,EAAKswB,WAC3CtwB,EAAKsJ,WAAWC,KAAKvJ,EAAKswB,SAASrF,UAEnCjrB,EAAK0wB,kBAAoB,IAAIC,EAAA,aAAsC3wB,EAAKswB,SAAU,WAAM,OAAAtwB,EAAKswB,SAAS7I,WACtGznB,EAAK0wB,kBAAkBE,gBAAiB,EAExC5wB,EAAKG,UAAY,aAEjBH,EAAKmtB,cAAgB,EACrBntB,EAAK8sB,YAAc,EAEnB9sB,EAAK6wB,SAAU,EAEf7wB,EAAK8wB,SAAW,EAChB9wB,EAAK+wB,SAAW,EAEhB/wB,EAAKgxB,kBAAoBhxB,EAAK0b,cAAcza,YAAYgwB,EAAA,GACxDjxB,EAAKgxB,kBAAkB/Y,YAAa,EAMpCjY,EAAK2C,iBAAiBkB,UAEtB7D,EAAKI,eAwdP,OA3kBgCC,EAAA,EAAA+vB,EAAArwB,GA0HrBqwB,EAAA9sB,UAAAC,sBAAV,WACCxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MACtBsD,EAAA,SAAetD,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,iBAUnCysB,EAAA9sB,UAAAqO,eAAV,WACC,OAAO,IAAIue,GAUFE,EAAA9sB,UAAAmZ,wBAAV,SAAkCrJ,GAGjC,GAAIlT,KAAKoH,UAAYpH,KAAKgK,QAAS,CAElC,IAAIrB,EAAc3I,KAAKub,OAAOkD,MAC1B/V,EAAc1I,KAAKqb,OAAOoD,MAE1BuS,EAAqChxB,KAAK2M,UAAUK,SAASkG,EAASjD,MAAQ,GAIlF,GAFAiD,EAASxB,UAAY1R,KAEjBA,KAAKkd,UAAYxU,GAChBC,aAAiBsoB,EAAA,EAAW,CAC/B,IAAIC,EAAmBvoB,EAAM8Z,UACzBuO,IACHE,EAAWF,EAAiB1X,OAAe,OAAE6X,cAI9Cje,EAASke,gBAAgB,SAAUF,EAAU,GAC7Che,EAASke,gBAAgB,SAAUle,EAASoG,OAAOG,OAAOlL,OAEtD7F,aAAiB0W,EAAA,IACpBlM,EAASme,mBAAmB,SAAU,GAAK,GAC3Cne,EAASme,mBAAmB,QAAS,KAIxC,GAAIrxB,KAAKkd,UAAYvU,GAChBD,aAAiBuoB,EAAA,EAAW,CAC/B,IAAIK,EAAmB5oB,EAAM+Z,UACzBuO,IACHM,EAAWN,EAAiB1X,OAAe,OAAE6X,cAG9Cje,EAASke,gBAAgB,SAAUE,EAAU,GAC7Cpe,EAASke,gBAAgB,SAAUle,EAASoG,OAAOC,OAAOhL,OAEtD5F,aAAiByW,EAAA,IACpBlM,EAASme,mBAAmB,SAAU,GAAK,GAC3Cne,EAASme,mBAAmB,QAAS,QAYnCnB,EAAA9sB,UAAAiJ,SAAP,eAAAvM,EAAAE,KAECH,EAAAuD,UAAMiJ,SAAQtM,KAAAC,MAEdA,KAAKwwB,kBAAkBb,QAEvB3vB,KAAKuxB,YAAYvxB,KAAKwxB,oBAEtBf,EAAA,KAAWzwB,KAAKgQ,WAAWhM,WAAY,SAACwC,GACvC1G,EAAKyxB,YAAY,EAAG/qB,KAIrBiqB,EAAA,KAAWzwB,KAAKwwB,kBAAkBxsB,WAAY,SAACytB,GAC9CA,EAAQ9sB,YAAa,KASburB,EAAA9sB,UAAAsuB,UAAV,WAOC,IANA,IAAI3f,EAAqB/R,KAAK+R,WAC1BG,EAAmBlS,KAAKkS,SAKnBjG,EAAIjM,KAAK+R,WAAa,EAAG9F,GAAK,EAAGA,IAAK,CAE9C,IADIiH,EAAWlT,KAAK2M,UAAUK,SAASf,IAC1BwV,SAASzhB,KAAKmd,gBAAkBjK,EAASuO,SAASzhB,KAAKod,eAAgB,CACnFrL,EAAa9F,EACb,OAKF,IAASA,EAAIjM,KAAKkS,SAAUjG,EAAIjM,KAAK2M,UAAUjI,OAAQuH,IAAK,CAC3D,IAAIiH,EACJ,IADIA,EAAWlT,KAAK2M,UAAUK,SAASf,IAC1BwV,SAASzhB,KAAKmd,gBAAkBjK,EAASuO,SAASzhB,KAAKod,eAAgB,CACnFlL,EAAWjG,EAAI,EACf,OAGFjM,KAAKwxB,mBAAqBzf,EAC1B/R,KAAK2xB,iBAAmBzf,GAUfge,EAAA9sB,UAAAmuB,YAAV,SAAsBK,EAAmB1iB,GACxC,IAII2iB,EAJAC,KAEA5f,EAAmBlS,KAAK2xB,iBAGxBI,GAA6B,EAE7BN,EAA6BzxB,KAAKwwB,kBAAkBwB,WACxDP,EAAQ9sB,YAAa,EAEjBuK,GACHuiB,EAAQjvB,OAAS0M,EAAU+iB,SAC3BC,EAAA,eAAuBhjB,EAAU+iB,SAAUR,EAAShW,EAAA,KAGpDyW,EAAA,eAAuBlyB,KAAMyxB,EAAShW,EAAA,GACtCgW,EAAQU,QAAQhL,QAChBsK,EAAQjvB,OAASxC,KAAK8wB,mBAGvB,IAAK,IAAI7kB,EAAY2lB,EAAW3lB,EAAIiG,EAAUjG,IAAK,CAElD,IAAIiH,EAA8BlT,KAAK2M,UAAUK,SAASf,GAa1D,GAXIiH,EAASkf,gBAERnmB,GAAK2lB,EACR5xB,KAAKqyB,wBAAwBnf,EAASjC,WAAYwgB,GAIlDM,EAAoB/xB,KAAKqyB,wBAAwBnf,EAASjC,aAIxDiC,EAASuO,SAASzhB,KAAKmd,gBAAkBjK,EAASuO,SAASzhB,KAAKod,eACnEpd,KAAKsyB,UAAUR,EAAQ5e,EAAUlT,KAAK0c,OAAQ1c,KAAK8c,YAE/C,CAEJ,GAAI7Q,GAAK2lB,EACR,SAOA,IAJuB5xB,KAAK2wB,QAId,CACbkB,EAAa5lB,EACb,OAOH,GAFA4lB,EAAa5lB,EAET8lB,EACH,MAIF/xB,KAAKuyB,aAAad,EAASK,EAAQF,EAAWC,EAAY3iB,IAajDghB,EAAA9sB,UAAAkvB,UAAV,SAAoBR,EAAkB5e,EAA6BwJ,EAAgBI,EAAgBoG,GAClG,IAAI1X,EAAQxL,KAAK4gB,SAAS1N,EAAUwJ,EAAQI,EAAQ5J,EAAS+O,iBAAiBvF,GAASxJ,EAAS+O,iBAAiBnF,IAC5GoG,IACJhQ,EAAS1H,MAAQA,GAElBsmB,EAAOzoB,KAAKmC,IAaH0kB,EAAA9sB,UAAAmvB,aAAV,SAAuBd,EAA4BK,EAAkBF,EAAmBC,EAAoB3iB,GAE3G,IAAIsjB,KAEJ,GAAIxyB,KAAKyP,WAAsCzP,KAAKgd,cACnDhd,KAAKyP,WAAsCzP,KAAKid,cAChDjd,KAAK4b,QACL,IAAK,IAAI3P,EAAY4lB,EAAY5lB,GAAK2lB,EAAW3lB,IAAK,CACrD,IAAIiH,EAA8BlT,KAAK2M,UAAUK,SAASf,GACtDiH,EAASuO,SAASzhB,KAAKmd,gBAAkBjK,EAASuO,SAASzhB,KAAKod,gBACnEpd,KAAKsyB,UAAUE,EAAatf,EAAUlT,KAAK2c,WAAY3c,KAAK+c,YAAY,OAItE,CACJ,IAAIG,EAAiBld,KAAKkd,SACtB+H,EAAgB6M,EAAOptB,OACvBgE,EAAc1I,KAAK0I,MACnBC,EAAc3I,KAAK2I,MAEnBuU,GAAYxU,GACf8pB,EAAYnpB,MAAOiB,EAAGwnB,EAAO7M,EAAQ,GAAG3a,EAAGC,EAAG5B,EAAMiO,UAAUrM,IAC9DioB,EAAYnpB,MAAOiB,EAAGwnB,EAAO,GAAGxnB,EAAGC,EAAG5B,EAAMiO,UAAUrM,MAGtDioB,EAAYnpB,MAAOiB,EAAG5B,EAAMkO,UAAUtM,EAAGC,EAAGunB,EAAO7M,EAAQ,GAAG1a,IAC9DioB,EAAYnpB,MAAOiB,EAAG5B,EAAMkO,UAAUtM,EAAGC,EAAGunB,EAAO,GAAGvnB,KAIxDvK,KAAKyyB,YAAYhB,EAASK,EAAQU,GAE9BX,EAAa7xB,KAAK2xB,iBAAmB,GACxC3xB,KAAKuxB,YAAYM,EAAY3iB,IAWrBghB,EAAA9sB,UAAAqvB,YAAV,SAAsBhB,EAA4BK,EAAkBU,GACnEf,EAAQgB,YAAYX,EAAQU,EAAaxyB,KAAK4wB,SAAU5wB,KAAK6wB,WAepDX,EAAA9sB,UAAAivB,wBAAV,SAAkCK,EAA0CjB,GAC3E,IAAIkB,GAAmB,EAkBvB,OAhBAT,EAAA,KAAaQ,EAAgB,SAACE,EAAcrkB,GAGvCjL,EAAA,SAAeiL,KACdkjB,EACCA,EAAQxgB,WAAgD2hB,IAAiBrkB,IACtEkjB,EAASmB,GAAgBrkB,EAC/BokB,GAAU,GAIXA,GAAU,KAKNA,GASRxxB,OAAAkH,eAAW6nB,EAAA9sB,UAAA,eAQX,WACC,OAAOpD,KAAKoP,iBAAiB,gBAT9B,SAAmBb,GAClBvO,KAAKqP,iBAAiB,UAAWd,GACjCvO,KAAK6S,uDA+BN1R,OAAAkH,eAAW6nB,EAAA9sB,UAAA,gBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAR9B,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,oCA+B1CpN,OAAAkH,eAAW6nB,EAAA9sB,UAAA,gBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAR9B,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,oCAiBnC2hB,EAAA9sB,UAAAyvB,mBAAP,SAA0BC,GAA1B,IAAAhzB,EAAAE,KAEK0tB,EAAYoF,EAAO7nB,WACnB4iB,EAAYiF,EAAO5nB,YAEvB4nB,EAAOC,kBAEP,IAAIC,EAAaF,EAAO/xB,YAAYkyB,EAAA,GAOpC,GANAD,EAAK/xB,aAAc,EACnB+xB,EAAKziB,SAAcvQ,MACnBgzB,EAAKE,GAAKxF,EACVsF,EAAKzoB,EAAIsjB,EAAI,EACbmF,EAAKhpB,SAAU,EAEXhK,KAAK4sB,YAAc,EAAG,CACzB,IAAIhkB,EAAkBkqB,EAAO/xB,YAAYoyB,EAAA,GACzCvqB,EAAK2H,SAAcvQ,MACnB4I,EAAK1H,MAAQwsB,EACb9kB,EAAKpH,OAASqsB,EACdjlB,EAAK2B,EAAI,EACT3B,EAAKqkB,cAAgB,EACrBrkB,EAAKoB,SAAU,EAEfgpB,EAAKzoB,EAAI,EAGVkmB,EAAA,aAAmBzwB,KAAKihB,QAAQjd,WAAY,SAACwd,GAC5C,GAAIA,EAAO4R,mBAAoB,CAG9B,IAAIC,GAAqB,EAQzB,GAPA5C,EAAA,KAAWjP,EAAO8R,SAAStvB,WAAY,SAACuvB,GACvC,GAAIA,aAAiBC,EAAA,EAEpB,OADAH,GAAY,GACL,KAIJA,EAAW,CACf,IAAII,EAAwBjS,EAAOiS,QAsBnC,OArBAA,EAAMjxB,OAASswB,EACfW,EAAM1b,YAAa,EACnB0b,EAAMpoB,iBAAcxG,EACpB4uB,EAAMnpB,EAAIojB,EAAI,EACV5tB,EAAK8sB,YAAc,EACtB6G,EAAMlpB,EAAI,EAGVkpB,EAAMlpB,EAAIsjB,EAAI,EAEf4F,EAAMzpB,SAAU,EAGX1G,EAAA,SAAemwB,EAAM7qB,QACzB6qB,EAAM7qB,KAAO9I,EAAK8I,MAGdtF,EAAA,SAAemwB,EAAM1qB,UACzB0qB,EAAM1qB,OAASjJ,EAAKiJ,SAGd,OAKZmnB,EA3kBA,CAAgCD,EAAA,GAmlBhChM,EAAA,EAASvT,kBAA8B,WAAIwf,EAC3CjM,EAAA,EAASvT,kBAAsC,mBAAIsf,oMCvuBnDnV,EAAAlb,EAAA,GAiDA+zB,EAAA,SAAA7zB,GAoDC,SAAA6zB,IAAA,IAAA5zB,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,oBAEjBH,EAAKwZ,OAAOqa,eAEZ7zB,EAAKI,eAkLP,OA5OuCC,EAAA,EAAAuzB,EAAA7zB,GAmE/B6zB,EAAAtwB,UAAAwwB,cAAP,SAAqBrlB,GACpB1O,EAAAuD,UAAMwwB,cAAa7zB,KAAAC,KAACuO,GAChBA,EACHvO,KAAKoxB,gBAAgB,QAASpxB,KAAKsZ,OAAc,MAAE/K,MAAO,EAAG,GAG7DvO,KAAKoxB,gBAAgB,QAAS,EAAG,EAAG,IAU/BsC,EAAAtwB,UAAAywB,QAAP,WACC,OAAO7zB,KAAK8zB,MAAMD,WAWZH,EAAAtwB,UAAAF,KAAP,SAAYif,EAAmBG,EAAgByR,EAAkBxkB,GAChE,OAAO1P,EAAAuD,UAAMF,KAAInD,KAAAC,KAACmiB,EAAUG,EAAO,GAAI,QAAS,iBAU1CoR,EAAAtwB,UAAA+D,KAAP,SAAYgb,EAAmBG,EAAgB/S,GAC9C,OAAO1P,EAAAuD,UAAM+D,KAAIpH,KAAAC,KAACmiB,EAAUG,GAAQ,QAAS,iBAQ9CnhB,OAAAkH,eAAWqrB,EAAAtwB,UAAA,gBAOX,WACC,OAAOpD,KAAKiR,WAAWF,cARxB,SAAoBxC,GACnBvO,KAAKkR,YAAY,WAAY3C,oCAgB9BpN,OAAAkH,eAAWqrB,EAAAtwB,UAAA,mBAOX,WACC,OAAOpD,KAAKsZ,OAAOqa,YAAYplB,WARhC,SAAuBA,GACtBvO,KAAKia,SAAS,cAAe1L,oCAgBvBmlB,EAAAtwB,UAAAyvB,mBAAP,SAA0BC,GACzB9yB,KAAK0R,UAAUmhB,mBAAmBC,EAAQ9yB,OAQ3CmB,OAAAkH,eAAWqrB,EAAAtwB,UAAA,sBASX,WACC,OAAOpD,KAAKg0B,qBAVb,SAA0BzlB,GACzBvO,KAAKg0B,gBAAkBzlB,EACvBA,EAAMjC,MAAM4G,SAAWlT,KACvBuO,EAAM0lB,WAAW/gB,SAAWlT,sCAgB7BmB,OAAAkH,eAAWqrB,EAAAtwB,UAAA,YAAX,WASC,OARKpD,KAAKk0B,QACTl0B,KAAKk0B,MAAQl0B,KAAK0R,UAAUma,MAAMtE,SAClCvnB,KAAKoJ,WAAWC,KAAKrJ,KAAKk0B,OAC1Bl0B,KAAKm0B,UAAUn0B,KAAKk0B,OACpBl0B,KAAKk0B,MAAMJ,MAAQ9zB,KAAK8zB,MACxB9zB,KAAKk0B,MAAM5nB,MAAQtM,KAAKsM,MACxBtM,KAAKk0B,MAAMlqB,QAAUhK,KAAKgK,SAEpBhK,KAAKk0B,uCASb/yB,OAAAkH,eAAWqrB,EAAAtwB,UAAA,aAAX,WAOC,OANKpD,KAAKo0B,SACTp0B,KAAKo0B,OAASp0B,KAAK0R,UAAUoa,OAAOvE,SACpCvnB,KAAKoJ,WAAWC,KAAKrJ,KAAKo0B,QAC1Bp0B,KAAKm0B,UAAUn0B,KAAKo0B,QACpBp0B,KAAKo0B,OAAOpqB,QAAUhK,KAAKgK,SAErBhK,KAAKo0B,wCASbjzB,OAAAkH,eAAWqrB,EAAAtwB,UAAA,aAAX,WAOC,OANKpD,KAAKq0B,SACTr0B,KAAKq0B,OAASr0B,KAAK0R,UAAU4iB,OAAO/M,SACpCvnB,KAAKoJ,WAAWC,KAAKrJ,KAAKq0B,QAC1Br0B,KAAKm0B,UAAUn0B,KAAKq0B,QACpBr0B,KAAKq0B,OAAOrqB,QAAUhK,KAAKgK,SAErBhK,KAAKq0B,wCAQblzB,OAAAkH,eAAWqrB,EAAAtwB,UAAA,sBAOX,WACC,OAAOpD,KAAKiR,WAAWsjB,oBARxB,SAA0BhmB,GACzBvO,KAAKkR,YAAY,iBAAkB3C,oCASrCmlB,EA5OA,CAAuCvY,EAAA,GAmXvCqZ,EAAA,SAAA30B,GA6HC,SAAA20B,IAAA,IAAA10B,EACCD,EAAAE,KAAAC,OAAOA,KAEPF,EAAKG,UAAY,YAEjBH,EAAK20B,aAAc,EACnB30B,EAAK40B,YAAc,GACnB50B,EAAK60B,SAAW,IAEhB70B,EAAK+I,OAAS,IAAI+rB,EAAA,EAClB90B,EAAK+I,OAAO2gB,KAAO,EACnB1pB,EAAKiY,YAAa,EAClBjY,EAAK+0B,kBAAmB,EAExB,IAAIC,EAAkBh1B,EAAKiB,YAAYg0B,EAAA,GACvCD,EAAgB7zB,aAAc,EAC9B6zB,EAAgB/c,YAAa,EAC7BjY,EAAKg1B,gBAAkBA,EAEvB,IAAIE,EAAiBl1B,EAAKiB,YAAYg0B,EAAA,GACtCC,EAAe/zB,aAAc,EAC7B+zB,EAAejd,YAAa,EAC5Bid,EAAep0B,OAAS,OACxBd,EAAKk1B,eAAiBA,EAEtB,IAAIC,EAAkBn1B,EAAKiB,YAAYg0B,EAAA,GACvCE,EAAgBh0B,aAAc,EAC9Bg0B,EAAgBld,YAAa,EAC7Bkd,EAAgBr0B,OAAS,OACzBd,EAAKm1B,gBAAkBA,EAEvBn1B,EAAK2C,iBAAiBkB,UAEtB7D,EAAKo1B,UAAUC,EAAA,GAGf,IAAI7gB,EAAO,IAAI8gB,EAAA,EACf9gB,EAAKyD,YAAa,EAClBjY,EAAK+rB,MAAQ,IAAIwJ,EAAA,EAAsB/gB,GAEvCxU,EAAKsJ,WAAWC,KAAK,IAAIgsB,EAAA,EAAav1B,EAAK+rB,QAC3C/rB,EAAKsJ,WAAWC,KAAKvJ,EAAK+rB,MAAMd,UAKhC,IAAIze,EAAQ,IAAIgpB,EAAA,SAChBhpB,EAAMuE,KAAO,mDACbvE,EAAMyL,YAAa,EACnBzL,EAAMwL,OAAS,GACfxL,EAAMzL,QAAQ,EAAG,EAAG,EAAG,GACvByL,EAAMipB,mBAAqB,EAC3Bz1B,EAAKgsB,OAAS,IAAIuJ,EAAA,EAAgC/oB,GAElDxM,EAAKsJ,WAAWC,KAAK,IAAIgsB,EAAA,EAAav1B,EAAKgsB,SAC3ChsB,EAAKsJ,WAAWC,KAAKvJ,EAAKgsB,OAAOf,UAGjCjrB,EAAK01B,mBAAqB,GAOP11B,EAAK21B,aACXC,iBAAmBC,EAAA,OAEf71B,EAAKw0B,OAAOvJ,SAAS6K,OAAOrO,OAAO,SACzCtW,WAAW4kB,MAAQ,KAG9B/1B,EAAKg2B,eAAiB,mDAEtBh2B,EAAKI,eAggBP,OAvsB+BC,EAAA,EAAAq0B,EAAA30B,GA8MpB20B,EAAApxB,UAAAC,sBAAV,WACCxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MACtB6a,EAAA,SAAe7a,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,sBAUnC+wB,EAAApxB,UAAAqO,eAAV,WACC,OAAO,IAAIiiB,GASFc,EAAApxB,UAAA8xB,UAAV,SAAoBa,GAEnB,IAAIjC,EAAQ,IAAIiC,EAEhBjC,EAAM/b,YAAa,EACnB+b,EAAM2B,aAAaxkB,WAAW4kB,MAAQ,EACtC/B,EAAMhuB,QAAQ,QAAS9F,KAAKg2B,iBAAkBh2B,MAC9C8zB,EAAMhuB,SAAS,KAAM,KAAM,IAAK,IAAK,eAAgB9F,KAAKi2B,gBAAiBj2B,MAC3E8zB,EAAMzoB,YAAc,mEAGpByoB,EAAM8B,OAAOrO,OAAO,SAEDuM,EAAM2B,aACZxkB,WAAWilB,YAAc,EAEtCpC,EAAMqC,WAAY,EAElBrC,EAAMhyB,OAAOC,GAAG,UAAW,SAACqD,GAC3BA,EAAME,OAAOgc,gBAGIwS,EAAM8B,OAAOrO,OAAO,UAC1BtW,WAAWilB,YAAc,GAErC,IAAIE,EAActC,EAAMsC,YAUxB,OATAA,EAAYnlB,WAAWjH,SAAU,EACjCosB,EAAYnlB,WAAWolB,QAAU,EAGjCr2B,KAAKs0B,OAAS,IAAIe,EAAA,EAAoBvB,GAEtC9zB,KAAKoJ,WAAWC,KAAK,IAAIgsB,EAAA,EAAar1B,KAAKs0B,SAC3Ct0B,KAAKoJ,WAAWC,KAAKrJ,KAAKs0B,OAAOvJ,UAE1B+I,GAQDU,EAAApxB,UAAAiJ,SAAP,WAEC,KAAIuB,KAAK8c,IAAI1qB,KAAK00B,WAAa10B,KAAK20B,UAAY,KAAhD,CAKI30B,KAAK2F,MAAMyG,SACdpM,KAAK2F,MAAM0G,WAGZrM,KAAKs2B,cACLt2B,KAAKu2B,eAELv2B,KAAKw2B,mBAAqBx2B,KAAK00B,WAC/B10B,KAAKy2B,SAAW3N,EAAA,WAAiB9oB,KAAK00B,WAAY10B,KAAK20B,UAEvD30B,KAAK02B,kBAAoB,EACzB,IAAK,IAAIzqB,EAAIjM,KAAK+R,WAAY9F,EAAIjM,KAAKkS,SAAUjG,IAAK,CACrD,IACI0qB,EADW32B,KAAK2M,UAAUK,SAASf,GACLqN,OAAOqa,YAAYiD,QACjDD,EAAqB32B,KAAK02B,oBAC7B12B,KAAK02B,kBAAoBC,GAI3B92B,EAAAuD,UAAMiJ,SAAQtM,KAAAC,MAEVA,KAAKy0B,cACJz0B,KAAK00B,WAAa10B,KAAK20B,SAC1B30B,KAAKu2B,YAAYM,UAGjB72B,KAAKs2B,WAAWO,UAEjB72B,KAAK82B,cAAc92B,KAAKu2B,aACxBv2B,KAAK82B,cAAc92B,KAAKs2B,eAUnB9B,EAAApxB,UAAAiQ,oBAAP,SAA2BH,GAA3B,IAAApT,EAAAE,KACC,GAAIA,KAAK8X,OAAS,EAAG,CAEN5E,EAASoG,OAAO/K,MAAMqoB,QAApC,IAGIG,EAAe7jB,EAAS4gB,MAC5BiD,EAAMv0B,OAASxC,KAAK80B,gBACpBiC,EAAMjf,OAAS9X,KAAK8X,OAEhB+C,EAAA,SAAe3H,EAASygB,eAC3BoD,EAAMjf,QAAU5E,EAASoG,OAAOqa,YAAYiD,QAAU52B,KAAK02B,mBAG5DK,EAAMC,YAAch3B,KAAKg3B,YACzBD,EAAMrC,WAAa10B,KAAKw2B,mBAExBO,EAAME,IAAM/jB,EAASoG,OAAO/K,MAAMqoB,SAAW52B,KAAK20B,SAAW30B,KAAK00B,YAAc,IAGhF,IAAIpoB,EAAQ4G,EAAS5G,MACrBA,EAAM9J,OAASxC,KAAKi1B,gBAEpB,IAAI3gB,EAAOpB,EAASoB,KACpBA,EAAK9R,OAASxC,KAAKg1B,eAEnB,IAAIkC,GAAiCH,EAAMI,YAAc,KAAO,IAE5D3rB,OAAK,EAET,GAAIxL,KAAKy0B,YAAa,CACrB,IAAInqB,EAAYgK,EAAK5P,OAAS4H,EAAMwL,OAEpCxL,EAAM8qB,eAAiB,SACvB,IAAIC,EAAUr3B,KAAKy2B,SAEfS,GAAyB,KAAOA,GAAyB,IAC5D5sB,IAAM+sB,EAAQn2B,MAAQm2B,EAAQ/sB,GAAKtK,KAAK8X,OACxCxL,EAAMgrB,iBAAmB,OACzBt3B,KAAKu2B,YAAYltB,KAAK6J,KAItB5I,GAAK+sB,EAAQ/sB,EAAItK,KAAK8X,OACtBxL,EAAMgrB,iBAAmB,QACzBt3B,KAAKs2B,WAAWjtB,KAAK6J,GACrB5I,IAAM,GAGP,IAAIitB,EAAWv3B,KAAK8X,OAASxD,EAAK5P,OAAS4H,EAAMwL,OACjDtM,GAAUlB,EAAGA,EAAGC,EAAGwsB,EAAMS,GAAKD,OAE1B,CACAjtB,EAAYysB,EAAMU,GAAKV,EAAMjf,OAAjC,IACIvN,EAAYwsB,EAAMS,GAAKT,EAAMW,QACjClsB,EAAQc,EAAM0L,UAAW1N,EAAGA,EAAGC,EAAGA,GAAKwsB,EAAMjf,QAG9CxL,EAAMyV,OAAOvW,GAEbxL,KAAKw2B,oBAAsBO,EAAME,IAG7Bj3B,KAAK23B,kBACRZ,EAAMa,KAAO,WACbb,EAAMc,WAAY,IAGlBd,EAAMa,KAAO,WACbb,EAAMc,WAAY,GAIfd,EAAMc,YACTd,EAAMj1B,OAAO8gB,KAAK,QAAS,SAACkV,GAC3Bf,EAAMxzB,YAAczD,EAAKi4B,eAAej4B,EAAKg2B,eAAgB5iB,KAE9D6jB,EAAMj1B,OAAO8gB,KAAK,OAAQ,SAACkV,GAC1Bf,EAAMxzB,YAAc,MAGlBwzB,EAAMiB,YACTjB,EAAMj1B,OAAO8gB,KAAK,OAAQ,SAACkV,GAC1Bf,EAAMxzB,YAAczD,EAAKi4B,eAAej4B,EAAKg2B,eAAgB5iB,KAE9D6jB,EAAMj1B,OAAO8gB,KAAK,MAAO,SAACkV,GACzBf,EAAMxzB,YAAc,WAIJsB,GAAdkyB,EAAMnuB,OACTmuB,EAAMnuB,KAAO5I,KAAK6I,OAAOmE,SAASkG,EAASjD,MAAQjQ,KAAK6I,OAAO2gB,YAE5C3kB,GAAhBkyB,EAAMhuB,SACTguB,EAAMhuB,OAAS/I,KAAK6I,OAAOmE,SAASkG,EAASjD,MAAQjQ,KAAK6I,OAAO2gB,OAIlE3pB,EAAAuD,UAAMiQ,oBAAmBtT,KAAAC,KAACkT,KAUlBshB,EAAApxB,UAAA0zB,cAAV,SAAwBnqB,GACvB,IAAK,IAAIV,EAAY,EAAGA,EAAIU,EAAUjI,OAAQuH,IAAK,CAClD,IAEIK,EAF8BK,EAAUV,GAEJK,MAExC,GAAIA,GACCL,EAAIU,EAAUjI,OAAS,EAAG,CAC7B,IAAIuzB,EAA+Bj4B,KAAKk4B,aAAajsB,EAAI,EAAGU,GAExDL,EAAMF,SACTE,EAAMD,WAEP,IAAIP,EAAiBQ,EAAMC,OAASD,EAAMkM,eAEtCyf,GACCA,EAAU1tB,EAAIuB,IACjBmsB,EAAU1tB,EAAIuB,MAeV0oB,EAAApxB,UAAA80B,aAAV,SAAuBjoB,EAAetD,GACrC,GAAIA,EAAUjI,QAAUuL,EAAO,CAC9B,IAAIkoB,EAAkCxrB,EAAUsD,GAChD,GAAIkoB,EACH,OAAIA,EAAa7rB,MACT6rB,EAAa7rB,MAGbtM,KAAKk4B,aAAajoB,EAAQ,EAAGtD,KAaxCxL,OAAAkH,eAAWmsB,EAAApxB,UAAA,cAQX,WACC,OAAOpD,KAAKoP,iBAAiB,eAT9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAkBxCpN,OAAAkH,eAAWmsB,EAAApxB,UAAA,mBAQX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAT9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GAAO,oCAkB7CpN,OAAAkH,eAAWmsB,EAAApxB,UAAA,kBAQX,WACC,OAAOpD,KAAKoP,iBAAiB,mBAT9B,SAAsBb,GACrBvO,KAAKqP,iBAAiB,aAAcyZ,EAAA,eAAqBva,IAAQ,oCAkBlEpN,OAAAkH,eAAWmsB,EAAApxB,UAAA,gBAQX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAT9B,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,oCAyB1CpN,OAAAkH,eAAWmsB,EAAApxB,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GAAO,oCAkB7CpN,OAAAkH,eAAWmsB,EAAApxB,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAkBjCimB,EAAApxB,UAAAyvB,mBAAP,SAA0BC,EAAmB5f,GAC5CklB,EAAA,KAAWtF,EAAOQ,SAAStvB,WAAY,SAACuvB,GACvC,IAAIO,EAAe5gB,EAAS4gB,MAO5BA,EAAMhyB,OAAOC,GAAG,kBAAmB,SAAC+1B,GACnCvE,EAAMkC,aAAaxkB,WAAWrI,KAAOkrB,EAAMlrB,KAC3C2qB,EAAMkC,aAAaxkB,WAAWlI,OAAS+qB,EAAM/qB,OAC7CwqB,EAAMkC,aAAaxkB,WAAW2b,YAAckH,EAAMlH,YAClD2G,EAAMkC,aAAaxkB,WAAWgc,cAAgB6G,EAAM7G,cAElC,QAAf6K,EAAGO,WACD9E,EAAM+E,WACT/E,EAAM3qB,KAAOkrB,EAAMlrB,OAIH,UAAfkvB,EAAGO,WACD9E,EAAM+E,WACT/E,EAAMxqB,OAAS+qB,EAAM/qB,cAanByrB,EAAApxB,UAAAme,eAAP,SAAsBC,GACrB3hB,EAAAuD,UAAMme,eAAcxhB,KAAAC,KAACwhB,GAErB,IACIsS,EADiDtS,EAAOtO,SAChC4gB,MAExBjS,EAAYL,EAAOK,UAClBhH,EAAA,SAAegH,KACnBA,EAAY,IAEb,IAAIC,EAAYN,EAAOM,UAClBjH,EAAA,SAAeiH,KACnBA,EAAY,GAGb,IAAIpM,EAAQoe,EAAMY,WAAaZ,EAAMmD,IAAMpV,EACvC/J,EAASgK,EAAYgS,EAAMhc,OAE/B0J,EAAOlX,EAAIwN,EAASgR,EAAA,IAAUpT,GAC9B8L,EAAOjX,EAAIuN,EAASgR,EAAA,IAAUpT,IASrB8e,EAAApxB,UAAA4yB,iBAAV,SAA2B5wB,GAA3B,IAAAtF,EAAAE,KAEKkT,EADe9N,EAAME,OACkC4N,SAC3DklB,EAAA,KAAWllB,EAAS+N,QAAQjd,WAAY,SAAC2H,GACxC,IAAI4C,EAAQ5C,EAAE,GACd7L,EAAKyhB,eAAehT,MAUZimB,EAAApxB,UAAA6yB,gBAAV,SAA0B7wB,GACzB,IAAKpF,KAAKy0B,YAAa,CACtB,IAAIX,EAAe1uB,EAAME,OACrB4N,EAAiD4gB,EAAM5gB,SAG3DA,EAAS5G,MAAMmM,GAAKqb,EAAMrb,GAAKqb,EAAMrG,OACrCva,EAAS5G,MAAMiM,GAAKub,EAAMvb,GAAKub,EAAMvnB,SAShCioB,EAAApxB,UAAAmN,SAAP,SAAgBC,GACf3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACfxQ,KAAKs0B,OAAOvJ,SAASxa,SAASC,EAAO8jB,OAAOvJ,UAC5C/qB,KAAK8rB,OAAOf,SAASxa,SAASC,EAAOsb,OAAOf,UAC5C/qB,KAAK6rB,MAAMd,SAASxa,SAASC,EAAOqb,MAAMd,WAGjCyJ,EAAApxB,UAAAm1B,iBAAV,WACC,IAAI5yB,EAAQ3F,KAAK2F,MACjB,OAAIA,EACImjB,EAAA,WAAiBnjB,EAAM+uB,WAAY/uB,EAAMgvB,SAAU30B,KAAK8X,QAGxDgR,EAAA,WAAiB9oB,KAAK00B,WAAY10B,KAAK20B,SAAU30B,KAAK8X,SAGhE0c,EAvsBA,CAA+BrZ,EAAA,GA+sB/B8I,EAAA,EAASvT,kBAA6B,UAAI8jB,EAC1CvQ,EAAA,EAASvT,kBAAqC,kBAAIgjB,wJCpnClD8E,EAAA74B,EAAA,GAqGA84B,EAAA,SAAA54B,GA4DC,SAAA44B,IAAA,IAAA34B,EAGCD,EAAAE,KAAAC,OAAOA,YAVDF,EAAA44B,gBAA0B,EAahC54B,EAAKc,OAAS,OAEdd,EAAKG,UAAY,uBACjBH,EAAKiY,YAAa,EAClBjY,EAAK40B,YAAc,GACnB50B,EAAK60B,SAAW,IAEhB70B,EAAK64B,gBAAiB,EACtB74B,EAAKgY,OAAS3W,OAAAy3B,EAAA,EAAAz3B,CAAQ,KAEtBrB,EAAKiY,YAAa,EAElBjY,EAAK0U,KAAKuW,SAAS3W,SAAW,EAE9BtU,EAAKgsB,OAAOf,SAAS3W,SAAW,EAChCtU,EAAKgsB,OAAOf,SAASjT,OAAS,GAE9BhY,EAAK+rB,MAAMd,SAAS3W,SAAW,EAC/BtU,EAAK+rB,MAAMd,SAAS8N,cAAe,EACnC/4B,EAAKg5B,gBAAkB,EAEvBh5B,EAAKkzB,KAAK/F,cAAgB,EAE1BntB,EAAKI,eAoXP,OA7c0CC,EAAA,EAAAs4B,EAAA54B,GA+FlC44B,EAAAr1B,UAAA21B,QAAP,SAAe10B,GAAf,IAAAvE,EAAAE,KACCH,EAAAuD,UAAM21B,QAAOh5B,KAAAC,KAACqE,GACdA,EAAK0T,YAAa,EAGlB,IAAIlN,EAAUxG,EAAKwG,QAEnBA,EAAQuD,QAAQC,IAAI,KAAM,SAAC/D,EAAGhF,GAC7B,IAAIkG,EAAgBwtB,EAAA,kBAA0B1uB,EAAGhF,EAAOmoB,OAAQljB,EAAGjF,EAAOiH,QAAUzM,GACpF,OAAOA,EAAKm5B,YAAcrrB,KAAKsrB,IAAItrB,KAAKuK,MAAM3M,EAAMjB,EAAGiB,EAAMlB,IAAMkB,EAAMlB,IAG1EO,EAAQuD,QAAQC,IAAI,KAAM,SAAC9D,EAAGjF,GAC7B,IAAIkG,EAAgBwtB,EAAA,kBAA0B1uB,EAAGhF,EAAOmoB,OAAQljB,EAAGjF,EAAOiH,QAAUzM,GACpF,OAAOA,EAAKm5B,YAAcrrB,KAAKurB,IAAIvrB,KAAKuK,MAAM3M,EAAMjB,EAAGiB,EAAMlB,IAAMkB,EAAMjB,KASpEkuB,EAAAr1B,UAAAiJ,SAAP,WAEKrM,KAAK2F,OAAS3F,KAAK2F,MAAMyG,SAC5BpM,KAAK2F,MAAM0G,WAGZxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,OAQfmB,OAAAkH,eAAWowB,EAAAr1B,UAAA,kBAAX,WACC,OAAO,EAAIwK,KAAKwrB,GAAKp5B,KAAKi5B,6CAU3B93B,OAAAkH,eAAWowB,EAAAr1B,UAAA,cAWX,WACC,OAAOpD,KAAKoP,iBAAiB,eAZ9B,SAAkBb,GACbvO,KAAKqP,iBAAiB,SAAUd,IAC/BvO,KAAKqE,MACRrE,KAAKqE,KAAKJ,8CAiBb9C,OAAAkH,eAAWowB,EAAAr1B,UAAA,mBAAX,WACC,OAAO41B,EAAA,sBAA6Bh5B,KAAK8X,OAAQ9X,KAAK04B,kBAAoB,mCAU3Ev3B,OAAAkH,eAAWowB,EAAAr1B,UAAA,mBAWX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAZ9B,SAAuBb,GAClBvO,KAAKqP,iBAAiB,cAAed,IACpCvO,KAAKqE,MACRrE,KAAKqE,KAAKJ,8CAmBb9C,OAAAkH,eAAWowB,EAAAr1B,UAAA,sBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,uBAR9B,SAA0Bb,GACzBvO,KAAKqP,iBAAiB,iBAAkBd,oCAezCpN,OAAAkH,eAAWowB,EAAAr1B,UAAA,wBAAX,WACC,OAAO41B,EAAA,sBAA6Bh5B,KAAKg3B,YAAah3B,KAAK04B,kBAAoB,mCASzED,EAAAr1B,UAAAiR,gBAAP,SAAuBvJ,GACtB,IAAIuuB,EAAqBr5B,KAAKs5B,qBAAqBxuB,GAC/C4K,EAAgB1V,KAAK00B,YAAc10B,KAAK20B,SAAW30B,KAAK00B,YAAc2E,EAAar5B,KAAKqS,WAC5F,OAAS/H,EAAGtK,KAAKi5B,YAActL,EAAA,IAAUjY,GAAQnL,EAAGvK,KAAKi5B,YAActL,EAAA,IAAUjY,KAS3E+iB,EAAAr1B,UAAAuS,gBAAP,SAAuB7K,GACtB,IAII4K,EAJArR,EAAarE,KAAKqE,KAElB4yB,GAAej3B,KAAK20B,SAAW30B,KAAK00B,aAAerwB,EAAK4C,IAAM5C,EAAK2C,OAWvE,OANC0O,EADGrR,EAAKuB,SAAS+B,SACT3H,KAAK00B,YAAcrwB,EAAK4C,IAAM6D,GAAYmsB,EAG1Cj3B,KAAK00B,YAAc5pB,EAAWzG,EAAK2C,OAASiwB,EAG9CtJ,EAAA,MAAYjY,EAAO,IAQpB+iB,EAAAr1B,UAAAm2B,eAAP,WACC,IAAI7d,EAAU1b,KAAKgzB,KAAKtX,QAGxB1b,KAAK2F,MAEL,IAAImS,EAAiB9X,KAAKi5B,YACtBvE,EAAqB10B,KAAK00B,WAG1BuC,EAFmBj3B,KAAK20B,SAECD,EAC7BhZ,EAAQsC,MAAOC,EAAKub,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAU+G,GAAanqB,EAAGuN,EAAS6V,EAAA,IAAU+G,KAAiB8E,EAAA,MAAY9E,EAAYuC,EAAKnf,EAAQA,MAW5I2gB,EAAAr1B,UAAAqR,kBAAP,SAAyBD,EAAoB1J,EAAkBmJ,GAC9DnJ,IAAuBmJ,EAAcnJ,GAAY0J,EAAKJ,SAEtD,IAAI5I,EAAgBxL,KAAKqU,gBAAgBvJ,GACzC,GAAI0J,EAAKkH,QAAS,CACjB,IAAIhG,EAAgBiY,EAAA,QAAgB/f,KAAKuK,MAAM3M,EAAMjB,EAAGiB,EAAMlB,GAC1DwN,EAAiBkhB,EAAA,sBAA6BR,EAAA,SAAehkB,EAAKsD,QAAUtD,EAAKsD,OAAS3W,OAAAy3B,EAAA,EAAAz3B,CAAQ,KAAMnB,KAAKi5B,aAE7GQ,EAAkBT,EAAA,sBAA6BxkB,EAAKwiB,YAAah3B,KAAKi5B,aAC1EzkB,EAAKnT,OAAS,EAEd,IAAI21B,EAAsBgC,EAAA,sBAA6BR,EAAA,SAAeiB,GAAmBA,EAAkBz5B,KAAKg3B,YAAah3B,KAAKi5B,aAAa,GAC/IzkB,EAAKkH,QAAQsC,MAAOC,EAAKub,EAAA,QAAelvB,EAAG0sB,EAAcrJ,EAAA,IAAUjY,GAAQnL,EAAGysB,EAAcrJ,EAAA,IAAUjY,KAAY8jB,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAUjY,GAAQnL,EAAGuN,EAAS6V,EAAA,IAAUjY,OAEtL1V,KAAK05B,iBAAiBllB,EAAM1J,EAAU,EAAG,IAWnC2tB,EAAAr1B,UAAAmR,kBAAP,SAAyBD,EAAgBxJ,EAAkBmJ,GAE1DnJ,IAAuBmJ,EAAcnJ,GAAYwJ,EAAKF,SAEtD,IAAI5I,EAAgBxL,KAAKqU,gBAAgBvJ,GAEzC,GAAIwJ,EAAKoH,QAAS,CACjB,IAAI5D,EAAiB9X,KAAKi5B,YACtBvjB,EAAgBiY,EAAA,QAAgB/f,KAAKuK,MAAM3M,EAAMjB,EAAGiB,EAAMlB,GAC1DqvB,EAAqBrlB,EAAK5P,OAC1B4P,EAAK+D,SACRshB,GAAcA,GAEfrlB,EAAKjT,OAAS,EACdiT,EAAKoH,QAAQsC,MAAOC,EAAKub,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAUjY,GAAQnL,EAAGuN,EAAS6V,EAAA,IAAUjY,KAAY8jB,EAAA,QAAelvB,GAAIwN,EAAS6hB,GAAchM,EAAA,IAAUjY,GAAQnL,GAAIuN,EAAS6hB,GAAchM,EAAA,IAAUjY,OAG1M1V,KAAK05B,iBAAiBplB,EAAMxJ,EAAU,EAAG,IAWnC2tB,EAAAr1B,UAAAsR,mBAAP,SAA0BpI,EAA2BxB,EAAkBmJ,GAEtEnJ,IAAuBmJ,EAAcnJ,GAAYwB,EAAM8H,SAEvD,IAAI5I,EAAgBxL,KAAKqU,gBAAgBvJ,GAEzCwB,EAAM0L,SAASxM,EAAOxL,KAAKi5B,aAC3B3sB,EAAMjL,OAAS,EAEfrB,KAAK45B,aAAattB,EAAOd,GAEzBxL,KAAK05B,iBAAiBptB,EAAOxB,EAAU9K,KAAK65B,iBAAkB75B,KAAK85B,mBAU7DrB,EAAAr1B,UAAAkrB,aAAP,SAAoB9iB,GACnB,OAAO,GAQRrK,OAAAkH,eAAWowB,EAAAr1B,UAAA,kBAYX,WACC,OAAOpD,KAAKoP,iBAAiB,mBAb9B,SAAsBb,GAEjBvO,KAAKqP,iBAAiB,aAAcd,IACnCvO,KAAKqE,MACRrE,KAAKqE,KAAKJ,8CAiBb9C,OAAAkH,eAAWowB,EAAAr1B,UAAA,gBAYX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAb9B,SAAoBb,GAEfvO,KAAKqP,iBAAiB,WAAYd,IACjCvO,KAAKqE,MACRrE,KAAKqE,KAAKJ,8CAqBNw0B,EAAAr1B,UAAAkT,qBAAP,SAA4Be,EAAuBpD,EAAqB6D,EAA2Bkf,EAAgC+C,GAClI,IAAIC,EAAe,GACnB,GAAIxB,EAAA,SAAenhB,IAAkBmhB,EAAA,SAAevkB,GAAc,CAE5DukB,EAAA,SAAe1gB,KACnBA,EAAS9X,KAAK8X,QAGfT,EAAgBsW,EAAA,IAAUtW,EAAerX,KAAKqE,KAAK2C,QACnDiN,EAAc0Z,EAAA,IAAU1Z,EAAajU,KAAKqE,KAAK4C,MAE7BoQ,IACjBpD,EAAcoD,GAGf,IAAI4hB,EAAsBD,EAAA,sBAA6BlhB,EAAQ9X,KAAKi5B,aAChEgB,EAA2BjB,EAAA,sBAA6BhC,EAAah3B,KAAKi5B,aAAa,GAEvFvE,EAAqB10B,KAAK2V,gBAAgB0B,GAG1C4f,EAFmBj3B,KAAK2V,gBAAgB1B,GAEfygB,EAC7BsF,EAAOR,EAAA,IAAU9E,EAAYuC,EAAKgC,EAAagB,EAAkBhB,EAAac,GAG/E,OAAOC,GAQDvB,EAAAr1B,UAAA82B,WAAP,WACC,OAAO,IAAIC,EAAA,GAQL1B,EAAAr1B,UAAAg3B,WAAP,SAAkB/1B,GACjB,OAAO,IAAIg2B,EAAA,EAAiBh2B,IAQtBo0B,EAAAr1B,UAAAk3B,YAAP,WACC,OAAO,IAAIC,EAAA,GAEb9B,EA7cA,CAA0C+B,EAAA,GAqd1CrO,EAAA,EAASzb,kBAAwC,qBAAI+nB,8GC5erDgC,EAAA,SAAA56B,GAwCC,SAAA46B,EAAYp2B,GAAZ,IAAAvE,EACCD,EAAAE,KAAAC,KAAMqE,IAAKrE,YAEXF,EAAKG,UAAY,mBAEjBH,EAAK4b,QAAU5b,EAAK6b,MAAMtN,IAAI,QAE9BvO,EAAKgY,OAAS3W,OAAAu5B,EAAA,EAAAv5B,CAAQ,KAEtBrB,EAAKI,eAiEP,OAlHsCC,EAAA,EAAAs6B,EAAA56B,GAyD9B46B,EAAAr3B,UAAAM,KAAP,WAEC,GADA7D,EAAAuD,UAAMM,KAAI3D,KAAAC,MACNA,KAAKqE,KAAM,CACd,IAAIuB,EAAuD5F,KAAKqE,KAAKuB,SACrE5F,KAAK+d,SAAWnY,EAAS0Q,qBAAqBtW,KAAKqX,cAAerX,KAAKiU,YAAajU,KAAK8X,OAAQF,EAAA,SAAe5X,KAAKg3B,aAAeh3B,KAAKg3B,YAAcpxB,EAASoxB,YAAah3B,KAAK+5B,cAClL/5B,KAAK0b,QAAQsC,MAAOC,EAAKje,KAAK+d,aAShC5c,OAAAkH,eAAWoyB,EAAAr3B,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GAAO,oCAe7CpN,OAAAkH,eAAWoyB,EAAAr3B,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAexCpN,OAAAkH,eAAWoyB,EAAAr3B,UAAA,oBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,qBAR9B,SAAwBb,GACvBvO,KAAKqP,iBAAiB,eAAgBd,GAAO,oCAU/CksB,EAlHA,CAAsCE,EAAA,GA0HtCC,EAAA,EAASlqB,kBAAoC,iBAAI+pB,wFCxMjD9iB,EAAAhY,EAAA,GAwEAk7B,EAAA,SAAAh7B,GA6BC,SAAAg7B,IAAA,IAAA/6B,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,eACjBH,EAAK+4B,cAAe,EACpB/4B,EAAKI,eAmCP,OApEkCC,EAAA,EAAA06B,EAAAh7B,GAyCjCsB,OAAAkH,eAAWwyB,EAAAz3B,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GAAO,oCAe7CpN,OAAAkH,eAAWwyB,EAAAz3B,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAUzCssB,EApEA,CAAkCC,EAAA,GA6ElCnjB,EAAA,EAASjH,kBAAgC,aAAImqB,sNCrJ7CzhB,EAAAzZ,EAAA,IA+CAo7B,EAAA,SAAAl7B,GAYC,SAAAk7B,IAAA,IAAAj7B,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,qBACjBH,EAAKI,eAGP,OAlBwCC,EAAA,EAAA46B,EAAAl7B,GAkBxCk7B,EAlBA,CAAwCC,EAAA,GAmGxCC,EAAA,SAAAp7B,GAkGC,SAAAo7B,IAAA,IAAAn7B,EAGCD,EAAAE,KAAAC,OAAOA,KA9CEF,EAAAQ,eAA8C46B,EAAA,EAO9Cp7B,EAAAU,eAA4C26B,EAAA,EA8B/Cr7B,EAAAs7B,oBAA8B,EAUpCt7B,EAAKG,UAAY,aAEjBH,EAAK40B,YAAc,GACnB50B,EAAK60B,SAAW,IAEhB70B,EAAKgY,OAAS3W,OAAAu5B,EAAA,EAAAv5B,CAAQ,IACtBrB,EAAKk3B,YAAc,EAEnB,IAAIqE,EAAiBv7B,EAAKqC,cAAcpB,YAAYu6B,EAAA,UACpDD,EAAep6B,aAAc,EAC7Bo6B,EAAez6B,OAAS,WACxBy6B,EAAez4B,MAAQ,SACvBy4B,EAAex4B,OAAS,SAExB/C,EAAKyC,gBAAgBC,OAAS64B,EAC9Bv7B,EAAKu7B,eAAiBA,EACtBv7B,EAAK2C,iBAAiBD,OAAS64B,EAE/Bv7B,EAAKsC,iBAAmBi5B,EAExBv7B,EAAKqD,YAAck4B,EAAet6B,YAAYw6B,EAAA,GAC9Cz7B,EAAKqD,YAAYlC,aAAc,EAC/BnB,EAAKqD,YAAYuY,QAAU5b,EAAK6b,MAAMtN,IAAI,QAC1CvO,EAAKqD,YAAYkzB,QAAU,EAG3Bv2B,EAAKI,eA0UP,OA1cgCC,EAAA,EAAA86B,EAAAp7B,GAuIrBo7B,EAAA73B,UAAAC,sBAAV,WAECxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MAItB6a,EAAA,SAAe7a,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,iBAUnCw3B,EAAA73B,UAAA6C,YAAV,SAAsB5B,GACrBxE,EAAAuD,UAAM6C,YAAWlG,KAAAC,KAACqE,GAClB,IAAIuB,EAAyBvB,EAAKuB,SAClCA,EAASsC,cAAc1F,OAASoD,EAChCA,EAASuC,eAAe3F,OAASoD,EACjCvB,EAAK7B,OAASxC,KAAKq7B,eACnBz1B,EAASiC,UAQAozB,EAAA73B,UAAA2C,uBAAV,SAAiCX,GAChCvF,EAAAuD,UAAM2C,uBAAsBhG,KAAAC,KAACoF,GAC7Bo2B,EAAA,KAAWx7B,KAAKuE,MAAMP,WAAY,SAACK,GAClCA,EAAKJ,gBASGg3B,EAAA73B,UAAAkD,uBAAV,SAAiClB,GAChCvF,EAAAuD,UAAMkD,uBAAsBvG,KAAAC,KAACoF,GAC7Bo2B,EAAA,KAAWx7B,KAAKoE,MAAMJ,WAAY,SAACK,GAClCA,EAAKJ,gBASGg3B,EAAA73B,UAAA0G,aAAV,WACC,OAAO,IAAI2xB,EAAA,GASLR,EAAA73B,UAAAuM,cAAP,SAAqBC,GAEpB,GAAIA,IAGCiL,EAAA,SAAejL,EAAOpL,UAAYqW,EAAA,SAAejL,EAAOpL,OAAOsL,QAClEF,EAAOpL,OAAOsL,KAAO,eAIlB+K,EAAA,SAAejL,EAAO7L,SAAW8W,EAAA,QAAcjL,EAAO7L,SACzD,IAAK,IAAIkI,EAAI,EAAG4D,EAAMD,EAAO7L,OAAOW,OAAQuH,EAAI4D,EAAK5D,IACpD2D,EAAO7L,OAAOkI,GAAG6D,KAAOF,EAAO7L,OAAOkI,GAAG6D,MAAQ,cAkBpDjQ,EAAAuD,UAAMuM,cAAa5P,KAAAC,KAAC4P,IAMXqrB,EAAA73B,UAAAs4B,WAAV,WACC77B,EAAAuD,UAAMs4B,WAAU37B,KAAAC,MAEAA,KAAKq7B,eAArB,IACIl5B,EAAgBnC,KAAKmC,cAErBw5B,EAAOC,EAAA,WAAiB57B,KAAK00B,WAAY10B,KAAK20B,SAAU,GACxDkH,GAA0BvxB,EAAG,EAAGC,EAAG,EAAGrJ,MAAO,EAAGM,OAAQ,GAExDs6B,EAAK35B,EAAckrB,WAAasO,EAAKz6B,MACrC66B,EAAK55B,EAAcirB,YAAcuO,EAAKn6B,OAEtCw1B,EAAch3B,KAAKg3B,YAEvB,GAAIA,aAAuB0D,EAAA,EAAS,CACnC,IAAInsB,EAAQyoB,EAAYzoB,MACpBytB,EAAKpuB,KAAKG,IAAI+tB,EAAIC,GACtBxtB,EAAQX,KAAKC,IAAImuB,EAAKztB,EAAOytB,EAAKpuB,KAAKG,IAAI5L,EAAcirB,YAAajrB,EAAckrB,aAAe2O,EACnGH,EAAYD,EAAA,WAAiB57B,KAAK00B,WAAY10B,KAAK20B,SAAUpmB,GAE7DvO,KAAKo7B,oBAAsB7sB,EAAQyoB,EAAYzoB,MAC/CyoB,EAAc71B,OAAAu5B,EAAA,EAAAv5B,CAAgB,IAARoN,GAGvBotB,EAAOC,EAAA,oBAA0BD,EAAME,IAEvC,IAAII,EAAYruB,KAAKG,IAAI5L,EAAckrB,WAAasO,EAAKz6B,MAAOiB,EAAcirB,YAAcuO,EAAKn6B,QAE7F06B,EAAkE,EAAvDC,EAAA,sBAA6Bn8B,KAAK8X,OAAQmkB,IAAkB,EACvEnkB,EAASokB,EAAW,EACpBxH,EAAa10B,KAAK00B,WAClBC,EAAW30B,KAAK20B,SAEpB30B,KAAKo8B,kBAAoBD,EAAA,sBAA6BnF,EAAalf,GAEnE9X,KAAKmD,YAAYuY,QAAQsC,MAAOC,EAAK7E,EAAA,IAAUsb,EAAYC,EAAWD,EAAY5c,EAAQ9X,KAAKo8B,qBAE/FZ,EAAA,KAAWx7B,KAAKoE,MAAMJ,WAAY,SAACK,GAC/BA,EAAKuB,SAAS+yB,iBAChBt0B,EAAKuB,SAAS8uB,WAAaA,EAC3BrwB,EAAKuB,SAAS+uB,SAAWA,GAG1BtwB,EAAKnD,MAAQg7B,EACb73B,EAAK7C,OAAS06B,EAGd73B,EAAKuB,SAAS8yB,gBAAkB5gB,EAChCzT,EAAKuB,SAASoxB,YAAcA,IAG7BwE,EAAA,KAAWx7B,KAAKuE,MAAMP,WAAY,SAACK,GAClCA,EAAKuB,SAAS8uB,WAAaA,EAC3BrwB,EAAKuB,SAAS+uB,SAAWA,EAEzBtwB,EAAKnD,MAAQg7B,EACb73B,EAAK7C,OAAS06B,EAGd73B,EAAKuB,SAAS8yB,gBAAkB5gB,EAChCzT,EAAKuB,SAASoxB,YAAcA,IAG7B,IAAIxyB,EAASxE,KAAKwE,OACdA,IACHA,EAAOtD,MAAQg7B,EACf13B,EAAOhD,OAAS06B,EAChB13B,EAAOkwB,WAAaA,EACpBlwB,EAAOmwB,SAAWA,GAGnB30B,KAAKq7B,eAAegB,aAAgB/xB,EAAGwN,EAAS6jB,EAAKrxB,EAAGC,EAAGuN,EAAS6jB,EAAKpxB,EAAGrJ,MAAO4W,EAAS6jB,EAAKz6B,MAAOM,OAAQsW,EAAS6jB,EAAKn6B,SAQrHy5B,EAAA73B,UAAA+M,aAAV,WACC,OAAO,IAAImsB,EAAA,GA0BZn7B,OAAAkH,eAAW4yB,EAAA73B,UAAA,kBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,mBAR9B,SAAsBb,GACrBvO,KAAKqP,iBAAiB,aAAcd,GAAO,oCAiC5CpN,OAAAkH,eAAW4yB,EAAA73B,UAAA,gBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAR9B,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,oCAiB1CpN,OAAAkH,eAAW4yB,EAAA73B,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAaxCpN,OAAAkH,eAAW4yB,EAAA73B,UAAA,wBAAX,WACC,OAAOpD,KAAKo8B,mDAYbj7B,OAAAkH,eAAW4yB,EAAA73B,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GAAO,oCAgBtC0sB,EAAA73B,UAAAiC,YAAP,SAAmBO,GAEdA,GACHA,EAASkC,mBAUJmzB,EAAA73B,UAAAoC,YAAP,SAAmBI,GAEdA,GACHA,EAASkC,mBAIZmzB,EA1cA,CAAgCD,EAAA,GAkdhCuB,EAAA,EAAS7rB,kBAA8B,WAAIuqB,wFCpmB3CtjB,EAAAhY,EAAA,GAuEA68B,EAAA,SAAA38B,GAqCC,SAAA28B,IAAA,IAAA18B,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,oBACjBH,EAAKI,eAyHP,OAjKuCC,EAAA,EAAAq8B,EAAA38B,GAiDtCsB,OAAAkH,eAAWm0B,EAAAp5B,UAAA,qBAAX,WACC,GAAIpD,KAAKqE,KACR,OAAOrE,KAAKqE,KAAK2P,gBAAgBhU,KAAKuT,qDAUxCpS,OAAAkH,eAAWm0B,EAAAp5B,UAAA,mBAAX,WACC,GAAIpD,KAAKqE,KACR,OAAOrE,KAAKqE,KAAK2P,gBAAgBhU,KAAKwT,mDASxCrS,OAAAkH,eAAWm0B,EAAAp5B,UAAA,qBAWX,WACC,OAAOpD,KAAKoP,iBAAiB,sBAZ9B,SAAyBb,GACpBvO,KAAKqP,iBAAiB,gBAAiBd,IACtCvO,KAAKqE,MACRrE,KAAKqE,KAAKwO,uDAiBb1R,OAAAkH,eAAWm0B,EAAAp5B,UAAA,mBAWX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAZ9B,SAAuBb,GAClBvO,KAAKqP,iBAAiB,cAAed,IACpCvO,KAAKqE,MACRrE,KAAKqE,KAAKwO,uDAiBb1R,OAAAkH,eAAWm0B,EAAAp5B,UAAA,kBAWX,WACC,IAAI2N,EAAmB/Q,KAAKoP,iBAAiB,iBAC7C,OAAI2B,EACI/Q,KAAKqE,KAAKuP,gBAAgB7C,GAG1B/Q,KAAKoP,iBAAiB,mBAjB/B,SAAsBb,GACjBvO,KAAKqP,iBAAiB,aAAcd,IACnCvO,KAAKqE,MACRrE,KAAKqE,KAAKwO,uDAwBb1R,OAAAkH,eAAWm0B,EAAAp5B,UAAA,gBAWX,WACC,IAAI2N,EAAmB/Q,KAAKoP,iBAAiB,eAC7C,OAAI2B,EACI/Q,KAAKqE,KAAKuP,gBAAgB7C,GAG1B/Q,KAAKoP,iBAAiB,iBAjB/B,SAAoBb,GACfvO,KAAKqP,iBAAiB,WAAYd,IACjCvO,KAAKqE,MACRrE,KAAKqE,KAAKwO,uDAmBd2pB,EAjKA,CAAuCC,EAAA,GAyKvC9kB,EAAA,EAASjH,kBAAqC,kBAAI8rB,wFChPlD7kB,EAAAhY,EAAA,GAgFA+8B,EAAA,SAAA78B,GAuDC,SAAA68B,IAAA,IAAA58B,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,gBACjBH,EAAKI,eA6CP,OAvGmCC,EAAA,EAAAu8B,EAAA78B,GAkElCsB,OAAAkH,eAAWq0B,EAAAt5B,UAAA,iBAYX,WACC,OAAOpD,KAAKoP,iBAAiB,kBAb9B,SAAqBb,GAChBvO,KAAKqP,iBAAiB,YAAad,KACtCvO,KAAK28B,WAAapuB,EAAM+V,UACpBtkB,KAAKqE,MACRrE,KAAKqE,KAAKwO,wDAiBb1R,OAAAkH,eAAWq0B,EAAAt5B,UAAA,eAYX,WACC,OAAOpD,KAAKoP,iBAAiB,gBAb9B,SAAmBb,GACdvO,KAAKqP,iBAAiB,UAAWd,KACpCvO,KAAKukB,SAAWhW,EAAM+V,UAClBtkB,KAAKqE,MACRrE,KAAKqE,KAAKwO,wDAYd6pB,EAvGA,CAAmCE,EAAA,GA+GnCjlB,EAAA,EAASjH,kBAAiC,cAAIgsB,mIC/L9CG,EAAAl9B,EAAA,GAiHAm9B,EAAA,SAAAj9B,GA0FC,SAAAi9B,IAAA,IAAAh9B,EAGCD,EAAAE,KAAAC,OAAOA,KA/CDF,EAAA0L,OAAkBlB,EAAG,EAAGC,EAAG,GAgDjCzK,EAAKG,UAAY,SAKjBH,EAAKoB,MAAQC,OAAA47B,EAAA,EAAA57B,CAAQ,KACrBrB,EAAK0B,OAASL,OAAA47B,EAAA,EAAA57B,CAAQ,KACtBrB,EAAKmB,aAAc,EAEnBnB,EAAKoD,KAAK,GAEVpD,EAAKk9B,WAAY,EACjBl9B,EAAKm9B,WAAY,EAEjBn9B,EAAKiY,YAAa,EAIlB,IAAMmlB,EAAc/7B,OAAAg8B,EAAA,EAAAh8B,UACpBrB,EAAKsJ,WAAWC,KAAK6zB,EAAYE,KAAKt7B,OAAOC,GAAG,OAAQjC,EAAKu9B,iBAAkBv9B,IAC/EA,EAAKsJ,WAAWC,KAAK6zB,EAAYE,KAAKt7B,OAAOC,GAAG,KAAMjC,EAAKw9B,eAAgBx9B,IAC3EA,EAAKsJ,WAAWC,KAAK6zB,EAAYE,KAAKt7B,OAAOC,GAAG,QAASjC,EAAKy9B,iBAAkBz9B,IAGhFA,EAAKI,eA0NP,OAhV4BC,EAAA,EAAA28B,EAAAj9B,GAgIpBi9B,EAAA15B,UAAAm6B,iBAAP,SAAwBn4B,GACvB,GAAKpF,KAAK0vB,oBAAV,CAGA,IAAI8N,EAAgBC,EAAA,sBAA6Br4B,EAAMs4B,QAAQlyB,MAAOxL,MAEtE,OADAA,KAAK29B,YAAYH,GAAO,GACjBA,IAaDV,EAAA15B,UAAAu6B,YAAP,SAAmBnyB,EAAewiB,GACjChuB,KAAK+tB,gBAAgBviB,EAAOwiB,IASnB8O,EAAA15B,UAAA2qB,gBAAV,SAA0BviB,EAAewiB,GACpChuB,KAAKwL,MAAMlB,GAAKkB,EAAMlB,GAAKtK,KAAKwL,MAAMjB,GAAKiB,EAAMjB,IAEhDvK,KAAKsuB,aAAa9iB,GACrBxL,KAAKmH,KAAK,GAILnH,KAAKwtB,WACTxtB,KAAKkD,KAAK,GAIZlD,KAAKwL,MAAQA,EACTxL,KAAKgK,UACRhK,KAAK49B,eAEL59B,KAAKouB,SAAS,4BAWV0O,EAAA15B,UAAAy6B,YAAP,SAAmBryB,EAAewiB,GACjChuB,KAAKquB,gBAAgB7iB,EAAOwiB,IASnB8O,EAAA15B,UAAAirB,gBAAV,SAA0B7iB,EAAewiB,GACxC,OAAQhuB,KAAKkuB,kBACZ,IAAK,OACJluB,KAAKogB,oBAAoB,eACzB,MACD,IAAK,SACJpgB,KAAKogB,oBAAoB,iBACzB,MACD,IAAK,MACJpgB,KAAKogB,oBAAoB,cACzBjf,OAAAg8B,EAAA,EAAAh8B,GAAiB28B,eAAeC,EAAA,EAAiBC,YAW7ClB,EAAA15B,UAAA66B,UAAP,SAAiBzyB,EAAewiB,GAC/BhuB,KAAK0uB,cAAcljB,EAAOwiB,IASjB8O,EAAA15B,UAAAsrB,cAAV,SAAwBljB,EAAewiB,GAEtChuB,KAAKuuB,YAAYvuB,KAAK2uB,SACtB,IAAIuO,EAAc/7B,OAAAg8B,EAAA,EAAAh8B,GAClB,GAAI+8B,EAAA,YAAkBl+B,KAAK2uB,QAAS3uB,KAAKwtB,WAAa0P,EAAYiB,aAAan+B,KAAKo+B,aAAc,gBACjG,OAAQp+B,KAAKkuB,kBACZ,IAAK,OACJluB,KAAKogB,oBAAoB,aACzB,MAED,IAAK,SACJpgB,KAAKogB,oBAAoB,eACzB,MAED,IAAK,MACJpgB,KAAKogB,oBAAoB,YACzB8c,EAAYY,eAAeC,EAAA,EAAiBM,cAK9Cr+B,KAAKogB,oBAAoB,oBACzB8c,EAAYY,eAAeC,EAAA,EAAiBM,SAG7Cr+B,KAAKwtB,eAAY3oB,EACjB7E,KAAKstB,mBAQCwP,EAAA15B,UAAAkqB,gBAAP,aAMUwP,EAAA15B,UAAAw6B,aAAV,WAEC59B,KAAKkK,UAAYlK,KAAKwL,MAAMlB,EAAItK,KAAKqtB,WACrCrtB,KAAKmK,UAAY,EAAInK,KAAKwL,MAAMjB,EAAIvK,KAAKotB,aASnC0P,EAAA15B,UAAAi6B,iBAAP,SAAwBj4B,GACvB,GAAKpF,KAAK0vB,oBAAV,CAIA,IAAI8N,EAAgBC,EAAA,sBAA6Br4B,EAAMs4B,QAAQlyB,MAAOxL,MAGlEoF,EAAMA,MAAMk5B,YAAct+B,KAAKsuB,aAAakP,IAC/Cp4B,EAAMA,MAAMm5B,iBAIbv+B,KAAK29B,YAAYH,GAAO,GACxBx9B,KAAK69B,YAAYL,GAAO,KAOfV,EAAA15B,UAAAmrB,YAAV,SAAsB/iB,KASfsxB,EAAA15B,UAAAk6B,eAAP,SAAsBl4B,GACrB,GAAKpF,KAAK0vB,oBAAV,CAIA,IAAI8N,EAAgBC,EAAA,sBAA6Br4B,EAAMs4B,QAAQlyB,MAAOxL,MACtEA,KAAK29B,YAAYH,GAAO,GACxBx9B,KAAKi+B,UAAUT,GAAO,QALrBx9B,KAAKwtB,eAAY3oB,GAanB1D,OAAAkH,eAAWy0B,EAAA15B,UAAA,aAUX,WACC,OAAOpD,KAAKwc,YAXb,SAAiBjO,GAChBvO,KAAKwc,OAASjO,EACVsuB,EAAA,SAAqB78B,KAAKwc,OAAQra,gBACrChB,OAAAg8B,EAAA,EAAAh8B,GAAiBq9B,YAAkBx+B,KAAKwc,OAAQra,cAAci8B,+CAUjEtB,EAhVA,CAA4B2B,EAAA,GAwV5B7D,EAAA,EAASlqB,kBAA0B,OAAIosB,sICzcvC4B,EAAA/+B,EAAA,IAkCAg/B,EAAA,SAAA9+B,GAYC,SAAA8+B,IAAA,IAAA7+B,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,sBAEjBH,EAAKka,YAAY,QAAS,EAAG,GAC7Bla,EAAKka,YAAY,QAAS,EAAG,GAE7Bla,EAAKka,YAAY,YAAa,EAAG,GACjCla,EAAKka,YAAY,YAAa,EAAG,GAEjCla,EAAKI,eAGP,OAzByCC,EAAA,EAAAw+B,EAAA9+B,GAyBzC8+B,EAzBA,CAAyCC,EAAA,GAoFzCC,EAAA,SAAAh/B,GAqDC,SAAAg/B,IAAA,IAAA/+B,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,cACjBH,EAAKg/B,aAAc,EACnBh/B,EAAKI,eA4IP,OArMiCC,EAAA,EAAA0+B,EAAAh/B,GAiEzBg/B,EAAAz7B,UAAAiJ,SAAP,WAGKrM,KAAK2F,MAAMyG,SACdpM,KAAK2F,MAAM0G,WAGZxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,OASL6+B,EAAAz7B,UAAAqO,eAAV,WACC,OAAO,IAAIktB,GAeFE,EAAAz7B,UAAAwd,SAAV,SAAmB1N,EAA+B2Q,EAAcC,EAAcjC,EAAoBC,EAAoBiC,EAAoBC,GACpID,IACJA,EAAY,UAERC,IACJA,EAAY,UAGb,IAAI1Z,EAAYtK,KAAK2I,MAAM8N,KAAKvD,EAAU4Q,EAAMhC,EAAWkC,GACvDzZ,EAAYvK,KAAK2I,MAAMkO,KAAK3D,EAAU4Q,EAAMhC,EAAWkC,GAEvDlM,EAAiBI,EAAA,aAAoB5N,EAAGA,EAAGC,EAAGA,IAE9CmL,EAAgB1V,KAAK0I,MAAMoO,SAAS5D,EAAU2Q,EAAMhC,EAAWkC,GAE/D2Q,EAAa10B,KAAK2F,MAAM+uB,WACxBC,EAAW30B,KAAK2F,MAAMgvB,SAI1B,OAAIjf,EAAQgf,GAAchf,EAAQif,OACjC,GAGSrqB,EAAGwN,EAASI,EAAA,IAAUxC,GAAQnL,EAAGuN,EAASI,EAAA,IAAUxC,KAerDmpB,EAAAz7B,UAAAkvB,UAAV,SAAoBR,EAAkB5e,EAA6BwJ,EAAgBI,EAAgBoG,GAClG,IAAI1X,EAAQxL,KAAK4gB,SAAS1N,EAAUwJ,EAAQI,EAAQ5J,EAASpC,UAAU4L,GAASxJ,EAASpC,UAAUgM,IAC/FtR,GACHsmB,EAAOzoB,KAAKmC,IASJqzB,EAAAz7B,UAAAya,YAAV,WACC,IAAIjY,EAAmD5F,KAAK2I,MAAM/C,SAClE,OAAO84B,EAAA,IAAU94B,EAAS8uB,WAAY9uB,EAAS+uB,SAAW/uB,EAAS8uB,WAAY9uB,EAASqzB,YAAarzB,EAASq0B,mBAWrG4E,EAAAz7B,UAAAqvB,YAAV,SAAsBhB,EAA4BK,EAAkBU,GACnE,IACI5sB,EADa5F,KAAK2I,MACsC/C,SAExD5F,KAAK8+B,aAAoE,KAArDlxB,KAAK8c,IAAI9kB,EAAS+uB,SAAW/uB,EAAS8uB,cAEzD10B,KAAKyP,WAAsCzP,KAAKgd,cACnDhd,KAAKyP,WAAsCzP,KAAKid,cAChDjd,KAAK4b,WACLkW,EAAOzoB,KAAKyoB,EAAO,IACfU,EAAY9tB,OAAS,GACxB8tB,EAAYuM,QAAQvM,EAAYA,EAAY9tB,OAAS,KAIxD7E,EAAAuD,UAAMqvB,YAAW1yB,KAAAC,KAACyxB,EAASK,EAAQU,IAUpCrxB,OAAAkH,eAAWw2B,EAAAz7B,UAAA,mBAQX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAT9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GACrCvO,KAAK6S,uDASPgsB,EArMA,CAAiCD,EAAA,GA6MjCjnB,EAAA,EAASjH,kBAA+B,YAAImuB,EAC5ClnB,EAAA,EAASjH,kBAAuC,oBAAIiuB,qHCpUpDK,EAAAr/B,EAAA,IA8DAs/B,EAAA,SAAAp/B,GA6CC,SAAAo/B,IAAA,IAAAn/B,EAGCD,EAAAE,KAAAC,OAAOA,KACPF,EAAKG,UAAY,oBAGjBH,EAAKiY,YAAa,EAClBjY,EAAK4vB,qBAAsB,EAC3B5vB,EAAKc,OAAS,OAGd,IAAIs+B,EAAap/B,EAAKiB,YAAY0a,EAAA,GAClC3b,EAAKo/B,WAAaA,EAClBA,EAAWj+B,aAAc,EACzBi+B,EAAWxjB,QAAU5b,EAAK6b,MAAMtN,IAAI,QACpC6wB,EAAWnnB,YAAa,EACxBjY,EAAKsJ,WAAWC,KAAK61B,GAIrB,IAAIC,EAAer/B,EAAKiB,YAAY0a,EAAA,UACpC3b,EAAKq/B,aAAeA,EACpBA,EAAal+B,aAAc,EAC3Bk+B,EAAazjB,QAAU5b,EAAK6b,MAAMtN,IAAI,QACtC8wB,EAAapnB,YAAa,EAC1BjY,EAAKsJ,WAAWC,KAAK81B,KA8CvB,OArHuCh/B,EAAA,EAAA8+B,EAAAp/B,GAmF/Bo/B,EAAA77B,UAAAqvB,YAAP,SAAmBX,EAAkBU,EAAuB4M,EAAqBC,GAChF,GAAIvN,EAAOptB,OAAS,GAAK8tB,EAAY9tB,OAAS,EAAG,CAChD,IAAIs1B,EAAe0E,EAAA,OAAa5M,EAAO,IAAM,IAAIkN,EAAA,EAAmBI,EAAaC,GAAaC,OAAOxN,GAGrG9xB,KAAKm/B,aAAazjB,QAAQsC,MAAOC,EAAK+b,KAGlCh6B,KAAK4sB,YAAc,GAAK5sB,KAAKk/B,WAAWtS,YAAc,KACzDoN,GAAQ0E,EAAA,OAAalM,EAAY,IAAM,IAAIwM,EAAA,EAAmBI,EAAaC,GAAaC,OAAO9M,GAC/FwH,GAAQ0E,EAAA,OAAa5M,EAAO,IAC5BkI,GAAQ0E,EAAA,YAER1+B,KAAKk/B,WAAWxjB,QAAQsC,MAAOC,EAAK+b,OAUhCiF,EAAA77B,UAAAmN,SAAP,SAAgBC,GACf3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GAEf,IAAI+uB,EAAcv/B,KAAKm/B,aACvBK,EAAA,eAAuBhvB,EAAQ+uB,EAAYtuB,WAAYwK,EAAA,GACvD8jB,EAAY3S,YAAc,EAE1B,IAAI6S,EAAcz/B,KAAKk/B,WACvBM,EAAA,eAAuBhvB,EAAQivB,EAAYxuB,WAAYwK,EAAA,GACvDgkB,EAAYxS,cAAgB,GAE9BgS,EArHA,CAAuCR,EAAA,GA6HvC7D,EAAA,EAASlqB,kBAAqC,kBAAIuuB,oICjGlDS,EAAA,SAAA7/B,GAsCC,SAAA6/B,IAAA,IAAA5/B,EAGCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,cACjBH,EAAKgY,OAAS3W,OAAAu5B,EAAA,EAAAv5B,CAAQ,KACtBrB,EAAKk3B,YAAc71B,OAAAu5B,EAAA,EAAAv5B,CAAQ,GAG3BrB,EAAKI,eA4bP,OA3eiCC,EAAA,EAAAu/B,EAAA7/B,GA0DzB6/B,EAAAt8B,UAAAkrB,aAAP,SAAoB9iB,GACnB,IAAIsM,EAAS9F,EAAA,YAAkBxG,GACnBwG,EAAA,SAAexG,GAK3B,OAAIsM,EAAS9X,KAAK2/B,gBAAkB,GAAK7nB,EAAS9X,KAAKi6B,iBAAmB,GAW3E94B,OAAAkH,eAAWq3B,EAAAt8B,UAAA,kBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,mBAR9B,SAAsBb,GACrBvO,KAAKqP,iBAAiB,aAAcd,GAAO,oCAe5CpN,OAAAkH,eAAWq3B,EAAAt8B,UAAA,gBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAR9B,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,oCAWhCmxB,EAAAt8B,UAAA2qB,gBAAV,SAA0BviB,EAAcwiB,GAElChuB,KAAK0I,SAAU1I,KAAK0I,OAAW1I,KAAK0I,MAAMk3B,uBAAwB5/B,KAAK0I,MAAMmC,QAAQ6M,WACzF1X,KAAK6/B,YAAY7/B,KAAKwL,OAElBxL,KAAK2I,SAAU3I,KAAK2I,OAAW3I,KAAK2I,MAAMi3B,uBAAwB5/B,KAAK2I,MAAMkC,QAAQ6M,WACzF1X,KAAK8/B,YAAY9/B,KAAKwL,OAGvBxL,KAAKstB,kBACLztB,EAAAuD,UAAM2qB,gBAAehuB,KAAAC,KAACwL,EAAOwiB,IAQpB0R,EAAAt8B,UAAAy8B,YAAV,SAAsBr0B,GAErB,IAAIsM,EAAiB9X,KAAKi5B,YACtBvE,EAAqB10B,KAAK00B,WAC1BC,EAAmB30B,KAAK20B,SAE5B,GAAI7c,EAAS,GAAK+O,EAAA,SAAe6N,IAAe7N,EAAA,SAAe8N,GAAW,CAEzE,IAAIqC,EAAsBh3B,KAAKi6B,iBAG3BvkB,EAAgB1D,EAAA,gBAAsBA,EAAA,SAAexG,GAAQkpB,EAAYC,GACzEqF,OAAI,EAER,GAAIh6B,KAAK8sB,OAAS9sB,KAAK8sB,MAAM9iB,QAAS,CAKrC,GAHAhK,KAAK8sB,MAAM/K,QAASzX,EAAG,EAAGC,EAAG,IAGzBvK,KAAK0I,OAAS1I,KAAKsvB,eAAgB,CAEtC,IAAIvG,EAAqB/oB,KAAK0I,MAAM6mB,sBAChCvG,EAAmBhpB,KAAK0I,MAAM8mB,oBAElC,GAAIzG,GAAcC,EAAU,CAC3B,IAAI+W,EAAyB/tB,EAAA,gBAAsBA,EAAA,SAAe+W,GAAa2L,EAAYC,GAGvFsC,EAFuBjlB,EAAA,gBAAsBA,EAAA,SAAegX,GAAW0L,EAAYC,GAEtDoL,EAI7BrL,EAAaC,EACZsC,EAAM,IACTA,GAAO,KAKJA,EAAM,IACTA,GAAO,KAITvhB,GAASuhB,EAAM,EAEf+C,EAAO0E,EAAA,QAAep0B,EAAG0sB,EAAchlB,EAAA,IAAU0D,GAAQnL,EAAGysB,EAAchlB,EAAA,IAAU0D,KACjFgpB,EAAA,QAAep0B,EAAGwN,EAAS9F,EAAA,IAAU0D,GAAQnL,EAAGuN,EAAS9F,EAAA,IAAU0D,KACnEgpB,EAAA,MAAYhpB,EAAOuhB,EAAKnf,GACxB4mB,EAAA,QAAep0B,EAAG0sB,EAAchlB,EAAA,IAAU0D,EAAQuhB,GAAM1sB,EAAGysB,EAAchlB,EAAA,IAAU0D,EAAQuhB,KAC3FyH,EAAA,MAAYhpB,EAAQuhB,GAAMA,EAAKD,IAK/BgD,IACJA,EAAO0E,EAAA,QAAep0B,EAAG0sB,EAAchlB,EAAA,IAAU0D,GAAQnL,EAAGysB,EAAchlB,EAAA,IAAU0D,KAAYgpB,EAAA,QAAep0B,EAAGwN,EAAS9F,EAAA,IAAU0D,GAAQnL,EAAGuN,EAAS9F,EAAA,IAAU0D,MAGpK1V,KAAK8sB,MAAMpR,QAAQsC,MAAOC,EAAK+b,OAUxB0F,EAAAt8B,UAAA08B,YAAV,SAAsBt0B,GACrB,GAAIxL,KAAKktB,OAASltB,KAAKktB,MAAMljB,QAAS,CACrC,IAAI0qB,EAAa10B,KAAK00B,WAClBC,EAAW30B,KAAK20B,SAChBgL,EAAkB3/B,KAAK2/B,gBACvB7nB,EAAS9F,EAAA,WAAiBA,EAAA,YAAkBxG,GAAQ,EAAGxL,KAAK2/B,iBAChE,GAAI9Y,EAAA,SAAe/O,IAAW+O,EAAA,SAAe6N,GAAa,CACzD10B,KAAKktB,MAAMnL,QAASzX,EAAG,EAAGC,EAAG,IAE7B,IAAIyvB,OAAI,EACJ/C,EAActC,EAAWD,EAE7B,GAAI10B,KAAK2I,OAAS3I,KAAKyvB,eAAgB,CAEtC,IAAI1G,EAAqB/oB,KAAK2I,MAAM4mB,sBAChCvG,EAAmBhpB,KAAK2I,MAAM6mB,oBAElC,GAAIzG,GAAcC,EAAU,CAC3B,IAAIgO,EAAsBhlB,EAAA,WAAiBA,EAAA,YAAkB+W,GAAa,EAAG4W,GAC7E7nB,EAAS9F,EAAA,WAAiBA,EAAA,YAAkBgX,GAAW,EAAG2W,GAE1D3F,EAAO0E,EAAA,QAAep0B,EAAGwN,EAAS9F,EAAA,IAAU0iB,GAAanqB,EAAGuN,EAAS9F,EAAA,IAAU0iB,KAAiBgK,EAAA,MAAYhK,EAAYuC,EAAKnf,GAC7HkiB,GAAQ0E,EAAA,QAAep0B,EAAG0sB,EAAchlB,EAAA,IAAU2iB,GAAWpqB,EAAGysB,EAAchlB,EAAA,IAAU2iB,KAAe+J,EAAA,MAAY/J,GAAWsC,EAAKD,IAIhIgD,IACJA,EAAO0E,EAAA,QAAep0B,EAAGwN,EAAS9F,EAAA,IAAU0iB,GAAanqB,EAAGuN,EAAS9F,EAAA,IAAU0iB,KAAiBgK,EAAA,MAAYhK,EAAYC,EAAWD,EAAY5c,IAGhJ9X,KAAKktB,MAAMxR,QAAQsC,MAAOC,EAAK+b,OAU3B0F,EAAAt8B,UAAAkqB,gBAAP,WACC,GAAIttB,KAAKutB,eAAgB,CACxB,IAAIC,EAAoBxtB,KAAKwtB,UAE7B,GAAIA,EAAW,CAEd,IAAIhiB,EAAgBxL,KAAKwL,MAErBsM,EAAiB9X,KAAKi5B,YACtB0G,EAA0B3/B,KAAK2/B,gBAC/B3I,EAAsBh3B,KAAKi6B,iBAE3BvF,EAAqB9mB,KAAKG,IAAI/N,KAAK00B,WAAY10B,KAAK20B,UACpDA,EAAmB/mB,KAAKC,IAAI7N,KAAK00B,WAAY10B,KAAK20B,UAElDqL,EAAoBhuB,EAAA,gBAAsBA,EAAA,SAAewb,GAAYkH,EAAYC,GACjFjf,EAAgB1D,EAAA,gBAAsBA,EAAA,SAAexG,GAAQkpB,EAAYC,GAEzEsL,EAAqBjuB,EAAA,YAAkBwb,GAC3C,GAAIyS,EAAaN,EAAiB,CAEjC,IAAIO,EAAgBluB,EAAA,WAAiBA,EAAA,YAAkBxG,GAAQ,EAAGm0B,GAElE3/B,KAAKmgC,WAAazqB,EAElB,IAAIskB,EAAe0E,EAAA,QAAep0B,EAAG,EAAGC,EAAG,IAEvC61B,EAAkBpuB,EAAA,IAAUguB,GAC5BK,EAAkBruB,EAAA,IAAUguB,GAE5B7G,EAAcnnB,EAAA,IAAU0D,GACxBwjB,EAAclnB,EAAA,IAAU0D,GAExB5I,EAAW9M,KAAK8M,SACJ,SAAZA,GAAmC,WAAZA,EAC1BktB,GAAQ0E,EAAA,QAAep0B,EAAGwN,EAASuoB,EAAS91B,EAAGuN,EAASsoB,IAAa1B,EAAA,MAAYsB,EAAWtqB,EAAQsqB,EAAWloB,GAAU4mB,EAAA,QAAep0B,EAAG0sB,EAAckC,EAAK3uB,EAAGysB,EAAcmC,IAASuF,EAAA,MAAYhpB,EAAOsqB,EAAYtqB,EAAOshB,GAE1M,SAAZlqB,GAAmC,WAAZA,EAC/BktB,EAAO0E,EAAA,QAAep0B,EAAG41B,EAAgBluB,EAAA,IAAU0iB,GAAanqB,EAAG21B,EAAgBluB,EAAA,IAAU0iB,KAAiBgK,EAAA,MAAYhK,EAAYC,EAAWD,EAAYwL,GAAiBxB,EAAA,QAAep0B,EAAG21B,EAAajuB,EAAA,IAAU2iB,GAAWpqB,EAAG01B,EAAajuB,EAAA,IAAU2iB,KAAe+J,EAAA,MAAY/J,EAAUD,EAAaC,EAAUsL,GAAcvB,EAAA,YAElT,UAAZ5xB,IACRktB,EAAO0E,EAAA,QAAep0B,EAAG41B,EAAgBluB,EAAA,IAAUguB,GAAYz1B,EAAG21B,EAAgBluB,EAAA,IAAUguB,KAAgBtB,EAAA,MAAYsB,EAAWtqB,EAAQsqB,EAAWE,GAAiBxB,EAAA,QAAep0B,EAAG21B,EAAajuB,EAAA,IAAU0D,GAAQnL,EAAG01B,EAAajuB,EAAA,IAAU0D,KAAYgpB,EAAA,MAAYhpB,EAAOsqB,EAAYtqB,EAAOuqB,GAAcvB,EAAA,aAGnT1+B,KAAK2sB,UAAUjR,QAAQsC,MAAOC,EAAK+b,IAEpCh6B,KAAK2sB,UAAU5K,QAASzX,EAAG,EAAGC,EAAG,OAQ1Bm1B,EAAAt8B,UAAAw6B,aAAV,WAGC,GADwB59B,KAAK2F,MAClB,CACV,IAAIqxB,EAAch3B,KAAKi6B,iBACnBniB,EAAiB9X,KAAK2/B,gBAAkB3I,EAExCtC,EAAqB10B,KAAK00B,WAC1BC,EAAmB30B,KAAK20B,SAGxBzqB,GADgB8H,EAAA,gBAAsBA,EAAA,SAAehS,KAAKwL,OAAQkpB,EAAYC,GACxDD,IAAeC,EAAWD,GACpD10B,KAAKkK,UAAYA,EAEjBlK,KAAKmK,UAAY6H,EAAA,YAAkBA,EAAA,YAAkBhS,KAAKwL,OAASwrB,GAAelf,EAAQ,EAAG,KASrF4nB,EAAAt8B,UAAAmrB,YAAV,SAAsB/iB,KASZk0B,EAAAt8B,UAAA+rB,uBAAV,SAAiC/pB,GAChC,GAAIpF,KAAK0I,MAAMk3B,qBAAsB,CACpC,IAAI/0B,EAAmB7K,KAAK0I,MAAMmC,QAClC7K,KAAK6/B,YAAYS,EAAA,kBAA0Bh2B,EAAGO,EAAQ4iB,OAAQljB,EAAGM,EAAQ0B,QAAUvM,SAU3E0/B,EAAAt8B,UAAAgsB,uBAAV,SAAiChqB,GAChC,GAAIpF,KAAK2I,MAAMi3B,qBAAsB,CACpC,IAAI/0B,EAAmB7K,KAAK2I,MAAMkC,QAClC7K,KAAK8/B,YAAYQ,EAAA,kBAA0Bh2B,EAAGO,EAAQ4iB,OAAQljB,EAAGM,EAAQ0B,QAAUvM,SAQ3E0/B,EAAAt8B,UAAA6qB,oBAAV,SAA8BziB,KAUpBk0B,EAAAt8B,UAAAwrB,UAAV,WACC,IAAIpB,EAAYxtB,KAAKwtB,UACrB,GAAIA,EAAW,CACd,IAAImB,EAAkB3uB,KAAK2uB,QAG3B,GADwB3uB,KAAK2F,MAClB,CACV,IAAImS,EAAiB9X,KAAKi5B,YACtBvE,EAAqB10B,KAAK00B,WAC1BC,EAAmB30B,KAAK20B,SAExBqL,EAAoBhuB,EAAA,gBAAsBA,EAAA,SAAewb,GAAYxtB,KAAK00B,WAAY10B,KAAK20B,UAC3F4L,EAAkBvuB,EAAA,gBAAsBA,EAAA,SAAe2c,GAAU3uB,KAAK00B,WAAY10B,KAAK20B,UAEvFsL,EAAajuB,EAAA,WAAiBA,EAAA,YAAkBwb,GAAY,EAAG1V,GAC/D0oB,EAAWxuB,EAAA,WAAiBA,EAAA,YAAkB2c,GAAU,EAAG7W,GAE3D+W,EAAiB,EACjBI,EAAe,EAEfH,EAAiB,EACjBI,EAAe,EAEfpiB,EAAW9M,KAAK8M,SACpB,GAAgB,SAAZA,GAAmC,WAAZA,GAAqC,UAAZA,GAAoC,YAAZA,EAAwB,CACnG,IAAImqB,EAActC,EAAWD,EAC7B7F,EAAS7c,EAAA,OAAaguB,EAAYtL,GAAcuC,EAAK,GACrDhI,EAAOjd,EAAA,OAAauuB,EAAU7L,GAAcuC,EAAK,GAGlC,SAAZnqB,GAAmC,WAAZA,GAAqC,UAAZA,GAAoC,YAAZA,IAC3EgiB,EAAS9c,EAAA,MAAYiuB,EAAanoB,EAAQ,GAC1CoX,EAAOld,EAAA,MAAYwuB,EAAW1oB,EAAQ,IAGvC9X,KAAK+M,QAAW/F,MAAO4G,KAAKG,IAAI8gB,EAAQI,GAAOhoB,IAAK2G,KAAKC,IAAIghB,EAAQI,IACrEjvB,KAAKkN,QAAWlG,MAAO4G,KAAKG,IAAI+gB,EAAQI,GAAOjoB,IAAK2G,KAAKC,IAAIihB,EAAQI,IAEhD,WAAjBlvB,KAAK8M,UAA0C,WAAjB9M,KAAK8M,UAA0C,YAAjB9M,KAAK8M,UAIpE9M,KAAK2sB,UAAUzpB,UAcZw8B,EAAAt8B,UAAA+pB,WAAP,aAQAhsB,OAAAkH,eAAWq3B,EAAAt8B,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,oCAgBjCpN,OAAAkH,eAAWq3B,EAAAt8B,UAAA,mBAAX,WACC,OAAOk9B,EAAA,sBAA6BtgC,KAAK8X,OAAQ9X,KAAK2/B,kDAUvDx+B,OAAAkH,eAAWq3B,EAAAt8B,UAAA,uBAAX,WACC,OAAOk9B,EAAA,gBAAuBn/B,OAAAu5B,EAAA,EAAAv5B,CAAQ,KAAM6Q,EAAA,IAAUhS,KAAKqtB,WAAa,EAAGrtB,KAAKotB,YAAc,qCAS/FjsB,OAAAkH,eAAWq3B,EAAAt8B,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,oCAgBtCpN,OAAAkH,eAAWq3B,EAAAt8B,UAAA,wBAAX,WAEC,IAAI4zB,EAAch3B,KAAKg3B,YAMvB,OAJIA,aAAuB0D,EAAA,IAC1B1D,EAAc71B,OAAAu5B,EAAA,EAAAv5B,CAAQ,IAAM61B,EAAYzoB,MAAQvO,KAAK2F,MAAMy1B,sBAGrDkF,EAAA,sBAA6BtJ,EAAah3B,KAAK2/B,kBAAoB,mCASjED,EAAAt8B,UAAA4U,SAAV,SAAmBxM,GAElB,OAAOA,GAETk0B,EA3eA,CAAiCe,EAAA,GAmfjC7F,EAAA,EAASlqB,kBAA+B,YAAIgvB,sJC7kB5ClH,EAAA74B,EAAA,GAqHA+gC,EAAA,SAAA7gC,GA2CC,SAAA6gC,IAAA,IAAA5gC,EAGCD,EAAAE,KAAAC,OAAOA,YAfEF,EAAA0c,OAAS,IAAImkB,EAAA,EAKhB7gC,EAAA44B,gBAA0B,EAWhC54B,EAAKG,UAAY,qBACjBH,EAAKiY,YAAa,EAClBjY,EAAK40B,YAAc,GACnB50B,EAAK60B,SAAW,IAChB70B,EAAKwS,gBAAkB,GACvBxS,EAAK8gC,SAAW,UAChB9gC,EAAK+gC,WAAa,GAClB/gC,EAAKiY,YAAa,EAClBjY,EAAKc,OAAS,OAEdd,EAAKgY,OAAS3W,OAAA2/B,EAAA,EAAA3/B,CAAQ,KAEtBrB,EAAKkzB,KAAK/F,cAAgB,EAE1BntB,EAAKgsB,OAAOf,SAASuM,iBAAmB,SAExCx3B,EAAKsJ,WAAWC,KAAKvJ,EAAK0c,QAE1B1c,EAAKI,eA0dP,OA3hBwCC,EAAA,EAAAugC,EAAA7gC,GAyEhC6gC,EAAAt9B,UAAAiJ,SAAP,WAEKrM,KAAK2F,OAAS3F,KAAK2F,MAAMyG,SAC5BpM,KAAK2F,MAAM0G,WAGZxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,OAQfmB,OAAAkH,eAAWq4B,EAAAt9B,UAAA,kBAAX,WACC,OAAOpD,KAAKi5B,YAAcj5B,KAAKi6B,kDAUhC94B,OAAAkH,eAAWq4B,EAAAt9B,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,oCAejCpN,OAAAkH,eAAWq4B,EAAAt9B,UAAA,mBAAX,WACC,OAAO41B,EAAA,sBAA6Bh5B,KAAK8X,OAAQ9X,KAAK04B,kBAAoB,mCAU3Ev3B,OAAAkH,eAAWq4B,EAAAt9B,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,oCAetCpN,OAAAkH,eAAWq4B,EAAAt9B,UAAA,wBAAX,WACC,OAAO41B,EAAA,sBAA6Bh5B,KAAKg3B,YAAah3B,KAAK04B,kBAAoB,mCAShFv3B,OAAAkH,eAAWq4B,EAAAt9B,UAAA,aAQX,WACC,OAAOpD,KAAKwc,OAAOiC,WATpB,SAAiB9Y,GAChB3F,KAAKwc,OAAOuC,IAAIpZ,EAAO,uCAiBjB+6B,EAAAt9B,UAAAiR,gBAAP,SAAuBvJ,GACtB,IAAIgN,EAAiB6V,EAAA,WAAiB3tB,KAAKs5B,qBAAqBxuB,GAAW,EAAGyU,KAC9E,OAASjV,EAAGwN,EAAS6V,EAAA,IAAU3tB,KAAK6gC,WAAYt2B,EAAGuN,EAAS6V,EAAA,IAAU3tB,KAAK6gC,aAQrEH,EAAAt9B,UAAAm2B,eAAP,WACCv5B,KAAKgzB,KAAKtX,QAAQsC,MAAOC,EAAKub,EAAA,QAAelvB,EAAGtK,KAAKi6B,iBAAmBtM,EAAA,IAAU3tB,KAAK6gC,WAAYt2B,EAAGvK,KAAKi6B,iBAAmBtM,EAAA,IAAU3tB,KAAK6gC,aAAgBrH,EAAA,QAAelvB,EAAGtK,KAAKi5B,YAActL,EAAA,IAAU3tB,KAAK6gC,WAAYt2B,EAAGvK,KAAKi5B,YAActL,EAAA,IAAU3tB,KAAK6gC,eAElQ,IAAIE,EAAQ/gC,KAAKqE,KAAK08B,MACtBA,EAAMl+B,OAAS,OACfk+B,EAAMzJ,iBAAmB,SACzByJ,EAAM3J,eAAiB,SACvB2J,EAAMx2B,GAAMvK,KAAKqS,WAAa,EAC9B,IAAIuG,EAAmB,GACnB5Y,KAAK4H,SACH5H,KAAKqY,SACTO,GAAY,IAIT5Y,KAAKqY,SACRO,GAAY,IAGdmoB,EAAMnoB,SAAWA,GAWX8nB,EAAAt9B,UAAAqR,kBAAP,SAAyBD,EAAY1J,EAAkBmJ,GACtDnJ,IAAuBmJ,EAAcnJ,GAAY0J,EAAKJ,SACtD,IACI4lB,EADAxuB,EAAgBxL,KAAKqU,gBAAgBvJ,GAErCgN,EAAiB6V,EAAA,YAAkBniB,GACnCkpB,EAAqB10B,KAAK00B,WAC1BC,EAAmB30B,KAAK20B,SAE5B,GAAI6D,EAAA,SAAe1gB,IAAWtD,EAAKkH,QAAS,CAC3C,IAAI/V,EAAQ3F,KAAK2F,MACb+C,EAAQ/C,EAAMvB,MAAM4I,SAAS,GAC7BiY,EAAQtf,EAAMgH,UAAUjI,OACxBX,EAAS4B,EAAM5B,OAAOiJ,SAAS,GAInC,GAAqB,YAAjBhN,KAAK4gC,UAA0B3b,EAAQ,GAAKlhB,GAAU2E,GAASA,aAAiBs4B,EAAA,EAAc,CACjG,IAAIC,EAAev4B,EAAM9C,SAAS4O,KAAKuW,SAAS3W,SAE5CsB,EAAgBhN,EAAMoO,SAAS/S,EAAO4I,UAAUK,SAAS,GAAI,YAAai0B,GAC9EjH,EAAOR,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAUjY,GAAQnL,EAAGuN,EAAS6V,EAAA,IAAUjY,KAG1E,IAFA,IAAIwrB,EAAgBv7B,EAAMgH,UAAUjI,OAE3BuH,EAAI,EAAGA,EAAIi1B,EAAOj1B,IAC1ByJ,EAAQhN,EAAMoO,SAAS/S,EAAO4I,UAAUK,SAASf,GAAI,YAAag1B,GAClEjH,GAAQR,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAUjY,GAAQnL,EAAGuN,EAAS6V,EAAA,IAAUjY,KAG5EA,EAAQhN,EAAMoO,SAAS/S,EAAO4I,UAAUK,SAASk0B,EAAQ,GAAI,YAAax4B,EAAM9C,SAASyP,iBACzF2kB,GAAQR,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAUjY,GAAQnL,EAAGuN,EAAS6V,EAAA,IAAUjY,UAG3EskB,EAAOR,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAU+G,GAAanqB,EAAGuN,EAAS6V,EAAA,IAAU+G,KAAiB8E,EAAA,MAAY9E,EAAYC,EAAWD,EAAY5c,EAAQA,GAExJtD,EAAKkH,QAAQsC,MAAOC,EAAK+b,IAG1Bh6B,KAAK05B,iBAAiBllB,EAAM1J,EAAU,EAAG,IAWnC41B,EAAAt9B,UAAAsR,mBAAP,SAA0BpI,EAA2BxB,EAAkBmJ,GAEtEnJ,IAAuBmJ,EAAcnJ,GAAYwB,EAAM8H,SAEvD,IAAI5I,EAAgBxL,KAAKqU,gBAAgBvJ,GAEzC9K,KAAK45B,aAAattB,EAAOd,GACzBxL,KAAK05B,iBAAiBptB,EAAOxB,EAAU9K,KAAK65B,iBAAkB75B,KAAK85B,mBAQ7D4G,EAAAt9B,UAAA+9B,sBAAP,aAWOT,EAAAt9B,UAAAkrB,aAAP,SAAoB9iB,GACnB,OAAO,GAQRrK,OAAAkH,eAAWq4B,EAAAt9B,UAAA,kBASX,WACC,OAAOpD,KAAKoP,iBAAiB,mBAV9B,SAAsBb,GAErBvO,KAAKqP,iBAAiB,aAAcd,GACpCvO,KAAKohC,uDAeNjgC,OAAAkH,eAAWq4B,EAAAt9B,UAAA,gBASX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAV9B,SAAoBb,GAEnBvO,KAAKqP,iBAAiB,WAAYd,GAClCvO,KAAKohC,uDAeNjgC,OAAAkH,eAAWq4B,EAAAt9B,UAAA,iBAQX,WACC,OAAOpD,KAAKoP,iBAAiB,kBAT9B,SAAqBb,GACpBvO,KAAKqP,iBAAiB,YAAase,EAAA,eAAqBpf,IACxDvO,KAAKohC,uDAsBNjgC,OAAAkH,eAAWq4B,EAAAt9B,UAAA,gBAOX,WAEC,OADiBpD,KAAK2F,MAAMvB,MAAM4I,SAAS,aACvBg0B,EAAA,EACZhhC,KAAKoP,iBAAiB,YAGtB,eAbT,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,oCA0BnCmyB,EAAAt9B,UAAAkT,qBAAP,SAA4Be,EAAuBpD,GAClD,IAUI+lB,EAVAC,EAAmBj6B,KAAKi6B,iBACxBhB,EAAcj5B,KAAKqS,WAAa4nB,EAChCjD,EAAsBrJ,EAAA,WAAiB3tB,KAAKs5B,qBAAqBjiB,GAAgB4iB,EAAkBhB,GACnGnhB,EAAiB6V,EAAA,WAAiB3tB,KAAKs5B,qBAAqBrlB,GAAcgmB,EAAkBhB,GAG5FvE,EAAqB10B,KAAK00B,WAE1BuC,EADmBj3B,KAAK20B,SACCD,EAIzB/uB,EAAQ3F,KAAK2F,MACb+C,EAAQ/C,EAAMvB,MAAM4I,SAAS,GAC7BiY,EAAQtf,EAAMgH,UAAUjI,OACxBX,EAAS4B,EAAM5B,OAAOiJ,SAAS,GAInC,GAAqB,YAAjBhN,KAAK4gC,UAA0B3b,EAAQ,GAAKlhB,GAAU2E,GAASA,aAAiBs4B,EAAA,EAAc,CACjG,IAAIC,EAAev4B,EAAM9C,SAAS4O,KAAKuW,SAAS3W,SAE5CsB,EAAgBhN,EAAMoO,SAAS/S,EAAO4I,UAAUK,SAAS,GAAI,YAAai0B,GAC9EjH,EAAOR,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAUjY,GAAQnL,EAAGuN,EAAS6V,EAAA,IAAUjY,KAG1E,IAFA,IAAI2rB,EAAgB17B,EAAMgH,UAAUjI,OAE3BuH,EAAI,EAAGA,EAAIo1B,EAAOp1B,IAC1ByJ,EAAQhN,EAAMoO,SAAS/S,EAAO4I,UAAUK,SAASf,GAAI,YAAag1B,GAClEjH,GAAQR,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAUjY,GAAQnL,EAAGuN,EAAS6V,EAAA,IAAUjY,KAG5EA,EAAQhN,EAAMoO,SAAS/S,EAAO4I,UAAUK,SAASq0B,EAAQ,GAAI,YAAa34B,EAAM9C,SAASyP,iBACzF2kB,GAAQR,EAAA,QAAelvB,EAAGwN,EAAS6V,EAAA,IAAUjY,GAAQnL,EAAGuN,EAAS6V,EAAA,IAAUjY,KAE3EskB,GAAQR,EAAA,QAAelvB,EAAG0sB,EAAcrJ,EAAA,IAAUjY,GAAQnL,EAAGysB,EAAcrJ,EAAA,IAAUjY,KAErF,IAASzJ,EAAIo1B,EAAQ,EAAGp1B,GAAK,EAAGA,IAC/ByJ,EAAQhN,EAAMoO,SAAS/S,EAAO4I,UAAUK,SAASf,GAAI,YAAag1B,GAClEjH,GAAQR,EAAA,QAAelvB,EAAG0sB,EAAcrJ,EAAA,IAAUjY,GAAQnL,EAAGysB,EAAcrJ,EAAA,IAAUjY,UAItFskB,EAAOR,EAAA,IAAU9E,EAAYuC,EAAKnf,EAAQkf,GAE3C,OAAOgD,GASD0G,EAAAt9B,UAAAk+B,mBAAP,SAA0BhuB,GAGzB,IAAI0X,EAAsC1X,EAAU0X,UAChDC,EAAoC3X,EAAU2X,QAC9CC,EAAsC5X,EAAU4X,UAEhDnC,EAAqBzV,EAAUyV,WAC/BC,EAAmB1V,EAAU0V,SAEjCgC,EAAUlT,OAASlK,KAAK8c,IAAI3B,EAAWxe,GACvC0gB,EAAQnT,OAASlK,KAAK8c,IAAI1B,EAASze,GACnC2gB,EAAUpT,OAASlK,KAAK8c,IAAI1B,EAASze,GACrC2gB,EAAU8L,YAAcppB,KAAK8c,IAAI3B,EAAWxe,IAStCm2B,EAAAt9B,UAAAm+B,mBAAP,SAA0BjuB,GACzBA,EAAU0X,UAAY,IAAIwW,EAAA,EAC1BluB,EAAU2X,QAAU,IAAIuW,EAAA,EACxBluB,EAAU4X,UAAY,IAAIsW,EAAA,GAUpBd,EAAAt9B,UAAAq+B,cAAP,WAEC,GADiBzhC,KAAKqE,KACZ,CAET,IAKIw8B,EAAoB7gC,KAAK6gC,UACzBA,EAAY,IACfA,GAAa,KAEd,IAAIa,EAAyC,YACxCb,EAAY,IAAMA,EAAY,KAASA,EAAY,KAAOA,EAAY,OAC1Ea,EAAqB,cAEtB1hC,KAAKqE,KAAKo9B,cAAcC,GAAsBp3B,GAZ3B,IAYmCC,GAXnC,IAW2CrJ,MAV5CygC,IAUwDngC,OATxDmgC,QAoBbjB,EAAAt9B,UAAAmR,kBAAP,SAAyBD,EAAgBxJ,GACxC,IAAIU,EAAgBxL,KAAKqU,gBAAgBvJ,GACzC,GAAIwJ,EAAKoH,QAAS,CACjB,IAAIhG,EAAgBiY,EAAA,eAAqB3tB,KAAK6gC,UAAY,IACtDnrB,EAAQ,IAAM9H,KAAKiB,MAAM6G,EAAQ,IACpCpB,EAAKukB,cAAe,EAGpBvkB,EAAKukB,cAAe,EAErB,IAAIc,GAAcrlB,EAAK5P,OACnB4P,EAAK+D,SACRshB,IAAe,GAEhBrlB,EAAKoH,QAAQsC,MAAOC,EAAKub,EAAA,QAAelvB,EAAG,EAAGC,EAAG,IAAOivB,EAAA,QAAelvB,EAAGqvB,EAAahM,EAAA,IAAUjY,GAAQnL,EAAGovB,EAAahM,EAAA,IAAUjY,OAEpI1V,KAAK45B,aAAatlB,EAAM9I,GAExBxL,KAAK05B,iBAAiBplB,EAAMxJ,EAAU,EAAG,IAUnC41B,EAAAt9B,UAAAk2B,qBAAP,SAA4BxuB,GAC3B,IAAIuuB,EACAh1B,EAAarE,KAAKqE,KAClBu9B,EAAiBv9B,EAAKu9B,eACtB5K,EAAch3B,KAAKi6B,iBASvB,OANCZ,EADGh1B,EAAKuB,SAAS+B,UACHtD,EAAK4C,IAAM6D,GAAY82B,EAAiB5K,GAGxClsB,EAAWzG,EAAK2C,OAAS46B,EAAiB5K,EAGlDrJ,EAAA,MAAY0L,EAAY,IAEjCqH,EA3hBA,CAAwCmB,EAAA,GAmiBxCtF,EAAA,EAAS7rB,kBAAsC,mBAAIgwB,4ICxpBnD7Q,EAAAlwB,EAAA,GA8GAmiC,EAAA,SAAAjiC,GA0DC,SAAAiiC,IAAA,IAAAhiC,EAGCD,EAAAE,KAAAC,OAAOA,KAhBEF,EAAAiiC,MAAoC,IAAIpB,EAAA,EAiBjD7gC,EAAKG,UAAY,YAEjB,IAAIwsB,EAAkB,IAAIuV,EAAA,EAE1BliC,EAAK8I,KAAO6jB,EAAgBI,OAAO,yBACnC/sB,EAAKiJ,OAASjJ,EAAK8I,KAEnB,IAAIq5B,EAAc,IAAIC,EAAA,EACtBD,EAAInqB,OAAS,EACbhY,EAAKmiC,IAAMA,EACXniC,EAAKiY,YAAa,EAElBjY,EAAKqiC,WAAa,EAClBriC,EAAKsiC,SAAW,EAEhBtiC,EAAKoB,MAAQC,OAAA2/B,EAAA,EAAA3/B,CAAQ,KACrBrB,EAAK0B,OAASL,OAAA2/B,EAAA,EAAA3/B,CAAQ,KAEtBrB,EAAKgY,OAAS3W,OAAA2/B,EAAA,EAAA3/B,CAAQ,KACtBrB,EAAKk3B,YAAc71B,OAAA2/B,EAAA,EAAA3/B,CAAQ,GAE3B,IAAIkhC,EAAkB,IAAIC,EAAA,SAC1BxiC,EAAKuiC,KAAOA,EAEZviC,EAAKsJ,WAAWC,KAAKvJ,EAAKiiC,OAG1BjiC,EAAKI,eAkSP,OA3X+BC,EAAA,EAAA2hC,EAAAjiC,GAiGvBiiC,EAAA1+B,UAAAiJ,SAAP,WACCxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,MACd,IAAIqiC,EAAOriC,KAAKqiC,KAChBA,EAAKnhC,MAAQlB,KAAKiL,WAClB,IAAI4iB,EAAYjgB,KAAKC,IAAI7N,KAAKmiC,WAAYniC,KAAKoiC,UAK/C,GAJAC,EAAK7gC,OAASqsB,EACdwU,EAAKE,SAAWphC,OAAA2/B,EAAA,EAAA3/B,CAAQnB,KAAKmiC,WAAatU,EAAI,KAC9CwU,EAAKG,UAAYrhC,OAAA2/B,EAAA,EAAA3/B,CAAQnB,KAAKoiC,SAAWvU,EAAI,KAEzC7tB,KAAKqE,KAAM,CACd,IAAIuB,EAAuD5F,KAAKqE,KAAKuB,SAEjE68B,EAAapT,EAAA,sBAA6BrvB,KAAKg3B,YAAapxB,EAASqzB,aACrEyJ,EAAarT,EAAA,sBAA6BrvB,KAAK8X,OAAQlS,EAASqzB,aAEpEoJ,EAAK/3B,EAAIm4B,EACTJ,EAAK93B,GAAMsjB,EAAI,EAEfwU,EAAKnhC,MAAQwhC,EAAKD,IASpBthC,OAAAkH,eAAWy5B,EAAA1+B,UAAA,WAcX,WACC,OAAOpD,KAAK2iC,UAfb,SAAeV,GACVjiC,KAAK2iC,MACR3iC,KAAKmJ,cAAcnJ,KAAK2iC,MAErBV,IACHjiC,KAAK2iC,KAAOV,EACZA,EAAIz/B,OAASxC,KACbA,KAAKoJ,WAAWC,KAAK44B,qCAqBvB9gC,OAAAkH,eAAWy5B,EAAA1+B,UAAA,YAcX,WACC,OAAOpD,KAAK4iC,WAfb,SAAgBP,GACXriC,KAAK4iC,OACR5iC,KAAKmJ,cAAcnJ,KAAK4iC,OAErBP,IACHriC,KAAK4iC,MAAQP,EACbA,EAAK7/B,OAASxC,KACdA,KAAKoJ,WAAWC,KAAKg5B,qCAmBvBlhC,OAAAkH,eAAWy5B,EAAA1+B,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAkBxCpN,OAAAkH,eAAWy5B,EAAA1+B,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GAAO,oCAgB7CpN,OAAAkH,eAAWy5B,EAAA1+B,UAAA,kBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,mBAR9B,SAAsBb,GACrBvO,KAAKqP,iBAAiB,aAAcd,GAAO,oCAgB5CpN,OAAAkH,eAAWy5B,EAAA1+B,UAAA,gBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAR9B,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,oCAiB1CpN,OAAAkH,eAAWy5B,EAAA1+B,UAAA,yBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,0BAR9B,SAA6Bb,GAC5BvO,KAAKqP,iBAAiB,oBAAqBd,oCAsBrCuzB,EAAA1+B,UAAAy/B,UAAP,SAAiBt0B,EAAY4T,EAAmB2gB,GAE/C,GADA9iC,KAAK+iC,OAASx0B,OACD1J,GAAT0J,IACEshB,EAAA,SAAe1N,KACnBA,EAAW,GAGRniB,KAAKqE,MAAM,CACd,IACI2+B,EADiChjC,KAAKqE,KAAKuB,SACvB+P,gBAAgB3V,KAAKqE,KAAKwR,cAActH,IAC5D00B,EAAejjC,KAAK4Y,SAEM,aAA1B5Y,KAAKkjC,mBACJF,EAAWC,IACdjjC,KAAK4Y,SAAWqqB,EAAe,KAGH,oBAA1BjjC,KAAKkjC,mBACJF,EAAWC,IACdjjC,KAAK4Y,SAAWqqB,EAAe,KAIjCjjC,KAAKmjC,SAAU9K,SAAU,WAAY+K,GAAIJ,GAAY7gB,EAAU2gB,KAUlE3hC,OAAAkH,eAAWy5B,EAAA1+B,UAAA,aAOX,WACC,OAAOpD,KAAK+iC,YARb,SAAiBx0B,GAChBvO,KAAK6iC,UAAUt0B,oCAiBhBpN,OAAAkH,eAAWy5B,EAAA1+B,UAAA,YAsBX,WACC,OAAOpD,KAAK+hC,MAAMtjB,WAvBnB,SAAgBpa,GAAhB,IAAAvE,EAAAE,KASC,GARIA,KAAKqE,MAAQA,GAChBrE,KAAK+hC,MAAMhjB,IAAI1a,EAAM,IAAIs8B,EAAA,GACxBt8B,EAAKvC,OAAOC,GAAG,gBAAiB,WAAM,OAAAjC,EAAKujC,gBAC3Ch/B,EAAKvC,OAAOC,GAAG,mBAAoB,WAAM,OAAAjC,EAAKujC,gBAC9Ch/B,EAAKvC,OAAOC,GAAG,gBAAiB,WAAM,OAAAjC,EAAKujC,gBAC3Ch/B,EAAKvC,OAAOC,GAAG,kBAAmB,WAAM,OAAAjC,EAAKmE,kBAG3CI,EAAM,CACT,IAAIsB,EAAgCtB,EAAKsB,MACrCA,IACH3F,KAAK4Y,SAAWjT,EAAM+uB,YAGxB10B,KAAKwC,OAAS6B,EAAKuB,SACnB5F,KAAKqB,OAAS,mCAgBLygC,EAAA1+B,UAAAigC,YAAV,WACCrjC,KAAKuO,MAAQvO,KAAKuO,OASZuzB,EAAA1+B,UAAAuM,cAAP,SAAqBC,GAEhBA,GAGCigB,EAAA,SAAejgB,EAAOvL,OAASwrB,EAAA,SAAejgB,EAAOvL,OAASrE,KAAK2jB,IAAIC,OAAOhU,EAAOvL,QACxFuL,EAAOvL,KAAOrE,KAAK2jB,IAAI3O,OAAOpF,EAAOvL,OAKvCxE,EAAAuD,UAAMuM,cAAa5P,KAAAC,KAAC4P,IAGtBkyB,EA3XA,CAA+BrD,EAAA,GAmY/BlC,EAAA,EAAS7rB,kBAA6B,UAAIoxB,qKCjf1CjF,EAAAl9B,EAAA,GAqCA2jC,EAAA,SAAAzjC,GAYC,SAAAyjC,IAAA,IAAAxjC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,mBACjBH,EAAKI,eAGP,OAlBsCC,EAAA,EAAAmjC,EAAAzjC,GAkBtCyjC,EAlBA,CAAsCljC,EAAA,GA8KtCmjC,EAAA,SAAA1jC,GA6CC,SAAA0jC,IAAA,IAAAzjC,EAGCD,EAAAE,KAAAC,OAAOA,KACPF,EAAKG,UAAY,WAGjBH,EAAKk3B,YAAc,EACnBl3B,EAAKgY,OAAS3W,OAAAu5B,EAAA,EAAAv5B,CAAQ,IACtBrB,EAAK8C,MAAQ,OACb9C,EAAK+C,OAAS,OAEd/C,EAAK40B,YAAc,GACnB50B,EAAK60B,SAAW,IAEhB,IAAIpyB,EAAkBzC,EAAKyC,uBAC3BA,EAAgBwV,YAAa,EAC7BxV,EAAgBM,OAAS,SACzBN,EAAgBK,MAAQ,SACxBL,EAAgB3B,OAAS,WACzB2B,EAAgBrB,WAAQ2D,EACxBtC,EAAgBf,YAASqD,EAGzB/E,EAAKa,eAAe6iC,UAAY,GAChC1jC,EAAKa,eAAeiE,SAAW,GAE/B9E,EAAKa,eAAemB,OAAOC,GAAG,iBAAkB,WAC/CjC,EAAKmE,eAINnE,EAAKI,eA4QP,OAzV8BC,EAAA,EAAAojC,EAAA1jC,GAoFnB0jC,EAAAngC,UAAAC,sBAAV,WAECxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MAItB68B,EAAA,SAAe78B,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,eAStC8/B,EAAAngC,UAAAiJ,SAAP,WACCxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,MACdA,KAAKyjC,gBAQCF,EAAAngC,UAAAc,aAAP,WACCrE,EAAAuD,UAAMc,aAAYnE,KAAAC,MAClBA,KAAK0jC,cAQCH,EAAAngC,UAAAqgC,aAAP,eAAA3jC,EAAAE,KAEK2jC,EAAY3jC,KAAKW,eAEjBg7B,EAAOhO,EAAA,WAAiB3tB,KAAK00B,WAAY10B,KAAK20B,SAAU,GACxDkH,GAA0BvxB,EAAG,EAAGC,EAAG,EAAGrJ,MAAO,EAAGM,OAAQ,GAExDw1B,EAAch3B,KAAKg3B,YAEnBA,aAAuB0D,EAAA,IAC1BmB,EAAYlO,EAAA,WAAiB3tB,KAAK00B,WAAY10B,KAAK20B,SAAUqC,EAAYzoB,QAI1EotB,EAAOhO,EAAA,oBAA0BgO,EAAME,IAEvC,IAAII,EAAYruB,KAAKG,IAAI41B,EAAUtW,WAAasO,EAAKz6B,MAAOyiC,EAAUvW,YAAcuO,EAAKn6B,QAErFsW,EAASwoB,EAAA,sBAA6BtgC,KAAK8X,OAAQmkB,GACnDhC,EAAmBqG,EAAA,sBAA6BtgC,KAAKg3B,YAAaiF,GAElE2H,GAAgB9rB,EAASmiB,GAAoBj6B,KAAK+D,OAAOW,OAE7Dm/B,EAAA,KAAWA,EAAA,QAAc7jC,KAAK+D,OAAOC,YAAa,SAAC2H,GAClD,IAAIM,EAAIN,EAAE,GACN5H,EAAS4H,EAAE,GAEf5H,EAAO+T,OAASmiB,EAAmB2J,GAAgB33B,EAAI,GACvDlI,EAAOizB,YAAciD,EAAmB2J,EAAe33B,EACvDlI,EAAO2wB,WAAa50B,EAAK40B,WACzB3wB,EAAO4wB,SAAW70B,EAAK60B,YAOf4O,EAAAngC,UAAAsgC,WAAV,WACC,IAAII,EAAS9jC,KAAK8jC,OAClB,GAAIA,EAAQ,CACX,IAAIC,KAEJF,EAAA,KAAW7jC,KAAK+D,OAAOC,WAAY,SAACD,GACnC8/B,EAAA,KAAW9/B,EAAO4I,UAAU3I,WAAY,SAACkP,GACxC6wB,EAAW16B,KAAwB6J,GAEnC,IAAI8wB,EAAiBjgC,EAAOigC,eACxBA,IACCA,EAAeC,YAClBH,EAAOhY,OAAOf,SAASla,KAAOmzB,EAAeC,WAE1CD,EAAeE,gBAClBJ,EAAOhY,OAAOf,SAASla,KAAOmzB,EAAeE,eAE1CF,EAAeG,YAClBL,EAAOM,YAAYrZ,SAASla,KAAOmzB,EAAeG,WAE/CH,EAAeK,gBAClBP,EAAOM,YAAYrZ,SAASla,KAAOmzB,EAAeK,oBAMtDP,EAAOr/B,KAAOs/B,EACdD,EAAOr0B,WAAWyM,KAAO,WACzB4nB,EAAOQ,eAAevZ,SAASwZ,eAAe7sB,SAAW,mBA+B3DvW,OAAAkH,eAAWk7B,EAAAngC,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAqBxCpN,OAAAkH,eAAWk7B,EAAAngC,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GAAO,oCAenCg1B,EAAAngC,UAAA+M,aAAV,WACC,OAAO,IAAIq0B,EAAA,GAyBZrjC,OAAAkH,eAAWk7B,EAAAngC,UAAA,kBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,mBAR9B,SAAsBb,GACrBvO,KAAKqP,iBAAiB,aAAcd,GAAO,oCA8B5CpN,OAAAkH,eAAWk7B,EAAAngC,UAAA,gBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAR9B,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,oCAahCg1B,EAAAngC,UAAAqhC,UAAV,SAAoBX,GACnBjkC,EAAAuD,UAAMqhC,UAAS1kC,KAAAC,KAAC8jC,GACZA,IACHA,EAAOhY,OAAOf,SAASla,KAAO,aAC9BizB,EAAOM,YAAYrZ,SAASla,KAAO,uCAEnCizB,EAAOQ,eAAevZ,SAASjpB,OAAOC,GAAG,OAAQ,SAACqD,GACjD,IAAIs/B,EAA0Dt/B,EAAME,OAAO4N,SAAS4B,YAChF4vB,EAAkB16B,UAAY06B,EAAkBz6B,WACnDy6B,EAAkB5Q,MAAM6Q,SAAU,KAIpCb,EAAOQ,eAAevZ,SAASjpB,OAAOC,GAAG,MAAO,SAACqD,GACcA,EAAME,OAAO4N,SAAS4B,YAClEgf,MAAM6Q,SAAU,MAItCpB,EAzVA,CAA8BnjC,EAAA,GAiW9B2vB,EAAA,EAASrf,kBAA4B,SAAI6yB,EACzCxT,EAAA,EAASrf,kBAAoC,iBAAI4yB,gGCrjBjD1I,EAAAj7B,EAAA,GAyDAilC,EAAA,SAAA/kC,GA2CC,SAAA+kC,IAAA,IAAA9kC,EACCD,EAAAE,KAAAC,OAAOA,YAbEF,EAAAs0B,OAAS,IAAIyQ,EAAA,EAOb/kC,EAAAu0B,OAAS,IAAIwQ,EAAA,EAOtB/kC,EAAKG,UAAY,UACjBH,EAAK4b,QAAU5b,EAAK6b,MAAMtN,IAAI,YAC9BvO,EAAKsJ,WAAWC,KAAKvJ,EAAKs0B,QAC1Bt0B,EAAKsJ,WAAWC,KAAKvJ,EAAKu0B,QAC1Bv0B,EAAKI,eAqFP,OAtI6BC,EAAA,EAAAykC,EAAA/kC,GAyDrB+kC,EAAAxhC,UAAAM,KAAP,WACC7D,EAAAuD,UAAMM,KAAI3D,KAAAC,MAEV,IAAI8zB,EAAe9zB,KAAK8zB,MACpBxnB,EAAQtM,KAAKsM,MAEbvI,EAAoB+vB,EAAM5gB,SAASxB,UAEvC,GAAIoiB,GAASA,EAAMhc,OAAS,GAAKxL,GAASA,EAAMuE,KAAM,CACrD,IAAI4xB,EAAK3O,EAAMrb,GAAKqb,EAAMA,MAAMrb,GAAKqb,EAAMrG,OAASqG,EAAM2D,GAAK3D,EAAMhc,OAASgc,EAAM+B,MAChFiP,EAAKhR,EAAMvb,GAAKub,EAAMA,MAAMvb,GAAKub,EAAMvnB,OAASunB,EAAM0D,GAAK1D,EAAMhc,OAASgc,EAAM+B,MAEhF6M,OAAE,EACFqC,OAAE,EAEF7R,OAAE,EACF8R,OAAE,EAEFjhC,EAAO0wB,aACViO,EAAKp2B,EAAMmhB,OAASztB,KAAK0E,OACzBqgC,EAAKz4B,EAAMC,OAEX2mB,EAAK5mB,EAAMmhB,OACXuX,EAAKD,EAEyB,SAA1Bz4B,EAAMgrB,mBAETpE,GADAwP,GAAM,EAAI1iC,KAAK0E,QACL1E,KAAK0E,UAOhBwuB,EAHAwP,EAAKD,EAAKn2B,EAAMwL,OAASgc,EAAM2D,GAI/BuN,EAHAD,EAAKD,EAAKx4B,EAAMwL,OAASgc,EAAM0D,IAMhCx3B,KAAK0b,QAAQsC,MAAO8T,QAAW2Q,EAAIqC,EAAIpC,EAAIqC,EAAI7R,EAAI8R,OASrD7jC,OAAAkH,eAAWu8B,EAAAxhC,UAAA,aAUX,WACC,OAAOpD,KAAKq0B,OAAO5V,WAXpB,SAAiBqV,GAChB9zB,KAAKq0B,OAAOtV,IAAI+U,EAAO,IAAI+Q,EAAA,GAC1B/Q,EAAMhyB,OAAOC,GAAG,cAAe/B,KAAKiE,WAAYjE,MAChD8zB,EAAMhyB,OAAOC,GAAG,YAAa/B,KAAKiE,WAAYjE,0CAgBhDmB,OAAAkH,eAAWu8B,EAAAxhC,UAAA,aAOX,WACC,OAAOpD,KAAKo0B,OAAO3V,WARpB,SAAiBnS,GAChBtM,KAAKo0B,OAAOrV,IAAIzS,EAAOA,EAAMxK,OAAOC,GAAG,cAAe/B,KAAKiE,WAAYjE,wCAUzE4kC,EAtIA,CAA6BK,EAAA,GA8I7BrK,EAAA,EAASlqB,kBAA2B,QAAIk0B,wICvMxChtB,EAAAjY,EAAA,GA6BAulC,EAAA,SAAArlC,GA2BC,SAAAqlC,IAAA,IAAAplC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,sBAEjBH,EAAKwZ,OAAO6rB,cAEZrlC,EAAKI,eAmBP,OApDyCC,EAAA,EAAA+kC,EAAArlC,GAyCxCsB,OAAAkH,eAAW68B,EAAA9hC,UAAA,kBAOX,WACC,OAAOpD,KAAKsZ,OAAmB,WAAE/K,WARlC,SAAsBA,GACrBvO,KAAKia,SAAS,aAAc1L,oCAU9B22B,EApDA,CAAyCE,EAAA,GA6HzCC,EAAA,SAAAxlC,GA4DC,SAAAwlC,IAAA,IAAAvlC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,cACjBH,EAAKI,eA4HP,OA3LiCC,EAAA,EAAAklC,EAAAxlC,GAuEtBwlC,EAAAjiC,UAAAqO,eAAV,WACC,OAAO,IAAIyzB,GASFG,EAAAjiC,UAAA8xB,UAAV,SAAoBa,GAEnB,OAD8Bl2B,EAAAuD,UAAM8xB,UAASn1B,KAAAC,KAACslC,EAAA,IAUxCD,EAAAjiC,UAAAiQ,oBAAP,SAA2BH,GAC1BrT,EAAAuD,UAAMiQ,oBAAmBtT,KAAAC,KAACkT,GAC1B,IAAI4gB,EAA0B5gB,EAAS4gB,MAEnCyR,EAAgBvlC,KAAKulC,MACpB3tB,EAAA,SAAe2tB,KACnBA,EAAQvlC,KAAK2F,MAAM4/B,OAGpB,IAAIC,EAAuBtyB,EAASoG,OAAO6rB,WAAWvO,QACjDhf,EAAA,SAAe4tB,KACnBA,EAAe,KAGhB1R,EAAMyR,MAAQC,EAAeD,EAAQ,IAErC,IAAI7vB,EAAgB1V,KAAK0V,MACpBkC,EAAA,SAAelC,KACnBA,EAAQ1V,KAAK2F,MAAM+P,OAGpBoe,EAAMpe,MAAQA,GAQR2vB,EAAAjiC,UAAAiJ,SAAP,WACCxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,MAEd,IAAI,IAAIiM,EAAIjM,KAAKwxB,mBAAoBvlB,EAAIjM,KAAK2xB,iBAAkB1lB,IAAI,CACnE,IACI6nB,EADW9zB,KAAK2M,UAAUK,SAASf,GACT6nB,MAE1BY,EAAaZ,EAAMY,WAGlBA,IAAe,IAAMA,EAAa,GACtCZ,EAAMnwB,UAGG+wB,GAAc,IACvBZ,EAAMjsB,WAUT1G,OAAAkH,eAAWg9B,EAAAjiC,UAAA,aAOX,WACC,OAAOpD,KAAKoP,iBAAiB,cAR9B,SAAiBb,GAChBvO,KAAKqP,iBAAiB,QAASd,GAAO,oCAevCpN,OAAAkH,eAAWg9B,EAAAjiC,UAAA,aAOX,WACC,OAAOpD,KAAKoP,iBAAiB,cAR9B,SAAiBb,GAChBvO,KAAKqP,iBAAiB,QAASd,oCAwBjC82B,EA3LA,CAAiCD,EAAA,GAmMjCxK,EAAA,EAASlqB,kBAA+B,YAAI20B,EAC5CzK,EAAA,EAASlqB,kBAAuC,oBAAIw0B,4IC9VpDO,EAAA9lC,EAAA,IAuEA+lC,EAAA,SAAA7lC,GAqGC,SAAA6lC,IAAA,IAAA5lC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,YAEjBH,EAAKwM,MAAQxM,EAAKiB,YAAY4kC,EAAA,GAC9B7lC,EAAKwM,MAAM8H,SAAW,GACtBtU,EAAKwM,MAAMwL,OAAS,EACpBhY,EAAKwM,MAAMuE,KAAO,SAClB/Q,EAAKwM,MAAMjL,OAAS,EACpBvB,EAAKwM,MAAMrL,aAAc,EAEzBnB,EAAKc,OAAS,OAEdd,EAAKgC,OAAOC,GAAG,kBAAmBjC,EAAK8lC,eAAgB9lC,GAEvDA,EAAKiY,YAAa,EAClBjY,EAAKg0B,MAAQh0B,EAAKiB,YAAY8kC,EAAA,GAC9B/lC,EAAKg0B,MAAM/b,YAAa,EAENjY,EAAK81B,OAAOrO,OAAO,UACzBtW,WAAWrI,MAAO,IAAIk9B,EAAA,GAAoBjZ,OAAO,sBAE7D/sB,EAAKsO,QAAQC,IAAI,WAAY,SAACwS,EAAUvb,GACpC,OAAOA,EAAOwuB,MAAM2D,IAAMnyB,EAAOwuB,MAAMhc,QAAUxS,EAAOwuB,MAAMhc,OAASxS,EAAOwuB,MAAMkD,aAAe,KAGvGl3B,EAAKsO,QAAQC,IAAI,WAAY,SAACyS,EAAUxb,GACpC,OAAOA,EAAOwuB,MAAM0D,IAAMlyB,EAAOwuB,MAAMhc,QAAUxS,EAAOwuB,MAAMhc,OAASxS,EAAOwuB,MAAMkD,aAAe,OAgKzG,OAhS+B72B,EAAA,EAAAulC,EAAA7lC,GA0IvB6lC,EAAAtiC,UAAA2iC,gBAAP,eAAAjmC,EAAAE,KACCH,EAAAuD,UAAM2iC,gBAAehmC,KAAAC,MAErB,IAAIsM,EAAQtM,KAAKsM,MACbwnB,EAAQ9zB,KAAK8zB,MACbnuB,EAAQ3F,KAAK2F,MACjB,GAAIA,GAASmuB,EAAO,CAEnB,IAAIkS,EAAMhmC,KAAKimC,MAEXC,EAAMpS,EAAMmD,IAEhBj3B,KAAKszB,SAASloB,KAAK,SAACmoB,GACnB,GAAIA,aAAiBkS,EAAA,EAAQ,CAC5B,IAAI5jB,EAAY0R,EAAM1R,UACjBgb,EAAA,SAAehb,KACnBA,EAAY,IAEb,IAAIC,EAAYyR,EAAMzR,UACjB+a,EAAA,SAAe/a,KACnBA,EAAY,GAGb,IAAIqkB,EAAarS,EAAMY,WAAawR,EAAMrkB,EACtCukB,EAActkB,EAAYgS,EAAMhc,OAEpCyb,EAAMjpB,EAAI87B,EAAczY,EAAA,IAAUwY,GAClC5S,EAAMhpB,EAAI67B,EAAczY,EAAA,IAAUwY,MAKpC,IAAIE,EAAavS,EAAMY,WAAawR,EAAM55B,EAAM8H,SAC5CsgB,EAAaZ,EAAMY,YAAc,EAAIsR,EAAMhmC,KAAKsmC,eAAiBJ,EAAM,GAEvErJ,EAAA,MAAYnI,KACfA,EAAaZ,EAAMY,YAGpB,IAGIlpB,GAAUlB,EAHNwpB,EAAMhc,OAAS6V,EAAA,IAAU0Y,GAGb97B,EAFZupB,EAAMhc,OAAS6V,EAAA,IAAU0Y,IAGjC/5B,EAAM0L,SAASxM,EAAOsoB,EAAMhc,QAC5BxL,EAAMyV,OAAOvW,GAEbxL,KAAKumC,UAAY7R,EAEb10B,KAAKwmC,iBAERC,EAAA,KAAWzmC,KAAKwmC,gBAAiB,SAACtzB,GACjC,IAAIwzB,EAAOxzB,EAASwzB,KACpBA,EAAKlkC,OAAS1C,EAAK6F,MAAMghC,eACzB,IAAIp4B,EAAQ2E,EAAS8H,gBAAgB,SAErC,GAAI6hB,EAAA,SAAetuB,GAAQ,CAE1B,GAAI5I,EAAMihC,UAAW,CACpB,IAAIC,EAAeH,EAAKG,aACnBhK,EAAA,SAAegK,KACnBA,EAAe,GAEhBA,GAA8B,IAE9BH,EAAKhS,WAAaZ,EAAMY,WAAawR,EAAM,EAAIA,EAAM,EAAIW,EACzDH,EAAKzP,IAAMiP,EAAMW,OAGjBH,EAAKzP,IAAM1oB,EAAQ5I,EAAMmhC,WACzBJ,EAAKhS,WAAa50B,EAAKymC,UACvBzmC,EAAKymC,WAAaG,EAAKzP,IAGnB/jB,EAAS6zB,SACbL,EAAK/R,SAAW+R,EAAKhS,YAGtBgS,EAAK5uB,OAASgc,EAAMkD,eAOnBh3B,KAAKgnC,iBACRP,EAAA,KAAWzmC,KAAKgnC,gBAAiB,SAAC9zB,GACjC,IAAIwzB,EAAOxzB,EAASwzB,KAIpB,GAFAA,EAAK5uB,OAASgc,EAAMkD,YAEhBrxB,EAAMihC,UAAW,CACpB,IAAIC,EAAeH,EAAKG,aACnBhK,EAAA,SAAegK,KACnBA,EAAe,GAGhBA,GAA8B,IAE9BH,EAAK/R,SAAWb,EAAMY,WAAawR,EAAM,EAAIA,EAAM,EAAIW,EACvDH,EAAKzP,IAAMiP,EAAMW,MAEb,CACJH,EAAK/R,SAAW70B,EAAKymC,UACrB,IAAIh4B,EAAQ2E,EAAS8H,gBAAgB,SACjC6hB,EAAA,SAAetuB,KAClBm4B,EAAKzP,IAAM1oB,EAAQ5I,EAAMmhC,WACzBhnC,EAAKymC,WAAaG,EAAKzP,KAIpB/jB,EAAS+zB,WACbP,EAAKhS,WAAagS,EAAK/R,cAalB+Q,EAAAtiC,UAAAwiC,eAAV,WAEC,IAAIsB,EAASlnC,KAAKmnC,eAAiBnnC,KAAK8zB,MAAMmD,IAAM,EAEhDmQ,EAAKpnC,KAAK8zB,MAAMhc,OAAS6V,EAAA,IAAUuZ,GACnCG,EAAKrnC,KAAK8zB,MAAMhc,OAAS6V,EAAA,IAAUuZ,GAEnCxxB,EAAQiY,EAAA,UAAiBrjB,EAAG88B,EAAKpnC,KAAKytB,OAAQljB,EAAG88B,EAAKrnC,KAAKuM,SAE/DvM,KAAK8zB,MAAMY,WAAa10B,KAAKmnC,gBAAkBzxB,EAAQwxB,GAEvDlnC,KAAKyY,IAAOzY,KAAKytB,OACjBztB,KAAKuY,IAAOvY,KAAKuM,QASXm5B,EAAAtiC,UAAAmN,SAAP,SAAgBC,GACf3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACfxQ,KAAKsM,MAAMiE,SAASC,EAAOlE,OAC3BtM,KAAK8zB,MAAMvjB,SAASC,EAAOsjB,QAE7B4R,EAhSA,CAA+B4B,EAAA,GAwS/B1M,EAAA,EAASlqB,kBAA6B,UAAIg1B,+GC/W1C6B,EAAA5nC,EAAA,IAsFA6nC,EAAA,SAAA3nC,GA2CC,SAAA2nC,IAAA,IAAA1nC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,YAEjBH,EAAK2nC,WAAa3nC,EAAKiB,YAAY2mC,EAAA,GACnC5nC,EAAK2nC,WAAWxmC,aAAc,EAC9BnB,EAAK2nC,WAAWxa,cAAgB,EAEhCntB,EAAKI,eA8HP,OAjL+BC,EAAA,EAAAqnC,EAAA3nC,GA2DvB2nC,EAAApkC,UAAAiJ,SAAP,WAGC,GAFAxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,OAETA,KAAK2nC,WAAY,CACrB,IAAIjT,EAAa10B,KAAK00B,WAClBC,EAAW30B,KAAK20B,SAEhBsC,EAAMj3B,KAAKi3B,IACXnf,EAAS9X,KAAK8X,OAEdmvB,EAAWjnC,KAAKkT,SAAS+zB,SACzBF,EAAS/mC,KAAKkT,SAAS6zB,OAEvBa,EAAQ,EACRC,EAAQ,EAERZ,IACHW,EAAQX,EAASxZ,OAASwZ,EAASxuB,GACnCovB,EAAQZ,EAAS16B,OAAS06B,EAAS1uB,IAGpC,IAAIuvB,EAAM,EACNC,EAAM,EAOV,GALIhB,IACHe,EAAMf,EAAOtZ,OAASsZ,EAAOtuB,GAC7BsvB,EAAMhB,EAAOx6B,OAASw6B,EAAOxuB,IAG1BT,EAAS,EAAG,CACf,IAAI4qB,EAAK5qB,EAASkwB,EAAA,IAAUtT,GAAckT,EACtC7C,EAAKjtB,EAASkwB,EAAA,IAAUtT,GAAcmT,EACtC3U,EAAKpb,EAASkwB,EAAA,IAAUrT,GAAYmT,EACpC9C,EAAKltB,EAASkwB,EAAA,IAAUrT,GAAYoT,EAYpCE,GAXcD,EAAA,IAAUrT,EAAWsC,GACrB+Q,EAAA,IAAUrT,EAAWsC,GACrB+Q,EAAA,IAAUtT,EAAauC,GACvB+Q,EAAA,IAAUtT,EAAauC,IAQ9B3sB,EAAG,EAAGC,EAAG,IAChByvB,EAAOuN,EAAA,QAAej9B,EAAGo4B,EAAIn4B,EAAGw6B,IAEpC/K,GAAQuN,EAAA,MAAY7S,EAAYuC,EAAKnf,GACrCkiB,GAAQuN,EAAA,kBAAyBj9B,EAAG4oB,EAAI3oB,EAAGy6B,GAAMiD,GACjDjO,GAAQuN,EAAA,MAAY5S,EAAUsC,EAAKnf,GACnCkiB,GAAQuN,EAAA,kBAAyBj9B,EAAGo4B,EAAIn4B,EAAGw6B,GAAMkD,GAE7ChR,EAAM,EACTj3B,KAAK0mC,KAAKhrB,QAAQsC,MAAOC,EAAK+b,IAG9Bh6B,KAAK0mC,KAAKhrB,QAAQsC,MAAOC,EAAK,KAG3Bje,KAAKU,cACRV,KAAKkoC,YAAYxsB,QAAQsC,MAAOC,EAAK+b,IACrCh6B,KAAKyC,iBAAiBmB,KAAO5D,KAAKkoC,aAEnCloC,KAAKmoC,kBAEL,IAAIC,EAAU1T,EAAauC,EAAM,EAC7BoR,EAAU1T,EAAWsC,EAAM,EAG3BwQ,EAAaznC,KAAKynC,WAEtBA,EAAW/E,GAAK5qB,EAASkwB,EAAA,IAAUI,GAAWR,EAC9CH,EAAW1C,GAAKjtB,EAASkwB,EAAA,IAAUI,GAAWP,EAC9CJ,EAAWvU,GAAKpb,EAASkwB,EAAA,IAAUK,GAAWP,EAC9CL,EAAWzC,GAAKltB,EAASkwB,EAAA,IAAUK,GAAWN,EAE9CN,EAAWa,IAAM,EACjBb,EAAWc,IAAM,EAEjBd,EAAW1+B,OAAS/I,KAAK4I,QAU5BzH,OAAAkH,eAAWm/B,EAAApkC,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAgBxCpN,OAAAkH,eAAWm/B,EAAApkC,UAAA,WAOX,WACC,OAAOpD,KAAKoP,iBAAiB,YAR9B,SAAeb,GACdvO,KAAKqP,iBAAiB,MAAOd,GAAO,oCAUtCi5B,EAjLA,CAA+BgB,EAAA,GAyL/B7wB,EAAA,EAASjH,kBAA6B,UAAI82B,oKC/Q1C7gB,EAAAhnB,EAAA,GAmCA8oC,EAAA,SAAA5oC,GAaC,SAAA4oC,IAAA,IAAA3oC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,wBAEjBH,EAAKI,eAyDP,OA1E2CC,EAAA,EAAAsoC,EAAA5oC,GA+C1CsB,OAAAkH,eAAWogC,EAAArlC,UAAA,kBAAX,WACC,IAAIslC,EAAkB1oC,KAAK0oC,gBAC3B,GAAIA,GAAmBA,EAAgBlmC,OACtC,OAAOkmC,EAAgBlmC,OAAO0Z,sCAUhC/a,OAAAkH,eAAWogC,EAAArlC,UAAA,aAAX,WACC,OAAOpD,KAAK0oC,gBAAgBn6B,uCAS7BpN,OAAAkH,eAAWogC,EAAArlC,UAAA,uBAAX,WACC,OAAwBpD,KAAK2oC,8CAG/BF,EA1EA,CAA2CG,EAAA,GAmI3CC,EAAA,SAAAhpC,GA8DC,SAAAgpC,IAAA,IAAA/oC,EACCD,EAAAE,KAAAC,OAAOA,KAEPF,EAAKG,UAAY,gBACjBH,EAAKI,aAELJ,EAAK8sB,YAAc,EACnB9sB,EAAKmtB,cAAgB,EACrBntB,EAAK0e,kBAAoB,EACzB1e,EAAKgpC,QAAQ/d,SAAS1f,YAAc,+BACpCvL,EAAKgpC,QAAQ/d,SAASge,YAAc,SAEpC,IAAItc,EAAkB,IAAIuc,EAAA,SAE1BlpC,EAAKiJ,OAAS0jB,EAAgBI,OAAO,cACrC/sB,EAAK2P,WAAWiK,WAAa,KAC7B5Z,EAAK2P,WAAW8J,OAAS,KACzBzZ,EAAK2P,WAAWkK,WAAa,KAC7B7Z,EAAK2P,WAAWgK,OAAS,KAEzB3Z,EAAKyiB,wBAAyB,EAG9BziB,EAAKgpC,QAAQ/d,SAAS8N,cAAe,IA4IvC,OAjOmC14B,EAAA,EAAA0oC,EAAAhpC,GA+FxBgpC,EAAAzlC,UAAAyR,gBAAV,SAA0B3B,EAA6B4B,GACpCA,EAAam0B,eAAiB/1B,EAChDrT,EAAAuD,UAAMyR,gBAAe9U,KAAAC,KAACkT,EAAU4B,IASvB+zB,EAAAzlC,UAAAqO,eAAV,WACC,OAAO,IAAIg3B,GASLI,EAAAzlC,UAAA+D,KAAP,SAAYgb,GAAZ,IAAAriB,EAAAE,KAEC2mB,EAAA,KAAWA,EAAA,QAAc3mB,KAAK2M,UAAU3I,YAAa,SAAC2H,GAC7CA,EAAE,GAAV,IACIuH,EAAWvH,EAAE,GACb0W,EAAwBviB,EAAKuiB,sBACjC,OAAOnP,EAASw1B,gBAAgBtX,gBAAgB,QAASle,EAASw1B,gBAAgBztB,SAAS,SAAUoH,KAGtG,IAAID,EAAYviB,EAAAuD,UAAM8lC,SAAQnpC,KAAAC,KAACmiB,GAW/B,OATIC,IAAcA,EAAUO,aAC3BP,EAAUtgB,OAAOC,GAAG,iBAAkB,WACrCjC,EAAK6F,MAAMwjC,qBAIZnpC,KAAK2F,MAAMwjC,mBAGL/mB,GASDymB,EAAAzlC,UAAAF,KAAP,SAAYif,GAAZ,IAAAriB,EAAAE,KACC2mB,EAAA,KAAWA,EAAA,QAAc3mB,KAAK2M,UAAU3I,YAAa,SAAC2H,GAC7CA,EAAE,GAAV,IACIuH,EAAWvH,EAAE,GACb0W,EAAwBviB,EAAKuiB,sBACjCnP,EAASw1B,gBAAgBtX,gBAAgB,QAAS,EAAG/O,KAEtD,IAAID,EAAYviB,EAAAuD,UAAMgmC,SAAQrpC,KAAAC,KAACmiB,GAW/B,OATIC,IAAcA,EAAUO,aAC3BP,EAAUtgB,OAAOC,GAAG,iBAAkB,WACrCjC,EAAK6F,MAAMwjC,qBAIZnpC,KAAK2F,MAAMwjC,mBAGL/mB,GAIDymB,EAAAzlC,UAAAimC,OAAP,aASOR,EAAAzlC,UAAAic,cAAP,aAYOwpB,EAAAzlC,UAAAuM,cAAP,SAAqBC,GAEhBA,IAIE05B,EAAA,SAAe15B,EAAOH,aAAgB65B,EAAA,SAAe15B,EAAOH,cAChEG,EAAOH,gBAKT5P,EAAAuD,UAAMuM,cAAa5P,KAAAC,KAAC4P,IAUdi5B,EAAAzlC,UAAAyvB,mBAAP,SAA0BC,GACzB,IAAIpF,EAAYoF,EAAO7nB,WACnB4iB,EAAYiF,EAAO5nB,YAEvB4nB,EAAOyW,iBAEP,IAAIC,EAA2B1W,EAAO/xB,YAAY0oC,EAAA,GAClDD,EAAOvoC,aAAc,EACrByoC,EAAA,eAAuB1pC,KAAMwpC,EAAQ/tB,EAAA,GAGrC+tB,EAAO3oC,QAAQ,EAAG,EAAG,EAAG,GACxB2oC,EAAOtoC,MAAQwsB,EACf8b,EAAOhoC,OAASqsB,GAElBgb,EAjOA,CAAmCD,EAAA,GAyOnChO,EAAA,EAASlqB,kBAAiC,cAAIm4B,EAC9CjO,EAAA,EAASlqB,kBAAyC,sBAAI+3B,uGChZtD/J,EAAA/+B,EAAA,IA2DAgqC,EAAA,SAAA9pC,GAqCC,SAAA8pC,IAAA,IAAA7pC,EACCD,EAAAE,KAAAC,OAAOA,YAREF,EAAA0c,OAAS,IAAIqoB,EAAA,EAStB/kC,EAAKG,UAAY,kBAEjBH,EAAKsJ,WAAWC,KAAKvJ,EAAK0c,QAE1B1c,EAAKI,eA0EP,OArHqCC,EAAA,EAAAwpC,EAAA9pC,GAsD7B8pC,EAAAvmC,UAAAqR,kBAAP,SAAyBD,EAAY1J,EAAkBmJ,GACtDnJ,IAAuBmJ,EAAcnJ,GAAY0J,EAAKJ,SACtD,IAAI5I,EAAgBxL,KAAKqU,gBAAgBvJ,GAEzC,GAAI0J,EAAKkH,QAAS,CAEjB,IAAIjD,EAAazY,KAAK2F,MAAMikC,KACxBrxB,EAAavY,KAAK2F,MAAMkkC,KAExBhc,EAAY7tB,KAAK8pC,YAErBt1B,EAAKkH,QAAQsC,MAAOC,EAAKygB,EAAA,QAAep0B,EAAGmO,EAAIlO,EAAGgO,IAAQmmB,EAAA,QAAep0B,EAAGmO,EAAIlO,EAAGsjB,EAAItV,IAAQmmB,EAAA,QAAep0B,EAAG,EAAGC,EAAGsjB,MAExH7tB,KAAK45B,aAAaplB,EAAMhJ,GAExBxL,KAAK05B,iBAAiBllB,EAAM1J,EAAU,EAAG,IAQnC6+B,EAAAvmC,UAAA+9B,sBAAP,WACCthC,EAAAuD,UAAM+9B,sBAAqBphC,KAAAC,MAE3B,IAAI6tB,EAAI7tB,KAAK8pC,YACTrxB,EAAKzY,KAAK2F,MAAMikC,KAChBrxB,EAAKvY,KAAK2F,MAAMkkC,KACpB7pC,KAAKyX,SAASiE,QAAQsC,MAAOC,EAAKygB,EAAA,QAAep0B,EAAGmO,EAAIlO,EAAGgO,IAAQmmB,EAAA,QAAep0B,EAAGmO,EAAIlO,EAAGsjB,EAAItV,IAAQmmB,EAAA,QAAep0B,EAAG,EAAGC,EAAGsjB,OASjI1sB,OAAAkH,eAAWshC,EAAAvmC,UAAA,aAUX,WACC,OAAOpD,KAAKwc,OAAOiC,WAXpB,SAAiB9Y,GACZA,GACH3F,KAAKwc,OAAOuC,IAAIpZ,EAAOA,EAAM7D,OAAOC,GAAG,kBAAmB/B,KAAK+pC,gBAAiB/pC,wCAiBxE2pC,EAAAvmC,UAAA2mC,gBAAV,SAA0B3kC,GACH,SAAlBA,EAAMizB,UAAyC,SAAlBjzB,EAAMizB,UACtCr4B,KAAKiE,cAIR0lC,EArHA,CAAqCK,EAAA,GA6HrCpP,EAAA,EAASlqB,kBAAmC,gBAAIi5B,+FCxLhDM,EAAAtqC,EAAA,IA0DAuqC,EAAA,SAAArqC,GAuCC,SAAAqqC,IAAA,IAAApqC,EACCD,EAAAE,KAAAC,OAAOA,YAREF,EAAA0c,OAAS,IAAIqoB,EAAA,EAStB/kC,EAAKG,UAAY,kBACjBH,EAAKsJ,WAAWC,KAAKvJ,EAAK0c,QAC1B1c,EAAKI,eA4EP,OAvHqCC,EAAA,EAAA+pC,EAAArqC,GAsD7BqqC,EAAA9mC,UAAAqR,kBAAP,SAAyBD,EAAY1J,EAAkBmJ,GACtDnJ,IAAuBmJ,EAAcnJ,GAAY0J,EAAKJ,SAEtD,IAAI5I,EAAgBxL,KAAKqU,gBAAgBvJ,GACzC,GAAI0J,EAAKkH,QAAS,CAEjB,IAAIjD,EAAazY,KAAK2F,MAAMikC,KACxBrxB,EAAavY,KAAK2F,MAAMkkC,KAExBnc,EAAY1tB,KAAKmqC,WAErB31B,EAAKkH,QAAQsC,MAAOC,EAAKgsB,EAAA,QAAe3/B,EAAG,EAAGC,EAAG,IAAO0/B,EAAA,QAAe3/B,EAAGmO,EAAIlO,EAAGgO,IAAQ0xB,EAAA,QAAe3/B,EAAGojB,EAAIjV,EAAIlO,EAAGgO,MAEvHvY,KAAK45B,aAAaplB,EAAMhJ,GAExBxL,KAAK05B,iBAAiBllB,EAAM1J,EAAU,EAAG,IAQnCo/B,EAAA9mC,UAAA+9B,sBAAP,WACCthC,EAAAuD,UAAM+9B,sBAAqBphC,KAAAC,MAE3B,IAAI0tB,EAAY1tB,KAAKmqC,WACrBnqC,KAAKyX,SAASiE,QAAQsC,MACrBC,EAAKgsB,EAAA,QAAe3/B,EAAG,EAAGC,EAAG,IAC1B0/B,EAAA,QAAe3/B,EAAGojB,EAAGnjB,EAAG,IACxB0/B,EAAA,QAAe3/B,EAAGojB,EAAI1tB,KAAK2F,MAAMikC,KAAMr/B,EAAGvK,KAAK2F,MAAMkkC,UAU1D1oC,OAAAkH,eAAW6hC,EAAA9mC,UAAA,aAUX,WACC,OAAOpD,KAAKwc,OAAOiC,WAXpB,SAAiB9Y,GACZA,GACH3F,KAAKwc,OAAOuC,IAAIpZ,EAAOA,EAAM7D,OAAOC,GAAG,kBAAmB/B,KAAK+pC,gBAAiB/pC,wCAiBxEkqC,EAAA9mC,UAAA2mC,gBAAV,SAA0B3kC,GACH,SAAlBA,EAAMizB,UAAyC,SAAlBjzB,EAAMizB,UACtCr4B,KAAKiE,cAIRimC,EAvHA,CAAqCE,EAAA,wIC1DrC1L,EAAA/+B,EAAA,IA0BA0qC,EAAA,SAAAxqC,GAYC,SAAAwqC,IAAA,IAAAvqC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,yBACjBH,EAAKI,eAGP,OAlB4CC,EAAA,EAAAkqC,EAAAxqC,GAkB5CwqC,EAlBA,CAA4CC,EAAA,GAoF5CC,EAAA,SAAA1qC,GAiEC,SAAA0qC,IAAA,IAAAzqC,EACCD,EAAAE,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,iBACjBH,EAAKI,eA8EP,OAnJoCC,EAAA,EAAAoqC,EAAA1qC,GAwEnCsB,OAAAkH,eAAWkiC,EAAAnnC,UAAA,wBAAX,WACC,OAAIpD,KAAK2F,OAAS3F,KAAK2F,MAAM6kC,iBAErBxqC,KAAK2F,MAAM6kC,iBAGXxqC,KAAKyqC,mDASJF,EAAAnnC,UAAAsnC,qBAAV,WACC,OAAO,IAAIC,EAAA,GAQFJ,EAAAnnC,UAAAya,YAAV,WACC,IAAI6P,EAAY1tB,KAAK0I,MAAM2J,WACvBwb,EAAY7tB,KAAK2I,MAAM0J,WAEvBoG,EAAazY,KAAK2F,MAAMikC,MAAQ,EAChCrxB,EAAavY,KAAK2F,MAAMkkC,MAAQ,EAEpC,OAAOnL,EAAA,QAAep0B,EAAG,EAAGC,EAAG,IAAOm0B,EAAA,QAAep0B,EAAGmO,EAAIlO,EAAGgO,IAAQmmB,EAAA,QAAep0B,EAAGojB,EAAIjV,EAAIlO,EAAGgO,IAAQmmB,EAAA,QAAep0B,EAAGojB,EAAIjV,EAAIlO,EAAGsjB,EAAItV,IAAQmmB,EAAA,QAAep0B,EAAGojB,EAAGnjB,EAAGsjB,IAAO6Q,EAAA,QAAep0B,EAAGojB,EAAGnjB,EAAGsjB,IAAO6Q,EAAA,QAAep0B,EAAG,EAAGC,EAAGsjB,IAAO6Q,EAAA,aASnPv9B,OAAAkH,eAAWkiC,EAAAnnC,UAAA,aAUX,WACC,OAAOpD,KAAKoP,iBAAiB,cAX9B,SAAiBb,GAChBvO,KAAKqP,iBAAiB,QAASd,GAAO,GACvBvO,KAAK8oC,QAAQ/d,SACnB6f,SAASrF,MAAQh3B,mCAiB3BpN,OAAAkH,eAAWkiC,EAAAnnC,UAAA,aAUX,WACC,OAAOpD,KAAKoP,iBAAiB,cAX9B,SAAiBb,GAChBvO,KAAKqP,iBAAiB,QAASd,GAChBvO,KAAK8oC,QAAQ/d,SACnB6f,SAASl1B,MAAQnH,mCAY5Bg8B,EAnJA,CAAoCD,EAAA,GA2JpC1P,EAAA,EAASlqB,kBAAkC,eAAI65B,EAC/C3P,EAAA,EAASlqB,kBAA0C,uBAAI25B,gGC1QvDzP,EAAAj7B,EAAA,GAyDAkrC,EAAA,SAAAhrC,GAoCC,SAAAgrC,IAAA,IAAA/qC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,aA0BnB,OAhE8BE,EAAA,EAAA0qC,EAAAhrC,GAyC7BgrC,EAAAznC,UAAA0nC,aAAA,WACC9qC,KAAK4qC,SAAW5qC,KAAKe,YAAYgqC,EAAA,GACjC/qC,KAAK4qC,SAAS3pC,aAAc,EAC5BjB,KAAK4qC,SAAS3d,cAAgB,EAG9BjtB,KAAKwpC,OAAcxpC,KAAK4qC,UAGzBC,EAAAznC,UAAAiJ,SAAA,WACCxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,MACVA,KAAK4qC,WACR5qC,KAAK4qC,SAAS1pC,MAAQlB,KAAKiL,WAC3BjL,KAAK4qC,SAASppC,OAASxB,KAAKkL,cAI9B2/B,EAAAznC,UAAAmN,SAAA,SAASC,GACR3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACXxQ,KAAK4qC,UACR5qC,KAAK4qC,SAASr6B,SAASC,EAAOo6B,WAGjCC,EAhEA,CAA8BG,EAAA,GAwE9BpQ,EAAA,EAASlqB,kBAA4B,SAAIm6B,+FCjIzCjQ,EAAAj7B,EAAA,GAwDAsrC,EAAA,SAAAprC,GAyCC,SAAAorC,IAAA,IAAAnrC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,cACjBH,EAAKc,OAAS,SAuBhB,OAnEiCT,EAAA,EAAA8qC,EAAAprC,GA+ChCorC,EAAA7nC,UAAA0nC,aAAA,WACCjrC,EAAAuD,UAAM0nC,aAAY/qC,KAAAC,MAElBA,KAAKkrC,QAAUlrC,KAAKe,YAAYoqC,EAAA,GAChCnrC,KAAKkrC,QAAQjqC,aAAc,EAE3BjB,KAAKorC,SAAWprC,KAAKe,YAAYoqC,EAAA,GACjCnrC,KAAKorC,SAASnqC,aAAc,GAG7BgqC,EAAA7nC,UAAAmN,SAAA,SAASC,GACR3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACXxQ,KAAKkrC,SACRlrC,KAAKkrC,QAAQ36B,SAASC,EAAO06B,SAE1BlrC,KAAKorC,UACRprC,KAAKorC,SAAS76B,SAASC,EAAO46B,WAIjCH,EAnEA,CAAiCD,EAAA,GA2EjCpQ,EAAA,EAASlqB,kBAA+B,YAAIu6B,sGCnI5CrzB,EAAAjY,EAAA,GAyDA0rC,EAAA,SAAAxrC,GAoCC,SAAAwrC,IAAA,IAAAvrC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,gBA6CnB,OAnFiCE,EAAA,EAAAkrC,EAAAxrC,GAyChCwrC,EAAAjoC,UAAA0nC,aAAA,WACC9qC,KAAKsrC,YAActrC,KAAKe,YAAYo0B,EAAA,GACpCn1B,KAAKsrC,YAAYrqC,aAAc,EAC/BjB,KAAKsrC,YAAYre,mBAAgBpoB,EAEjC7E,KAAKwpC,OAAcxpC,KAAKsrC,aAGzBD,EAAAjoC,UAAAmN,SAAA,SAASC,GACR3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACXxQ,KAAKsrC,aACRtrC,KAAKsrC,YAAY/6B,SAASC,EAAO86B,cAUzBD,EAAAjoC,UAAAmoC,YAAV,WACC,IAAIh9B,EAAQvO,KAAKoP,iBAAiB,YAIlC,OAHKwI,EAAA,SAAerJ,KACnBA,EAAQvO,KAAKsrC,YAAYzqB,UAEnBtS,GAQE88B,EAAAjoC,UAAAooC,YAAV,WACC,IAAIj9B,EAAQvO,KAAKoP,iBAAiB,YAIlC,OAHKwI,EAAA,SAAerJ,KACnBA,EAAQvO,KAAKsrC,YAAYxqB,UAEnBvS,GAGT88B,EAnFA,CAAiCL,EAAA,GA2FjCpQ,EAAA,EAASlqB,kBAA+B,YAAI26B,gGCpJ5CzQ,EAAAj7B,EAAA,GAyDA8rC,EAAA,SAAA5rC,GAoCC,SAAA4rC,IAAA,IAAA3rC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,eAiBnB,OAvDgCE,EAAA,EAAAsrC,EAAA5rC,GAyC/B4rC,EAAAroC,UAAA0nC,aAAA,WACC9qC,KAAK0rC,WAAa1rC,KAAKe,YAAY4qC,EAAA,GACnC3rC,KAAK0rC,WAAWzqC,aAAc,EAG9BjB,KAAKwpC,OAAcxpC,KAAK0rC,YAGzBD,EAAAroC,UAAAmN,SAAA,SAASC,GACR3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACXxQ,KAAK0rC,YACR1rC,KAAK0rC,WAAWn7B,SAASC,EAAOk7B,aAGnCD,EAvDA,CAAgCT,EAAA,GA+DhCpQ,EAAA,EAASlqB,kBAA8B,WAAI+6B,wICvH3CG,OAAAC,UAAAC,quLCDAnsC,EAAAse,EAAA8tB,EAAA,gCAAAC,GAAA,iJCAA1C,EAAA3pC,EAAA,GAiCAssC,EAAA,SAAApsC,GAYC,SAAAosC,IAAA,IAAAnsC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,qBACjBH,EAAKI,eAGP,OAlBwCC,EAAA,EAAA8rC,EAAApsC,GAkBxCosC,EAlBA,CAAwCC,EAAA,GAkExCC,EAAA,SAAAtsC,GA4CC,SAAAssC,IAAA,IAAArsC,EAGCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,aAEjBH,EAAK40B,WAAa,IAClB50B,EAAK60B,SAAW,IAEhB70B,EAAKssC,MAAQ,IAAIznB,EAAA,EAAwB,IAAI0nB,EAAA,GAC7CvsC,EAAKssC,MAAMtqC,OAAOC,GAAG,WAAYjC,EAAKwsC,YAAaxsC,GAEnDA,EAAKsJ,WAAWC,KAAK,IAAIsb,EAAA,EAAa7kB,EAAKssC,QAC3CtsC,EAAKsJ,WAAWC,KAAKvJ,EAAKssC,MAAMrhB,UAGhCjrB,EAAKI,eA+BP,OA3FgCC,EAAA,EAAAgsC,EAAAtsC,GAmErBssC,EAAA/oC,UAAAC,sBAAV,WAECxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MAItBspC,EAAA,SAAetpC,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,iBAUnC0oC,EAAA/oC,UAAAkpC,YAAV,SAAsBlnC,GACrB,IAAIi9B,EAAkBj9B,EAAMM,SACvB28B,EAAKh+B,OACTg+B,EAAKh+B,KAAOrE,KAAKoE,MAAM4I,SAAS,KAInCm/B,EA3FA,CAAgCD,EAAA,GAmGhCnc,EAAA,EAASrf,kBAA8B,WAAIy7B,iICtM3CvR,EAAAj7B,EAAA,GA6BA4sC,EAAA,SAAA1sC,GAYC,SAAA0sC,IAAA,IAAAzsC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,qBACjBH,EAAKI,eAGP,OAlBwCC,EAAA,EAAAosC,EAAA1sC,GAkBxC0sC,EAlBA,CAAwCC,EAAA,GA8JxCC,EAAA,SAAA5sC,GA6CC,SAAA4sC,IAAA,IAAA3sC,EAGCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,aAEjBH,EAAKylC,MAAQ,GACbzlC,EAAK4V,MAAQ,GAGb5V,EAAKI,eAmDP,OA1GgCC,EAAA,EAAAssC,EAAA5sC,GAmE/BsB,OAAAkH,eAAWokC,EAAArpC,UAAA,aAQX,WACC,OAAOpD,KAAKoP,iBAAiB,cAT9B,SAAiBb,GAChBvO,KAAKqP,iBAAiB,QAASd,GAC/BvO,KAAK0sC,uDAgBNvrC,OAAAkH,eAAWokC,EAAArpC,UAAA,aAQX,WACC,OAAOpD,KAAKoP,iBAAiB,cAT9B,SAAiBb,GAChBvO,KAAKqP,iBAAiB,QAASd,GAC/BvO,KAAK0sC,uDAeID,EAAArpC,UAAA+M,aAAV,WACC,OAAO,IAAIw8B,EAAA,GAGbF,EA1GA,CAAgCD,EAAA,GAkHhC5R,EAAA,EAASlqB,kBAA8B,WAAI+7B,qLC7S3CtQ,EAAAx8B,EAAA,GA+CAitC,EAAA,SAAA/sC,GAkCC,SAAA+sC,IAAA,IAAA9sC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBACjBH,EAAKI,eAEP,OAvC0CC,EAAA,EAAAysC,EAAA/sC,GAuC1C+sC,EAvCA,CAA0CC,EAAA,GA2J1CC,EAAA,SAAAjtC,GAyFC,SAAAitC,IAAA,IAAAhtC,EAGCD,EAAAE,KAAAC,OAAOA,KArBDF,EAAAgnC,WAAqB,EAsB3BhnC,EAAKG,UAAY,eAEjBH,EAAK40B,YAAc,GACnB50B,EAAK60B,SAAW,IAEhB70B,EAAKgY,OAAS3W,OAAAu5B,EAAA,EAAAv5B,CAAQ,IAEtBrB,EAAKk3B,aAAgB,GAErBl3B,EAAKitC,YAAc,EAEnB,IAAIC,EAAiBltC,EAAKa,eAAeI,YAAYgwB,EAAA,UACrDic,EAAepqC,MAAQ,SACvBoqC,EAAenqC,OAAS,SACxBmqC,EAAe/rC,aAAc,EAC7B+rC,EAAepsC,OAAS,OACxBd,EAAKktC,eAAiBA,EAEtBltC,EAAKmtC,eAAezqC,OAASwqC,EAC7BltC,EAAK6mC,eAAenkC,OAASwqC,EAG7BltC,EAAKI,eA+OP,OAlWkCC,EAAA,EAAA2sC,EAAAjtC,GA2H1BitC,EAAA1pC,UAAAiJ,SAAP,eAAAvM,EAAAE,KACCH,EAAAuD,UAAMiJ,SAAQtM,KAAAC,MAEd,IAAIW,EAAiBX,KAAKW,eAEtBmX,GADiB9X,KAAKitC,eACb9Q,EAAA,sBAA6Bn8B,KAAK8X,OAAQo1B,EAAA,IAAUvsC,EAAe0sB,WAAY1sB,EAAeysB,cAAgB,GACvH6M,EAAmBkC,EAAA,sBAA6Bn8B,KAAKg3B,YAAalf,GAAQ,GAC1E6c,EAAW30B,KAAK20B,SAChBD,EAAa10B,KAAK00B,WAAa10B,KAAK+sC,YAAc,EAElDpR,EAAOuR,EAAA,WAAiBltC,KAAK00B,WAAY10B,KAAK20B,SAAU,GAExDsR,EAAQjmC,KAAKkT,SAASoG,OAAO/K,MAAMy3B,IACnC/gB,EAAQ,EAERkoB,EAAW,EACfx8B,EAAA,KAAW3Q,KAAKotC,QAAS,SAACC,GACzB,IAAIC,EAAOD,EAAQ,GACnBvtC,EAAKytC,aAAaD,GAClBroB,IACA,IAAI1W,EAAQ++B,EAAKrH,MACdqH,EAAKrH,MAAQA,EAAQnmC,EAAK0tC,cAC5Bj/B,EAAQ03B,EAAQnmC,EAAK0tC,aAEtBL,GAAY5+B,IAGbvO,KAAK8mC,YAAcnS,EAAW30B,KAAK00B,WAAa10B,KAAK+sC,YAAc9nB,GAASkoB,EAE5Ex8B,EAAA,KAAW3Q,KAAKotC,QAAS,SAACC,GACzB,IAAIC,EAAOD,EAAQ,GACfvZ,EAAQwZ,EAAKxZ,MAEjBA,EAAMhc,OAASA,EACfgc,EAAMkD,YAAciD,EAEpB,IAQIhD,EARA1oB,EAAQ++B,EAAKrH,MAEdqH,EAAKrH,MAAQA,EAAQnmC,EAAK0tC,cAC5Bj/B,EAAQ03B,EAAQnmC,EAAK0tC,aAGtBF,EAAKhH,cAAgB/3B,EAIpB0oB,EADGn3B,EAAK8mC,WACDjS,EAAW70B,EAAK40B,YAAczP,EAAQnlB,EAAKitC,YAG5CjtC,EAAKgnC,WAAav4B,EAGzBulB,EAAMmD,IAAMA,EACZnD,EAAMY,WAAaA,EACnB4Y,EAAKnG,eAAiBzS,EACtB4Y,EAAK9qC,OAAS1C,EAAKmtC,eACnBK,EAAKrpC,aACLywB,GAAcuC,EAAMn3B,EAAKitC,cAG1B/sC,KAAKgtC,eAAe3Q,aAAgB/xB,EAAGwN,EAAS6jB,EAAKrxB,EAAGC,EAAGuN,EAAS6jB,EAAKpxB,EAAGrJ,MAAO4W,EAAS6jB,EAAKz6B,MAAOM,OAAQsW,EAAS6jB,EAAKn6B,QAC9HxB,KAAKgtC,eAAe7D,oBAOX2D,EAAA1pC,UAAAC,sBAAV,WAECxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MAItB6vB,EAAA,SAAe7vB,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,mBASnCqpC,EAAA1pC,UAAAqO,eAAV,WACC,OAAO,IAAIm7B,GA0BZzrC,OAAAkH,eAAWykC,EAAA1pC,UAAA,kBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,mBAR9B,SAAsBb,GACrBvO,KAAKqP,iBAAiB,aAAcd,GAAO,oCAiC5CpN,OAAAkH,eAAWykC,EAAA1pC,UAAA,gBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,iBAR9B,SAAoBb,GACnBvO,KAAKqP,iBAAiB,WAAYd,GAAO,oCAiB1CpN,OAAAkH,eAAWykC,EAAA1pC,UAAA,cAOX,WACC,OAAOpD,KAAKoP,iBAAiB,eAR9B,SAAkBb,GACjBvO,KAAKqP,iBAAiB,SAAUd,GAAO,oCAiBxCpN,OAAAkH,eAAWykC,EAAA1pC,UAAA,mBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,oBAR9B,SAAuBb,GACtBvO,KAAKqP,iBAAiB,cAAed,GAAO,oCAkB7CpN,OAAAkH,eAAWykC,EAAA1pC,UAAA,iBASX,WACC,OAAOpD,KAAKoP,iBAAiB,kBAV9B,SAAqBb,GACpBvO,KAAKqP,iBAAiB,YAAad,GAAO,GAC1CvO,KAAKytC,MAAM1iB,SAAS0c,WAAWxa,cAAgB,EAC/CjtB,KAAKytC,MAAM1iB,SAAS2b,KAAK9Z,YAAc,mCAajCkgB,EAAA1pC,UAAAsqC,WAAP,WACC,IAAIJ,EAAO,IAAIK,EAAA,EAEf,OADA3tC,KAAKoJ,WAAWC,KAAKikC,GACdA,GAMDR,EAAA1pC,UAAAwqC,WAAP,WACC,IAAIlH,EAAO,IAAImH,EAAA,EAEf,OADA7tC,KAAKoJ,WAAWC,KAAKq9B,GACdA,GAGToG,EAlWA,CAAkCD,EAAA,GA0WlC9c,EAAA,EAASrf,kBAAgC,aAAIo8B,8GCpjB7CgB,EAAAnuC,EAAA,GAuEAouC,EAAA,SAAAluC,GA6BC,SAAAkuC,IAAA,IAAAjuC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,iBACjBH,EAAK4b,QAAU5b,EAAK6b,MAAMtN,IAAI,QAC9BvO,EAAK+4B,cAAe,EAEpB/4B,EAAK8I,KAAOzH,OAAA6sC,EAAA,EAAA7sC,GAEZrB,EAAKI,eAsEP,OA3GoCC,EAAA,EAAA4tC,EAAAluC,GA6C5BkuC,EAAA3qC,UAAAM,KAAP,WAEC,GAAGoqC,EAAA,SAAe9tC,KAAK0iC,GAAK1iC,KAAKkzB,GAAKlzB,KAAK+kC,GAAK/kC,KAAKglC,GAAKhlC,KAAKsoC,IAAMtoC,KAAKuoC,KAAM,CAE/E,IAAI0F,GAAe3jC,EAAGtK,KAAK0iC,GAAIn4B,EAAGvK,KAAK+kC,IACnCmJ,GAAe5jC,EAAGtK,KAAKkzB,GAAI3oB,EAAGvK,KAAKglC,IACnCiD,GAAe39B,EAAGtK,KAAKsoC,IAAK/9B,EAAGvK,KAAKuoC,KAEpCtqB,EAAYkwB,EAAA,OAAaF,GAAME,EAAA,iBAAuBD,EAAIjG,GAE9DjoC,KAAK0b,QAAQsC,MAAOC,EAAKA,MAS3B9c,OAAAkH,eAAW0lC,EAAA3qC,UAAA,WAOX,WACC,OAAOpD,KAAKoP,iBAAiB,YAR9B,SAAeb,GACdvO,KAAKqP,iBAAiB,MAAOd,GAAO,oCAerCpN,OAAAkH,eAAW0lC,EAAA3qC,UAAA,WAOX,WACC,OAAOpD,KAAKoP,iBAAiB,YAR9B,SAAeb,GACdvO,KAAKqP,iBAAiB,MAAOd,GAAO,oCAgB9Bw/B,EAAA3qC,UAAAiR,gBAAP,SAAuBvJ,GACtB,IAAImjC,GAAM3jC,EAAEtK,KAAK0iC,GAAIn4B,EAAEvK,KAAK+kC,IACxBkD,GAAM39B,EAAEtK,KAAKsoC,IAAK/9B,EAAEvK,KAAKuoC,KACzB2F,GAAM5jC,EAAEtK,KAAKkzB,GAAI3oB,EAAEvK,KAAKglC,IAExBoJ,EAASC,EAAA,yBAA+BJ,EAAIC,EAAIjG,EAAIn9B,GACpDwjC,EAASD,EAAA,yBAA+BJ,EAAIC,EAAIjG,EAAIn9B,EAAW,MAEnE,OAAQR,EAAE8jC,EAAO9jC,EAAGC,EAAE6jC,EAAO7jC,EAAGmL,MAAM24B,EAAA,SAAeD,EAAQE,KAE/DP,EA3GA,CAAoCQ,EAAA,uLCvEpCC,EAAA7uC,EAAA,IA8CA8uC,EAAA,SAAA5uC,GA0DC,SAAA4uC,IAAA,IAAA3uC,EACCD,EAAAE,KAAAC,OAAOA,YAtBDF,EAAA4uC,QAuBN5uC,EAAKG,UAAY,kBAEjBH,EAAKwZ,OAAO/K,SAEZzO,EAAKwZ,OAAOmpB,MAEZ3iC,EAAKwZ,OAAOwrB,MAEZhlC,EAAKwZ,OAAOopB,MAEZ5iC,EAAKwZ,OAAOyrB,MAEZjlC,EAAK6uC,YAAYrb,UAAW,EAE5BxzB,EAAKI,eA8MP,OAxRqCC,EAAA,EAAAsuC,EAAA5uC,GAkFpCsB,OAAAkH,eAAWomC,EAAArrC,UAAA,aAOX,WACC,IAAImL,EAAQvO,KAAKsZ,OAAc,MAAE6X,aAYjC,OAVKtB,EAAA,SAAethB,KACnBA,EAAQ,EACJvO,KAAKszB,UACR3M,EAAA,KAAW3mB,KAAKszB,SAAStvB,WAAY,SAACuvB,GACjC1D,EAAA,SAAe0D,EAAMhlB,SACxBA,GAASglB,EAAMhlB,UAKZA,OApBR,SAAiBA,GAChBvO,KAAKia,SAAS,QAAS1L,oCA6BxBpN,OAAAkH,eAAWomC,EAAArrC,UAAA,UAOX,WACC,OAAOpD,KAAKsZ,OAAOmpB,GAAGl0B,WARvB,SAAcA,GACbvO,KAAKia,SAAS,KAAM1L,oCAiBrBpN,OAAAkH,eAAWomC,EAAArrC,UAAA,UAOX,WACC,OAAOpD,KAAKsZ,OAAOopB,GAAGn0B,WARvB,SAAcA,GACbvO,KAAKia,SAAS,KAAM1L,oCAiBrBpN,OAAAkH,eAAWomC,EAAArrC,UAAA,UAOX,WACC,OAAOpD,KAAKsZ,OAAOwrB,GAAGv2B,WARvB,SAAcA,GACbvO,KAAKia,SAAS,KAAM1L,oCAiBrBpN,OAAAkH,eAAWomC,EAAArrC,UAAA,UAOX,WACC,OAAOpD,KAAKsZ,OAAOyrB,GAAGx2B,WARvB,SAAcA,GACbvO,KAAKia,SAAS,KAAM1L,oCAerBpN,OAAAkH,eAAWomC,EAAArrC,UAAA,YAOX,WACC,OAAOpD,KAAKiR,WAAWiL,UARxB,SAAgBA,GACflc,KAAKkR,YAAY,OAAQgL,oCAqB1B/a,OAAAkH,eAAWomC,EAAArrC,UAAA,gBAOX,WACC,OAAOpD,KAAKiR,WAAWqiB,cARxB,SAAoBA,GACnBtzB,KAAKkR,YAAY,WAAYoiB,oCAmB9BnyB,OAAAkH,eAAWomC,EAAArrC,UAAA,aAAX,WACC,OAAKpD,KAAKwC,OAIFxC,KAAKwC,OAAOosC,MAAQ,EAHpB,mCAeTztC,OAAAkH,eAAWomC,EAAArrC,UAAA,aAOX,WACC,IAAIyrC,EAAQ7uC,KAAKiR,WAAW49B,MAY5B,YAVahqC,GAATgqC,GACC7uC,KAAKwC,SACRqsC,EAAQ7uC,KAAKwC,OAAOqsC,YAGThqC,GAATgqC,GACC7uC,KAAK0R,YACRm9B,EAAQ7uC,KAAK0R,UAAU7I,OAAOmE,SAAShN,KAAK0R,UAAU7I,OAAO2gB,KAAOxpB,KAAKiQ,QAGpE4+B,OApBR,SAAiBtgC,GAChBvO,KAAKkR,YAAY,QAAS3C,oCA0B3BpN,OAAAkH,eAAWomC,EAAArrC,UAAA,cASX,WACC,OAAOpD,KAAK4S,aAVb,SAAkB7O,GACb/D,KAAK4S,UACR5S,KAAK0R,UAAU3N,OAAO+a,YAAY9e,KAAK4S,SACvC5S,KAAK4S,QAAQiM,WAEd7e,KAAK4S,QAAU7O,EACf/D,KAAKoJ,WAAWC,KAAKtF,oCAMvB0qC,EAxRA,CAAqCzT,EAAA,GAiYrC8T,EAAA,SAAAjvC,GA4KC,SAAAivC,IAAA,IAAAhvC,EAGCD,EAAAE,KAAAC,OAAOA,KAtFDF,EAAAivC,gBAAqDjvC,EAAKkvC,SA8D1DlvC,EAAAmvC,UAAoB,EAyB1BnvC,EAAKG,UAAY,UAEjBH,EAAKovC,UAAY,EACjBpvC,EAAKqvC,aAAe,EAEpBrvC,EAAK+I,OAAS,IAAIumC,EAAA,EAClBtvC,EAAKuvC,QAAU,aAGf,IAAI3mC,EAAQ5I,EAAKsE,MAAMiF,KAAK,IAAIimC,EAAA,GAChC5mC,EAAMq4B,MAAMrpB,UAAW,EACvBhP,EAAM6mC,cAAe,EAErB,IAAIC,EAAY9mC,EAAM9C,SACtB4pC,EAAUn3B,QAAS,EACnBm3B,EAAU1jB,OAAOf,SAASrT,UAAW,EACrC83B,EAAU3jB,MAAMd,SAASrT,UAAW,EACpC83B,EAAUh7B,KAAKuW,SAASrT,UAAW,EACnC83B,EAAUC,UAAU1kB,SAASrT,UAAW,EACxC83B,EAAUl9B,gBAAkB,IAC5Bk9B,EAAUxc,KAAKtb,UAAW,EAC1B83B,EAAU/3B,SAASC,UAAW,EAG9B,IAAI/O,EAAQ7I,EAAKyE,MAAM8E,KAAK,IAAIimC,EAAA,GAChC3mC,EAAMo4B,MAAMrpB,UAAW,EACvB/O,EAAM4mC,cAAe,EAErB,IAAIG,EAAY/mC,EAAM/C,SACtB8pC,EAAUr3B,QAAS,EACnBq3B,EAAU5jB,OAAOf,SAASrT,UAAW,EACrCg4B,EAAU7jB,MAAMd,SAASrT,UAAW,EACpCg4B,EAAUl7B,KAAKuW,SAASrT,UAAW,EACnCg4B,EAAUD,UAAU1kB,SAASrT,UAAW,EACxCg4B,EAAUp9B,gBAAkB,IAC5Bo9B,EAAU1c,KAAKtb,UAAW,EAC1Bg4B,EAAUj4B,SAASC,UAAW,EAC9Bg4B,EAAU/nC,UAAW,EAErB7H,EAAKgC,OAAOC,GAAG,iBAAkB,WAChCjC,EAAKof,mBAINpf,EAAK4I,MAAQA,EACb5I,EAAK6I,MAAQA,EAEb,IAAMoiB,EAAW,IAAI4kB,EAAA,SACrB7vC,EAAK8vC,gBAAkB,IAAIt+B,EAAA,EAAgDyZ,GAC3EjrB,EAAKsJ,WAAWC,KAAK,IAAIiI,EAAA,EAAmBxR,EAAK8vC,kBACjD9vC,EAAKsJ,WAAWC,KAAK0hB,GAErBjrB,EAAK4C,cAAcZ,OAAOC,GAAG,MAAO,WACnCjC,EAAK+vC,oBAAoB/vC,EAAKgwC,iBAG/BhwC,EAAK8vC,gBAAgB9tC,OAAOC,GAAG,YAAa,SAACqD,GAC5CA,EAAMM,SAASiiC,YAAa,IAI7B7nC,EAAKI,eAmwBP,OAh/B6BC,EAAA,EAAA2uC,EAAAjvC,GAsP5BsB,OAAAkH,eAAWymC,EAAA1rC,UAAA,qBAkBX,WACC,OAAOpD,KAAK+vC,oBAnBb,SAAyBC,GAAzB,IAAAlwC,EAAAE,KACKA,KAAK+vC,gBAAkBC,IAC1BhwC,KAAK+vC,eAAiBC,EACtBA,EAAcxtC,OAASxC,KACvBgwC,EAAcnoC,SACdmoC,EAAcvC,MAAM1iB,SAASjpB,OAAOC,GAAG,MAAO,SAACqD,GAC9C,IAAI8N,EAA4B9N,EAAME,OAAO4N,SAAS4B,YACtDhV,EAAK+vC,oBAAoB38B,GACzBpT,EAAKmwC,iBAAiB/8B,KAGvBlT,KAAKoJ,WAAWC,KAAK2mC,qCAiBhBlB,EAAA1rC,UAAAc,aAAP,eAAApE,EAAAE,KAECA,KAAK+D,OAAOojB,QAEZtnB,EAAAuD,UAAMc,aAAYnE,KAAAC,MAEdA,KAAK8vC,eACR9vC,KAAK8vC,cAAcjxB,UAGpB,IAAIqxB,EAAelwC,KAAK2M,UAAUoe,SAAS0I,QAC3CzzB,KAAK8vC,cAAgBI,EAErBvpB,EAAA,KAAW3mB,KAAK2M,UAAU3I,WAAY,SAACkP,GACtCA,EAAS1Q,OAAS0tC,IAGnBA,EAAa5c,SAAWtzB,KAAK2M,UAE7BujC,EAAazN,GAAK,EAClByN,EAAapL,GAAK,EAClBoL,EAAah0B,KAAOlc,KAAKmwC,UAEzB,IACIzwB,EADO,IACQ1f,KAAKkL,YAAclL,KAAKiL,YAAe,IAE1DilC,EAAaxN,GAHF,IAIXwN,EAAanL,GAAKrlB,EAElB1f,KAAK0I,MAAMqF,IAAM,EACjB/N,KAAK0I,MAAMmF,IAPA,IASX7N,KAAK2I,MAAMoF,IAAM,EACjB/N,KAAK2I,MAAMkF,IAAM6R,EAEjB1f,KAAKowC,YAAYF,GAEjBlwC,KAAKiwC,iBAAiBC,GAEtBv4B,EAAA,EAAS7V,OAAO8gB,KAAK,YAAa,WACjC9iB,EAAKuwC,cAAc,MAWdvB,EAAA1rC,UAAAgtC,YAAP,SAAmB5tC,EAAyB6sC,GAC3C,GAAI7sC,EAAQ,CACX,IAAI8wB,EAAW9wB,EAAO8wB,SAEjB+b,IACJA,EAAUrvC,KAAKqvC,SAGD,aAAXA,GACH/b,EAASha,OAAO5N,KAAK,SAACC,EAAGC,GACxB,OAAOD,EAAE4C,MAAQ3C,EAAE2C,QAGN,cAAX8gC,GACH/b,EAASha,OAAO5N,KAAK,SAACC,EAAGC,GACxB,OAAOA,EAAE2C,MAAQ5C,EAAE4C,QAIrBvO,KAAK+uC,gBAAgBvsC,GAErB,IAAK,IAAIyJ,EAAI,EAAGA,EAAIqnB,EAAS5uB,OAAQuH,IAAK,CAEzC,IAAIqhC,EAAOha,EAAStmB,SAASf,GAEzBqhC,EAAKha,UACRtzB,KAAKowC,YAAY9C,MAaXwB,EAAA1rC,UAAA6sC,iBAAV,SAA2B/8B,GAA3B,IAAApT,EAAAE,KAECA,KAAKswC,eAML,IAJA,IAAIC,GAAkBr9B,GAGlBs9B,EAAiBt9B,EAAS1Q,YACLqC,GAAlB2rC,GACNxwC,KAAKywC,WAAWD,GAChBD,EAAelnC,KAAKmnC,GACpBA,EAAiBA,EAAehuC,OAGjC+tC,EAAe1Z,UAEX72B,KAAKgwC,gBACRhwC,KAAKgwC,cAAcvrC,KAAO8rC,GAI3BvwC,KAAK0wC,qBAAqBx9B,GAG1Bs7B,EAAA,EAAYxuC,KAAKswC,YAAa,SAACvsC,IACM,GAAhCjE,EAAKiE,OAAOwZ,QAAQxZ,IACvBjE,EAAKiE,OAAOsF,KAAKtF,GAElBA,EAAO1C,OAAS0C,EAAO6qC,SAUfE,EAAA1rC,UAAAstC,qBAAV,SAA+Bx9B,GAC9B,GAAIA,EAASogB,UACApgB,EAAS07B,MAET5uC,KAAKmvC,aAAenvC,KAAKkvC,UAAW,CAE/ClvC,KAAKywC,WAAWv9B,GAEhB,IAAK,IAAIjH,EAAI,EAAGA,EAAIiH,EAASogB,SAAS5uB,OAAQuH,IAAK,CAClD,IAAIsnB,EAAQrgB,EAASogB,SAAStmB,SAASf,GACnCsnB,EAAMD,UACTtzB,KAAK0wC,qBAAqBnd,MAYrBub,EAAA1rC,UAAA8D,eAAV,WACC,OAAO,GAUE4nC,EAAA1rC,UAAAqtC,WAAV,SAAqBv9B,GAArB,IAAApT,EAAAE,KACC,IAAKkT,EAASnP,OAAQ,CACrB,IAAIA,OAAM,EAENgnB,EAAW/qB,KAAK4vC,gBAAgB56B,OAAO9B,EAAS07B,MAAM3nB,aAEzDljB,EADGgnB,EACMA,EAAS0I,QAGTzzB,KAAK+D,OAAOwjB,UAGfrL,KAAOhJ,EAASgJ,KACvBnY,EAAOysC,eAAiBt9B,EACxBA,EAASnP,OAASA,EAElB,IAAI6qC,EAAQ17B,EAAS07B,MACrB7qC,EAAO6qC,MAAQA,EAEf,IAAI95B,EAAmB5B,EAAS4B,YAC5BA,IACH/Q,EAAO6L,OAASkF,EAAYlF,QAG7B5P,KAAK2wC,UAAU7xB,YAAY/a,GAC3BA,EAAOU,KAAOyO,EAASogB,SAASha,OAChCvV,EAAO6E,KAAOsK,EAAS27B,MAEvB9qC,EAAO+kC,QAAQ/d,SAAS3c,QAAQC,IAAI,OAAQ,SAACzF,EAAMtD,GAClD,IAAI4N,EAAkC5N,EAAO4N,SAC7C,GAAIA,EAAU,CACb,IAAIw1B,EAAkBx1B,EAASw1B,gBAC/B,GAAIA,EAGH,OAFApjC,EAAOsD,KAAO8/B,EAAgBmG,MAC9BvpC,EAAO8I,QAAQ6G,OAAO,QACfyzB,EAAgBmG,SAKtB7uC,KAAKivC,WAAa/7B,EAAS07B,MAAQ5uC,KAAKmvC,cAAiBj8B,EAASogB,UAAYpgB,EAASogB,SAAS5uB,OAAS,KAC5GX,EAAO+kC,QAAQ/d,SAAS6lB,gBAAkBC,EAAA,EAAiBnT,QACvD19B,KAAKivC,UACRlrC,EAAO+kC,QAAQ/d,SAASjpB,OAAOC,GAAG,MAAO,SAACqD,GACzC,IAAI6jC,EAAwC7jC,EAAME,OAAO4N,SAErDA,EAAS07B,MAAQ9uC,EAAKqvC,aACzBrvC,EAAK+vC,oBAAoB5G,EAAeP,gBAAgBlmC,QAGxD1C,EAAKgxC,qBAAqB7H,IAGzBjpC,OAKNA,KAAKswC,YAAYjnC,KAAK6J,EAASnP,SAStB+qC,EAAA1rC,UAAAitC,cAAV,SAAwBluB,GAAxB,IAAAriB,EAAAE,KAEC2mB,EAAA,KAAW3mB,KAAK+D,OAAOC,WAAY,SAACD,IACO,GAAtCjE,EAAKwwC,YAAY/yB,QAAQxZ,GAC5BA,EAAOqlC,SAASjnB,IAGhBpe,EAAOmlC,SAAS/mB,GAEZpe,EAAO6qC,MAAQ9uC,EAAKqvC,aAAervC,EAAKovC,UAAY,EACvDnrC,EAAOtB,iBAAiBS,KAAKif,GAG7Bpe,EAAOtB,iBAAiB0E,KAAKgb,OAW1B2sB,EAAA1rC,UAAA0tC,qBAAP,SAA4B59B,GAC3BlT,KAAK6vC,oBAAoB38B,EAASw1B,kBAS5BoG,EAAA1rC,UAAAysC,oBAAP,SAA2B38B,GAA3B,IAAApT,EAAAE,KACC,GAAIkT,EAASogB,SAAU,CACtBtzB,KAAK0I,MAAMwjB,aAAahZ,EAASuvB,GAAIvvB,EAASwvB,IAC9C1iC,KAAK2I,MAAMujB,aAAahZ,EAAS4xB,GAAI5xB,EAAS6xB,IAE9C/kC,KAAKmvC,aAAej8B,EAAS07B,MAC7B5uC,KAAK+wC,gBAAkB79B,EAEvBlT,KAAKiwC,iBAAiB/8B,GAEtB,IAAI89B,EAAuBhxC,KAAK0I,MAAMsoC,sBAAwBhxC,KAAK2I,MAAMqoC,qBACrEA,EACHA,EAAqBlvC,OAAO8gB,KAAK,iBAAkB,WAClD9iB,EAAKuwC,kBAINrwC,KAAKqwC,kBASEvB,EAAA1rC,UAAAC,sBAAV,WAECxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MAItB6vB,EAAA,SAAe7vB,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,kBAE5CzD,KAAKixC,SAAWjxC,KAAKwD,SAASC,UAAU,SAS/BqrC,EAAA1rC,UAAAqO,eAAV,WACC,OAAO,IAAIg9B,GAaZttC,OAAAkH,eAAWymC,EAAA1rC,UAAA,iBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,kBAR9B,SAAqBb,GACpBvO,KAAKqP,iBAAiB,YAAad,GAAO,oCAe3CpN,OAAAkH,eAAWymC,EAAA1rC,UAAA,oBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,qBAR9B,SAAwBb,GACvBvO,KAAKqP,iBAAiB,eAAgBd,GAAO,oCAkB9CpN,OAAAkH,eAAWymC,EAAA1rC,UAAA,eAIX,WACC,OAAOpD,KAAKoP,iBAAiB,gBAL9B,SAAmBb,GAClBvO,KAAKqP,iBAAiB,UAAWd,GAAO,oCAY/BugC,EAAA1rC,UAAA+M,aAAV,WACC,OAAO,IAAIw/B,EAAA,GASZxuC,OAAAkH,eAAWymC,EAAA1rC,UAAA,gBAUX,WACC,OAAOpD,KAAKmwC,eAXb,SAAoB5hC,GACnBvO,KAAKmwC,UAAY5hC,EACbvO,KAAK8vC,gBACR9vC,KAAK8vC,cAAc5zB,KAAOlc,KAAKmwC,4CAiB1BrB,EAAA1rC,UAAAuM,cAAP,SAAqBC,GAEpB,GAAIA,EAAQ,CAGX,GAAIigB,EAAA,SAAejgB,EAAwB,kBAAMigB,EAAA,SAAejgB,EAAwB,iBACvF,OAAQA,EAAwB,iBAC/B,IAAK,WACJA,EAAwB,gBAAI5P,KAAKgvC,SACjC,MACD,IAAK,aACJp/B,EAAwB,gBAAI5P,KAAKkxC,WACjC,MACD,IAAK,QACJthC,EAAwB,gBAAI5P,KAAK8zB,MACjC,MACD,IAAK,OACJlkB,EAAwB,gBAAI5P,KAAKmxC,KACjC,MACD,IAAK,YACJvhC,EAAwB,gBAAI5P,KAAKoxC,UACjC,MACD,eACQxhC,EAAwB,gBAO9BigB,EAAA,SAAejgB,EAAOogC,iBAAmBngB,EAAA,SAAejgB,EAAOogC,cAAclgC,QAChFF,EAAOogC,cAAclgC,KAAO,iBAG7BjQ,EAAAuD,UAAMuM,cAAa5P,KAAAC,KAAC4P,KAWZk/B,EAAA1rC,UAAAiuC,0BAAV,WACCrxC,KAAKoI,uBAgBC0mC,EAAA1rC,UAAAkuC,eAAP,WACCzxC,EAAAuD,UAAMkuC,eAAcvxC,KAAAC,MACpBA,KAAKowC,YAAYpwC,KAAK+wC,kBAQhBjC,EAAA1rC,UAAA+a,kBAAP,WACCte,EAAAuD,UAAM+a,kBAAiBpe,KAAAC,MACvBA,KAAKowC,YAAYpwC,KAAK8vC,eACtBnpB,EAAA,KAAW3mB,KAAK+D,OAAOC,WAAY,SAACD,GACnCA,EAAOwtC,oBAERvxC,KAAK6vC,oBAAoB7vC,KAAK8vC,gBAoDxBhB,EAAA1rC,UAAA8tC,WAAP,SAAkB1uC,GACjB,IACCyJ,EACA+5B,EAFGwL,EAAQhvC,EAAO8wB,SACfme,EAAID,EAAM9sC,OACRgtC,EAAO,IAAIC,MAAMF,EAAI,GAE3B,IAAKC,EAAK,GAAK1L,EAAM/5B,EAAI,EAAGA,EAAIwlC,IAAKxlC,EACpCylC,EAAKzlC,EAAI,GAAK+5B,GAAOwL,EAAMxkC,SAASf,GAAGsC,OAKxC,SAAAqjC,EAAmB3lC,EAAW4lC,EAAWtjC,EAAek0B,EAAYqC,EAAYpC,EAAYqC,GAC3F,GAAI94B,GAAK4lC,EAAI,EAAG,CACf,IAAIvE,EAAOkE,EAAMxkC,SAASf,GAG1B,OAFAqhC,EAAK7K,GAAKA,EAAI6K,EAAKxI,GAAKA,EACxBwI,EAAK5K,GAAKA,OAAI4K,EAAKvI,GAAKA,GAIzB,IAAI+M,EAAcJ,EAAKzlC,GACtB8lC,EAAexjC,EAAQ,EAAKujC,EAC5BE,EAAI/lC,EAAI,EACRgmC,EAAKJ,EAAI,EAEV,KAAOG,EAAIC,GAAI,CACd,IAAIC,EAAMF,EAAIC,IAAO,EACjBP,EAAKQ,GAAOH,EAAaC,EAAIE,EAAM,EAClCD,EAAKC,EAGNH,EAAcL,EAAKM,EAAI,GAAON,EAAKM,GAAKD,GAAgB9lC,EAAI,EAAI+lC,KAAIA,EAEzE,IAAIG,EAAYT,EAAKM,GAAKF,EACzBM,EAAa7jC,EAAQ4jC,EAEtB,GAAKzP,EAAKD,EAAOsC,EAAKD,EAAK,CAC1B,IAAIuN,GAAM5P,EAAK2P,EAAa1P,EAAKyP,GAAa5jC,EAC9CqjC,EAAU3lC,EAAG+lC,EAAGG,EAAW1P,EAAIqC,EAAIuN,EAAItN,GACvC6M,EAAUI,EAAGH,EAAGO,EAAYC,EAAIvN,EAAIpC,EAAIqC,OAClC,CACN,IAAIuN,GAAMxN,EAAKsN,EAAarN,EAAKoN,GAAa5jC,EAC9CqjC,EAAU3lC,EAAG+lC,EAAGG,EAAW1P,EAAIqC,EAAIpC,EAAI4P,GACvCV,EAAUI,EAAGH,EAAGO,EAAY3P,EAAI6P,EAAI5P,EAAIqC,IAjC1C6M,CAAU,EAAGH,EAAGjvC,EAAO+L,MAAO/L,EAAOigC,GAAIjgC,EAAOsiC,GAAItiC,EAAOkgC,GAAIlgC,EAAOuiC,KA4ChE+J,EAAA1rC,UAAA0wB,MAAP,SAAatxB,GAYZ,IAXA,IAMC8qC,EANG7K,EAAKjgC,EAAOigC,GACZC,EAAKlgC,EAAOkgC,GACZoC,EAAKtiC,EAAOsiC,GACZC,EAAKviC,EAAOuiC,GAEZyM,EAAQhvC,EAAO8wB,SAElBrnB,GAAK,EACLwlC,EAAID,EAAM9sC,OACVstC,EAAIxvC,EAAO+L,QAAUw2B,EAAKD,GAAMtiC,EAAO+L,QAE/BtC,EAAIwlC,IACZnE,EAAOkE,EAAMxkC,SAASf,IAASw2B,GAAKA,EAAI6K,EAAK5K,GAAKA,EAClD4K,EAAKxI,GAAKA,EAAIwI,EAAKvI,GAAKD,GAAMwI,EAAK/+B,MAAQyjC,GAUtClD,EAAA1rC,UAAA+tC,KAAP,SAAY3uC,GAYX,IAXA,IAMC8qC,EANG7K,EAAKjgC,EAAOigC,GACZC,EAAKlgC,EAAOkgC,GACZoC,EAAKtiC,EAAOsiC,GACZC,EAAKviC,EAAOuiC,GAEZyM,EAAQhvC,EAAO8wB,SAElBrnB,GAAK,EACLwlC,EAAID,EAAM9sC,OACVstC,EAAIxvC,EAAO+L,QAAUm0B,EAAKD,GAAMjgC,EAAO+L,QAE/BtC,EAAIwlC,IACZnE,EAAOkE,EAAMxkC,SAASf,IAAS64B,GAAKA,EAAIwI,EAAKvI,GAAKA,EAClDuI,EAAK7K,GAAKA,EAAI6K,EAAK5K,GAAKD,GAAM6K,EAAK/+B,MAAQyjC,GAUtClD,EAAA1rC,UAAAguC,UAAP,SAAiB5uC,GACD,EAAfA,EAAOosC,MAAY5uC,KAAK8zB,MAAMtxB,GAAUxC,KAAKmxC,KAAK3uC,IAS5CssC,EAAA1rC,UAAA4rC,SAAP,SAAgBxsC,GAwBf,IAvBA,IAQI+vC,EAIA95B,EACAF,EAEAi6B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EArBAC,GAAS,EAAInlC,KAAKolC,KAAK,IAAM,EAE7BvQ,EAAKjgC,EAAOigC,GACZC,EAAKlgC,EAAOkgC,GACZoC,EAAKtiC,EAAOsiC,GACZC,EAAKviC,EAAOuiC,GAEZyM,EAAQhvC,EAAO8wB,SAEf2f,EAAK,EACLC,EAAK,EACLzB,EAAID,EAAM9sC,OAGV6J,EAAQ/L,EAAO+L,MASZ0kC,EAAKxB,GAAG,CACdh5B,EAAKiqB,EAAKD,EAAIlqB,EAAKwsB,EAAKD,EAGxB,GAAG0N,EAAWhB,EAAMxkC,SAASkmC,KAAM3kC,aAAeikC,GAAYU,EAAKzB,GAOnE,IANAgB,EAAWC,EAAWF,EAEtBM,EAAON,EAAWA,GADlBK,EAAQjlC,KAAKC,IAAI0K,EAAKE,EAAIA,EAAKF,IAAOhK,EAAQwkC,IAE9CH,EAAWhlC,KAAKC,IAAI6kC,EAAWI,EAAMA,EAAOL,GAGrCS,EAAKzB,IAAKyB,EAAI,CAUpB,GATAV,GAAYD,EAAYf,EAAMxkC,SAASkmC,GAAI3kC,MACvCgkC,EAAYE,IACfA,EAAWF,GAERA,EAAYG,IACfA,EAAWH,GAEZO,EAAON,EAAWA,EAAWK,GAC7BF,EAAW/kC,KAAKC,IAAI6kC,EAAWI,EAAMA,EAAOL,IAC7BG,EAAU,CACxBJ,GAAYD,EAAW,MAExBK,EAAWD,EAIZ,IAAIQ,EAAMnzC,KAAK2M,UAAUoe,SAAS0I,QAClC0f,EAAI5kC,MAAQikC,EACZW,EAAIhC,KAAO14B,EAAKF,EAChB46B,EAAI7f,SAAWke,EAAM1d,MAAMmf,EAAIC,GAC/BC,EAAI1Q,GAAKA,EACT0Q,EAAIrO,GAAKA,EACTqO,EAAIzQ,GAAKA,EACTyQ,EAAIpO,GAAKA,EAELoO,EAAIhC,MACPgC,EAAIpO,GAAKx2B,EAAQu2B,GAAMvsB,EAAKi6B,EAAWjkC,EAAQw2B,EAC/C/kC,KAAKmxC,KAAKgC,KAGVA,EAAIzQ,GAAKn0B,EAAQk0B,GAAMhqB,EAAK+5B,EAAWjkC,EAAQm0B,EAC/C1iC,KAAK8zB,MAAMqf,IAEZ5kC,GAASikC,EAAUS,EAAKC,IAOhBpE,EAAA1rC,UAAAsgC,WAAV,WACC,IAAII,EAAS9jC,KAAK8jC,OAClB,GAAIA,EAAQ,CACX,IAAIC,KAEJpd,EAAA,KAAW3mB,KAAK+D,OAAOC,WAAY,SAACD,GAChB,GAAhBA,EAAO6qC,OACT7K,EAAW16B,KAAKtF,KAIlB+/B,EAAOr0B,WAAWyM,KAAO,OACzB4nB,EAAOQ,eAAevZ,SAASwZ,eAAe7sB,SAAW,iBAEzDosB,EAAOr/B,KAAOs/B,IAIjB+K,EAh/BA,CAA6B9T,EAAA,GAw/B7BrjB,EAAA,EAASjH,kBAA2B,QAAIo+B,+KCv6CxCjf,EAAAlwB,EAAA,GAkCAyzC,EAAA,SAAAvzC,GAEC,SAAAuzC,IAAA,IAAAtzC,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,oBACjBH,EAAKI,eAGP,OARuCC,EAAA,EAAAizC,EAAAvzC,GAQvCuzC,EARA,CAAuCpY,EAAA,GAwEvCqY,EAAA,SAAAxzC,GA0DC,SAAAwzC,IAAA,IAAAvzC,EAGCD,EAAAE,KAAAC,OAAOA,KAtBEF,EAAAQ,eAAyCgzC,EAAA,EAMzCxzC,EAAAU,eAAyC+yC,EAAA,EAiBlDzzC,EAAKG,UAAY,YAGjBH,EAAKylC,MAAQ,GACbzlC,EAAK4V,MAAQ,GAGb,IAAI80B,EAAmB1qC,EAAKyC,gBAAgBxB,YAAYC,EAAA,UACxDwpC,EAAiBvpC,aAAc,EAC/BupC,EAAiBzyB,YAAa,EAC9ByyB,EAAiB5pC,OAAS,OAC1Bd,EAAK0qC,iBAAmBA,EAGxB1qC,EAAKI,eA2JP,OAvO+BC,EAAA,EAAAkzC,EAAAxzC,GAqF9BsB,OAAAkH,eAAWgrC,EAAAjwC,UAAA,aASX,WACC,OAAOpD,KAAKoP,iBAAiB,cAV9B,SAAiBb,GAChBvO,KAAKqP,iBAAiB,QAASd,GAC/BvO,KAAKwzC,YACLxzC,KAAK0sC,uDAgBNvrC,OAAAkH,eAAWgrC,EAAAjwC,UAAA,aASX,WACC,OAAOpD,KAAKoP,iBAAiB,cAV9B,SAAiBb,GAChBvO,KAAKqP,iBAAiB,QAASd,GAC/BvO,KAAKwzC,YACLxzC,KAAK0sC,uDAgBNvrC,OAAAkH,eAAWgrC,EAAAjwC,UAAA,YAAX,WACC,OAAO8pC,EAAA,IAAUltC,KAAK0V,OAAS1V,KAAKulC,uCASrCpkC,OAAAkH,eAAWgrC,EAAAjwC,UAAA,YAAX,WACC,OAAQ8pC,EAAA,IAAUltC,KAAK0V,OAAS1V,KAAKulC,uCAQ/B8N,EAAAjwC,UAAAiJ,SAAP,WACCxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,MACdA,KAAKwzC,aAOIH,EAAAjwC,UAAAowC,UAAV,WACCxzC,KAAKW,eAAeqC,WAAahD,KAAK6pC,KACtC7pC,KAAKW,eAAeuE,aAAelF,KAAK4pC,KAEpC5pC,KAAK0G,aACR1G,KAAK0G,WAAW6R,GAAKvY,KAAK6pC,KAC1B7pC,KAAK0G,WAAW+R,GAAKzY,KAAK4pC,MAGvB5pC,KAAKqH,aACRrH,KAAKqH,WAAWkR,GAAKvY,KAAK6pC,KAC1B7pC,KAAKqH,WAAWoR,GAAKzY,KAAK4pC,MAG3B5pC,KAAKyzC,cAOIJ,EAAAjwC,UAAAqwC,WAAV,eAAA3zC,EAAAE,KACKilB,EAAgB,EAEpBtU,EAAA,KAAW3Q,KAAK+D,OAAOC,WAAY,SAACD,GAC/BA,aAAkB2vC,EAAA,IAEhB3vC,EAAO4vC,WACX1uB,IAGDlhB,EAAO6vC,WAAa3uB,EAAQ,KAI9B,IAAI4uB,EAAY,EAEhBljC,EAAA,KAAW3Q,KAAK+D,OAAOC,WAAY,SAACD,GACnC,GAAIA,aAAkB2vC,EAAA,EAAgB,CAErC3vC,EAAOwhC,MAAQzlC,EAAKylC,MAAQtgB,EAC5BlhB,EAAO2R,MAAQ5V,EAAK4V,MACpB3R,EAAO0U,GAAK3Y,EAAKylC,MAAQtgB,EAAQioB,EAAA,IAAUptC,EAAK4V,OAAS3R,EAAO6vC,WAChE7vC,EAAOwU,IAAMzY,EAAKylC,MAAQtgB,EAAQioB,EAAA,IAAUptC,EAAK4V,OAAS3R,EAAO6vC,WAEjE,IAAIE,EAAY,EAEhBnjC,EAAA,KAAW5M,EAAO+kC,QAAQ9kC,WAAY,SAACwlC,GACtCA,EAAOnoC,OAAS,IAAOyyC,EAAID,EAAwB,IAApB9vC,EAAO6vC,WACtCE,MAGDD,QAWIR,EAAAjwC,UAAAuM,cAAP,SAAqBC,GAEpB,GAAIA,GAGCigB,EAAA,SAAejgB,EAAO7L,SAAW8rB,EAAA,QAAcjgB,EAAO7L,QACzD,IAAK,IAAIkI,EAAI,EAAG4D,EAAMD,EAAO7L,OAAOW,OAAQuH,EAAI4D,EAAK5D,IACpD2D,EAAO7L,OAAOkI,GAAG6D,KAAOF,EAAO7L,OAAOkI,GAAG6D,MAAQ,iBAMpDjQ,EAAAuD,UAAMuM,cAAa5P,KAAAC,KAAC4P,IAItByjC,EAvOA,CAA+BrY,EAAA,GA+O/BuB,EAAA,EAAS7rB,kBAA6B,UAAI2iC,4KCzV1CxjB,EAAAlwB,EAAA,GAoCAo0C,EAAA,SAAAl0C,GAmBC,SAAAk0C,IAAA,IAAAj0C,EACCD,EAAAE,KAAAC,OAAOA,YAEPF,EAAKwZ,OAAO06B,aACZl0C,EAAKwZ,OAAO26B,aACZn0C,EAAKwZ,OAAO46B,cACZp0C,EAAKwZ,OAAO66B,cAEZr0C,EAAKG,UAAY,4BAEjBH,EAAKI,eAsGP,OAnI+CC,EAAA,EAAA4zC,EAAAl0C,GAqC9CsB,OAAAkH,eAAW0rC,EAAA3wC,UAAA,iBAOX,WACC,OAAOpD,KAAKsZ,OAAO06B,UAAUzlC,WAR9B,SAAqBA,GACpBvO,KAAKia,SAAS,YAAa1L,oCAe5BpN,OAAAkH,eAAW0rC,EAAA3wC,UAAA,iBAOX,WACC,OAAOpD,KAAKsZ,OAAO26B,UAAU1lC,WAR9B,SAAqBA,GACpBvO,KAAKia,SAAS,YAAa1L,oCAe5BpN,OAAAkH,eAAW0rC,EAAA3wC,UAAA,kBAOX,WACC,OAAOpD,KAAKsZ,OAAO46B,WAAW3lC,WAR/B,SAAsBA,GACrBvO,KAAKia,SAAS,aAAc1L,oCAe7BpN,OAAAkH,eAAW0rC,EAAA3wC,UAAA,kBAOX,WACC,OAAOpD,KAAKsZ,OAAO66B,WAAW5lC,WAR/B,SAAsBA,GACrBvO,KAAKia,SAAS,aAAc1L,oCAiB7BpN,OAAAkH,eAAW0rC,EAAA3wC,UAAA,mBAOX,WACC,OAAOpD,KAAKsZ,OAAOC,OAAOhL,WAR3B,SAAuBA,GACtBvO,KAAKia,SAAS,SAAU1L,oCAiBzBpN,OAAAkH,eAAW0rC,EAAA3wC,UAAA,mBAOX,WACC,OAAOpD,KAAKsZ,OAAOG,OAAOlL,WAR3B,SAAuBA,GACtBvO,KAAKia,SAAS,SAAU1L,oCAS1BwlC,EAnIA,CAA+CnL,EAAA,GA6O/CwL,EAAA,SAAAv0C,GAqFC,SAAAu0C,IAAA,IAAAt0C,EACCD,EAAAE,KAAAC,OAAOA,KACPF,EAAKG,UAAY,oBAEjBH,EAAKmtB,cAAgB,EAErB,IAAIR,EAAkB,IAAIqZ,EAAA,EACtBuO,EAAgB5nB,EAAgBI,OAAO,YACvCynB,EAAgB7nB,EAAgBI,OAAO,mBAE3C/sB,EAAKy0C,kBAAkBtjC,WAAWrI,KAAO0rC,EACzCx0C,EAAKy0C,kBAAkBtjC,WAAWlI,OAASurC,EAE3Cx0C,EAAK00C,kBAAkBvjC,WAAWrI,KAAOyrC,EACzCv0C,EAAK00C,kBAAkBvjC,WAAWlI,OAASsrC,EAE3Cv0C,EAAKI,eAwPP,OA7VuCC,EAAA,EAAAi0C,EAAAv0C,GA4G5Bu0C,EAAAhxC,UAAAC,sBAAV,WACCxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MACtB6vB,EAAA,SAAe7vB,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,wBAUnC2wC,EAAAhxC,UAAAqO,eAAV,WACC,OAAO,IAAIsiC,GASLK,EAAAhxC,UAAAqxC,wBAAP,SAA+BvhC,GAC9BrT,EAAAuD,UAAMqxC,wBAAuB10C,KAAAC,KAACkT,GAE9B,IAAIs2B,EAAsBt2B,EAASs2B,OACnC,GAAIA,EAAQ,CACX,IAAIkL,EAAUlL,EAAO0B,QACjByJ,EAAWnL,EAAO4B,SAEtB,GAAIprC,KAAKkd,UAAYld,KAAK0I,MAAO,CAChC,IAAI4B,EAAYk/B,EAAOv+B,WAAa,EACpCypC,EAAQpqC,EAAIA,EACZqqC,EAASrqC,EAAIA,EAEb,IAAIsqC,EAAO1hC,EAAS8H,gBAAgBhb,KAAK+c,YACrC83B,EAAQ3hC,EAAS8H,gBAAgBhb,KAAK8c,QAEtCg4B,EAAQ90C,KAAK2I,MAAMkO,KAAK3D,EAAUlT,KAAK+c,YACvCg4B,EAAS/0C,KAAK2I,MAAMkO,KAAK3D,EAAUlT,KAAK8c,QACxCk4B,EAAOh1C,KAAK2I,MAAMkO,KAAK3D,EAAUlT,KAAKi1C,WACtCC,EAAQl1C,KAAK2I,MAAMkO,KAAK3D,EAAUlT,KAAKm1C,YAEvC5oC,EAASi9B,EAAOj9B,OAEpBmoC,EAAQ3P,GAAKiQ,EAAOzoC,EACpBooC,EAAS5P,GAAKmQ,EAAQ3oC,EAElBqoC,EAAOC,GACVH,EAAQ1P,GAAK8P,EAAQvoC,EACrBooC,EAAS3P,GAAK+P,EAASxoC,IAGvBmoC,EAAQ1P,GAAK+P,EAASxoC,EACtBooC,EAAS3P,GAAK8P,EAAQvoC,GAIxB,GAAIvM,KAAKkd,UAAYld,KAAK2I,MAAO,CAChC,IAAI4B,EAAYi/B,EAAOt+B,YAAc,EAErCwpC,EAAQnqC,EAAIA,EACZoqC,EAASpqC,EAAIA,EAEb,IAAI6qC,EAAOliC,EAAS8H,gBAAgBhb,KAAK2c,YACrC04B,EAAQniC,EAAS8H,gBAAgBhb,KAAK0c,QAEtC44B,EAAQt1C,KAAK0I,MAAM+N,KAAKvD,EAAUlT,KAAK2c,YACvC44B,EAASv1C,KAAK0I,MAAM+N,KAAKvD,EAAUlT,KAAK0c,QACxC84B,EAAOx1C,KAAK0I,MAAM+N,KAAKvD,EAAUlT,KAAKy1C,WACtCC,EAAQ11C,KAAK0I,MAAM+N,KAAKvD,EAAUlT,KAAK21C,YAEvCloB,EAAS+b,EAAO/b,OAEpBinB,EAAQhS,GAAK8S,EAAO/nB,EACpBknB,EAASjS,GAAKgT,EAAQjoB,EAElB2nB,EAAOC,GACVX,EAAQxhB,GAAKoiB,EAAQ7nB,EACrBknB,EAASzhB,GAAKqiB,EAAS9nB,IAGvBinB,EAAQxhB,GAAKqiB,EAAS9nB,EACtBknB,EAASzhB,GAAKoiB,EAAQ7nB,GAIxB9G,EAAA,KAAW3mB,KAAKgQ,WAAWhM,WAAY,SAACkL,GAEvC,IAAI0mC,EAAc1iC,EAAS2iC,cAAc7gC,OAAO9F,EAAUiN,KAC1D,GAAIy5B,EAAa,CAChB,IAAIE,EAAeF,EAAY1K,QAC/B4K,EAAaxrC,EAAIoqC,EAAQpqC,EACzBwrC,EAAavrC,EAAImqC,EAAQnqC,EACzBurC,EAAapT,GAAKgS,EAAQhS,GAC1BoT,EAAa5iB,GAAKwhB,EAAQxhB,GAC1B4iB,EAAa/Q,GAAK2P,EAAQ3P,GAC1B+Q,EAAa9Q,GAAK0P,EAAQ1P,GAG1B,IAAI+Q,EAAgBH,EAAYxK,SAChC2K,EAAczrC,EAAIqqC,EAASrqC,EAC3ByrC,EAAcxrC,EAAIoqC,EAASpqC,EAC3BwrC,EAAcrT,GAAKiS,EAASjS,GAC5BqT,EAAc7iB,GAAKyhB,EAASzhB,GAC5B6iB,EAAchR,GAAK4P,EAAS5P,GAC5BgR,EAAc/Q,GAAK2P,EAAS3P,QAYhC7jC,OAAAkH,eAAW+rC,EAAAhxC,UAAA,iBAAX,WACC,OAAOpD,KAAKg2C,4CASb70C,OAAAkH,eAAW+rC,EAAAhxC,UAAA,iBAAX,WACC,OAAOpD,KAAKi2C,4CASb90C,OAAAkH,eAAW+rC,EAAAhxC,UAAA,kBAAX,WACC,OAAOpD,KAAKk2C,6CASb/0C,OAAAkH,eAAW+rC,EAAAhxC,UAAA,kBAAX,WACC,OAAOpD,KAAKm2C,6CAMH/B,EAAAhxC,UAAA2Y,aAAV,WAGC,GAFAlc,EAAAuD,UAAM2Y,aAAYhc,KAAAC,MAEdA,KAAKkd,UAAYld,KAAK0I,MAAO,CAChC,IAAImU,EAAyByjB,EAAA,WAAkBtgC,KAAK2I,MAAM4I,eAC1DvR,KAAKi2C,WAAyC,MAAQp5B,EAAiB,IACvE7c,KAAKm2C,YAA0C,OAASt5B,EAAiB,IAG1E,GAAI7c,KAAKkd,UAAYld,KAAK2I,MAAO,CAChC,IAAI8T,EAAyB6jB,EAAA,WAAkBtgC,KAAK0I,MAAM6I,eAC1DvR,KAAKg2C,WAAyC,MAAQv5B,EAAiB,IACvEzc,KAAKk2C,YAA0C,OAASz5B,EAAiB,IAG1Ezc,KAAKqd,cAAcrd,KAAK0I,MAAY1I,KAAKmd,cAAoBnd,KAAKg2C,YAClEh2C,KAAKqd,cAAcrd,KAAK0I,MAAY1I,KAAKmd,cAAoBnd,KAAKk2C,aAElEl2C,KAAKqd,cAAcrd,KAAK2I,MAAY3I,KAAKod,cAAoBpd,KAAKi2C,YAClEj2C,KAAKqd,cAAcrd,KAAK2I,MAAY3I,KAAKod,cAAoBpd,KAAKm2C,cAU5D/B,EAAAhxC,UAAAyvB,mBAAP,SAA0BC,GAEzB,IAAIpF,EAAYoF,EAAO7nB,WACnB4iB,EAAYiF,EAAO5nB,YAEvB4nB,EAAOyW,iBAEP,IAII6M,EACAC,EALA7M,EAAsB1W,EAAO/xB,YAAYu1C,EAAA,GAC7C9M,EAAOvoC,aAAc,EACrBuoC,EAAOj5B,SAAcvQ,KAAK8oC,QAAQ/d,UAKlC,IAAIqgB,EAAiB5B,EAAO0B,QACxBA,EAAgB1B,EAAO4B,SAEvBprC,KAAKkd,UAAYld,KAAK2I,OACzBytC,EAAK1oB,EAAI,EACT2oB,EAAKxoB,EAELud,EAAS7gC,EAAIsjB,EAAI,EACjBqd,EAAQ3gC,EAAIsjB,EAAI,EAEhBud,EAASlY,GAAKxF,EAAI,EAClBwd,EAAQhY,GAAKxF,EAAI,EACjBwd,EAAQ5gC,EAAIojB,EAAI,EAAI,EACpB8b,EAAOA,OAAOl/B,EAAIojB,EAAI,IAGtB0oB,EAAK1oB,EACL2oB,EAAKxoB,EAAI,EACTud,EAAS9gC,EAAIojB,EAAI,EACjBwd,EAAQ5gC,EAAIojB,EAAI,EAEhB0d,EAASpG,GAAKnX,EAAI,EAClBqd,EAAQlG,GAAKnX,EAAI,EACjBqd,EAAQ3gC,EAAIsjB,EAAI,EAAI,EACpB2b,EAAOA,OAAOj/B,EAAIsjB,EAAI,GAEvB2b,EAAOtoC,MAAQk1C,EACf5M,EAAOhoC,OAAS60C,EAEhB3M,EAAA,eAAuB1pC,KAAM8yB,EAAQrX,EAAA,GACrCiuB,EAAA,eAAuB1pC,KAAK8oC,QAAQ/d,SAAUye,EAAQ/tB,EAAA,IAQ7C24B,EAAAhxC,UAAAsnC,qBAAV,WACC,OAAO,IAAI4L,EAAA,GAGblC,EA7VA,CAAuCxL,EAAA,GAqWvC7Y,EAAA,EAASrf,kBAAqC,kBAAI0jC,EAClDrkB,EAAA,EAASrf,kBAA6C,0BAAIqjC,+HCvnB1D77B,EAAAvY,EAAA,GA6BA42C,EAAA,SAAA12C,GAaC,SAAA02C,IAAA,IAAAz2C,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,yBACjBH,EAAKI,eAGP,OAnB4CC,EAAA,EAAAo2C,EAAA12C,GAmB5C02C,EAnBA,CAA4C3X,EAAA,GAmE5C4X,EAAA,SAAA32C,GA6CC,SAAA22C,IAAA,IAAA12C,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,iBACjBH,EAAKI,eAsEP,OAtHoCC,EAAA,EAAAq2C,EAAA32C,GAyDzB22C,EAAApzC,UAAAqO,eAAV,WACC,OAAO,IAAI8kC,GAaFC,EAAApzC,UAAAkvB,UAAV,SAAoBR,EAAkB5e,EAA6BwJ,EAAgBI,EAAgBoG,GAClG,IAAIuf,EAAaziC,KAAK0I,MAAM+N,KAAKvD,EAAUwJ,EAAQ,GAC/CooB,EAAa9kC,KAAK2I,MAAMkO,KAAK3D,EAAU4J,EAAQ,GAE/C4lB,EAAa1iC,KAAK0I,MAAM+N,KAAKvD,EAAUwJ,EAAQ,GAC/CqoB,EAAa/kC,KAAK2I,MAAMkO,KAAK3D,EAAU4J,EAAQ,GASnD,GAPA2lB,EAAKvqB,EAAA,WAAiBuqB,GAAK,IAAO,KAClCqC,EAAK5sB,EAAA,WAAiB4sB,GAAK,IAAO,KAElCpC,EAAKxqB,EAAA,WAAiBwqB,GAAK,IAAO,KAClCqC,EAAK7sB,EAAA,WAAiB6sB,GAAK,IAAO,KAG9B/kC,KAAK2wB,SACJmB,EAAOptB,OAAS,EAAG,CACtB,IAAI+xC,EAAoB3kB,EAAOA,EAAOptB,OAAS,GAC3C1E,KAAKkd,UAAYld,KAAK0I,QACrBwa,EACH4O,EAAOzoB,MAAOiB,EAAGmsC,EAAUnsC,EAAGC,EAAGw6B,IAGjCjT,EAAOzoB,MAAOiB,EAAGm4B,EAAIl4B,EAAGksC,EAAUlsC,KAGhCvK,KAAKkd,UAAYld,KAAK2I,QACrBua,EACH4O,EAAOzoB,MAAOiB,EAAGo4B,EAAIn4B,EAAGksC,EAAUlsC,IAGlCunB,EAAOzoB,MAAOiB,EAAGmsC,EAAUnsC,EAAGC,EAAGu6B,KAMrC,IAAI4R,GAAmBpsC,EAAGm4B,EAAIl4B,EAAGu6B,GAC7BsJ,GAAmB9jC,EAAGo4B,EAAIn4B,EAAGw6B,GAE7B7hB,EACH4O,EAAOzoB,KAAK+kC,EAAQsI,GAGpB5kB,EAAOzoB,KAAKqtC,EAAQtI,IAIvBoI,EAtHA,CAAoC5X,EAAA,GA8HpCjnB,EAAA,EAASjH,kBAAkC,eAAI8lC,EAC/C7+B,EAAA,EAASjH,kBAA0C,uBAAI6lC,oLC/NvD/H,EAAA7uC,EAAA,IAmCAg3C,EAAA,SAAA92C,GAoBC,SAAA82C,IAAA,IAAA72C,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBACjBH,EAAKI,eAEP,OAzB+CC,EAAA,EAAAw2C,EAAA92C,GAyB/C82C,EAzBA,CAA+CrM,EAAA,GAyE/CsM,EAAA,SAAA/2C,GAuDC,SAAA+2C,IAAA,IAAA92C,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,oBACjBH,EAAKI,eAiMP,OA3PuCC,EAAA,EAAAy2C,EAAA/2C,GAkE5B+2C,EAAAxzC,UAAAsnC,qBAAV,WACC,OAAO,IAAImM,EAAA,GAQLD,EAAAxzC,UAAAiJ,SAAP,WAGKrM,KAAK2F,MAAMyG,SACdpM,KAAK2F,MAAM0G,WAGZxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,OASR42C,EAAAxzC,UAAAqxC,wBAAP,SAA+BvhC,GAA/B,IASK4jC,EACAC,EAEAC,EACAC,EAbLn3C,EAAAE,KACK00B,EAAa10B,KAAK2F,MAAM+uB,WACxBC,EAAW30B,KAAK2F,MAAMgvB,SAEtB7X,EAAiB9c,KAAK8c,OACtBC,EAAqB/c,KAAK+c,WAC1BL,EAAiB1c,KAAK0c,OACtBC,EAAqB3c,KAAK2c,WAQ1BzG,EAAgBlW,KAAKk3C,iBAAiBhkC,GACtCiD,EAAcnW,KAAKm3C,eAAejkC,GAElCkkC,GAAaziB,EAAWD,IAAe10B,KAAK2M,UAAUjI,QAAU1E,KAAKiH,IAAMjH,KAAKgH,QAEpF0tB,GAA0Bxe,EAAgBkhC,EAC1CziB,IAAuB,EAAIxe,GAAeihC,EAE1C,IAEIvQ,EAFmB7mC,KAAK8oC,QAAQ/d,SAEA8b,aAEhChK,EAAA,MAAYgK,KACfA,EAAe,KAGhB,IAAIwQ,EAAiBnZ,EAAA,OAAa/nB,EAAcD,IAAkB,EAAI2wB,EAAe,KAAO,EAAG,GAoB/F,GAnBA3wB,GAAiBmhC,EACjBlhC,GAAekhC,EAGXr3C,KAAKkd,UAAYld,KAAK0I,OACzBsuC,EAAU9Y,EAAA,aAAoB5zB,EAAGtK,KAAK2I,MAAM8N,KAAKvD,EAAU4J,EAAQ5J,EAASpC,UAAUgM,GAAS,UAAWvS,EAAGvK,KAAK2I,MAAMkO,KAAK3D,EAAU4J,EAAQ5J,EAASpC,UAAUgM,GAAS,YAC3Km6B,EAAU/Y,EAAA,aAAoB5zB,EAAGtK,KAAK2I,MAAM8N,KAAKvD,EAAU6J,EAAY7J,EAASpC,UAAUiM,GAAa,UAAWxS,EAAGvK,KAAK2I,MAAMkO,KAAK3D,EAAU6J,EAAY7J,EAASpC,UAAUiM,GAAa,YAE3L+5B,EAAS92C,KAAK0I,MAAMoO,SAAS5D,EAAUyJ,EAAYzG,EAAe,UAClE6gC,EAAS/2C,KAAK0I,MAAMoO,SAAS5D,EAAUwJ,EAAQvG,EAAa,YAG5D6gC,EAAU9Y,EAAA,aAAoB5zB,EAAGtK,KAAK2I,MAAM8N,KAAKvD,EAAU4J,EAAQ5G,EAAe,UAAW3L,EAAGvK,KAAK2I,MAAMkO,KAAK3D,EAAU4J,EAAQ5G,EAAe,YACjJ+gC,EAAU/Y,EAAA,aAAoB5zB,EAAGtK,KAAK2I,MAAM8N,KAAKvD,EAAU6J,EAAY5G,EAAa,UAAW5L,EAAGvK,KAAK2I,MAAMkO,KAAK3D,EAAU6J,EAAY5G,EAAa,YAErJ2gC,EAAS92C,KAAK0I,MAAMoO,SAAS5D,EAAUwJ,EAAQxJ,EAASpC,UAAU4L,GAAS,UAC3Eq6B,EAAS/2C,KAAK0I,MAAMoO,SAAS5D,EAAUyJ,EAAYzJ,EAASpC,UAAU6L,GAAa,WAGhFo6B,EAASD,EAAQ,CACpB,IAAIQ,EAAOP,EACXA,EAASD,EACTA,EAASQ,EAGVR,EAAS5Y,EAAA,WAAiB4Y,EAAQpiB,EAAYC,GAC9CoiB,EAAS7Y,EAAA,WAAiB6Y,EAAQriB,EAAYC,GAE9C,IAAI2W,EAAcp4B,EAASs2B,OACtB8B,IACJA,EAActrC,KAAK8oC,QAAQvhB,SAC3BrU,EAASs2B,OAAS8B,EAClB5B,EAAA,oBAA4B1pC,KAAK8oC,QAAQ/d,SAAUugB,EAAa7vB,EAAA,GAChEvI,EAASihB,UAAUmX,GACnBtrC,KAAKu3C,gBAAgBjM,IAGtB,IAAIxX,EAAQwX,EAAYA,YAExBxX,EAAMY,WAAaoiB,EAEnB,IAAI7f,EAAM8f,EAASD,EAChB7f,EAAM,GACRnD,EAAMmD,IAAMA,EACZnD,EAAMhc,OAASk/B,EACfljB,EAAMkD,YAAcigB,EACpB3L,EAAY3mC,YAAa,EAEzB2mC,EAAY9oC,OAASxC,KAAKwqC,iBAE1B1sB,EAAA,KAAW9d,KAAKgQ,WAAWhM,WAAY,SAACkL,GACvC,IAAI0mC,EAAc1iC,EAAS2iC,cAAc7gC,OAAO9F,EAAUiN,KACrDy5B,IACJA,EAAc91C,EAAKgpC,QAAQvhB,SAE3BmiB,EAAA,oBAA4B5pC,EAAKgpC,QAAQ/d,SAAU6qB,EAAan6B,EAAA,GAChEiuB,EAAA,eAAuBx6B,EAAU+iB,SAAU2jB,EAAan6B,EAAA,GAEpDm6B,EAAY1iC,UACfs7B,EAAA,EAAcoH,EAAY1iC,SAASvI,QAASirC,GAG7C1iC,EAASihB,UAAUyhB,GACnB91C,EAAKy3C,gBAAgB3B,GACrB1iC,EAAS2iC,cAAc3gC,OAAOhG,EAAUiN,IAAKy5B,IAG9C,IAAI9hB,EAAQwX,EAAYA,YACxBxX,EAAMY,WAAaoiB,EACnBhjB,EAAMmD,IAAMA,EACZnD,EAAMhc,OAASk/B,EACfljB,EAAMkD,YAAcigB,EAEhBnjB,EAAM1nB,SACT0nB,EAAMznB,WAGPupC,EAAYjxC,YAAa,EACzBixC,EAAYpzC,OAAS1C,EAAK0qC,oBAI3BxqC,KAAKw3C,qBAAqBtkC,IAgBlB0jC,EAAAxzC,UAAAwd,SAAV,SAAmB1N,EAAqC2Q,EAAcC,EAAcjC,EAAoBC,EAAoBiC,EAAoBC,GAE1ID,IACJA,EAAY,UAERC,IACJA,EAAY,UAGb,IAAI1Z,EAAYtK,KAAK2I,MAAM8N,KAAKvD,EAAU4Q,EAAMhC,EAAWkC,GACvDzZ,EAAYvK,KAAK2I,MAAMkO,KAAK3D,EAAU4Q,EAAMhC,EAAWkC,GAEvDlM,EAAiBomB,EAAA,aAAoB5zB,EAAGA,EAAGC,EAAGA,IAE9CmL,EAAgB1V,KAAK0I,MAAMoO,SAAS5D,EAAU2Q,EAAMhC,EAAWkC,GAEnE,OAASzZ,EAAGwN,EAASomB,EAAA,IAAUxoB,GAAQnL,EAAGuN,EAASomB,EAAA,IAAUxoB,KASpDkhC,EAAAxzC,UAAAya,YAAV,WACC,IAAIjY,EAAmD5F,KAAK2I,MAAM/C,SAClE,OAAO2hC,EAAA,IAAU3hC,EAAS8uB,WAAY9uB,EAAS+uB,SAAW/uB,EAAS8uB,WAAY9uB,EAASqzB,YAAarzB,EAASq0B,mBAGhH2c,EA3PA,CAAuCtM,EAAA,GAmQvCva,EAAA,EAASrf,kBAAqC,kBAAIkmC,EAClD7mB,EAAA,EAASrf,kBAA6C,0BAAIimC,uIChX1DjY,EAAA/+B,EAAA,IA8BA83C,EAAA,SAAA53C,GAqBC,SAAA43C,IAAA,IAAA33C,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,qBACjBH,EAAKI,eAGP,OA3BwCC,EAAA,EAAAs3C,EAAA53C,GA2BxC43C,EA3BA,CAAwC7O,EAAA,GA2ExC8O,EAAA,SAAA73C,GA4CC,SAAA63C,IAAA,IAAA53C,EACCD,EAAAE,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,aACjBH,EAAKI,eAwEP,OAxHgCC,EAAA,EAAAu3C,EAAA73C,GAwDrB63C,EAAAt0C,UAAAsnC,qBAAV,WACC,OAAO,IAAIiN,EAAA,GAQLD,EAAAt0C,UAAAiJ,SAAP,WACCxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,OAUL03C,EAAAt0C,UAAAya,YAAV,WACC,IAAIpF,EAAK,EACLF,EAAK,EACLixB,EAASxpC,KAAK8oC,QAAQ97B,SAAS,GACnC,GAAGw8B,EAQF,OAPIxpC,KAAKkd,UAAYld,KAAK0I,MACzB6P,EAAKixB,EAAOkC,WAAW5/B,OAAO4rB,QAAU,EAGxCjf,EAAK+wB,EAAOkC,WAAW5/B,OAAO4rB,QAAU,EAGlCgH,EAAA,YACNp0B,GAAImO,EACJlO,EAAG,EACHrJ,MAAOlB,KAAK0I,MAAM2J,WAAaoG,EAC/BjX,OAAQxB,KAAK2I,MAAM0J,WAAakG,KAY5Bm/B,EAAAt0C,UAAAqxC,wBAAP,SAA+BvhC,GAG9B,GAFArT,EAAAuD,UAAMqxC,wBAAuB10C,KAAAC,KAACkT,GACjBA,EAASs2B,OACZ,CACT,IAAIkC,EAAax4B,EAASs2B,OAAOkC,WAEjCA,EAAW9iC,KAAOsK,EAASs2B,OAAO5gC,KAE9B5I,KAAKkd,UAAYld,KAAK2I,MACzB+iC,EAAWx9B,YAAc,aAGzBw9B,EAAWx9B,YAAc,aAI7BwpC,EAxHA,CAAgC9O,EAAA,GAgIhChO,EAAA,EAASlqB,kBAA8B,WAAIgnC,EAC3C9c,EAAA,EAASlqB,kBAAsC,mBAAI+mC,+FC1OnD7c,EAAAj7B,EAAA,GA2DAi4C,EAAA,SAAA/3C,GAoCC,SAAA+3C,IAAA,IAAA93C,EACCD,EAAAE,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,eAEjBH,EAAK+3C,OAAS/3C,EAAKiB,YAAYmhC,EAAA,GAC/BpiC,EAAK+3C,OAAO52C,aAAc,EAC1BnB,EAAK+3C,OAAO//B,OAAS,EACrBhY,EAAK+3C,OAAO9/B,YAAa,IAa3B,OAzDkC5X,EAAA,EAAAy3C,EAAA/3C,GAqD1B+3C,EAAAx0C,UAAAmN,SAAP,SAAgBC,GACf3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACfxQ,KAAK63C,OAAOtnC,SAASC,EAAOqnC,SAE9BD,EAzDA,CAAkCE,EAAA,GAiElCld,EAAA,EAASlqB,kBAAgC,aAAIknC,6JC5H7CG,EAAAp4C,EAAA,IAoEAq4C,EAAA,SAAAn4C,GA0DC,SAAAm4C,IAAA,IAAAl4C,EACCD,EAAAE,KAAAC,OAAOA,KArBEF,EAAA0c,OAAS,IAAImkB,EAAA,EAsBtB7gC,EAAKG,UAAY,mBAEjB,IAAIwsB,EAAkB,IAAIuV,EAAA,EAC1BliC,EAAKe,QAAQ,EAAG,EAAG,EAAG,GAEtB,IAAIo3C,EAA0Bn4C,EAAKiB,YAAYm3C,EAAA,GAC/CD,EAAeh3C,aAAc,EAC7Bg3C,EAAeE,OAAO,EAAG,EAAG,EAAG,GAC/BF,EAAep3C,QAAQ,EAAG,EAAG,EAAG,GAChCo3C,EAAevoB,qBAAsB,EACrC5vB,EAAKs4C,gBAAkBH,EACvBn4C,EAAKsJ,WAAWC,KAAKvJ,EAAKs4C,iBAE1Bt4C,EAAK0jC,UAAY,GACjB1jC,EAAK8E,SAAW,GAEhB,IAAIyzC,EAA4Bv4C,EAAKiB,YAAY0a,EAAA,GACjD48B,EAAkBp3C,aAAc,EAChCo3C,EAAkB38B,QAAU5b,EAAK6b,MAAMtN,IAAI,QAC3CgqC,EAAkBzvC,KAAO6jB,EAAgBI,OAAO,cAChDwrB,EAAkBzrB,YAAc,GAChCyrB,EAAkB3oB,qBAAsB,EACxC2oB,EAAkBtgC,YAAa,EAC/BsgC,EAAkBxwC,SAClB/H,EAAKw4C,mBAAqBD,EAC1Bv4C,EAAKsJ,WAAWC,KAAKvJ,EAAKw4C,oBAE1BL,EAAepwC,SAEf/H,EAAKy4C,WAAWxe,aAAa,EAAG,EAAG,EAAG,GAEtC,IAAIye,EAAkB14C,EAAK24C,MAAMF,WACjCC,EAAgBze,aAAa,EAAG,EAAG,EAAG,GACtCye,EAAgB5rB,YAAc,EAC9B4rB,EAAgB5vC,KAAO6jB,EAAgBI,OAAO,cAE9C,IAAI6rB,EAAaF,EAAgB5iB,OAAO5gB,OAAO,SAC3C0jC,IACHA,EAAWznC,WAAW2b,YAAc,IAGrC,IAAI+rB,EAAYH,EAAgB5iB,OAAO5gB,OAAO,eAC1C2jC,IACHA,EAAU1nC,WAAW2b,YAAc,IAGpC9sB,EAAKsJ,WAAWC,KAAKvJ,EAAK0c,QAE1B1c,EAAKI,eAiSP,OA7YsCC,EAAA,EAAA63C,EAAAn4C,GAqHrCsB,OAAAkH,eAAW2vC,EAAA50C,UAAA,cAAX,WAMC,OALKpD,KAAK4S,UACT5S,KAAK4S,QAAU,IAAIrK,EAAA,EACnBvI,KAAKoJ,WAAWC,KAAKrJ,KAAK4S,QAAQ9Q,OAAOC,GAAG,WAAY/B,KAAKyI,kBAAmBzI,OAChFA,KAAKoJ,WAAWC,KAAKrJ,KAAK4S,QAAQ9Q,OAAOC,GAAG,UAAW/B,KAAK44C,oBAAqB54C,QAE3EA,KAAK4S,yCAQHolC,EAAA50C,UAAAqF,kBAAV,SAA4BrD,GAC3B,IAAIyzC,EAAyBzzC,EAAMM,SAC/BuyC,EAA0Bj4C,KAAKi4C,eACnCA,EAAev1C,cAAcgV,UAAW,EAExC1X,KAAK2F,MAAQkzC,EAAalzC,MAE1B,IAAImzC,GAAoB,EACpBC,GAAoB,EAGxBj7B,EAAA,KAAW9d,KAAK+D,OAAOC,WAAY,SAACD,GAC/BA,GAAU80C,IACT90C,EAAO2E,OAASmwC,EAAanwC,QAChCowC,GAAW,GAER/0C,EAAO4E,OAASkwC,EAAalwC,QAChCowC,GAAW,MAKd,IAAItsB,EAAkB,IAAIuV,EAAA,EAEtBj+B,EAA6B80C,EAAaplB,QAE9C,GAAIqlB,EAAU,CAEb,IAAIpwC,EAAQmwC,EAAanwC,MAAM+qB,QAC/BwkB,EAAe7zC,MAAM6D,UAAUS,GAC/BA,EAAMq4B,MAAMrpB,UAAW,EACvBhP,EAAMswC,oBAAsB,EAC5BtwC,EAAMuwC,GAAKJ,EAAa18B,IACxBzT,EAAMq4B,MAAMrpB,UAAW,GAEnB9R,EAAW8C,EAAM9C,UACZimB,MAAMd,SAASrT,UAAW,EACnC9R,EAASyS,QAAS,EAClBzS,EAASotB,KAAK/F,cAAgB,EAC9BrnB,EAASi0B,iBAAmB,IAC5Bj0B,EAASk0B,iBAAmB,IAC5Bl0B,EAASotB,KAAKtb,UAAW,EACzB9R,EAAS6pC,UAAU1kB,SAASrT,UAAW,EACvC9R,EAAS6R,SAASC,UAAW,EAC7B9R,EAAS4O,KAAKuW,SAASkC,cAAgB,IAElBrnB,EAASkmB,OAAOf,SACtB6B,YAAc,GAE7B7oB,EAAO2E,MAAQA,EAOhB,GAAIqwC,EAAU,CACb,IAKInzC,EALA+C,EAAoBkwC,EAAalwC,MAAM8qB,QAC3CwkB,EAAe1zC,MAAM0D,UAAUU,GAC/BA,EAAMo4B,MAAMrpB,UAAW,EACvB/O,EAAMqwC,oBAAsB,GAExBpzC,EAAW+C,EAAM/C,UACZimB,MAAMd,SAASrT,UAAW,EACnC9R,EAASyS,QAAS,EAClBzS,EAASotB,KAAK/F,cAAgB,EAC9BrnB,EAASi0B,iBAAmB,IAC5Bj0B,EAASk0B,iBAAmB,IAC5Bl0B,EAASotB,KAAKtb,UAAW,EACzB9R,EAAS6pC,UAAU1kB,SAASrT,UAAW,EACvC9R,EAAS4O,KAAKuW,SAAShiB,OAAS0jB,EAAgBI,OAAO,cACvDjnB,EAAS6R,SAASC,UAAW,EAC7B9R,EAAS4O,KAAKuW,SAASkC,cAAgB,IAElBrnB,EAASkmB,OAAOf,SACtB6B,YAAc,GAE7B7oB,EAAO4E,MAAQA,EAMhB5E,EAAOi1C,oBAAsB,EAC7Bj1C,EAAOse,sBAAwB,EAC/Bte,EAAO0xB,aAAayjB,mBAAqB,EACzCl5C,KAAKoJ,WAAWC,KAAKtF,EAAOjC,OAAOC,GAAG,YAAa/B,KAAKm5C,YAAan5C,OACrE+D,EAAO0xB,aAAaxkB,WAAWjH,SAAU,EAEzCjG,EAAOouB,QAAQ9oB,KAAK,IAAI+vC,EAAA,GACxBnB,EAAel0C,OAAOsF,KAAKtF,IAMlBi0C,EAAA50C,UAAAi2C,oBAAV,eAAAv5C,EAAAE,KACC8d,EAAA,KAAW9d,KAAKo4C,gBAAgBh0C,MAAMJ,WAAY,SAAC0E,GAClD,GAAwB,YAApB5I,EAAKoO,YAA2B,CACnC,IAAItI,EAAW8C,EAAM9C,SACrBA,EAAS4O,KAAKuW,SAASrT,UAAW,EAClC9R,EAASkmB,OAAOf,SAASrT,UAAW,EACpC9R,EAAS0M,gBAAkB,MAG7BwL,EAAA,KAAW9d,KAAKo4C,gBAAgB7zC,MAAMP,WAAY,SAAC2E,GAClD,GAAwB,cAApB7I,EAAKoO,YAA6B,CACrC,IAAItI,EAAW+C,EAAM/C,SACrBA,EAAS4O,KAAKuW,SAASrT,UAAW,EAClC9R,EAASkmB,OAAOf,SAASrT,UAAW,EACpC9R,EAAS0M,gBAAkB,OAWpB0lC,EAAA50C,UAAAw1C,oBAAV,SAA8BxzC,GACAA,EAAMe,SACtBrE,OAAOsE,IAAI,YAAapG,KAAKm5C,YAAan5C,OAcxDmB,OAAAkH,eAAW2vC,EAAA50C,UAAA,sBAAX,WACC,OAAOpD,KAAKo4C,iDAQbj3C,OAAAkH,eAAW2vC,EAAA50C,UAAA,aAWX,WACC,OAAOpD,KAAKwc,OAAOiC,WAZpB,SAAiB9Y,GACZ3F,KAAKwc,OAAOiC,QAAU9Y,IACzB3F,KAAKwc,OAAOuC,IAAIpZ,EAAOA,EAAM7D,OAAOC,GAAG,gBAAiB/B,KAAKs5C,kBAAmBt5C,OAChFA,KAAKs5C,oBACLt5C,KAAKo4C,gBAAgBpyC,aAAeL,oCAiB/BqyC,EAAA50C,UAAAk2C,kBAAP,WAEIt5C,KAAK2F,MAAMlB,MAAQzE,KAAKi4C,eAAexzC,OACzCzE,KAAKi4C,eAAexzC,KAAOzE,KAAK2F,MAAMlB,OAO9BuzC,EAAA50C,UAAA+1C,YAAV,WACC,IAAIlB,EAA0Bj4C,KAAKi4C,eACnCn6B,EAAA,KAAWm6B,EAAe7zC,MAAMJ,WAAY,SAACsG,GAC5CA,EAAE6E,MAAOnI,MAAO,EAAGC,IAAK,IAAK,GAAM,KAEpC6W,EAAA,KAAWm6B,EAAe1zC,MAAMP,WAAY,SAACuG,GAC5CA,EAAE4E,MAAOnI,MAAO,EAAGC,IAAK,IAAK,GAAM,MAO3B+wC,EAAA50C,UAAAm2C,YAAV,WAEC,GADA15C,EAAAuD,UAAMm2C,YAAWx5C,KAAAC,MACbA,KAAKs4C,mBAAoB,CAC5B,IAAIG,EAAQz4C,KAAKy4C,MACbnuC,EAAYmuC,EAAMhrB,QAAU,EAC5BljB,EAAYkuC,EAAMlsC,QAAU,EAC5BmhB,EAAY+qB,EAAMxtC,YAAc,EAChC4iB,EAAY4qB,EAAMvtC,aAAe,EAEjC8uB,EAAe,GAEK,cAApBh6B,KAAKkO,aACR8rB,EAAO+d,EAAA,YACNztC,GAAI,EACJC,EAAG,EACHrJ,MAAOoJ,EACP9I,OAAQqsB,IAGTmM,GAAQ+d,EAAA,YACPztC,EAAGA,EAAIojB,EACPnjB,EAAG,EACHrJ,OAAQlB,KAAKiL,YAAc,GAAKX,EAAIojB,EACpClsB,OAAQqsB,MAITmM,EAAO+d,EAAA,YACNztC,EAAG,EACHC,EAAG,EACHrJ,MAAOwsB,EACPlsB,OAAQ+I,IAGTyvB,GAAQ+d,EAAA,YACPztC,EAAG,EACHC,EAAGA,EAAIsjB,EACP3sB,MAAOwsB,EACPlsB,QAASxB,KAAKkL,aAAe,GAAKX,EAAIsjB,KAIxC7tB,KAAKs4C,mBAAmB58B,QAAQsC,MAAOC,EAAK+b,MAUvCge,EAAA50C,UAAAuM,cAAP,SAAqBC,GAEpB,GAAIA,GAEC4oB,EAAA,SAAe5oB,EAAO7L,SAAWy0B,EAAA,QAAc5oB,EAAO7L,QACzD,IAAK,IAAIkI,EAAI,EAAG4D,EAAMD,EAAO7L,OAAOW,OAAQuH,EAAI4D,EAAK5D,IAAK,CACzD,IAAIlI,EAAS6L,EAAO7L,OAAOkI,GAC3B,GAAIusB,EAAA,SAAez0B,IAAWy0B,EAAA,SAAez0B,GAAS,CACrD,IAAI/D,KAAK2jB,IAAIC,OAAO7f,GAInB,MAAMgM,MAAM,2CAA6ChM,EAAS,qBAHlE6L,EAAO7L,OAAOkI,GAAKjM,KAAK2jB,IAAI3O,OAAOjR,IAWxClE,EAAAuD,UAAMuM,cAAa5P,KAAAC,KAAC4P,IAItBooC,EA7YA,CAAsCwB,EAAA,GAqZtCjd,EAAA,EAAS7rB,kBAAoC,iBAAIsnC,8KCzdjDl6B,EAAAne,EAAA,GAkCA85C,EAAA,SAAA55C,GAYC,SAAA45C,IAAA,IAAA35C,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,wBACjBH,EAAKI,eAmBP,OAlC2CC,EAAA,EAAAs5C,EAAA55C,GAuB1CsB,OAAAkH,eAAWoxC,EAAAr2C,UAAA,YAOX,WACC,OAAOpD,KAAKiR,WAAiB,UAR9B,SAAgB1C,GACfvO,KAAKkR,YAAY,OAAQ3C,oCAU3BkrC,EAlCA,CAA2CC,EAAA,GA8F3CC,EAAA,SAAA95C,GA0EC,SAAA85C,IAAA,IAAA75C,EAGCD,EAAAE,KAAAC,OAAOA,KACPF,EAAKG,UAAY,gBAEjB,IAAIwsB,EAAkB,IAAIuV,EAAA,EAEtB4X,EAAW,IAAIC,EAAA,EACnBD,EAAS/2C,OAAS,SAClB+2C,EAASE,WAAa,EACtBF,EAASG,cAAgB,EAEzBj6C,EAAKi6C,cAAgB,EAErBj6C,EAAK2tC,MAAQ,IAAIllC,EAAA,EAAuBqxC,GACxC95C,EAAKsJ,WAAWC,KAAK,IAAId,EAAA,EAAazI,EAAK2tC,QAC3C3tC,EAAKsJ,WAAWC,KAAKvJ,EAAK2tC,MAAM1iB,UAEhCjrB,EAAKk6C,eAAiB,IAAIl8B,EAAA,aAA6Bhe,EAAK2tC,MAAO,WAAM,OAAA3tC,EAAK2tC,MAAMlmB,WACpFznB,EAAKk6C,eAAetpB,gBAAiB,EAErC,IAAIupB,EAAW,IAAIC,EAAA,EACnBD,EAASE,UAAY,QACrBF,EAAS/4C,MAAQ,EACjB+4C,EAASz4C,OAAS,GAClBy4C,EAASrxC,KAAO6jB,EAAgBI,OAAO,yBACvCotB,EAASrtB,YAAc,GACvBqtB,EAASp3C,OAAS,SAClBo3C,EAASG,WAAa,GACtBH,EAASh3C,YAAc,GACvBnD,EAAKu6C,WAAa,IAAI9xC,EAAA,EAAuB0xC,GAC7Cn6C,EAAKsJ,WAAWC,KAAK,IAAId,EAAA,EAAazI,EAAKu6C,aAC3Cv6C,EAAKsJ,WAAWC,KAAKvJ,EAAKu6C,WAAWtvB,UAErC,IAAIuvB,EAAa,IAAIT,EAAA,SACrB/5C,EAAKw6C,WAAaA,EAClBA,EAAW/pC,SAASqpC,GACpBU,EAAWz3C,OAAS,SACpBy3C,EAAWC,WAAa,OAExBz6C,EAAKoB,MAAQC,OAAAq5C,EAAA,EAAAr5C,CAAQ,KACrBrB,EAAKc,OAAS,OACdd,EAAK2P,WAAWyM,KAAO,OAGvBpc,EAAKI,eA2CP,OAnKmCC,EAAA,EAAAw5C,EAAA95C,GAgI3B85C,EAAAv2C,UAAAq3C,qBAAP,WACCz6C,KAAKupC,iBACLvpC,KAAKg6C,eAAerqB,QACpB9vB,EAAAuD,UAAMq3C,qBAAoB16C,KAAAC,OAUpB25C,EAAAv2C,UAAAiQ,oBAAP,SAA2BH,GAG1B,IAAI0mC,EACJ,GAHA/5C,EAAAuD,UAAMiQ,oBAAmBtT,KAAAC,KAACkT,GAGtBA,EAASjD,MAAQjQ,KAAK2M,UAAUjI,OAAS,EAAG,EAC/Ck1C,EAAW55C,KAAKg6C,eAAeU,WACtBl4C,OAASxC,KAClB,IAAI26C,EAAY36C,KAAKq6C,WAAW9yB,SAChCozB,EAAUn4C,OAASxC,KACnB26C,EAAU93C,OAAS,cAGnB+2C,EAAW55C,KAAKs6C,YACPx4C,OAAOyO,SAASvQ,KAAKytC,MAAM1iB,SAASjpB,QAC7C83C,EAAS12C,KAAK,GACd02C,EAASzyC,OACTyyC,EAASp3C,OAASxC,KAEnB45C,EAAS1mC,SAAWA,EACpB0mC,EAAS/oC,KAAOqC,EAASgJ,MAG3By9B,EAnKA,CAAmCiB,EAAA,GA2KnCre,EAAA,EAAS7rB,kBAAiC,cAAIipC,EAC9Cpd,EAAA,EAAS7rB,kBAAyC,sBAAI+oC,mOC5StDoB,EAAAl7C,EAAA,GA8CAm7C,EAAA,SAAAj7C,GAwCC,SAAAi7C,IAAA,IAAAh7C,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBAEjBH,EAAKgR,UAAiB,MAAI,GAC1BhR,EAAKgR,UAAiB,MAAI,GAE1BhR,EAAKgR,UAAqB,UAAI,GAC9BhR,EAAKgR,UAAqB,UAAI,GAE9BhR,EAAKI,eA+CP,OAjG0CC,EAAA,EAAA26C,EAAAj7C,GA0DzCsB,OAAAkH,eAAWyyC,EAAA13C,UAAA,cAOX,WACC,OAAOpD,KAAK+6C,aARb,SAAkBvR,GACjBxpC,KAAKg7C,UAAUxR,oCAUNsR,EAAA13C,UAAA43C,UAAV,SAAoBxR,GAMnB,GALIxpC,KAAK+6C,SAAWvR,GAAUxpC,KAAK+6C,SAClCE,EAAA,EAAcj7C,KAAK2K,QAAS3K,KAAK+6C,SAElC/6C,KAAK+6C,QAAUvR,EAEXA,EAAQ,CACX,IAAInmB,EAA2DmmB,EAAOt2B,SAClEmQ,GAAgBA,GAAgBrjB,OACnCqjB,EAAammB,YAAS3kC,GAEvB7E,KAAKm0B,UAAUqV,KAUjBroC,OAAAkH,eAAWyyC,EAAA13C,UAAA,qBAAX,WAIC,OAHKpD,KAAKk7C,iBACTl7C,KAAKk7C,eAAiB,IAAIC,EAAA,GAEpBn7C,KAAKk7C,gDAGdJ,EAjGA,CAA0C7qB,EAAA,GA6J1CmrB,EAAA,SAAAv7C,GAgHC,SAAAu7C,IAAA,IAAAt7C,EACCD,EAAAE,KAAAC,OAAOA,KA/CEF,EAAAolB,eAAyB,EAOzBplB,EAAAqlB,aAAuB,EAiC1BrlB,EAAAu7C,sBAAgC,EAQtCv7C,EAAKG,UAAY,eAEjBH,EAAKoB,MAAQC,OAAAm6C,EAAA,EAAAn6C,CAAQ,KACrBrB,EAAK0B,OAASL,OAAAm6C,EAAA,EAAAn6C,CAAQ,KAEtBrB,EAAKmtB,cAAgB,EACrBntB,EAAK8sB,YAAc,EAEnB9sB,EAAK6zC,WAAY,EAEjB,IAAInJ,EAAmB1qC,EAAK0b,cAAcza,YAAYgwB,EAAA,UACtDyZ,EAAiBvpC,aAAc,EAC/BupC,EAAiBzyB,YAAa,EAC9ByyB,EAAiB5pC,OAAS,OAC1Bd,EAAK2qC,kBAAoBD,EAEzB1qC,EAAKgpC,QACLhpC,EAAKgpC,QAAQ/d,SAAS8N,cAAe,EAErC/4B,EAAKy7C,mBAAqBz7C,EAAKgpC,QAAQ/d,SAEvCjrB,EAAKI,eA6tBP,OAp2BkCC,EAAA,EAAAi7C,EAAAv7C,GA+IjCsB,OAAAkH,eAAW+yC,EAAAh4C,UAAA,wBAAX,WACC,OAAOpD,KAAKyqC,mDAOH2Q,EAAAh4C,UAAAC,sBAAV,WACCxD,EAAAuD,UAAMC,sBAAqBtD,KAAAC,MACtB66C,EAAA,SAAe76C,KAAKuD,eACxBvD,KAAKuD,YAAcvD,KAAKwD,SAASC,UAAU,mBAUnC23C,EAAAh4C,UAAAqO,eAAV,WACC,OAAO,IAAIqpC,GAQLM,EAAAh4C,UAAAiJ,SAAP,eAAAvM,EAAAE,KAKKw7C,EAAiBx7C,KAAK2F,MAAM5B,OAC5B03C,EAAuB,EACvBxrC,EAAgB,EAEpByrC,EAAA,KAAWF,EAAex3C,WAAY,SAACD,GAClCA,aAAkBq3C,GACjBt7C,EAAKod,UAAYnZ,EAAOmZ,aACrBnZ,EAAO6X,SAAW7X,EAAO4vC,WAA+B,IAAjB8H,IAC5CA,IAGG13C,GAAUjE,IACbmQ,EAAQwrC,EAAe,MAM3B,IAAI71C,EAAW5F,KAAKkd,SAAStX,SAEzBwP,EAA4BxP,EAASwP,kBACrCC,EAA0BzP,EAASyP,gBAEvCrV,KAAKklB,eAAiB9P,EAAqBnF,EAAQwrC,GAAiBpmC,EAAkBD,GACtFpV,KAAKmlB,aAAe/P,GAAqBnF,EAAQ,GAAKwrC,GAAgBpmC,EAAkBD,GAGxFsmC,EAAA,KAAW17C,KAAK8oC,QAAQ9kC,WAAY,SAACwlC,IACjCA,EAAOt2B,SAASjD,MAAQnQ,EAAKiS,YAAcy3B,EAAOt2B,SAASjD,OAASnQ,EAAKoS,YAC3Es3B,EAAO7kC,YAAa,KAItB9E,EAAAuD,UAAMiJ,SAAQtM,KAAAC,OASRo7C,EAAAh4C,UAAAiQ,oBAAP,SAA2BH,GAE1BlT,KAAKy0C,wBAAwBvhC,GAC7BrT,EAAAuD,UAAMiQ,oBAAmBtT,KAAAC,KAACkT,IASjBkoC,EAAAh4C,UAAA8zC,iBAAV,SAA2BhkC,GAC1B,IAAIgD,EAAgBlW,KAAKklB,eAQzB,OANIllB,KAAKkd,UAAYld,KAAK0I,MACzBwN,GAAiBhD,EAASpC,UAAU9Q,KAAK2c,YAAc,GAGvDzG,GAAiBhD,EAASpC,UAAU9Q,KAAK+c,YAAc,GAEjD7G,GAGEklC,EAAAh4C,UAAAyf,iCAAV,SAA2Czd,GACtCpF,KAAKq7C,qBACRr7C,KAAKqT,oBAAoBjO,EAAME,QAG/BzF,EAAAuD,UAAMyf,iCAAgC9iB,KAAAC,KAACoF,IAU/Bg2C,EAAAh4C,UAAA+zC,eAAV,SAAyBjkC,GACxB,IAAIiD,EAAcnW,KAAKmlB,aAQvB,OANInlB,KAAKkd,UAAYld,KAAK0I,MACzByN,GAAejD,EAASpC,UAAU9Q,KAAK0c,QAAU,GAGjDvG,GAAejD,EAASpC,UAAU9Q,KAAK8c,QAAU,GAE3C3G,GASDilC,EAAAh4C,UAAAqxC,wBAAP,SAA+BvhC,GAA/B,IAEKyoC,EACAC,EACAC,EACAjwC,EALL9L,EAAAE,KAOKkW,EAAgBlW,KAAKk3C,iBAAiBhkC,GACtCiD,EAAcnW,KAAKm3C,eAAejkC,GAElCwJ,EAAS1c,KAAK0c,OACdC,EAAa3c,KAAK2c,WAClBG,EAAS9c,KAAK8c,OACdC,EAAa/c,KAAK+c,WAElBgO,EAAmB/qB,KAAK8oC,QAAQ/d,SAEhC8b,EAAuB9b,EAAS8b,aAChCiV,EAAwB/wB,EAAS+wB,cAEjC7wC,EAAqB8f,EAAS9f,WAC9BC,EAAsB6f,EAAS7f,YAE/B6wC,EAAmBhxB,EAASgxB,SAC5BC,EAAoBjxB,EAASixB,UAGjC,GAAKh8C,KAAK0I,iBAAiBuzC,EAAA,GAAkBj8C,KAAK2I,iBAAiBszC,EAAA,EAAe,CAGjF,GAFA/lC,EAAgB,EAChBC,EAAc,GACT0kC,EAAA,MAAYhU,GAEhB3wB,GADImhC,EAAiBtwC,EAAA,OAAaoP,EAAcD,IAAkB,EAAI2wB,EAAe,KAAO,EAAG,GAE/F1wB,GAAekhC,EAOhB,GAJAsE,EAAI37C,KAAK0I,MAAM+N,KAAKvD,EAAUyJ,EAAYzG,GAC1C0lC,EAAI57C,KAAK0I,MAAM+N,KAAKvD,EAAUwJ,EAAQvG,GAGlC0kC,EAAA,MAAYhU,GAEf8U,GADItE,GAAmBuE,EAAID,EAAK1wC,GAAc,EAE9C2wC,GAAKvE,EAIN,IAAKwD,EAAA,MAAYkB,GAEhBJ,GADItE,GAAmBuE,EAAID,EAAKI,GAAY,EAE5CH,GAAKvE,EAMN,GAHAnhC,EAAgB,EAChBC,EAAc,GAET0kC,EAAA,MAAYiB,GAEhB5lC,GADImhC,EAAiBtwC,EAAA,OAAa,EAAI+0C,EAAgB,KAAO,EAAG,GAEhE3lC,GAAekhC,EAOhB,GAJAwE,EAAI77C,KAAK2I,MAAMkO,KAAK3D,EAAU6J,EAAY7G,GAC1CtK,EAAI5L,KAAK2I,MAAMkO,KAAK3D,EAAU4J,EAAQ3G,GAGlC0kC,EAAA,MAAYiB,GAEflwC,GADIyrC,GAAmBzrC,EAAIiwC,EAAK3wC,GAAe,EAE/C2wC,GAAKxE,EAIN,IAAKwD,EAAA,MAAYmB,GAEhBpwC,GADIyrC,GAAmBzrC,EAAIiwC,EAAKG,GAAa,EAE7CH,GAAKxE,EAGNuE,EAAI57C,KAAKk8C,wBAAwBN,GACjCD,EAAI37C,KAAKk8C,wBAAwBP,GACjCE,EAAI77C,KAAKm8C,sBAAsBN,GAC/BjwC,EAAI5L,KAAKm8C,sBAAsBvwC,QAE3B,GAAI5L,KAAKkd,UAAYld,KAAK0I,MAAO,CAErC,IAAKmyC,EAAA,MAAYhU,GAEhB3wB,GADImhC,EAAiBtwC,EAAA,OAAaoP,EAAcD,IAAkB,EAAI2wB,EAAe,KAAO,EAAG,GAE/F1wB,GAAekhC,EAOhB,GAJAsE,EAAI37C,KAAK0I,MAAM+N,KAAKvD,EAAUyJ,EAAYzG,GAC1C0lC,EAAI57C,KAAK0I,MAAM+N,KAAKvD,EAAUwJ,EAAQvG,GAGlC0kC,EAAA,MAAYhU,GAEf8U,GADItE,GAAmBuE,EAAID,EAAK1wC,GAAc,EAE9C2wC,GAAKvE,EAIN,IAAKwD,EAAA,MAAYkB,GAEhBJ,GADItE,GAAmBuE,EAAID,EAAKI,GAAY,EAE5CH,GAAKvE,EAGN,IAAI+E,EAAiBlpC,EAASpC,UAAUiM,GACpCs/B,EAAcnpC,EAASpC,UAAUgM,GAEjC9c,KAAK2I,iBAAiBsoB,EAAA,IACzBmrB,EAAiB,EACjBC,EAAc,GAGfzwC,EAAI5L,KAAK2I,MAAMkO,KAAK3D,EAAU6J,EAAYq/B,GAC1CP,EAAI77C,KAAK2I,MAAMkO,KAAK3D,EAAU4J,EAAQu/B,GAItCR,EAAI77C,KAAKm8C,sBAAsBN,GAC/BjwC,EAAI5L,KAAKm8C,sBAAsBvwC,OAG3B,CAEH,IAiBIyrC,EAlBL,IAAKwD,EAAA,MAAYiB,GAEhB5lC,GADImhC,EAAiBtwC,EAAA,OAAa,EAAI+0C,EAAgB,KAAO,EAAG,GAEhE3lC,GAAekhC,EAOhB,GAJAwE,EAAI77C,KAAK2I,MAAMkO,KAAK3D,EAAU6J,EAAY7G,GAC1CtK,EAAI5L,KAAK2I,MAAMkO,KAAK3D,EAAU4J,EAAQ3G,GAGlC0kC,EAAA,MAAYiB,GAEflwC,GADIyrC,GAAmBzrC,EAAIiwC,EAAK3wC,GAAe,EAE/C2wC,GAAKxE,EAIN,IAAKwD,EAAA,MAAYmB,GAEhBpwC,GADIyrC,GAAmBzrC,EAAIiwC,EAAKG,GAAa,EAE7CH,GAAKxE,EAGN,IAAIiF,EAAgBppC,EAASpC,UAAU4L,GACnC6/B,EAAerpC,EAASpC,UAAU6L,GAElC3c,KAAK0I,iBAAiBuoB,EAAA,IACzBqrB,EAAgB,EAChBC,EAAe,GAGhBX,EAAI57C,KAAK0I,MAAM+N,KAAKvD,EAAUwJ,EAAQ4/B,GACtCX,EAAI37C,KAAK0I,MAAM+N,KAAKvD,EAAUyJ,EAAY4/B,GAG1CX,EAAI57C,KAAKk8C,wBAAwBN,GACjCD,EAAI37C,KAAKk8C,wBAAwBP,GAGlC,IAAI12C,EAAsB8lB,EAAS9R,iBAC/B/T,EAAuB6lB,EAAS7R,kBAChC4gC,EAAqB/uB,EAAS/R,gBAC9B+gC,EAAwBhvB,EAAShS,mBAEjC2U,EAAY9f,KAAK8c,IAAIkxB,EAAID,GACzB9tB,EAAYjgB,KAAK8c,IAAI9e,EAAIiwC,GAEzBvxC,EAAYsD,KAAKG,IAAI4tC,EAAGC,GACxBrxC,EAAYqD,KAAKG,IAAI8tC,EAAGjwC,GAE5B,GAAI8hB,EAAIzoB,EAAcC,EAAe,GAAK2oB,EAAIisB,EAAaC,EAAgB,EAAG,CAC7E,IAAIvQ,OAAM,EACLt2B,EAASs2B,OAWbA,EAASt2B,EAASs2B,QAVlBA,EAASxpC,KAAK8oC,QAAQvhB,SAGtB2K,EAAA,eAAuBlyB,KAAMwpC,EAAQ/tB,EAAA,GACrCyW,EAAA,eAAuBlyB,KAAK8oC,QAAQ/d,SAAUye,EAAQ/tB,EAAA,GACtDvI,EAASihB,UAAUqV,GAEnBt2B,EAASs2B,OAASA,GAMnBA,EAAOtoC,MAAQwsB,EACf8b,EAAOhoC,OAASqsB,EAEhB2b,EAAOl/B,EAAIA,EACXk/B,EAAOj/B,EAAIA,EAEXi/B,EAAOhnC,OAASxC,KAAKwqC,iBAErBxqC,KAAKu3C,gBAAgB/N,GAEjBA,EAAOp9B,SACVo9B,EAAOn9B,WAGRm9B,EAAO7kC,YAAa,EAGpB+2C,EAAA,KAAW17C,KAAKgQ,WAAWhM,WAAY,SAACkL,GACvC,IAAI0mC,EAA+B1iC,EAAS2iC,cAAc7gC,OAAO9F,EAAUiN,KACtEy5B,IACJA,EAAc91C,EAAKgpC,QAAQvhB,SAG3B2K,EAAA,eAAuBhjB,EAAU+iB,SAAU2jB,EAAan6B,EAAA,GAExDvI,EAASihB,UAAUyhB,GACnB1iC,EAAS2iC,cAAc3gC,OAAOhG,EAAUiN,IAAay5B,IAGtDA,EAAYpzC,OAAS0M,EAAU+iB,SAE/B2jB,EAAY10C,MAAQwsB,EACpBkoB,EAAYp0C,OAASqsB,EACrB+nB,EAAYtrC,EAAIA,EAChBsrC,EAAYrrC,EAAIA,EAEhBzK,EAAKy3C,gBAAgB3B,GAEjBA,EAAYxpC,SACfwpC,EAAYvpC,WAGbupC,EAAYjxC,YAAa,SAK1B3E,KAAKw3C,qBAAqBtkC,GAG3BA,EAASspC,UAAY9uB,EACrBxa,EAASupC,WAAa5uB,GAIvButB,EAAAh4C,UAAAo0C,qBAAA,SAAqBtkC,GAChBA,EAASs2B,SAEZt2B,EAASs2B,OAAOtoC,MAAQ,EACxBgS,EAASs2B,OAAOhoC,OAAS,EACzB0R,EAASs2B,OAAO7kC,YAAa,GAG9B+2C,EAAA,KAAW17C,KAAKgQ,WAAWhM,WAAY,SAACkL,GACvC,IAAI0mC,EAAsB1iC,EAAS2iC,cAAc7gC,OAAO9F,EAAUiN,KAC9Dy5B,IAEHA,EAAY10C,MAAQ,EACpB00C,EAAYp0C,OAAS,EACrBo0C,EAAYjxC,YAAa,MAYlBy2C,EAAAh4C,UAAAm0C,gBAAV,SAA0B3sC,GAA1B,IAAA9K,EAAAE,KAEKkT,EAAiDtI,EAAOsI,SAE5D,GAAIlT,KAAK0I,iBAAiBuoB,EAAA,GAAajxB,KAAK2I,iBAAiBsoB,EAAA,EAAW,CACvE,IAAI2jB,EACArmC,OAAK,EACLmuC,OAAM,EAEN18C,KAAKkd,UAAYld,KAAK2I,MACtB3I,KAAK2c,YAAc3c,KAAK0c,SAC1Bk4B,EAAO1hC,EAAS+H,SAASjb,KAAK2c,YAC9BpO,EAAQ2E,EAAS+H,SAASjb,KAAK0c,QAC/BggC,EAASxpC,EAAS+H,SAASjb,KAAK0I,MAAM6I,cAAgB,IAAK,mBAIzDvR,KAAK+c,YAAc/c,KAAK8c,SAC1B83B,EAAO1hC,EAAS+H,SAASjb,KAAK+c,YAC9BxO,EAAQ2E,EAAS+H,SAASjb,KAAK8c,QAC/B4/B,EAASxpC,EAAS+H,SAASjb,KAAK2I,MAAM4I,cAAgB,IAAK,mBAIzDhD,EAAQqmC,GACX1hC,EAASypC,iBAAkB,EAC3B/xC,EAAOwW,SAASphB,KAAK48C,mBAAoB,KAGzC1pC,EAASypC,iBAAkB,EAC3B/xC,EAAOwW,SAASphB,KAAK68C,mBAAoB,IAGtCH,EAAS,GACZxpC,EAAS4pC,qBAAsB,EAC/BlyC,EAAOwW,SAAUphB,KAA2B,uBAAG,KAG/CkT,EAAS4pC,qBAAsB,EAC/BlyC,EAAOwW,SAAUphB,KAA2B,uBAAG,IAK5CA,KAAK+8C,mBAEL/8C,KAAK23B,kBACR/sB,EAAOgtB,KAAO,WACdhtB,EAAOitB,WAAY,IAGnBjtB,EAAOgtB,KAAO,WACdhtB,EAAOitB,WAAY,GAIhBgjB,EAAA,SAAe76C,KAAK81B,iBAA0C,IAAvB91B,KAAK81B,iBAC3ClrB,EAAOitB,YACVjtB,EAAO9I,OAAO8gB,KAAK,QAAS,SAACkV,GAC5BltB,EAAOrH,YAAczD,EAAKi4B,eAAej4B,EAAKg2B,eAAgB5iB,KAE/DtI,EAAO9I,OAAO8gB,KAAK,OAAQ,SAACkV,GAC3BltB,EAAOrH,YAAc,MAGnBqH,EAAOotB,YACVptB,EAAO9I,OAAO8gB,KAAK,OAAQ,SAACkV,GAC3BltB,EAAOrH,YAAczD,EAAKi4B,eAAej4B,EAAKg2B,eAAgB5iB,KAE/DtI,EAAO9I,OAAO8gB,KAAK,MAAO,SAACkV,GAC1BltB,EAAOrH,YAAc,SAa1BpC,OAAAkH,eAAW+yC,EAAAh4C,UAAA,eAAX,WAMC,OALKpD,KAAKg9C,WACTh9C,KAAKg9C,SAAW,IAAI3sB,EAAA,EAA8BrwB,KAAK0qC,wBACvD1qC,KAAKoJ,WAAWC,KAAK,IAAIgnB,EAAA,EAAarwB,KAAKg9C,WAC3Ch9C,KAAKoJ,WAAWC,KAAKrJ,KAAKg9C,SAASjyB,WAE7B/qB,KAAKg9C,0CAQH5B,EAAAh4C,UAAAsnC,qBAAV,WACC,OAAO,IAAIuS,EAAA,GAWZ97C,OAAAkH,eAAW+yC,EAAAh4C,UAAA,iBAOX,WACC,OAAOpD,KAAKoP,iBAAiB,kBAR9B,SAAqBb,GACpBvO,KAAKqP,iBAAiB,YAAad,GAAO,oCAoB3CpN,OAAAkH,eAAW+yC,EAAAh4C,UAAA,yBAAX,WAIC,OAHKpD,KAAK48C,qBACT58C,KAAK48C,mBAAqB58C,KAAK41B,OAAOrO,OAAO,sBAEvCvnB,KAAK48C,oDAYbz7C,OAAAkH,eAAW+yC,EAAAh4C,UAAA,6BAAX,WAIC,OAHKpD,KAAKk9C,yBACTl9C,KAAKk9C,uBAAyBl9C,KAAK41B,OAAOrO,OAAO,0BAE3CvnB,KAAKk9C,wDAcb/7C,OAAAkH,eAAW+yC,EAAAh4C,UAAA,yBAAX,WAIC,OAHKpD,KAAK68C,qBACT78C,KAAK68C,mBAAqB78C,KAAK41B,OAAOrO,OAAO,sBAEvCvnB,KAAK68C,oDAYb17C,OAAAkH,eAAW+yC,EAAAh4C,UAAA,6BAAX,WAIC,OAHKpD,KAAKm9C,yBACTn9C,KAAKm9C,uBAAyBn9C,KAAK41B,OAAOrO,OAAO,0BAE3CvnB,KAAKm9C,wDASN/B,EAAAh4C,UAAAsH,kBAAP,SAAyBwI,GAAzB,IAAApT,EAAAE,KAEC,GADAH,EAAAuD,UAAMsH,kBAAiB3K,KAAAC,KAACkT,GACpBlT,KAAKo9C,eAAgB,CACxB,IACIC,EACAC,EAFAxqB,EAAoB9yB,KAAKo9C,eAAetqB,OAIxC5f,IAEFmqC,EADGnqC,EAASypC,gBACI38C,KAAK48C,mBAGL58C,KAAK68C,mBAIrBS,EADGpqC,EAAS4pC,oBACQ98C,KAAKk9C,uBAGLl9C,KAAKm9C,wBAI3BzB,EAAA,KAAW5oB,EAAOQ,SAAStvB,WAAY,SAACuvB,GACnCrgB,GACHqgB,EAAMnS,SAASk8B,GACf/pB,EAAMnS,SAASi8B,KAIf9pB,EAAMnS,SAASthB,EAAKq9C,wBACpB5pB,EAAMnS,SAASthB,EAAK+8C,yBAajBzB,EAAAh4C,UAAAyvB,mBAAP,SAA0BC,GACzB,IAAIpF,EAAYoF,EAAO7nB,WACnB4iB,EAAYiF,EAAO5nB,YAEvB4nB,EAAOyW,iBAEP,IAAIC,EAA2B1W,EAAO/xB,YAAYw8C,EAAA,GAClD/T,EAAOvoC,aAAc,EACrBixB,EAAA,eAAuBlyB,KAAMwpC,EAAQ/tB,EAAA,GAErC+tB,EAAOj5B,SAAcvQ,KAAK8oC,QAAQ/d,UAClCye,EAAO3oC,QAAQ,EAAG,EAAG,EAAG,GACxB2oC,EAAOtoC,MAAQwsB,EACf8b,EAAOhoC,OAASqsB,GAQVutB,EAAAh4C,UAAAmN,SAAP,SAAgBC,GACf3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACfxQ,KAAK8oC,QAAQ/d,SAASxa,SAASC,EAAOs4B,QAAQ/d,WAQrCqwB,EAAAh4C,UAAAue,mBAAV,SAA6BH,EAAgBzG,GAC5C,OAAI/a,KAAKkd,UAAYld,KAAK0I,OACjB1I,KAAKklB,eAAiBllB,KAAKmlB,cAAgB,EAG5CtlB,EAAAuD,UAAMue,mBAAkB5hB,KAAAC,KAACwhB,EAAQzG,IAShCqgC,EAAAh4C,UAAA8e,mBAAV,SAA6BV,EAAgBzG,GAC5C,OAAI/a,KAAKkd,UAAYld,KAAK2I,OACjB3I,KAAKklB,eAAiBllB,KAAKmlB,cAAgB,EAG5CtlB,EAAAuD,UAAM8e,mBAAkBniB,KAAAC,KAACwhB,EAAQzG,IAQhCqgC,EAAAh4C,UAAA+4C,sBAAV,SAAgC9iB,GAC/B,IAAI0gB,EAAgB/5C,KAAK8oC,QAAQ/d,SAAShS,mBAGtC0G,GAFazf,KAAK8oC,QAAQ/d,SAAS/R,gBAGnC0G,EAAe1f,KAAK2I,MAAM0J,WAAa0nC,EAE3C,OAAOhzC,EAAA,WAAiBsyB,EAAY5Z,EAAMC,IAMjC07B,EAAAh4C,UAAA84C,wBAAV,SAAkC7iB,GACjC,IAAIp0B,EAAcjF,KAAK8oC,QAAQ/d,SAAS9R,iBACpC/T,EAAelF,KAAK8oC,QAAQ/d,SAAS7R,kBAErCoG,GAAgBra,EAChBua,EAAexf,KAAK0I,MAAM2J,WAAanN,EAE3C,OAAO6B,EAAA,WAAiBsyB,EAAY/Z,EAAME,IAE5C47B,EAp2BA,CAAkCnrB,EAAA,GA42BlChM,EAAA,EAASvT,kBAAgC,aAAI0qC,EAC7Cn3B,EAAA,EAASvT,kBAAwC,qBAAIoqC,4GCxjCrD9oC,EAAArS,EAAA,GA2DA69C,EAAA,SAAA39C,GAmCC,SAAA29C,IAAA,IAAA19C,EACCD,EAAAE,KAAAC,OAAOA,YACPF,EAAKG,UAAY,SAEjBH,EAAKoB,MAAQC,OAAA47B,EAAA,EAAA57B,CAAQ,IACrBrB,EAAK0B,OAASL,OAAA47B,EAAA,EAAA57B,CAAQ,IAEtBrB,EAAKiY,YAAa,EAClBjY,EAAKywB,eAAgB,EAErBzwB,EAAKmtB,cAAgB,EAErBntB,EAAKc,OAAS,OAEdd,EAAKgrC,eAGLhrC,EAAKgC,OAAOC,GAAG,aAAc,WACT,QAAfjC,EAAKc,SACRd,EAAKc,OAAS,gBAqClB,OA3F4BT,EAAA,EAAAq9C,EAAA39C,GA2DjB29C,EAAAp6C,UAAA0nC,aAAV,WACC9qC,KAAKwpC,OAASxpC,KAAKe,YAAY08C,EAAA,GAC/Bz9C,KAAKwpC,OAAOvoC,aAAc,EAC1BjB,KAAKwpC,OAAOzP,aAAa,EAAG,EAAG,EAAG,GAClC/5B,KAAKoJ,WAAWC,KAAKrJ,KAAKwpC,SAUpBgU,EAAAp6C,UAAAiJ,SAAP,WACCxM,EAAAuD,UAAMiJ,SAAQtM,KAAAC,MACVA,KAAKwpC,SACRxpC,KAAKwpC,OAAOtoC,MAAQ8Q,EAAA,IAAUhS,KAAKiL,WAAYjL,KAAK+7C,UACpD/7C,KAAKwpC,OAAOhoC,OAASwQ,EAAA,IAAUhS,KAAKkL,YAAalL,KAAKg8C,aAQjDwB,EAAAp6C,UAAAmN,SAAP,SAAgBC,GACf3Q,EAAAuD,UAAMmN,SAAQxQ,KAAAC,KAACwQ,GACXxQ,KAAKwpC,QACRxpC,KAAKwpC,OAAOj5B,SAASC,EAAOg5B,SAG/BgU,EA3FA,CAA4B/e,EAAA,GAmG5B7D,EAAA,EAASlqB,kBAA0B,OAAI8sC","file":"charts.js","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\t\t\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\t\t\r\n\t\t}\r\n\r\n\t\t//$iter.each(this.series.iterator(), (series) => {\r\n\t\t//\tseries.appeared = false;\r\n\t\t//});\t\t\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this.cursor) {\r\n\t\t\tif (this.data.length > 0) {\r\n\t\t\t\tthis.cursor.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// reset minimums\r\n\t\tthis.leftAxesContainer.minWidth = undefined;\r\n\t\tthis.rightAxesContainer.minWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processXAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processYAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\t\t\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", (event)=>{\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.processXAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.processYAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.data.length == 0) {\r\n\t\t\t\t\tcursor.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.tooltip.hide(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position: IPoint): void {\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.tooltip.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0; i < seriesPoints.length; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0; i < topSeriesPoints.length; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.pixelHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif(xRange){\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif(yRange){\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif(yAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < yAxes.length; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(xAxes.length) {\r\n\t\t\t\tfor(let i = 0; i < xAxes.length; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif(this.axisLength <= 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tdataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\tdataItem.text = dataItem.text; //@todo if this is left, kills custom data item text. this.adapter.apply(\"label\", dataItem.category);\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet cellStartLocation = this.renderer.cellStartLocation;\r\n\t\tlet cellEndLocation = this.renderer.cellEndLocation;\r\n\r\n\t\tdifference -= cellStartLocation;\r\n\t\tdifference -= (1 - cellEndLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - cellStartLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels.\r\n\t *\r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this.measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this.measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t})\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem);\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem);\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (!this._xAxis.get()) {\r\n\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.xAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (!this._yAxis.get()) {\r\n\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.yAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\tbullet.setState(\"hover\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tbullet.setState(\"default\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationX(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanimation = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isDisposed() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates series appearance when working value changes.\r\n\t */\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<SeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t * \r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDateFormat: string;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _markUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _startLocation: AxisItemLocation = 0;\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _endLocation: AxisItemLocation = 1;\r\n\r\n\t/**\r\n\t * A collection of timestamps of previously processed data items. Used\r\n\t * internally to track distance between data items when processing data.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _prevSeriesTime: Dictionary<string, number> = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tif (this.chart.data.length <= 1) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\t//label.invalidate();\r\n\t\t\t\t// when count == 1 this means label represents all the period between grid lines. so we center label because of that.\r\n\t\t\t\t// we don't do that through label.location because it would reset the setting\r\n\t\t\t\t/// and we do not do that to axis ranges\r\n\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\tposition = position + (endPosition - position) * label.location;\r\n\t\t\t\t\tendPosition = position;\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// this is used to automatically define baseInterval\r\n\t\tlet sameItemTime: number;\r\n\t\t// actually here we should only get dates of this axis. But it's not likely that the chart will have more than one date axis with different baseInterval.\r\n\t\t// So using this approach would mean we'll have the same baseInterval for all date axes. In case user wants different timeIntervals for different date axes, he can manually set baseInterval\r\n\t\t$object.each(dataItem.dates, (key, date) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\t//let date: Date = dataItem.dates[key];\r\n\t\t\tlet prevSeriesTime: number = this._prevSeriesTime.getKey(key);\r\n\t\t\tlet time: number = date.getTime();\r\n\t\t\t// need to check time difference betweend dates of the same data item (for example open/close. they also influence minSeriesDifference)\r\n\t\t\tif ($type.isNumber(sameItemTime)) {\r\n\t\t\t\tlet difference: number = Math.abs(time - sameItemTime);\r\n\t\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsameItemTime = time;\r\n\r\n\t\t\tlet differece: number = time - prevSeriesTime;\r\n\t\t\tif (differece > 0) {\r\n\t\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._prevSeriesTime.setKey(key, time);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this._startLocation != value) {\r\n\t\t\tthis._startLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this._startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this._endLocation != value) {\r\n\t\t\tthis._endLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this._endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tif (this._tooltipDateFormat != value) {\r\n\t\t\tthis._tooltipDateFormat = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this._tooltipDateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this._markUnitChange != value) {\r\n\t\t\tthis._markUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this._markUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem) {\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\t\t\twhile (date.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (date.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0.5;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight }) });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 }) });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.element.attr({ \"d\": $path.rectangle(w, h) });\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.element.attr({ \"d\": \"\" });\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point, triggeredByPointer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point, triggeredByPointer);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": $path.rectangle(width, this.innerHeight, -width / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": $path.rectangle(this.innerWidth, height, 0, -height / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentPropertiess } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<LineSeriesSegment>}\r\n\t */\r\n\tpublic segments: ListTemplate<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(new LineSeriesSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(0, range);\r\n\t\t});\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment?: LineSeriesSegment): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t//for (let propertyName in itemProperties) {\r\n\t\t\t//let value: any = itemProperties[propertyName];\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tif (segment) {\r\n\t\t\t\t\tif (segment.properties[<keyof ILineSeriesSegmentPropertiess>propertyName] != value) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\t\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\tline.copyFrom(<any>this);\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\tfill.copyFrom(<any>this);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"./PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, ILegendItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color, iRGB, color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends SeriesDataItem implements ILegendItem<DataItem, IDataItemEvents> {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tprotected _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tprotected _tick: PieTick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t *\r\n\t * @type {LegendDataItem<DataItem, IDataItemEvents>}\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem<DataItem, IDataItemEvents>;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @type {LegendSettings}\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param {boolean} value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean): void {\r\n\t\tsuper.setVisibility(value);\r\n\t\tif (value) {\r\n\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param {LegendDataItem<DataItem, IDataItemEvents>}  value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem<DataItem, IDataItemEvents>) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tvalue.label.dataItem = this;\r\n\t\tvalue.valueLabel.dataItem = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {LegendDataItem<DataItem, IDataItemEvents>} Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem<DataItem, IDataItemEvents> {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Pie Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {PieTick} Tick element\r\n\t */\r\n\tpublic get tick(): PieTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tthis._tick = this.component.ticks.create();\r\n\t\t\tthis._disposers.push(this._tick);\r\n\t\t\tthis.addSprite(this._tick);\r\n\t\t\tthis._tick.slice = this.slice;\r\n\t\t\tthis._tick.label = this.label;\r\n\t\t\tthis._tick.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\tif (!this._label) {\r\n\t\t\tthis._label = this.component.labels.create();\r\n\t\t\tthis._disposers.push(this._label);\r\n\t\t\tthis.addSprite(this._label);\r\n\t\t\tthis._label.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * A Slice element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {Slice} Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\t\t\tthis._slice = this.component.slices.create();\r\n\t\t\tthis._disposers.push(this._slice);\r\n\t\t\tthis.addSprite(this._slice);\r\n\t\t\tthis._slice.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param {boolean} value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\thiddenInLegend?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be hidden.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvisible?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t * @type {number}\r\n\t */\r\n\talignLabels?: number;\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends ISeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends Series {\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t *\r\n\t * @type {ListTemplate<PieTick>}\r\n\t */\r\n\tpublic ticks: ListTemplate<PieTick>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t *\r\n\t * @type {ListTemplate<AxisLabelCircular>}\r\n\t */\r\n\tpublic labels: ListTemplate<AxisLabelCircular>;\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.initSlice(Slice);\r\n\r\n\t\t// Create tick list\r\n\t\tlet tick = new PieTick();\r\n\t\ttick.isMeasured = false;\r\n\t\tthis.ticks = new ListTemplate<PieTick>(tick);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.ticks));\r\n\t\tthis._disposers.push(this.ticks.template);\r\n\r\n\t\t// Create labels list\r\n\t\t// @todo create a labelText/labelHTML properties just like\r\n\t\t// tooltipText/tooltipHTML\r\n\t\tlet label = new AxisLabelCircular();\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.radius = 25;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t\tlabel.renderingFrequency = 2;\r\n\t\tthis.labels = new ListTemplate<AxisLabelCircular>(label);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\t//let hiddenState = this.hiddenState;\r\n\t\t//hiddenState.properties.opacity = 1;\r\n\t\t//hiddenState.properties.endAngle = -90;\r\n\t\t//hiddenState.properties.startAngle = -90;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\tlet hoverState = this.slices.template.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice}                    Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice): Slice {\r\n\t\t// Create a slice template\r\n\t\tlet slice = new sliceType();\r\n\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\t// Create slice hover state\r\n\t\tslice.states.create(\"hover\");\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\r\n\t\tlet hiddenState = slice.hiddenState;\r\n\t\thiddenState.properties.visible = true;\r\n\t\thiddenState.properties.opacity = 1;\r\n\r\n\t\t// Create slices list\r\n\t\tthis.slices = new ListTemplate<Slice>(slice);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.slices));\r\n\t\tthis._disposers.push(this.slices.template);\r\n\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (Math.abs(this.startAngle - this.endAngle) < 0.01) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.radius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.parent = this.slicesContainer;\r\n\t\t\tslice.radius = this.radius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\r\n\t\t\tslice.innerRadius = this.innerRadius;\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tlet label = dataItem.label;\r\n\t\t\tlabel.parent = this.labelsContainer;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\ttick.parent = this.ticksContainer;\r\n\r\n\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\tlet point: IPoint;\r\n\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tlet x: number = tick.length + label.radius;\r\n\r\n\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t// right half\r\n\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering\r\n\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.radius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\t// left half\r\n\t\t\t\telse {\r\n\t\t\t\t\tx -= arcRect.x * this.radius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\tx *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = this.radius + tick.length + label.radius;\r\n\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t}\r\n\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\tslice.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\tslice.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (slice.focusable) {\r\n\t\t\t\tslice.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t});\r\n\t\t\t\tslice.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (slice.hoverable) {\r\n\t\t\t\tslice.events.once(\"over\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t});\r\n\t\t\t\tslice.events.once(\"out\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\tslice.fill = this.colors.getIndex(dataItem.index * this.colors.step);\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\tslice.stroke = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t}\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"][]}  dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i: number = 0; i < dataItems.length; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label: AxisLabelCircular = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (i < dataItems.length - 1) {\r\n\t\t\t\t\tlet nextLabel: AxisLabelCircular = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet bottom: number = label.pixelY + label.measuredHeight;\r\n\r\n\t\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param  {number}              index      Current index\r\n\t * @param  {PieSerisDataItem[]}  dataItems  Data items\r\n\t * @return {AxisLabelCircular}              Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): AxisLabelCircular {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param {ColorSet}  value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ColorSet} Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}          marker    Container\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t// todo: make an easy possibility to bind visual properties\r\n\t\t\t//child.bind(\"fill\", slice);\r\n\t\t\t//child.bind(\"stroke\", slice);\r\n\t\t\t//child.bind(\"fillOpacity\", slice);\r\n\t\t\t//child.bind(\"strokeOpacity\", slice);\r\n\r\n\t\t\tslice.events.on(\"propertychanged\", (ev)=>{\r\n\t\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\t\tchild.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n\t\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\t\t\t\r\n\t\t\t\tif(ev.property == \"fill\"){\r\n\t\t\t\t\tif(!child.isActive){\r\n\t\t\t\t\t\tchild.fill = slice.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(ev.property == \"stroke\"){\r\n\t\t\t\t\tif(!child.isActive){\r\n\t\t\t\t\t\tchild.stroke = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: Slice = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\tlet value = a[1];\r\n\t\t\tthis.positionBullet(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tlet slice: Slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tdataItem.label.dx = slice.dx + slice.pixelX;\r\n\t\t\tdataItem.label.dy = slice.dy + slice.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PieSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t}\r\n\r\n\tprotected getContainerBBox(): IRectangle {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.radius);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.radius);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"radius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"innerRadius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet element = this.line.element;\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.chart;\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\telement.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius) });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) }) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.element.attr({ \"d\": this.fillPath });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.element.attr({ \"d\": $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius) });\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.background.fillOpacity = 0.5;\r\n\t\t//this.background.fill = color(\"#dadada\");\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionEvents[\"track\"]): IPoint {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * If `triggeredByPointer == false` the cursor will stay there, regardless\r\n\t * movement of the actual pointer(s). This is useful when you want to\r\n\t * manually place cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerMove(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tthis.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = point;\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerDown(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerDownReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerUp(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerUpReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerDown(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerUp(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentPropertiess extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentPropertiess { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentPropertiess;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.element = this.paper.add(\"path\");\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.element = this.paper.add(\"path\");\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\tlet path: string = $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t//if(this.strokeOpacity > 0 || this.strokeSprite.strokeOpacity > 0){ // not good, range stroke is not drawn then\r\n\t\t\tthis.strokeSprite.element.attr({ \"d\": path });\r\n\t\t\t//}\r\n\r\n\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\tthis.fillSprite.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, triggeredByPointer?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle)) {\r\n\r\n\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.element.attr({ \"d\": $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) }) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.element.attr({ \"d\": path });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend, ILegendItem } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends ISerialChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (radius - pixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\t\t\t// todo: set this on default state instead?\r\n\t\t\tseries.radius = pixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\tseries.innerRadius = pixelInnerRadius + seriesRadius * i;\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: ILegendItem<DataItem, IDataItemEvents>[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PieSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (pieSeriesDataItem.visible && !pieSeriesDataItem.isHiding) {\r\n\t\t\t\t\tpieSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tpieSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"./PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tx1 = x0 + label.radius * slice.ix;\r\n\t\t\t\ty1 = y0 + label.radius * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice3D>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice3D>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice3D}                  Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice3D): Slice3D {\r\n\t\tlet slice: Slice3D = <Slice3D>super.initSlice(Slice3D);\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/*\r\n\t\tset startAngle(value: number) {\r\n\t\t\t// 3d pie series can start at 90 angle increments, otherwise big slices might overlap incorrectly\r\n\t\t\tvalue = $math.normalizeAngle(value);\r\n\t\t\tvalue = $math.round(value / 90) * 90;\r\n\r\n\t\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t\t}\r\n\r\n\t\tget startAngle(): number {\r\n\t\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t\t}\r\n\t*/\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet activeState = this.states.create(\"active\");\r\n\t\tactiveState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.innerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.innerRadius) / 2);\r\n\t\t})\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\r\n\t\t\tlet arc = slice.arc;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = slice.startAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = slice.startAngle + arc * label.location;\r\n\t\t\tlet startAngle = slice.startAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = slice.startAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = slice.radius * $math.cos(labelAngle);\r\n\t\t\tlet y = slice.radius * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\r\n\t\tlet mAngle = this.trueStartAngle + this.slice.arc / 2;\r\n\r\n\t\tlet tx = this.slice.radius * $math.cos(mAngle);\r\n\t\tlet ty = this.slice.radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tthis.slice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.element.attr({ \"d\": \"\" });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.element.attr({ \"d\": path });\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\treturn dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.getValue(\"value\"), interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.showReal(duration);\r\n\r\n\t\tif (animation && !animation.isDisposed()) {\r\n\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis.chart.invalidateLayout();\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", 0, interpolationDuration);\r\n\t\t});\r\n\t\tlet animation = super.hideReal(duration);\r\n\r\n\t\tif (animation && !animation.isDisposed()) {\r\n\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis.chart.invalidateLayout();\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\t\t\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\tpublic appear(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.element.attr({\r\n\t\t\t\"d\": $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D })\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t *\r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumn3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 310\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @ignore\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * A list of Chord links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<ChordLink>}\r\n\t */\r\n\tpublic links: ListTemplate<ChordLink>;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"none\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\t\t\t\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.invalidate();\t\t\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */ \r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */ \r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.element.attr({ \"d\": d });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @type {TreeMapDataItem}\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed:TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", ()=>{\r\n\t\t\tthis.invalidateData();\r\n\t\t})\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\tseries.hideReal(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.showReal(duration);\r\n\r\n\t\t\t\tif (series.level > this.currentLevel + this.maxLevels - 1) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.bulletsContainer.show(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\tthis.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to 0 to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected handleDataItemValueChange(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t//protected handleDataItemWorkingValueChange(event: AMEvent<TreeMapDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\t//if(event.property == \"value\"){\r\n\t\t//\tthis.invalidateLayout();\r\n\t\t//}\r\n\t//}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(){\r\n\t\tsuper.validateLayout();\t\t\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif(series.level == 1){\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\t\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * List of \"low\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _lowLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * List of \"high\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _highLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, 0);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, 0);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, 1);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, 1);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem:RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column:RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\t// @todo use getPoint() instead of these\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\t\tif(arc > 0){\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\t\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tthis.circle = this.createChild(Circle);\r\n\t\tthis.circle.shouldClone = false;\r\n\t\tthis.circle.radius = 5;\r\n\t\tthis.circle.isMeasured = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.element = this.paper.add(\"path\");\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\t\t\t\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif(this.chart.data != this.scrollbarChart.data){\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(this.links.template);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(this.separators.template);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @ignore\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <ColumnSeriesDataItem>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this.columns.iterator(), (column) => {\r\n\t\t\tif(column.dataItem.index < this.startIndex || column.dataItem.index >= this.endIndex){\r\n\t\t\t\tcolumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<ColumnSeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(event.target);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t}\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif(this.xOpenField && this.xField){\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(this.yOpenField && this.yField){\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnProperties}\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\tthis.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", () => {\r\n\t\t\tif (this.layout == \"none\") {\r\n\t\t\t\tthis.layout = \"absolute\";\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tthis.column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param {Sprite} source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts"],"sourceRoot":""}