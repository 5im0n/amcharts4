{"version":3,"sources":["webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/MapSeries.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/SmallMap.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/ZoomControl.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/core/responsive/ResponsiveDefaults.ts"],"names":["__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__webpack_require__","MapSeriesDataItem","_super","_this","call","this","className","values","value","applyTheme","__extends","Object","defineProperty","prototype","setValue","updateExtremes","geoPoints","s","length","longitude","latitude","west","east","north","south","__WEBPACK_IMPORTED_MODULE_0__series_Series__","MapSeries","isMeasured","nonScalingStroke","dataFields","createDataItem","validateData","__WEBPACK_IMPORTED_MODULE_2__core_utils_Iterator__","dataItems","iterator","dataItem","chart","checkInclude","includes","excludes","id","indexOf","getPropertyValue","setPropertyValue","invalidateData","max","_max","high","min","_min","low","processIncExc","handleObjectAdded","event","mapObject","newValue","parent","series","__WEBPACK_IMPORTED_MODULE_1__core_System__","registeredClasses","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","SmallMap","_chart","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","align","valign","percentHeight","percentWidth","margin","interfaceColors","background","fillOpacity","fill","getFor","events","on","moveToPosition","updateMapSize","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__MapSeries__","processSeries","seriesContainer","createChild","__WEBPACK_IMPORTED_MODULE_0__core_Container__","rectangle","__WEBPACK_IMPORTED_MODULE_1__core_elements_Rectangle__","stroke","strokeWidth","strokeOpacity","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","verticalCenter","horizontalCenter","svgPoint","rectPoint","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","zoomLevel","scale","Math","x","pixelWidth","y","pixelHeight","geoPoint","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","width","height","ceil","pixelX","pixelY","scaleRatio","afterDraw","moveTo","maskRectangle","__WEBPACK_IMPORTED_MODULE_5__core_System__","ZoomControl","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","layout","padding","plusButton","__WEBPACK_IMPORTED_MODULE_1__core_elements_Button__","textElement","text","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","readerTitle","language","translate","property","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","log","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Interaction__","body","ev","topParent","hasFocused","__WEBPACK_IMPORTED_MODULE_4__core_utils_Keyboard__","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","stepCount","createBackground","__WEBPACK_IMPORTED_MODULE_2__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_System__","__WEBPACK_IMPORTED_MODULE_7__charts_map_ZoomControl__","__webpack_exports__","relevant","container","state","object","stateId","__WEBPACK_IMPORTED_MODULE_0__charts_axes_AxisRenderer__","states","create","properties","minLabelPosition","maxLabelPosition","__WEBPACK_IMPORTED_MODULE_2__charts_axes_AxisRendererY__","inside","__WEBPACK_IMPORTED_MODULE_3__charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_6__charts_map_SmallMap__","disabled","__WEBPACK_IMPORTED_MODULE_4__charts_Chart__","__WEBPACK_IMPORTED_MODULE_5__charts_Legend__","position","__WEBPACK_IMPORTED_MODULE_1__charts_axes_AxisRendererX__"],"mappings":"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","file":"responsivedefaults.js","sourcesContent":["/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IMapDataObject, IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values[\"value\"].value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateExtremes(geoPoints: IGeoPoint[]): void {\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((this.west > longitude) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = longitude;\r\n\t\t\t}\r\n\t\t\tif ((this.east < longitude) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < latitude) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = latitude;\r\n\t\t\t}\r\n\t\t\tif ((this.south > latitude) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n * \r\n * @type {string}\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field number in data for a numeric value of the map object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A color to apply to map objects with the lowest value.\r\n\t *\r\n\t * @type {Color}\r\n\t */\r\n\tminColor?: Color;\r\n\r\n\t/**\r\n\t * A color to apply to map objects with the highest value.\r\n\t *\r\n\t * @type {Color}\r\n\t */\r\n\tmaxColor?: Color;\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from geoJSON or not\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tgetDataFromJSON?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\texclude?: string[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesProperties}\r\n\t */\r\n\tpublic _properties: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<MapSeries, IMapSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapSeries, IMapSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * User-defined lowest value in the series.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _min: number;\r\n\r\n\t/**\r\n\t * User-defined heighest value in the series.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _max: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tif ((this.west > dataItem.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = dataItem.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < dataItem.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = dataItem.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < dataItem.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = dataItem.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > dataItem.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = dataItem.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.chart.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param  {string[]}  includes  A list of explicitly included ids\r\n\t * @param  {string[]}  excludes  A list of explicitly excluded ids\r\n\t * @param  {string}    id        Id of the object\r\n\t * @return {boolean}             Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element, such as title, from\r\n\t * GeoJSON format?\r\n\t * @todo: review description, this is more about polygons/lines/points and not about titles. if a mapPolygonSeries doesn't have this set to true, it won't show any areas unless you pass data directly to the series\r\n\t *\r\n\t * @param {boolean}  value  Use GeoJSON data?\r\n\t */\r\n\tpublic set getDataFromJSON(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"getDataFromJSON\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use GeoJSON data?\r\n\t */\r\n\tpublic get getDataFromJSON(): boolean {\r\n\t\treturn this.getPropertyValue(\"getDataFromJSON\");\r\n\t}\r\n\r\n\t/**\r\n\t * Color for the lowest value in a heat map.\r\n\t *\r\n\t * In heat map, each object will be colored with an intermediate color\r\n\t * between `minColor` and `maxColor` based on their `value` position between\r\n\t * `min` and `max`.\r\n\t *\r\n\t * @param {Color}  value  Lowest color\r\n\t */\r\n\tpublic set minColor(value: Color) {\r\n\t\tthis.setPropertyValue(\"minColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Lowest color\r\n\t */\r\n\tpublic get minColor(): Color {\r\n\t\treturn this.getPropertyValue(\"minColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Color for the highest value in a heat map.\r\n\t *\r\n\t * In heat map, each object will be colored with an intermediate color\r\n\t * between `minColor` and `maxColor` based on their `value` position between\r\n\t * `min` and `max`.\r\n\t *\r\n\t * @param {Color}  value  Highest color\r\n\t */\r\n\tpublic set maxColor(value: Color) {\r\n\t\tthis.setPropertyValue(\"maxColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Highest color\r\n\t */\r\n\tpublic get maxColor(): Color {\r\n\t\treturn this.getPropertyValue(\"maxColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * User-defined highest value in the series.\r\n\t *\r\n\t * If not set, the map will use the highest `value` out of actual items in\r\n\t * the series.\r\n\t *\r\n\t * This is used to determine object's color in a heat map.\r\n\t *\r\n\t * @param {number}  value  Highest value\r\n\t */\r\n\tpublic set max(value: number) {\r\n\t\tthis._max = value;\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @return {number} Highest value\r\n\t */\r\n\tpublic get max(): number {\r\n\t\tlet max = this._max;\r\n\t\tif ($type.isNumber(max)) {\r\n\t\t\treturn max;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.values.value.high;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * User-defined lowest value in the series.\r\n\t *\r\n\t * If not set, the map will use the lowest `value` out of actual items in\r\n\t * the series.\r\n\t *\r\n\t * This is used to determine object's color in a heat map.\r\n\t *\r\n\t * @param {number}  value  Lowest value\r\n\t */\r\n\tpublic set min(value: number) {\r\n\t\tthis._min = value;\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Lowest value\r\n\t */\r\n\tpublic get min(): number {\r\n\t\tlet min = this._min;\r\n\r\n\t\tif ($type.isNumber(min)) {\r\n\t\t\treturn min;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.values.value.low;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param {string[]}  value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param {string[]}  value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param {IListEvents<MapObject>[\"insert\"]} event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"insert\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"MapSeries\"] = MapSeries;\r\nsystem.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/MapSeries.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { system } from \"../../core/System\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n * \r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<SmallMap, ISmallMapEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<SmallMap, ISmallMapEvents>>;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t * \r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t * \r\n\t * @type {ListTemplate<MapSeries>}\r\n\t */\r\n\tpublic series: ListTemplate<MapSeries>;\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t * \r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create series\r\n\t\tthis.series = new ListTemplate<MapSeries>(new MapSeries());\r\n\t\tthis.series.events.on(\"insert\", this.processSeries, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[MapSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t * \r\n\t * @param {IListEvents<MapSeries>[\"insert\"]} event [description]\r\n\t */\r\n\tpublic processSeries(event: IListEvents<MapSeries>[\"insert\"]): void {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t * \r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif(this.chart){\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"SmallMap\"] = SmallMap;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/SmallMap.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { interaction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n * \r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ZoomControl, IZoomControlEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ZoomControl, IZoomControlEvents>>;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t * \r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t * \r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t * \r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t * \r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.textElement.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.textElement.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\t\t\t\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\t\t\t\t\t\t\r\n\t\t\tthis.thumb.maxY = 0;\t\t\t\t\t\t\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\t\t\t\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t * \r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tinteraction.body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\t\t\t\tthumb.height = slider.pixelHeight / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = Math.log(chart.zoomLevel) / Math.LN2;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * (step + 1) / this.stepCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step:number;\r\n\t\tif(this.layout == \"vertical\"){\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight) - 1;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\t\r\n\t\t}\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"ZoomControl\"] = ZoomControl;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/ZoomControl.ts","/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters } from \"../Sprite\";\r\nimport { SpriteState } from \"../SpriteState\";\r\nimport { Container } from \"../Container\";\r\nimport { Button } from \"../elements/Button\";\r\n\r\nimport { Optional } from \"../utils/Type\";\r\n\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../../charts/axes/AxisRendererRadial\";\r\nimport { Chart } from \"../../charts/Chart\";\r\nimport { Legend } from \"../../charts/Legend\";\r\nimport { SmallMap } from \"../../charts/map/SmallMap\";\r\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\r\nexport default [\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Microcharts and sparklines\r\n\t * W<=100 || H<=100\r\n\t * @todo\r\n\t */\r\n\t\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 100) || (container.pixelHeight <= 100)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRenderer) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.minLabelPosition = 1;\r\n\t\t\t\tstate.properties.maxLabelPosition = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Narrow\r\n\t * W<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererY) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.height = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"vertical\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginLeft = 0;\r\n\t\t\t\tstate.properties.marginRight = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Short\r\n\t * H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererX) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.width = 100;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"horizontal\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginTop = 0;\r\n\t\t\t\tstate.properties.marginBottom = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"right\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Super-small\r\n\t * W<=200 && H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200) && (container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Hide legend\r\n\t\t\tif (object instanceof Legend) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t}\r\n\r\n];\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/core/responsive/ResponsiveDefaults.ts"],"sourceRoot":""}