{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///../../../../../src/.internal/core/responsive/ResponsiveDefaults.ts"],"names":["__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__webpack_require__","AxisLabelCircular","_super","_this","call","this","className","padding","location","radius","applyTheme","__extends","Object","defineProperty","prototype","getPropertyValue","value","setPropertyValue","fixPoint","point","axisRadius","angle","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","Math","atan2","y","x","invalid","validate","sign","inside","relativeRotation","dy","measuredHeight","dx","measuredWidth","labelRadius","rotation","pixelWidth","_bbox","width","pixelHeight","height","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","__WEBPACK_IMPORTED_MODULE_0__AxisLabel__","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","registeredClasses","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","AxisRendererCircular","layout","isMeasured","startAngle","endAngle","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","grid","template","labels","ticks","pixelPerfect","tooltipLocation","line","strokeOpacity","setAxis","axis","tooltip","adapter","add","target","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","pixelX","pixelY","pixelRadius","cos","sin","chart","PI","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","innerWidth","innerHeight","innerRadius","positionToPoint","position","coordinate","positionToCoordinate","axisLength","positionToAngle","arc","end","start","renderer","inversed","updateAxisLine","element","attr","d","__WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__","updateGridElement","endPosition","gridInnerRadius","zIndex","toggleVisibility","updateTickElement","tick","tickLength","length","updateLabelElement","label","positionItem","minLabelPosition","maxLabelPosition","fitsToBounds","getPositionRangePath","startPosition","cornerRadius","path","pixelInnerRadius","createGrid","__WEBPACK_IMPORTED_MODULE_2__GridCircular__","createFill","__WEBPACK_IMPORTED_MODULE_1__AxisFillCircular__","createLabel","__WEBPACK_IMPORTED_MODULE_3__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","AxisFillCircular","paper","__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__","draw","fillPath","__WEBPACK_IMPORTED_MODULE_0__AxisFill__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","GridCircular","__WEBPACK_IMPORTED_MODULE_0__Grid__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","SmallMap","_chart","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","align","valign","percentHeight","percentWidth","margin","interfaceColors","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","background","fillOpacity","fill","getFor","events","on","moveToPosition","updateMapSize","seriesContainer","createChild","__WEBPACK_IMPORTED_MODULE_0__core_Container__","shouldClone","rectangle","__WEBPACK_IMPORTED_MODULE_1__core_elements_Rectangle__","stroke","strokeWidth","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","verticalCenter","horizontalCenter","_series","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","handleSeriesAdded","handleSeriesRemoved","event","series","newValue","contains","newSeries","clone","removeValue","push","dataUsers","parent","mouseEnabled","invalidate","svgPoint","rectPoint","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","zoomLevel","scale","min","geoPoint","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","ceil","scaleRatio","afterDraw","moveTo","maskRectangle","processConfig","config","i","len","map","hasKey","getKey","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","ZoomControl","plusButton","__WEBPACK_IMPORTED_MODULE_1__core_elements_Button__","text","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","readerTitle","language","translate","property","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","spritePoint","maxPower","log","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Interaction__","body","ev","topParent","hasFocused","__WEBPACK_IMPORTED_MODULE_4__core_utils_Keyboard__","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","stepCount","createBackground","__WEBPACK_IMPORTED_MODULE_2__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__charts_map_ZoomControl__","__webpack_exports__","relevant","container","state","object","stateId","__WEBPACK_IMPORTED_MODULE_0__charts_axes_AxisRenderer__","states","create","properties","__WEBPACK_IMPORTED_MODULE_2__charts_axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_3__charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_6__charts_map_SmallMap__","disabled","__WEBPACK_IMPORTED_MODULE_4__charts_Chart__","__WEBPACK_IMPORTED_MODULE_5__charts_Legend__","__WEBPACK_IMPORTED_MODULE_1__charts_axes_AxisRendererX__"],"mappings":"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","file":"deps/responsivedefaults.js","sourcesContent":["/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n * \r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisLabelCircular, IAxisLabelCircularEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisLabelCircular, IAxisLabelCircularEvents>>;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t * \r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative rotation.\r\n\t * \r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets distance from axis circle to label in pixels.\r\n\t * \r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current setting for label distance.\r\n\t * \r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this.measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this.measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\t\t\tlet pixelWidth = this._bbox.width;\r\n\t\t\tlet pixelHeight = this._bbox.height;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRenderer, IAxisRendererEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisRendererCircular, IAxisRendererCircularEvents>>;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.isMeasured = true;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis:Axis){\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set outer radius.\r\n\t * \r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t * \r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Sets inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t * \r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set inner radius.\r\n\t * \r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t * \r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2)) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet element = this.line.element;\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.chart;\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\telement.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius) });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.isNumber(grid.radius) ? grid.radius : this.radius, this.pixelRadius);\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) }) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set start angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets end angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set end angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t * \r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t * \r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t * \r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {[type]}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n * \r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {AxisFillEventDispatcher<AMEvent<AxisFillCircular, IAxisFillCircularEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisFillCircular, IAxisFillCircularEvents>>;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.isNumber(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.element.attr({ \"d\": this.fillPath });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t * \r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current inner radius.\r\n\t * \r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t * \r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current outer radius.\r\n\t * \r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets corner radius for the fill. In pixels.\r\n\t * \r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current corner radius.\r\n\t * \r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t * \r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n * \r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {GridEventDispatcher<AMEvent<GridCircular, IGridCircularEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<GridCircular, IGridCircularEvents>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t * \r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t * \r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n * \r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<SmallMap, ISmallMapEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<SmallMap, ISmallMapEvents>>;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t * \r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t * \r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t * \r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"insert\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"remove\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list. \r\n\t * \r\n\t * @param {IListEvents<MapSeries>[\"insert\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"insert\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.mouseEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t * \r\n\t * @param {IListEvents<XYSeries>[\"remove\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"remove\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t * \r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<ZoomControl, IZoomControlEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ZoomControl, IZoomControlEvents>>;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\t\t\t\tthumb.height = slider.pixelHeight / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = Math.log(chart.zoomLevel) / Math.LN2;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * (step + 1) / this.stepCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight) - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters } from \"../Sprite\";\r\nimport { SpriteState } from \"../SpriteState\";\r\nimport { Container } from \"../Container\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\r\nimport { Chart } from \"../../charts/Chart\";\r\nimport { Legend } from \"../../charts/Legend\";\r\nimport { SmallMap } from \"../../charts/map/SmallMap\";\r\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\r\nexport default [\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Microcharts and sparklines\r\n\t * W<=100 || H<=100\r\n\t * @todo\r\n\t */\r\n\t\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 100) || (container.pixelHeight <= 100)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRenderer) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.minLabelPosition = 1;\r\n\t\t\t\tstate.properties.maxLabelPosition = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Narrow\r\n\t * W<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererY) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.height = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"vertical\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginLeft = 0;\r\n\t\t\t\tstate.properties.marginRight = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Short\r\n\t * H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererX) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.width = 100;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"horizontal\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginTop = 0;\r\n\t\t\t\tstate.properties.marginBottom = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"right\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Super-small\r\n\t * W<=200 && H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200) && (container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Hide legend\r\n\t\t\tif (object instanceof Legend) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t}\r\n\r\n];\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/responsive/ResponsiveDefaults.ts"],"sourceRoot":""}