{"version":3,"sources":["webpack:///C:/Dropbox/www/amcharts4dev/src/.internal/charts/series/TreeMapSeries.ts","webpack:///./treemap.ts","webpack:///C:/Dropbox/www/amcharts4dev/src/treemap.ts","webpack:///C:/Dropbox/www/amcharts4dev/src/.internal/charts/types/TreeMap.ts"],"names":["__WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__","__webpack_require__","TreeMapSeriesDataItem","_super","_this","call","this","className","applyTheme","__extends","Object","defineProperty","prototype","_dataContext","dataContext","value","treeMapDataItem","parent","name","__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__","TreeMapSeries","fillOpacity","strokeOpacity","minBulletDistance","columns","template","tooltipText","configField","interfaceColors","stroke","getFor","dataFields","openValueX","valueX","openValueY","valueY","sequencedInterpolation","pixelPerfect","processDataItem","dataItem","index","seriesDataItem","createDataItem","show","duration","showReal","hide","hideReal","processValues","processConfig","config","__WEBPACK_IMPORTED_MODULE_2__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_1__core_System__","registeredClasses","window","amcharts4","treemap","__WEBPACK_IMPORTED_MODULE_0__src_treemap__","d","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_46__internal_charts_cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_10__core_interaction_Mouse__","TreeMapDataItem","rows","values","x0","y0","x1","y1","hasChildren","children","__WEBPACK_IMPORTED_MODULE_1__core_utils_Iterator__","iterator","child","setValue","properties","setProperty","level","color","undefined","component","colors","getIndex","step","__WEBPACK_IMPORTED_MODULE_0__XYChart__","TreeMap","layoutAlgorithm","squarify","seriesTemplates","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_7__series_TreeMapSeries__","zoomable","maxLevels","currentLevel","homeText","language","translate","__WEBPACK_IMPORTED_MODULE_9__core_utils_ColorSet__","sorting","xAxis","xAxes","push","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","title","disabled","strictMinMax","xRenderer","renderer","inside","labels","ticks","grid","axisFills","minGridDistance","line","baseGrid","yAxis","yAxes","yRenderer","inversed","navigationBar","createChild","__WEBPACK_IMPORTED_MODULE_8__elements_NavigationBar__","toBack","links","events","on","event","target","zoomToChartDataItem","createTreeSeries","zoomOutButton","_homeDataItem","newValue","isTemplate","validateData","homeDataItem","dataItems","clone","max","Math","sqrt","minMax","adjustMinMax","_homeText","maxX","maxY","pixelHeight","pixelWidth","min","layoutItems","__WEBPACK_IMPORTED_MODULE_4__core_System__","once","toggleBullets","sort","a","b","i","length","node","_tempSeries","navigationData","parentDataItem","initSeries","reverse","data","createTreeSeriesReal","__WEBPACK_IMPORTED_MODULE_3__core_utils_Array__","series","indexOf","zIndex","create","getKey","toString","copyFrom","dataUsers","removeValue","adapter","add","fill","remove","cursorOverStyle","pointer","zoomToSeriesDataItem","bulletsContainer","zoomToValues","rangeChangeAnimation","applyInternalDefaults","readerTitle","getPropertyValue","setPropertyValue","createSeries","binaryTree","slice","dice","sliceDice","sum","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","dx","dy","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","i0","i1","row_1"],"mappings":"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","file":"treemap.js","sourcesContent":["/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LabelBullet } from \"../elements/LabelBullet\";\r\nimport { system } from \"../../core/System\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t * \r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\tpublic set dataContext(value: Object) {\r\n\t\tthis._dataContext = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\tpublic get dataContext(): Object {\r\n\t\t// It's because data of tree series is TreeMapDataItems.\r\n\t\tif (this._dataContext) {\r\n\t\t\treturn (<any>this._dataContext).dataContext;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t * \r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n * \r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<TreeMapSeries, ITreeMapSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<TreeMapSeries, ITreeMapSeriesEvents>>;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: ${value.formatNumber()}\"; //@todo review this when value Field will be adde to treeMapSeries\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t * \r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object, index?: number): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContect is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext, index);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t * \r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\treturn this.showReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t * \r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\treturn this.hideReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nsystem.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// C:/Dropbox/www/amcharts4dev/src/.internal/charts/series/TreeMapSeries.ts","import * as m from \"../../src/treemap\";\n(window as any).amcharts4.treemap = m;\n\n\n// WEBPACK FOOTER //\n// ./treemap.ts","/**\r\n * Module: treemap \r\n */\r\n\r\n/**\r\n * Elements: types \r\n */\r\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\r\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\r\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\r\n\r\n/**\r\n * Elements: charts \r\n */\r\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\n\r\n/**\r\n * Elements: series \r\n */\r\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\r\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\r\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\r\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\r\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\r\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\r\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\r\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\r\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\r\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\r\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\r\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\r\n\r\n/**\r\n * Elements: axes \r\n */\r\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\r\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\r\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\r\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\r\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\r\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\r\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\r\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\r\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\r\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\r\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\r\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\r\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\r\n\r\n/**\r\n * Elements: elements \r\n */\r\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\r\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\r\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\r\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\r\n\r\n/**\r\n * Elements: cursors \r\n */\r\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\r\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\r\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Dropbox/www/amcharts4dev/src/treemap.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IPieSeriesDataFields } from \"../series/PieSeries\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { system } from \"../../core/System\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\n\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { color, Color } from \"../../core/utils/Color\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { LabelBullet } from \"../elements/LabelBullet\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t * \r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t * \r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t * \r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t * \r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n * \r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<TreeMap, ITreeMapEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<TreeMap, ITreeMapEvents>>;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t * \r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t * \r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t * \r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t * \r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * [TreeMapSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} [description]\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]> = new DictionaryTemplate<string, this[\"_seriesType\"]>(new TreeMapSeries());\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t * \r\n\t * @default true \r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.homeText = this.language.translate(\"Home\");\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tlet navigationBar = this.createChild(NavigationBar);\r\n\t\tnavigationBar.disabled = true;\r\n\t\tnavigationBar.toBack();\r\n\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t})\r\n\t\tthis.navigationBar = navigationBar;\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\tlet max = Math.sqrt(homeDataItem.value);\r\n\t\tlet minMax = this.xAxis.adjustMinMax(0, max, max, 100);\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = minMax.max;\r\n\t\tlet maxY = maxX * this.pixelHeight / this.pixelWidth;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tsystem.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem): void {\r\n\t\tlet children = parent.children;\r\n\r\n\t\tif (this.sorting == \"ascending\") {\r\n\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\treturn a.value - b.value;\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (this.sorting == \"descending\") {\r\n\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\treturn b.value - a.value;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\tfor (let i = 0; i < children.length; i++) {\r\n\r\n\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\tif (node.children) {\r\n\t\t\t\tthis.layoutItems(node);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\r\n\t\tthis._tempSeries = [];\r\n\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\t\tthis.navigationBar.data = navigationData;\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series = this.series.create();\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries.copyFrom(template);\r\n\t\t\t}\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series);\r\n\t\t\tseries.data = dataItem.children.values;\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t * \r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\tseries.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.show();\r\n\r\n\t\t\t\tif (series.level != this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.bulletsContainer.show(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t * \r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\t\t\t\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationend\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to 0 to disable drill down functionality.\r\n\t * \r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t * \r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t * \r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t * \r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"slice\":\r\n\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"dice\":\r\n\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet row;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"TreeMap\"] = TreeMap;\n\n\n// WEBPACK FOOTER //\n// C:/Dropbox/www/amcharts4dev/src/.internal/charts/types/TreeMap.ts"],"sourceRoot":""}