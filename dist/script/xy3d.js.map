{"version":3,"sources":["webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/series/ColumnSeries3D.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///./xy3d.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/xy3d.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/types/XYChart3D.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/series/ConeSeries.ts"],"names":["__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","__webpack_require__","ColumnSeries3DDataItem","_super","_this","call","this","className","applyTheme","__extends","__WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__","ColumnSeries3D","Object","defineProperty","prototype","chart","columnsContainer","_columnsContainer","getColumnTemplate","columnTemplate","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Rectangle3D__","width","height","getMaskPath","w","xAxis","axisLength","h","yAxis","dx","dx3D","dy","dy3D","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","x","y","getPropertyValue","value","setPropertyValue","columns","template","depth","angle","__WEBPACK_IMPORTED_MODULE_2__core_System__","registeredClasses","AxisRendererX3D","axis","_chart","__WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__","updateGridElement","grid","position","endPosition","location","point","positionToPoint","element","gridContainer","pixelHeight","attr","d","positionItem","toggleVisibility","updateBaseGridElement","baseGrid","get","set","events","on","handle3DChanged","event","property","invalidate","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__","AxisRendererY3D","pixelWidth","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererY__","window","amcharts4","xy3d","__WEBPACK_IMPORTED_MODULE_0__src_xy3d__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_37__internal_charts_cursors_Cursor__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","XYChart3DDataItem","__WEBPACK_IMPORTED_MODULE_0__XYChart__","XYChart3D","_axisRendererX","__WEBPACK_IMPORTED_MODULE_2__axes_AxisRendererX3D__","_axisRendererY","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererY3D__","seriesContainer","createChild","__WEBPACK_IMPORTED_MODULE_1__core_Container__","isMeasured","noLayouting","fixLayout","invalidateDataUsers","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","validate","chartContainer","marginTop","paddingRight","scrollbarX","scrollbarY","fixColumns","count","__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","series","iterator","__WEBPACK_IMPORTED_MODULE_4__series_ColumnSeries3D__","clustered","depthIndex","s","i_1","column","zIndex","processConfig","config","i","len","length","type","__WEBPACK_IMPORTED_MODULE_5__core_System__","__WEBPACK_IMPORTED_MODULE_3__core_System__","ConeSeriesDataItem","__WEBPACK_IMPORTED_MODULE_0__ColumnSeries3D__","ConeSeries","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Cone__","topRadius","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__"],"mappings":"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","file":"xy3d.js","sourcesContent":["/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n * \r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ColumnSeries3D, IColumnSeries3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ColumnSeries3D, IColumnSeries3DEvents>>;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * \r\n\t * @return {Sprite} Element.\r\n\t */\r\n\tprotected getColumnTemplate(): Sprite {\r\n\t\tlet columnTemplate = new Rectangle3D();\r\n\t\tcolumnTemplate.width = percent(80);\r\n\t\tcolumnTemplate.height = percent(80);\r\n\t\treturn columnTemplate;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t * \r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\t\tlet dx: number = this.chart.dx3D;\r\n\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template: Rectangle3D = <Rectangle3D>this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template: Rectangle3D = <Rectangle3D>this.columns.template;  // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nsystem.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n * \r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRendererX3D, IAxisRendererX3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisRendererX3D, IAxisRendererX3DEvents>>;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.gridContainer.pixelHeight;\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.gridContainer.pixelHeight;\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set associated chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t * \r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n * \r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<AxisRendererY3D, IAxisRendererY3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<AxisRendererY3D, IAxisRendererY3DEvents>>;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.gridContainer.pixelWidth;\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.gridContainer.pixelWidth;\r\n\t\tthis.baseGrid.element.attr({\r\n\t\t\t\"d\": $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D })\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns currently set associated chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t * \r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/axes/AxisRendererY3D.ts","import * as m from \"../../src/xy3d\";\n(window as any).amcharts4.xy3d = m;\n\n\n// WEBPACK FOOTER //\n// ./xy3d.ts","/**\r\n * Module: xy3d \r\n */\r\n\r\n/**\r\n * Elements: types \r\n */\r\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\r\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\r\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\n\r\n/**\r\n * Elements: charts \r\n */\r\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\n\r\n/**\r\n * Elements: series \r\n */\r\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\r\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\r\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\r\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\r\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\r\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\r\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\r\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\r\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\r\n\r\n/**\r\n * Elements: axes \r\n */\r\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\r\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\r\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\r\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\r\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\r\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\r\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\r\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\r\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\r\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\r\n\r\n/**\r\n * Elements: elements \r\n */\r\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\r\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\r\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\r\n\r\n/**\r\n * Elements: cursors \r\n */\r\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\r\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/xy3d.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { ConeSeries } from \"../series/ConeSeries\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n * \r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<XYChart3D, IXYChart3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<XYChart3D, IXYChart3DEvents>>;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t * \r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tthis.columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tthis.columnsContainer.isMeasured = false;\r\n\t\tthis.columnsContainer.noLayouting = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t * \r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t * \r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset. (px)\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset. (px)\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"XYChart3D\"] = XYChart3D;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/types/XYChart3D.ts","/**\r\n * ConeSeries module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries3D, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DAdapters, IColumnSeries3DEvents, ColumnSeries3DDataItem } from \"./ColumnSeries3D\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { system } from \"../../core/System\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeries3DDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeries3DDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeries3DProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeries3DEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeries3DAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n * \r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries3D {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ConeSeries, IConeSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ConeSeries, IConeSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new element to use as a template for the series.\r\n\t * \r\n\t * @return {Sprite} Element\r\n\t */\r\n\tprotected getColumnTemplate(): Sprite {\r\n\t\tlet template: Cone = new Cone();\r\n\t\ttemplate.topRadius = percent(0);\r\n\t\ttemplate.width = percent(80);\r\n\t\ttemplate.height = percent(80);\r\n\t\treturn template;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nsystem.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/series/ConeSeries.ts"],"sourceRoot":""}