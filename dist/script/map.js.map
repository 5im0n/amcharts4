{"version":3,"sources":["webpack:///./map.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/map.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/projections/Orthographic.ts"],"names":["window","amcharts4","map","__WEBPACK_IMPORTED_MODULE_0__src_map__","__webpack_require__","d","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_32__internal_charts_map_Geo__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","Orthographic","_super","__extends","prototype","project","lambda","phi","x","Math","cos","sin","y","getClipRectangle1","longitude","this","deltaLongitude","latitude","deltaLatitude","getRect1","north","south","west","east","getClipRectangle2","delta","getRect2","clipGeoArea","geoArea","clippedArea","clipRectangle1","clipRectangle2","rect1","rect2","i","length","surface","hole","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","push","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","__values","clippedAreas_1_1","next","done","area","value","prevPoint","i_1","point","stepCount","abs","extraPoints","s","splice","apply","__spread","__WEBPACK_IMPORTED_MODULE_0__Projection__","__WEBPACK_IMPORTED_MODULE_1__core_System__","registeredClasses"],"mappings":"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","file":"map.js","sourcesContent":["import * as m from \"../../src/map\";\n(window as any).amcharts4.map = m;\n\n\n// WEBPACK FOOTER //\n// ./map.ts","/**\r\n * Module: map\r\n */\r\n\r\n/**\r\n * Elements: types\r\n */\r\nexport { MapChartDataItem, IMapPolygonDataObject, MapLineType, IMapLineDataObject, IMapImageDataObject, IMapDataObject, IMapChartDataFields, IMapChartProperties, IMapChartEvents, IMapChartAdapters, MapChart } from \"./.internal/charts/types/MapChart\";\r\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\n\r\n/**\r\n * Elements: charts\r\n */\r\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\n\r\n/**\r\n * Elements: series\r\n */\r\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\r\n\r\n/**\r\n * Elements: axes\r\n */\r\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\n\r\n/**\r\n * Elements: elements\r\n */\r\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\r\n\r\n/**\r\n * Elements: map\r\n */\r\nexport { MapSeriesDataItem, GEOJSONGeometry, IMapSeriesDataFields, IMapSeriesProperties, IMapSeriesEvents, IMapSeriesAdapters, MapSeries } from \"./.internal/charts/map/MapSeries\";\r\nexport { IMapObjectProperties, IMapObjectEvents, IMapObjectAdapters, MapObject } from \"./.internal/charts/map/MapObject\";\r\nexport { IMapPolygonProperties, IMapPolygonEvents, IMapPolygonAdapters, MapPolygon } from \"./.internal/charts/map/MapPolygon\";\r\nexport { IMapImageProperties, IMapImageEvents, IMapImageAdapters, MapImage } from \"./.internal/charts/map/MapImage\";\r\nexport { IMapLineProperties, IMapLineEvents, IMapLineAdapters, MapLine } from \"./.internal/charts/map/MapLine\";\r\nexport { IMapSplineProperties, IMapSplineEvents, IMapSplineAdapters, MapSpline } from \"./.internal/charts/map/MapSpline\";\r\nexport { IMapArcProperties, IMapArcEvents, IMapArcAdapters, MapArc } from \"./.internal/charts/map/MapArc\";\r\n\r\nexport { MapPolygonSeriesDataItem, IMapPolygonSeriesDataFields, IMapPolygonSeriesProperties, IMapPolygonSeriesEvents, IMapPolygonSeriesAdapters, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\r\nexport { MapLineSeriesDataItem, IMapLineSeriesDataFields, IMapLineSeriesProperties, IMapLineSeriesEvents, IMapLineSeriesAdapters, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\r\nexport { MapSplineSeriesDataItem, IMapSplineSeriesDataFields, IMapSplineSeriesProperties, IMapSplineSeriesEvents, IMapSplineSeriesAdapters, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\r\nexport { MapImageSeriesDataItem, IMapImageSeriesDataFields, IMapImageSeriesProperties, IMapImageSeriesEvents, IMapImageSeriesAdapters, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\r\nexport { MapArcSeriesDataItem, IMapArcSeriesDataFields, IMapArcSeriesProperties, IMapArcSeriesEvents, IMapArcSeriesAdapters, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\r\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo } from \"./.internal/charts/map/MapUtils\";\r\nexport { IZoomControlProperties, IZoomControlEvents, IZoomControlAdapters, ZoomControl } from \"./.internal/charts/map/ZoomControl\";\r\nexport { ISmallMapProperties, ISmallMapEvents, ISmallMapAdapters, SmallMap } from \"./.internal/charts/map/SmallMap\";\r\n\r\n\r\n/**\r\n * Elements: projections\r\n */\r\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\r\nimport * as projections from \"./.internal/charts/map/projections\";\r\nexport { projections };\r\n\r\n\r\nimport * as geo from \"./.internal/charts/map/Geo\";\r\nexport { geo };\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/map.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { system } from \"../../../core/System\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta:number;\r\n\r\n\t\tif(longitude > 0){\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta:number;\r\n\r\n\t\tif(longitude > 0){\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta};\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if(this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if(this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i: number = 0; i < clippedArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet prevPoint = surface[surface.length - 1];\r\n\r\n\t\t\t\tfor(let i = 0; i < surface.length; i++){\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)){\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints:IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif(stepCount > 1){\r\n\t\t\t\t\t\t\tfor(let s = 1; s < stepCount; s++){\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\textraPoints.push({longitude:prevPoint.longitude, latitude:prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s})\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"Orthographic\"] = Orthographic;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/map/projections/Orthographic.ts"],"sourceRoot":""}