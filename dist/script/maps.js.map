{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/map/MapSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///./maps.js","webpack:///../../src/maps.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts"],"names":["__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__webpack_require__","MapSeriesDataItem","_super","_this","call","this","className","values","value","applyTheme","__extends","Object","defineProperty","prototype","setValue","updateExtremes","geoPoints","s","length","longitude","latitude","west","east","north","south","__WEBPACK_IMPORTED_MODULE_0__series_Series__","MapSeries","isMeasured","nonScalingStroke","dataFields","createDataItem","validateData","__WEBPACK_IMPORTED_MODULE_2__core_utils_Iterator__","dataItems","iterator","dataItem","chart","checkInclude","includes","excludes","id","indexOf","getPropertyValue","setPropertyValue","invalidateData","processIncExc","handleObjectAdded","event","mapObject","newValue","parent","series","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","registeredClasses","MapObject","layout","clickable","validate","readerTitle","itemReaderText","__WEBPACK_IMPORTED_MODULE_0__core_Container__","multiline","multiline_1","__values","multiline_1_1","next","done","segment","segment_1","segment_1_1","point","normalizePoint","geoPoint","x","y","__WEBPACK_IMPORTED_MODULE_0__core_utils_Math__","wrapAngleTo180","Math","asin","sin","latitude180","abs","angle","__WEBPACK_IMPORTED_MODULE_10__Geo__","MapLine","line","__WEBPACK_IMPORTED_MODULE_4__core_elements_Polyline__","stroke","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","strokeOpacity","interfaceColors","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","getFor","shortestDistance","positionToPoint","position","multiGeoLine","images","images_1","images_1_1","events","on","property","invalidate","imagesToConnect","_a","_b","image","push","newMultiGeoLine","i","geoLine","newGeoLine","p","geoPointA","geoPointB","stepCount","max","d","intermediatePoint","projection","previousPoint","segments","projectGeoLine","_arrow","validatePosition","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","lineObjects","measureElement","_lineObjects","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_1__MapLineObject__","handleLineObjectAdded","mapLineObject","mapLine","arrow","createChild","shouldClone","width","height","triangle","__WEBPACK_IMPORTED_MODULE_2__core_elements_Triangle__","fillOpacity","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","rotation","horizontalCenter","verticalCenter","copyFrom","source","clone","__WEBPACK_IMPORTED_MODULE_0__MapObject__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","multiPointToGeo","points","pointToGeo","multiPolygon","multiGeoArea","surface","hole","multiLine","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Type__","MapImage","moveTo","convert","__WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__","MapPolygon","polygon","__WEBPACK_IMPORTED_MODULE_1__core_elements_Polygon__","fill","tooltipPosition","multiGeoPolygon","projectGeoArea","pixelWidth","pixelHeight","overflowX","overflowY","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","MapLineSeriesDataItem","_mapLine","component","mapLines","create","__WEBPACK_IMPORTED_MODULE_1__MapLine__","addSprite","_line","__WEBPACK_IMPORTED_MODULE_4__MapUtils__","_multiLine","_geoLine","_multiGeoLine","updateLineExtremes","__WEBPACK_IMPORTED_MODULE_0__MapSeries__","MapLineSeries","data","clear","useGeodata","geoJSON","geodata","features","type","geometry","console","log","feature","id_1","this_1","include","exclude","coordinates","dataObject","__WEBPACK_IMPORTED_MODULE_5__core_utils_Array__","multiLineString","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","properties","moveValue","_mapLines","lineTemplate","createLine","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","template","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","SmallMap","_chart","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","align","valign","percentHeight","percentWidth","margin","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","background","moveToPosition","updateMapSize","seriesContainer","rectangle","__WEBPACK_IMPORTED_MODULE_1__core_elements_Rectangle__","strokeWidth","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","_series","handleSeriesAdded","handleSeriesRemoved","contains","newSeries","removeValue","dataUsers","mouseEnabled","svgPoint","rectPoint","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","zoomLevel","scale","min","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","ceil","pixelX","pixelY","scaleRatio","afterDraw","maskRectangle","processConfig","config","len","map","hasKey","getKey","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","MapSpline","__WEBPACK_IMPORTED_MODULE_1__core_elements_Polyspline__","tensionX","tensionY","__WEBPACK_IMPORTED_MODULE_0__MapLine__","MapArc","__WEBPACK_IMPORTED_MODULE_1__core_elements_Polyarc__","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","ZoomControl","padding","plusButton","__WEBPACK_IMPORTED_MODULE_1__core_elements_Button__","label","text","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","language","translate","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Interaction__","body","ev","topParent","hasFocused","__WEBPACK_IMPORTED_MODULE_4__core_utils_Keyboard__","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","createBackground","__WEBPACK_IMPORTED_MODULE_2__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","window","am4maps","__WEBPACK_IMPORTED_MODULE_0__es2015_maps__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_map_Geo__","__WEBPACK_IMPORTED_MODULE_14__map_Geo__","MapChartDataItem","__WEBPACK_IMPORTED_MODULE_0__SerialChart__","MapChart","zoomDuration","zoomEasing","__WEBPACK_IMPORTED_MODULE_11__core_utils_Ease__","_prevZoomGeoPoint","__WEBPACK_IMPORTED_MODULE_4__map_projections_Projection__","deltaLongitude","inert","resizable","handleMapTransform","handleDoubleHit","chartContainer","udpateScaleRatio","chartContainerBg","e","dragStart","interactions","downPointers","getIndex","dragStop","focusable","handleWheel","handleMapDown","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Interaction__","_zoomControl","__WEBPACK_IMPORTED_MODULE_6__core_utils_Keyboard__","getEventKey","pan","applyInternalDefaults","__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__","_mapAnimation","stop","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","htmlContainer","shift","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","centerPoint","westPoint","eastPoint","northPoint","southPoint","seriesWidth","seriesHeight","vScale","innerWidth","hScale","innerHeight","Infinity","dispatch","seriesPoint","seriesPointToGeo","geoPointToSVG","geoPointToSeries","invert","_geodata","_dataUsers","center","duration","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","animate","to","pixelPaddingLeft","pixelPaddingTop","zoomToMapObject","__WEBPACK_IMPORTED_MODULE_2__map_MapImage__","__WEBPACK_IMPORTED_MODULE_3__map_MapPolygon__","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","__WEBPACK_IMPORTED_MODULE_5__map_SmallMap__","removeDispose","zoomControl","createSeries","__WEBPACK_IMPORTED_MODULE_1__map_MapSeries__","invalidateProjection","_dataSources","getDataSource","loadData","setDataSourceEvents","createClassInstance","configOrder","a","b","asIs","field","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","MapLineObject","adjustRotation","MapPolygonSeriesDataItem","_mapPolygon","mapPolygons","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","updateAreaExtremes","mapPolygon","MapPolygonSeries","parsingStepDuration","clearPolygons","dispose","_parseDataFrom","_mapPolygons","polygonTemplate","__WEBPACK_IMPORTED_MODULE_1__MapPolygon__","getPolygonById","dataContext","MapSplineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__MapSpline__","__WEBPACK_IMPORTED_MODULE_0__MapLineSeries__","MapSplineSeries","MapImageSeriesDataItem","_mapImage","mapImages","_point","__WEBPACK_IMPORTED_MODULE_5__MapUtils__","_geoPoint","mapImage","MapImageSeries","multiPoint","multiGeoPoint","__WEBPACK_IMPORTED_MODULE_4__core_utils_Array__","_mapImages","__WEBPACK_IMPORTED_MODULE_1__MapImage__","validateDataElement","MapArcSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__MapArc__","MapArcSeries","Mercator","unproject","atan","exp","PI","project","lambda","phi","tan","__WEBPACK_IMPORTED_MODULE_0__Projection__","Miller","Eckert6","j","k","sqrt","cos","delta","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","Orthographic","getClipRectangle1","deltaLatitude","getRect1","getClipRectangle2","getRect2","clipGeoArea","geoArea","clippedArea","clipRectangle1","clipRectangle2","rect1","rect2","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","clippedAreas_1_1","area","prevPoint","i_1","extraPoints","splice","apply","__spread","__WEBPACK_IMPORTED_MODULE_2__Geo__","Projection","deltaGama","clippedGeoArea","convertGeoArea","convertGeoLine","clipGeoLine","clippedLine","clippedSegments","clipLine","concat","clippedSegments2","convertedPoints","convertedAreaPoints","convertedSurface","convertedHole","convertedSegmentPoints","rotate","pointInRadians","__WEBPACK_IMPORTED_MODULE_1__core_utils_Math__","unrotate","deltaGamma","deltaLambda","deltaPhi","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","z","atan2","subjectPolyline","clipPolygon","cp1","cp2","inside","intersection","dc","dp","n1","n2","n3","inputList","subjectPolygon","outputList","r1","r2","pointA","pointB","phi1","lambda1","phi2","lambda2","sinPhi1","cosPhi1","sinLambda1","cosLambda1","sinPhi2","cosPhi2","sinLambda2","cosLambda2","A","B","phi3","lambda3","__WEBPACK_IMPORTED_MODULE_0__core_Registry__"],"mappings":"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","file":"maps.js","sourcesContent":["/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateExtremes(geoPoints: IGeoPoint[]): void {\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((this.west > longitude) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = longitude;\r\n\t\t\t}\r\n\t\t\tif ((this.east < longitude) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < latitude) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = latitude;\r\n\t\t\t}\r\n\t\t\tif ((this.south > latitude) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n * \r\n * @type {string}\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field number in data for a numeric value of the map object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from `geodata` or not\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseGeodata?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\texclude?: string[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesProperties}\r\n\t */\r\n\tpublic _properties: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<MapSeries, IMapSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapSeries, IMapSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tif ((this.west > dataItem.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = dataItem.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < dataItem.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = dataItem.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < dataItem.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = dataItem.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > dataItem.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = dataItem.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.chart.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param  {string[]}  includes  A list of explicitly included ids\r\n\t * @param  {string[]}  excludes  A list of explicitly excluded ids\r\n\t * @param  {string}    id        Id of the object\r\n\t * @return {boolean}             Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element, such as title, from\r\n\t * GeoJSON format?\r\n\t * @todo: review description, this is more about polygons/lines/points and not about titles. if a mapPolygonSeries doesn't have this set to true, it won't show any areas unless you pass data directly to the series\r\n\t *\r\n\t * @param {boolean}  value  Use GeoJSON data?\r\n\t */\r\n\tpublic set useGeodata(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"useGeodata\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use GeoJSON data?\r\n\t */\r\n\tpublic get useGeodata(): boolean {\r\n\t\treturn this.getPropertyValue(\"useGeodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param {string[]}  value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param {string[]}  value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param {IListEvents<MapObject>[\"insert\"]} event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"insert\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\r\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSeries.ts","/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n * \r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapObjectProperties}\r\n\t */\r\n\tpublic _properties: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapObjectAdapters}\r\n\t */\r\n\tpublic _adapter: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapObject, IMapObjectEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapObject, IMapObjectEvents>>;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t * \r\n\t * @type {MapSeries}\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo-point\r\n * @return {IGeoPoint}            Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint[][]}  multiline  Source geo-line\r\n * @return {IGeoPoint[]}               Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param  {number}  angle  Angle\r\n * @return {number}         Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo point\r\n * @return {IPoint}               Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $geo from \"./Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path \r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n * \r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineProperties}\r\n\t */\r\n\tpublic _properties: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineAdapters}\r\n\t */\r\n\tpublic _adapter: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapLine, IMapLineEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapLine, IMapLineEvents>>;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t * \r\n\t * @type {Polyline}\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * [_lineObjects description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {ListTemplate<MapLineObject>}\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * [_arrow description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MapLineObject}\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _distance: number;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t * \r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t * @ignore\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\t// Create a line and set its default properties\r\n\t\tthis.line = new Polyline();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t * \r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.line) {\r\n\t\t\treturn this.line.positionToPoint(position);\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [multiGeoLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IGeoPoint[][]} multiGeoLine [description]\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} [description]\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoLine\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t *\r\n\t * @param {MapImages[]} images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[]) {\r\n\t\t//@todo dispose listeners if previous imagesToConnect exists\r\n\t\tfor (let image of images) {\r\n\t\t\timage.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\t\t//let multiPoints: IPoint[][] = [];\r\n\t\tlet multiGeoLine: IGeoPoint[][] = this.multiGeoLine;\r\n\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tmultiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tsegment.push({ longitude: image.longitude, latitude: image.latitude });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.shortestDistance) {\r\n\t\t\tlet newMultiGeoLine: IGeoPoint[][] = [];\r\n\r\n\t\t\tfor (let i = 0; i < multiGeoLine.length; i++) {\r\n\t\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\t\tlet newGeoLine: IGeoPoint[] = [];\r\n\r\n\t\t\t\tfor (let p = 1; p < geoLine.length; p++) {\r\n\t\t\t\t\tlet geoPointA: IGeoPoint = geoLine[p - 1];\r\n\t\t\t\t\tlet geoPointB: IGeoPoint = geoLine[p];\r\n\r\n\t\t\t\t\tlet stepCount: number = Math.max(Math.abs(geoPointA.latitude - geoPointB.latitude), Math.abs(geoPointA.longitude - geoPointB.longitude));\r\n\t\t\t\t\t//let latitudeStep: number = (geoPointB.latitude - geoPointA.latitude) / stepCount;\r\n\t\t\t\t\t//let longitudeStep: number = (geoPointB.longitude - geoPointA.longitude) / stepCount;\r\n\r\n\t\t\t\t\tfor (let d = 0; d < stepCount; d++) {\r\n\t\t\t\t\t\tlet intermediatePoint = chart.projection.intermediatePoint(geoPointA, geoPointB, d / stepCount);\r\n\r\n\t\t\t\t\t\tif (newGeoLine.length > 0) {\r\n\t\t\t\t\t\t\tlet previousPoint = newGeoLine[newGeoLine.length - 1];\r\n\t\t\t\t\t\t\tif (Math.abs(previousPoint.longitude - intermediatePoint.longitude) > 359) {\r\n\t\t\t\t\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t\t\t\t\t\tnewGeoLine = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewGeoLine.push(intermediatePoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t}\r\n\t\t\tmultiGeoLine = newMultiGeoLine;\r\n\t\t}\r\n\r\n\t\tthis.line.segments = chart.projection.projectGeoLine(multiGeoLine);\r\n\r\n\t\tif (this._arrow) {\r\n\t\t\tthis._arrow.validatePosition();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\tx.validatePosition();\r\n\t\t});\r\n\r\n\t\tthis.line.parent = this;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects, the line consists of.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @readonly\r\n\t * @return {ListTemplate<MapLineObject>} List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"insert\", this.handleLineObjectAdded, this);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t * \r\n\t * @param {IListEvents<MapLineObject>[\"insert\"]}  event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"insert\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t * \r\n\t * @param {MapLineObject}  arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapLineObject} Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\ttriangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t * \r\n\t * @param {MapLineObject}  source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n * \r\n * @param  {number[][][][]}  multiPolygon  Source multi-polygon\r\n * @return {IGeoPoint[]}                   Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i: number = 0; i < multiPolygon.length; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n * \r\n * @param  {number[][][]}  multiLine  Source multiline\r\n * @return {IGeoPoint[]}              Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0; i < multiLine.length; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n * \r\n * @param  {number[][]}   points  Source points\r\n * @return {IGeoPoint[]}          Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0; i < points.length; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n * \r\n * @param  {number[]}   point  Source point\r\n * @return {IGeoPoint}         Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n *\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n * \r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageProperties}\r\n\t */\r\n\tpublic _properties: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageAdapters}\r\n\t */\r\n\tpublic _adapter: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapImage, IMapImageEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapImage, IMapImageEvents>>;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t * \r\n\t * @type {MapImageSeries}\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t * \r\n\t * @param {number}  value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t * \r\n\t * @param {number}  value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\tthis.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================f================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n * \r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonProperties}\r\n\t */\r\n\tpublic _properties: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonAdapters}\r\n\t */\r\n\tpublic _adapter: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapPolygon, IMapPolygonEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapPolygon, IMapPolygonEvents>>;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t * \r\n\t * @type {Polygon}\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t * \r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\t/*this.events.on(\"focus\", (event) => {\r\n\t\t\t//this.toFront();\r\n\t\t\t//this.isFocused = true;\r\n\t\t});*/\r\n\r\n\t\tthis.tooltipPosition = \"mouse\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t * \r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this \r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's horizontal overflow in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Overflow (px)\r\n\t */\r\n\tpublic get overflowX(): number {\r\n\t\treturn this.polygon.overflowX;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's vertical overflow in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Overflow (px)\r\n\t */\r\n\tpublic get overflowY(): number {\r\n\t\treturn this.polygon.overflowY;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t * \r\n\t * @type {MapLine}\r\n\t */\r\n\tprotected _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t *\r\n\t * @type {number[][]}\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[]}\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic _component: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapLine} Element\r\n\t */\r\n\tpublic get mapLine(): MapLine {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tthis._mapLine = this.component.mapLines.create(MapLine);\r\n\t\t\tthis.addSprite(this._mapLine);\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t * \r\n\t * @param {number[][]}  line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo([line]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t * \r\n\t * @param {number[][]}  multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param {IGeoPoint[][]}  geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiGeoLine = [geoLine];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param {IGeoPoint[][]}  multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.updateLineExtremes(multiGeoLine);\r\n\t\tthis.mapLine.multiGeoLine = this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateLineExtremes(multiGeoLine: IGeoPoint[][]): void {\r\n\t\tfor (let i = 0; i < multiGeoLine.length; i++) {\r\n\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\tthis.updateExtremes(geoLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n * \r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineSeriesProperties}\r\n\t */\r\n\tpublic _properties: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapLineSeries, IMapLineSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapLineSeries, IMapLineSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t * \r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t * \r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {MapLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapLines.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiLineString\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLineString: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLineString) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLineString = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if data is parsed in chunks, lines list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapLines.moveValue(dataItem.mapLine);\r\n\t\t});\r\n\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t * \r\n\t * @return {ListTemplate} Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tmapLines.events.on(\"insert\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t * \r\n\t * @return {MapLine} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t * \r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n * \r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<SmallMap, ISmallMapEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<SmallMap, ISmallMapEvents>>;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t * \r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t * \r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t * \r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"insert\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"remove\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list. \r\n\t * \r\n\t * @param {IListEvents<MapSeries>[\"insert\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"insert\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.mouseEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t * \r\n\t * @param {IListEvents<XYSeries>[\"remove\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"remove\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t * \r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n * \r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineProperties}\r\n\t */\r\n\tpublic _properties: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineAdapters}\r\n\t */\r\n\tpublic _adapter: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapSpline, IMapSplineEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapSpline, IMapSplineEvents>>;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t * \r\n\t * @type {Polyspline}\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t * \r\n\t * @type {MapSplineSeries}\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Create a spline\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\t \r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n * \r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcProperties}\r\n\t */\r\n\tpublic _properties: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcAdapters}\r\n\t */\r\n\tpublic _adapter: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapArc, IMapArcEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapArc, IMapArcEvents>>;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t * \r\n\t * @type {Polyarc}\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t * \r\n\t * @type {MapArcSeries}\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Create a line\r\n\t\tthis.line = new Polyarc();\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\t \r\n\t * ShortestDistance = true is not supported by MapArc, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<ZoomControl, IZoomControlEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ZoomControl, IZoomControlEvents>>;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\t\t\t\tthumb.height = slider.pixelHeight / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = Math.log(chart.zoomLevel) / Math.LN2;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * (step + 1) / this.stepCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight) - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = 526\n// module chunks = 5","/**\n * Duplicated\n */\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Maps\n */\nexport { MapChartDataItem, IMapPolygonDataObject, MapLineType, IMapLineDataObject, IMapImageDataObject, IMapDataObject, IMapChartDataFields, IMapChartProperties, IMapChartEvents, IMapChartAdapters, MapChart } from \"./.internal/charts/types/MapChart\";\nexport { MapSeriesDataItem, GEOJSONGeometry, IMapSeriesDataFields, IMapSeriesProperties, IMapSeriesEvents, IMapSeriesAdapters, MapSeries } from \"./.internal/charts/map/MapSeries\";\nexport { IMapObjectProperties, IMapObjectEvents, IMapObjectAdapters, MapObject } from \"./.internal/charts/map/MapObject\";\nexport { IMapPolygonProperties, IMapPolygonEvents, IMapPolygonAdapters, MapPolygon } from \"./.internal/charts/map/MapPolygon\";\nexport { IMapImageProperties, IMapImageEvents, IMapImageAdapters, MapImage } from \"./.internal/charts/map/MapImage\";\nexport { IMapLineProperties, IMapLineEvents, IMapLineAdapters, MapLine } from \"./.internal/charts/map/MapLine\";\nexport { IMapSplineProperties, IMapSplineEvents, IMapSplineAdapters, MapSpline } from \"./.internal/charts/map/MapSpline\";\nexport { IMapArcProperties, IMapArcEvents, IMapArcAdapters, MapArc } from \"./.internal/charts/map/MapArc\";\nexport { MapPolygonSeriesDataItem, IMapPolygonSeriesDataFields, IMapPolygonSeriesProperties, IMapPolygonSeriesEvents, IMapPolygonSeriesAdapters, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\nexport { MapLineSeriesDataItem, IMapLineSeriesDataFields, IMapLineSeriesProperties, IMapLineSeriesEvents, IMapLineSeriesAdapters, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\nexport { MapSplineSeriesDataItem, IMapSplineSeriesDataFields, IMapSplineSeriesProperties, IMapSplineSeriesEvents, IMapSplineSeriesAdapters, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\nexport { MapImageSeriesDataItem, IMapImageSeriesDataFields, IMapImageSeriesProperties, IMapImageSeriesEvents, IMapImageSeriesAdapters, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\nexport { MapArcSeriesDataItem, IMapArcSeriesDataFields, IMapArcSeriesProperties, IMapArcSeriesEvents, IMapArcSeriesAdapters, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo } from \"./.internal/charts/map/MapUtils\";\nexport { IZoomControlProperties, IZoomControlEvents, IZoomControlAdapters, ZoomControl } from \"./.internal/charts/map/ZoomControl\";\nexport { ISmallMapProperties, ISmallMapEvents, ISmallMapAdapters, SmallMap } from \"./.internal/charts/map/SmallMap\";\n\n/**\n * Elements: projections\n */\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\nimport * as projections from \"./.internal/charts/map/projections\";\nexport { projections };\nimport * as geo from \"./.internal/charts/map/Geo\";\nexport { geo };\n\n\n\n// WEBPACK FOOTER //\n// ../../src/maps.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic _component: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n *\r\n * @type {string}\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tlineString?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLineString?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLineString?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLineString?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n *\r\n * @type {IMapPolygonDataObject | IMapLineDataObject}\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map\r\n\t * @type {Projection}\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * [deltaLatitude description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tdeltaLatitude?: number;\r\n\r\n\t/**\r\n\t * [deltaLongitude description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapChartProperties}\r\n\t */\r\n\tpublic _properties: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapChartAdapters}\r\n\t */\r\n\tpublic _adapter: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @type {SpriteEventDispatcher<AMEvent<MapChart, IMapChartEvents>>}\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapChart, IMapChartEvents>>;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t * @type {number}\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects. (px)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects. (px)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t *\r\n\t * @type {ZoomControl}\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t *\r\n\t * @type {SmallMap}\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @defautl 1\r\n\t * @type {number}\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t * @type {number}\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * List of series of map objects. (lines, areas, etc.)\r\n\t *\r\n\t * @type {ListTemplate<MapSeries>}\r\n\t */\r\n\tpublic series: ListTemplate<MapSeries>;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t *\r\n\t * @type {Animation}\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\t//\t\tthis.deltaLatitude = 0;\r\n\t\tthis.deltaLongitude = 0;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.draggable = true;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"datavalidated\", this.updateExtremes, this);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.events.on(\"maxsizechanged\", this.udpateScaleRatio, this);\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"wheel\", this.handleWheel, this);\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]}  event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Eckert6\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * Orthographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Projection}  projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tthis.setPropertyValue(\"projection\", projection, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Projection} Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif ((this.west > series.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = series.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < series.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = series.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < series.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = series.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > series.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = series.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// must reset\r\n\t\tthis.projection.centerPoint = { x: 0, y: 0 };\r\n\t\tthis.projection.scale = 1;\r\n\r\n\t\t// temporary setting deltaLongitude to 0 in order to measure w/h correctly\r\n\t\tlet deltaLongitude = this.projection.deltaLongitude;\r\n\t\tthis.projection.deltaLongitude = 0;\r\n\t\tlet westPoint: IPoint = this.projection.convert({ longitude: this.west, latitude: (this.south - this.north) / 2 });\r\n\t\tlet eastPoint: IPoint = this.projection.convert({ longitude: this.east, latitude: (this.south - this.north) / 2 });\r\n\r\n\t\tlet northPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\tlet southPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.south });\r\n\t\tthis.projection.deltaLongitude = deltaLongitude;\r\n\r\n\t\tthis.projection.centerPoint = { x: westPoint.x + (eastPoint.x - westPoint.x) / 2, y: northPoint.y + (southPoint.y - northPoint.y) / 2 };\r\n\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet seriesWidth = eastPoint.x - westPoint.x;\r\n\t\tlet seriesHeight = southPoint.y - northPoint.y;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tthis.projection.scale = scaleRatio;\r\n\t\tthis.seriesWidth = seriesWidth * scaleRatio;\r\n\t\tthis.seriesHeight = seriesHeight * scaleRatio;\r\n\r\n\t\tthis.udpateScaleRatio();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected udpateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = this.scaleRatio;\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. centers the map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tlet seriesContainer: Container = this.seriesContainer;\r\n\t\tlet chartContainer: Container = this.chartContainer;\r\n\r\n\t\tseriesContainer.x = chartContainer.pixelWidth / 2;\r\n\t\tseriesContainer.y = chartContainer.pixelHeight / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param  {IGeoPoint}  point      Center coordinate\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = {\r\n\t\t\t\tx: this.pixelWidth / 2,\r\n\t\t\t\ty: this.pixelHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\",\r\n\t\t\t\tto: svgPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio - this.pixelPaddingLeft\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\",\r\n\t\t\t\tto: svgPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio - this.pixelPaddingTop\r\n\t\t\t}], duration, this.zoomEasing);\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param  {MapObject}  mapObject  Target map object\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\treturn this.zoomToRectangle(dataItem.north, dataItem.east, dataItem.south, dataItem.west, zoomLevel, center, duration);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param  {number}     north     Latitude of the North-most boundary\r\n\t * @param  {number}     east      Longitude of the East-most boundary\r\n\t * @param  {number}     south     Latitude of the South-most boundary\r\n\t * @param  {number}     west      Longitude of the West-most boundary\r\n\t * @param  {number}     level     Adjust zoom level\r\n\t * @param  {boolean}    center    Center on the given coordinate?\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param {IPoint}  shift     Vertical and horizontal shift\r\n\t * @param {number}  duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return {IGeoPoint} Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.svgPointToGeo({\r\n\t\t\tx: this.pixelWidth / 2,\r\n\t\t\ty: this.pixelHeight / 2\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {SmallMap}  smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {SmallMap} Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {ZoomControl}  zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ZoomControl} Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return {MapSeries} Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * [deltaLatitude description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\r\n\t/*public set deltaLatitude(value: number) {\r\n\t\tthis.setPropertyValue(\"deltaLatitude\", $geo.wrapAngleTo180(value));\r\n\t\tthis.invalidateProjection();\r\n\t}\r\n*/\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\t/*\r\n public get deltaLatitude(): number {\r\n\t return this.getPropertyValue(\"deltaLatitude\");\r\n }*/\r\n\r\n\t/**\r\n\t * [deltaLongitude description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tthis.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value));\r\n\t\tthis.invalidateProjection();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t */\r\n\tprotected invalidateProjection() {\r\n\t\t//\t\tthis.projection.deltaLatitude = this.deltaLatitude;\r\n\t\tthis.projection.deltaLongitude = this.deltaLongitude;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n * This function is used to sort element's JSON config properties, so that\r\n * some properties that absolutely need to be processed last, can be put at\r\n * the end.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  a  Element 1\r\n * @param  {string}  b  Element 2\r\n * @return {number}     Sorting number\r\n */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * [boolean description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n * \r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineObjectProperties}\r\n\t */\r\n\tpublic _properties: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineObjectAdapters}\r\n\t */\r\n\tpublic _adapter: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapLineObject, IMapLineObjectEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapLineObject, IMapLineObjectEvents>>;\r\n\r\n\t/**\r\n\t * [mapLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Review if necessary (same as parent)\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\t\tif (this.mapLine) {\r\n\t\t\tlet point: IOrientationPoint = this.mapLine.positionToPoint(this.position);\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * [position description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * [adjustRotation description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {boolean} value [description]\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} [description]\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t * \r\n\t * @type {MapPolygon}\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {number[][][][]}\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][][]}\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic _component: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapPolygon} Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tthis._mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis.addSprite(this._mapPolygon);\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ \r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t * \r\n\t * @param {number[][][]}  polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo([polygon]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [ \r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [ \r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t * \r\n\t * @param {number[][][]}  multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo(multiPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param {IGeoPoint[][]}  geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.updateAreaExtremes(multiGeoPolygon);\r\n\t\tthis.mapPolygon.multiGeoPolygon = this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateAreaExtremes(multiGeoPolygon: IGeoPoint[][][]): void {\r\n\t\tfor (let i = 0; i < multiGeoPolygon.length; i++) {\r\n\t\t\tlet geoPolygon: IGeoPoint[][] = multiGeoPolygon[i];\r\n\t\t\tlet surface: IGeoPoint[] = geoPolygon[0];\r\n\t\t\tthis.updateExtremes(surface);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n * \r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonSeriesProperties}\r\n\t */\r\n\tpublic _properties: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapPolygonSeries, IMapPolygonSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapPolygonSeries, IMapPolygonSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t * \r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t * \r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.parsingStepDuration = 5000; // to avoid some extra redrawing\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {MapPolygonSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic clearPolygons() {\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tmapPolygon.polygon.dispose();\r\n\t\t\tmapPolygon.dispose();\r\n\t\t})\r\n\t\tthis.mapPolygons.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc(){\r\n\t\tthis.clearPolygons();\r\n\t\tsuper.processIncExc();\t\t\r\n\t}\t\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.clearPolygons();\r\n\t\t}\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// if data is parsed in chunks, polygon list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapPolygons.moveValue(dataItem.mapPolygon);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\t//console.log(this.uid, this.mapPolygons.length);\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tmapPolygon.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t * \r\n\t * @return {ListTemplate<MapPolygon>} Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"insert\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param {string} polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t * \r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t * \r\n\t * @type {MapSpline}\r\n\t */\r\n\tprotected _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t * \r\n\t * @return {MapSpline} Element\r\n\t */\r\n\tpublic get mapLine(): MapSpline {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tthis._mapLine = this.component.mapLines.create(MapSpline);\r\n\t\t\tthis.addSprite(this._mapLine);\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n * \r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineSeriesProperties}\r\n\t */\r\n\tpublic _properties: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapSplineSeries, IMapSplineSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapSplineSeries, IMapSplineSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {MapSplineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t * \r\n\t * @return {MapSpline} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t * \r\n\t * @type {MapImage}\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number[]}\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t * \r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t * \r\n\t * @return {MapImage} Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tthis._mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(this._mapImage);\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number[]} point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis.geoPoint = $mapUtils.pointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t * \r\n\t * @param {IGeoPoint} geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.updateExtremes([this._geoPoint]);\r\n\t\tthis.mapImage.latitude = this._geoPoint.latitude;\r\n\t\tthis.mapImage.longitude = this._geoPoint.longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n * \r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageSeriesProperties}\r\n\t */\r\n\tpublic _properties: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapImageSeries, IMapImageSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapImageSeries, IMapImageSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t * \r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t * \r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {MapImageSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiPoint\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapImages.moveValue(dataItem.mapImage);\r\n\t\t});\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t * \r\n\t * @return {ListTemplate<MapImage>} Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"insert\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t * \r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t * \r\n\t * @type {MapArc}\r\n\t */\r\n\tprotected _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t * \r\n\t * @return {MapArc} Element\r\n\t */\r\n\tpublic get mapLine(): MapArc {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tthis._mapLine = this.component.mapLines.create(MapArc);\r\n\t\t\tthis.addSprite(this._mapLine);\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n * \r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcSeriesProperties}\r\n\t */\r\n\tpublic _properties: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcSeriesAdapters}\r\n\t */\r\n\tpublic _adapter: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapArcSeries, IMapArcSeriesEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapArcSeries, IMapArcSeriesEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapArcSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t * \r\n\t * @see {@link DataItem}\r\n\t * @return {MapArcSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t * \r\n\t * @return {MapArc} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude in radians\r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn {\r\n\t\t\tlongitude: x,\r\n\t\t\tlatitude: 2 * Math.atan(Math.exp(y)) - Math.PI / 2\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn {\r\n\t\t\tx: lambda,\r\n\t\t\ty: Math.log(Math.tan((Math.PI / 2 + phi) / 2))\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n * \n * ```\n * Copyright 2017 Mike Bostock\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, \n *    this list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice, \n *    this list of conditions and the following disclaimer in the documentation \n *    and/or other materials provided with the distribution.\n * \n * 3. Neither the name of the copyright holder nor the names of its \n *    contributors may be used to endorse or promote products derived from this \n *    software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\nimport { IPoint } from \"../../../core/defs/IPoint\";\nimport { registry } from \"../../../core/Registry\";\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\n\t/**\n\t * Converts screen coordinates to latitude/longitude.\n\t * \n\t * @param  {number}     x  X\n\t * @param  {number}     y  Y\n\t * @return {IGeoPoint}     Geographical coordinates in radians\n\t */\n\tpublic unproject(x: number, y: number): IGeoPoint {\n\t\treturn {\n\t\t\tlongitude: x,\n\t\t\tlatitude: 2.5 * Math.atan(Math.exp(0.8 * y)) - 0.625 * Math.PI\n\t\t};\n\t}\n\n\t/**\n\t * Converts geographical coordinates to screen coordinates.\n\t * \n\t * @param  {number}  lambda  Lambda parameter\n\t * @param  {number}  phi     Phi parameter\n\t * @return {IPoint}          Screen coordinates\n\t */\n\tpublic project(lambda: number, phi: number): IPoint {\n\t\treturn {\n\t\t\tx: lambda,\n\t\t\ty: 1.25 * Math.log(Math.tan(Math.PI / 4 + 0.4 * phi))\n\t\t};\n\t}\n\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n * \n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude.\r\n\t * \r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates in radians\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\tlet j = 1 + Math.PI / 2,\r\n\t\t\tk = Math.sqrt(j / 2);\r\n\t\treturn {\r\n\t\t\tlongitude: x * 2 * k / (1 + Math.cos(y *= k)),\r\n\t\t\tlatitude: Math.asin((y + Math.sin(y)) / j)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\tlet k = (1 + Math.PI / 2) * Math.sin(phi);\r\n\t\tfor (let i = 0, delta = Infinity; i < 10 && Math.abs(delta) > 0.00001; i++) {\r\n\t\t\tphi -= delta = (phi + Math.sin(phi) - k) / (1 + Math.cos(phi));\r\n\t\t}\r\n\t\tk = Math.sqrt(2 + Math.PI);\r\n\t\treturn {\r\n\t\t\tx: lambda * (1 + Math.cos(phi)) / k,\r\n\t\t\ty: 2 * phi / k\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i: number = 0; i < clippedArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\t//let hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet prevPoint = surface[surface.length - 1];\r\n\r\n\t\t\t\tfor (let i = 0; i < surface.length; i++) {\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif ($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)) {\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints: IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif (stepCount > 1) {\r\n\t\t\t\t\t\t\tfor (let s = 1; s < stepCount; s++) {\r\n\t\t\t\t\t\t\t\textraPoints.push({ longitude: prevPoint.longitude, latitude: prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s })\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tpublic centerPoint: IPoint = { x: 0, y: 0 };\r\n\r\n\tpublic scale: number = 1;\r\n\r\n\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t}\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t}\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tfor (let i: number = 0; i < geoLine.length; i++) {\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tif (segment) {\r\n\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\r\n\t\t\t\tif(this.deltaLongitude != 0){\r\n\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedLine;\r\n\t}\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet convertedPoints: IPoint[][][] = [];\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\r\n\t\t\t\tfor (let s: number = 0; s < surface.length; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\r\n\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t}\r\n\r\n\t\t\tif (hole) {\r\n\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\tfor (let s: number = 0; s < hole.length; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\r\n\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t}\r\n\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\tfor (let i: number = 0; i < geoLine.length; i++) {\r\n\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\tfor (let s: number = 0; s < segment.length; s++) {\r\n\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\r\n\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t}\r\n\r\n\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param  {IGeoPoint} geoPoint Geo point (lat/long)\r\n\t * @return {IPoint}             Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 2) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 2) * this.scale\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param  {IPoint}    point Screen point (x/y)\r\n\t * @return {IGeoPoint}       Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\r\n\t\treturn geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number} lambda [description]\r\n\t * @param  {number} phi    [description]\r\n\t * @return {IPoint}        X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: lambda, y: phi };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number}    x X coordinate\r\n\t * @param  {number}    y Y coordinate\r\n\t * @return {IGeoPoint}   Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn { longitude: x, latitude: y };\r\n\t}\r\n\r\n\r\n\trotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tunrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\r\n\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\r\n\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = segment;\r\n\t\t\tsegment = [];\r\n\t\t\ts = inputList[0];\r\n\t\t\tfor (let i = 0; i < inputList.length; i++) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts = e;\r\n\t\t\t}\t\t\t\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\r\n\t\treturn [segment];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//@todo add credits to roseta code\r\n\t//@todo: someday make it better\r\n\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\r\n\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar outputList = subjectPolygon;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = outputList;\r\n\t\t\toutputList = [];\r\n\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\t\t\tfor (let i in inputList) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t}\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\t\treturn outputList;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number) {\r\n\t\tvar phi1 = pointA.latitude * $math.RADIANS;\r\n\t\tlet lambda1 = pointA.longitude * $math.RADIANS;\r\n\r\n\t\tlet phi2 = pointB.latitude * $math.RADIANS;\r\n\t\tlet lambda2 = pointB.longitude * $math.RADIANS;\r\n\r\n\t\tvar sinPhi1 = Math.sin(phi1);\r\n\t\tlet cosPhi1 = Math.cos(phi1);\r\n\t\tlet sinLambda1 = Math.sin(lambda1);\r\n\t\tlet cosLambda1 = Math.cos(lambda1);\r\n\t\tvar sinPhi2 = Math.sin(phi2);\r\n\t\tlet cosPhi2 = Math.cos(phi2);\r\n\t\tlet sinLambda2 = Math.sin(lambda2);\r\n\t\tlet cosLambda2 = Math.cos(lambda2);\r\n\r\n\t\t// distance between points\r\n\t\tvar deltaPhi = phi2 - phi1;\r\n\t\tvar deltaLambda = lambda2 - lambda1;\r\n\t\tvar a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\t\tvar delta = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n\t\tvar A = Math.sin((1 - position) * delta) / Math.sin(delta);\r\n\t\tvar B = Math.sin(position * delta) / Math.sin(delta);\r\n\r\n\t\tvar x = A * cosPhi1 * cosLambda1 + B * cosPhi2 * cosLambda2;\r\n\t\tvar y = A * cosPhi1 * sinLambda1 + B * cosPhi2 * sinLambda2;\r\n\t\tvar z = A * sinPhi1 + B * sinPhi2;\r\n\r\n\t\tvar phi3 = Math.atan2(z, Math.sqrt(x * x + y * y));\r\n\t\tvar lambda3 = Math.atan2(y, x);\r\n\r\n\t\treturn { latitude: phi3 * $math.DEGREES, longitude: lambda3 * $math.DEGREES };\r\n\t};\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts"],"sourceRoot":""}