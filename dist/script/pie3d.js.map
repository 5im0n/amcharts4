{"version":3,"sources":["webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/series/PieSeries3D.ts","webpack:///./pie3d.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/pie3d.ts","webpack:///C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/types/PieChart3D.ts"],"names":["__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__webpack_require__","PieSeries3DDataItem","_super","_this","call","this","className","values","depthValue","applyTheme","__extends","Object","defineProperty","prototype","value","setValue","__WEBPACK_IMPORTED_MODULE_0__series_PieSeries__","PieSeries3D","createDataItem","initSlice","sliceType","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Slice3D__","validateDataElement","dataItem","slice","depth","chart","depthPercent","percent","angle","validate","i","_workingStartIndex","_workingEndIndex","dataItems","getIndex","startAngle","toFront","toBack","getPropertyValue","setPropertyValue","__WEBPACK_IMPORTED_MODULE_2__core_System__","registeredClasses","window","amcharts4","pie3d","__WEBPACK_IMPORTED_MODULE_0__src_pie3d__","d","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_elements_LabelBullet__","PieChart3DDataItem","__WEBPACK_IMPORTED_MODULE_0__PieChart__","PieChart3D","invalidateDataUsers","createSeries","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries3D__"],"mappings":"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","file":"pie3d.js","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t * \r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n * \r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<PieSeries3D, IPieSeries3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<PieSeries3D, IPieSeries3DEvents>>;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t * \r\n\t * @type {ListTemplate<Slice3D>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice3D>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice3D}                  Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice3D): Slice3D {\r\n\t\tlet slice: Slice3D = <Slice3D>super.initSlice(Slice3D);\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t * \r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t * \r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/*\r\n\t\tset startAngle(value: number) {\r\n\t\t\t// 3d pie series can start at 90 angle increments, otherwise big slices might overlap incorrectly\r\n\t\t\tvalue = $math.normalizeAngle(value);\r\n\t\t\tvalue = $math.round(value / 90) * 90;\r\n\t\r\n\t\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t\t}\r\n\t\r\n\t\tget startAngle(): number {\r\n\t\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t\t}\t\r\n\t*/\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nsystem.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/series/PieSeries3D.ts","import * as m from \"../../src/pie3d\";\n(window as any).amcharts4.pie3d = m;\n\n\n// WEBPACK FOOTER //\n// ./pie3d.ts","/**\r\n * Module: pie3d \r\n */\r\n\r\n/**\r\n * Elements: types \r\n */\r\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\r\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\r\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\n\r\n/**\r\n * Elements: charts \r\n */\r\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\n\r\n/**\r\n * Elements: series \r\n */\r\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\r\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\r\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\r\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\r\n\r\n/**\r\n * Elements: axes \r\n */\r\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\r\n\r\n/**\r\n * Elements: elements \r\n */\r\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\r\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/pie3d.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as amcharts4 from \"@amcharts/amcharts4\";\r\n * import * as pie3d from \"@amcharts/amcharts4/pie3d\";\r\n * \r\n * // Create chart\r\n * let chart = amcharts4.create(\"chartdiv\", pie3d.Pie3DChart);\r\n * \r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n * \r\n * // Create series\r\n * let series = chart.series.push(new pie3d.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = amcharts4.create(\"chartdiv\", amcharts4.pie3d.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = amcharts4.system.create(\"chartdiv\", \"Pie3DChart\");\r\n * \r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n * \r\n * // Create series\r\n * var series = chart.series.push(new amcharts4.pie3d.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = amcharts4.createFromConfig({\r\n * \r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n * \r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n * \r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n * \r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<PieChart3D, IPieChart3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<PieChart3D, IPieChart3DEvents>>;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t * \r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"PieChart3D\"] = PieChart3D;\n\n\n// WEBPACK FOOTER //\n// C:/Users/Pauan/Shared Folders/NixOS/amcharts4dev/src/.internal/charts/types/PieChart3D.ts"],"sourceRoot":""}