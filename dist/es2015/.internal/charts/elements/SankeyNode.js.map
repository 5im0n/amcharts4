{"version":3,"file":"SankeyNode.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/elements/SankeyNode.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { system } from \"../../core/System\";\r\nimport { color, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tlevel?: number;\r\n\r\n\t/**\r\n\t * Node's numeric value.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t * \r\n\t * @type {Color}\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IContainerAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n * \r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ISankeyNodeProperties}\r\n\t */\r\n\tpublic _properties: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ISankeyNodeAdapters}\r\n\t */\r\n\tpublic _adapter: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<SankeyNode, ISankeyNodeEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<SankeyNode, ISankeyNodeEvents>>;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t * \r\n\t * @type {List<SankeyDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<SankeyDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t * \r\n\t * @type {List<SankeyDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<SankeyDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t * \r\n\t * @type {Iterator<SankeyDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<SankeyDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<SankeyDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<SankeyDiagramDataItem>;\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t * \r\n\t * @type {SankeyDiagram}\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t * \r\n\t * @type {LabelBullet}\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t * \r\n\t * @type {LabelBullet}\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.background.fillOpacity = 1;\r\n\r\n\t\t// @todo because we copy nameLabel and valueLabel in copyFrom, however if user adds custom items to Sankey node, they won't be cloned. \r\n\t\tthis.cloneChildren = false;\r\n\r\n\t\t//this.draggable = true;\r\n\t\t//this.inert = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this);\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.padding(0, 5, 0, 5);\r\n\t\tnameLabel.label.textElement.text = \"{name}\";\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.maxWidth = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.label.textElement.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\t\t\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.textElement.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidate(): void {\r\n\t\tsuper.invalidate();\r\n\t\tthis.invalidateLinks();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\tlet x: number;\r\n\t\t\t\t\tlet y: number;\r\n\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\tlink.linkWidth = dataItem.value * chart.valueHeight;\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\r\n\t\t\t\t\tlink.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\tlet x: number;\r\n\t\t\t\t\tlet y: number;\r\n\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\tlink.linkWidth = dataItem.value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\r\n\t\t\t\t\tlink.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t * \r\n\t * @param {LabelBullet}  bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.pixelWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.pixelHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<SankeyDiagramDataItem>} Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<SankeyDiagramDataItem> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<SankeyDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"insert\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<SankeyDiagramDataItem>} Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<SankeyDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<SankeyDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"insert\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t * \r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t * \r\n\t * @param {number}  value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's numeric value.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setPropertyValue(\"value\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.getPropertyValue(\"value\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t * \r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setPropertyValue(\"color\", value, true);\r\n\t\tthis.background.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t * \r\n\t * @param {SankeyNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"SankeyNode\"] = SankeyNode;"]}