{"version":3,"file":"CircleBullet.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/elements/CircleBullet.ts"],"names":[],"mappings":"AAAA;;GAEG;;;;;;;;;;;AAEH;;;;;GAKG;AACH,OAAO,EAAE,MAAM,EAAqD,MAAM,UAAU,CAAC;AAErF,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAiC3C;;;;;GAKG;AAEH;;;;;;;;;;GAUG;AACH;IAAkC,gCAAM;IAgCvC;;OAEG;IACH;QAAA,YACC,iBAAO,SAOP;QALA,KAAI,CAAC,SAAS,GAAG,cAAc,CAAC;QAChC,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAE3B,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACvC,KAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;;IACxB,CAAC;IAED;;;;;OAKG;IACI,+BAAQ,GAAf,UAAgB,MAAY;QAC3B,iBAAM,QAAQ,YAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;OAOG;IACO,kCAAW,GAArB,UAAsB,QAAkB;QACvC,iBAAM,WAAW,YAAC,QAAQ,CAAC,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,CAAC;IACF,mBAAC;AAAD,CAAC,AApED,CAAkC,MAAM,GAoEvC;;AAED;;;;;GAKG;AACH,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,YAAY,CAAC","sourcesContent":["/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { system } from \"../../core/System\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n * \r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<CircleBullet, ICircleBulletEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<CircleBullet, ICircleBulletEvents>>;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t * \r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\t\tthis.cloneChildren = false;\r\n\t\t\r\n\t\tthis.circle = this.createChild(Circle);\r\n\t\tthis.circle.radius = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t * \r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets currently used [[DataItem]].\r\n\t *\r\n\t * If the element has also `configField` set, it will also look for any\r\n\t * config in DataItem's data context to apply to this element.\r\n\t *\r\n\t * @param {DataItem} dataItem DataItem\r\n\t */\r\n\tprotected setDataItem(dataItem: DataItem) {\r\n\t\tsuper.setDataItem(dataItem);\r\n\t\tthis.circle.dataItem = dataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"CircleBullet\"] = CircleBullet;"]}