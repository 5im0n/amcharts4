{"version":3,"file":"ValueAxis.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/axes/ValueAxis.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Value Axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List, ListTemplate } from \"../../core/utils/List\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid } from \"./Grid\";\r\nimport { IDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { system } from \"../../core/System\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n * \r\n * @see {@link DataItem}\r\n */\r\nexport class ValueAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _component: ValueAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.endValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A data point's numeric value.\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values[\"value\"].value;\r\n\t}\r\n\r\n\t/**\r\n\t * A data point's starting value.\r\n\t *\r\n\t * Used for items that span several dates, like [[ValueAxisBreak]].\r\n\t * \r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\treturn this.values[\"value\"].value;\r\n\t}\r\n\r\n\t/**\r\n\t * Data point's numeric end value.\r\n\t * \r\n\t * @param {number}  value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tthis.setValue(\"endValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.values[\"endValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * \r\n */\r\nexport interface IMinMaxStep {\r\n\tmin: number;\r\n\tmax: number;\r\n\tstep: number;\r\n}\r\n\r\n/**\r\n * Defines data fields for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisDataFields extends IAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisProperties extends IAxisProperties {\r\n\tstrictMinMax?: boolean;\r\n\tlogarithmic?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisEvents extends IAxisEvents {\r\n\r\n\t/**\r\n\t * Invoked when selection/zoom on axis occurs and start/end coordinates\r\n\t * change.\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start/end coordinates of the axis change.\r\n\t */\r\n\textremeschanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[ValueAxis]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisAdapters extends IAxisAdapters, IValueAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new xy.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new amcharts4.xy.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n * \r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IValueAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IValueAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IValueAxisProperties}\r\n\t */\r\n\tpublic _properties: IValueAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IValueAxisAdapters}\r\n\t */\r\n\tpublic _adapter: IValueAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: ValueAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: ValueAxisBreak;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ValueAxis, IValueAxisEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ValueAxis, IValueAxisEvents>>;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t * \r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * A list of Series that are using this Value Axis.\r\n\t * \r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tpublic series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * Minimum value for the axis scale.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _min: number;\r\n\r\n\t/**\r\n\t * Maximum value for the axis scale.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _max: number;\r\n\r\n\t/**\r\n\t * User-defined min value for axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minDefined: number;\r\n\r\n\t/**\r\n\t * User-defined max value for axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxDefined: number;\r\n\r\n\t/**\r\n\t * [_minAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minAdjusted: number;\r\n\r\n\t/**\r\n\t * [_maxAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxAdjusted: number;\r\n\r\n\t/**\r\n\t * Min real value. (lowest value of all data points)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minReal: number;\r\n\r\n\t/**\r\n\t * Max real value. (highest value of all data points)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxReal: number;\r\n\r\n\t/**\r\n\t * Min value within current zoom.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minZoomed: number;\r\n\r\n\t/**\r\n\t * Max value within current zoom.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxZoomed: number\r\n\r\n\t/**\r\n\t * [_step description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _step: number;\r\n\r\n\t/**\r\n\t * [_stepDecimalPlaces description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _stepDecimalPlaces: number = 0;\r\n\r\n\t/**\r\n\t * [_difference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _difference: number;\r\n\r\n\t/**\r\n\t * Should axis scale explicitly start and `min` and `max`?\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _strictMinMax: boolean = false;\r\n\r\n\t/**\r\n\t * Base value for the axis.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tprotected _baseValue: number = 0;\r\n\r\n\t/**\r\n\t * [_previousValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _previousValue: number;\r\n\r\n\t/**\r\n\t * [_previousPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IPoint}\r\n\t */\r\n\tprotected _previousPoint: IPoint;\r\n\r\n\t/**\r\n\t * Adjusted start in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _adjustedStart: number = 0;\r\n\r\n\t/**\r\n\t * Adjusted end in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _adjustedEnd: number = 1;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprivate _valueToPosition: { [key: string]: number } = {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprivate _positionToValue: { [key: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to alternating cells.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {function} \r\n\t */\r\n\tpublic fillRule: (dataItem: ValueAxisDataItem) => any = function(dataItem: ValueAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tif (value / axis.step / 2 == Math.round(value / axis.step / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * As calculating totals is expensive operation and not often needed, by default we do not do it. In case you use totalPercent or total for your charts, you must set this to true\r\n\t * @todo review description\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic calculateTotals: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"value\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.maxZoomFactor = 1000;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ValueAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ValueAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t * \r\n\t * @return {ValueAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new ValueAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\r\n\t\tthis._positionToValue = {};\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tthis.getMinMax();\r\n\r\n\t\t// note, not zoomMin and zoomMax, but actual position\r\n\t\tlet minZoomed: number = this.positionToValue(this.start);\r\n\t\tlet maxZoomed: number = this.positionToValue(this.end);\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tif ($type.isNumber(minZoomed) && $type.isNumber(maxZoomed)) {\r\n\t\t\t\tthis.zoomToValues(minZoomed, maxZoomed, true, true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data items of the related Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\t\t// @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n\t\tif (this.calculateTotals) {\r\n\t\t\tlet series: XYSeries = this.series.getIndex(0);\r\n\t\t\tlet startIndex: number = series.startIndex;\r\n\r\n\t\t\tif (series.dataItems.length > 0) {\r\n\r\n\t\t\t\tif (startIndex > 0) {\r\n\t\t\t\t\tstartIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tlet endIndex: number = series.endIndex;\r\n\t\t\t\tif (endIndex < series.dataItems.length) {\r\n\t\t\t\t\tendIndex++;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\tfor (var i: number = startIndex; i < endIndex; ++i) {\r\n\t\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\t\tvar total: { [index: string]: number } = {};\r\n\r\n\t\t\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\r\n\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(total[key])) {\r\n\t\t\t\t\t\t\t\t\t\ttotal[key] = value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\ttotal[key] += value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, total[key], \"total\");\r\n\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t// not using default caching for a better performance\r\n\t\tthis._valueToPosition = {};\r\n\t\tthis._positionToValue = {};\r\n\r\n\t\t// it's important to fix axis breaks in the beginning, as positionToValue and adjustDifference depends on breaks values\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\t// calculate zoom values\r\n\t\tthis.calculateZoom();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// this is moved to a separate method because it differs in DateAxis\r\n\t\tthis.validateAxisElements();\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.hideUnusedDataItems();\r\n\r\n\t\t// hide too close\r\n\t\t//this.hideTooCloseDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tif ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet min: number = this.positionToValue(this.start);\r\n\t\t\tlet max: number = this.positionToValue(this.end);\r\n\r\n\r\n\t\t\tlet differece: number = this.adjustDifference(min, max);\r\n\t\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\r\n\t\t\tmin = minMaxStep.min;\r\n\t\t\tmax = minMaxStep.max;\r\n\r\n\t\t\tthis._adjustedStart = $math.round((min - this.min) / (this.max - this.min), 5);\r\n\t\t\tthis._adjustedEnd = $math.round((max - this.min) / (this.max - this.min), 5);\r\n\r\n\t\t\tthis._step = minMaxStep.step;\r\n\t\t\tthis._stepDecimalPlaces = $utils.decimalPlaces(this._step);\r\n\r\n\t\t\tif (this._minZoomed != min || this._maxZoomed != max) {\r\n\t\t\t\tthis._minZoomed = min;\r\n\t\t\t\tthis._maxZoomed = max;\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._adjustedStart = this.start;\r\n\t\t\tthis._adjustedEnd = this.end;\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t\tfixAxisBreaks() {\r\n\t\t\tlet axisBreaks: List<ValueAxisBreak> = <List<ValueAxisBreak>>this.axisBreaks;\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\r\n\t\t\t\t// first make sure that startValue is <= end value\r\n\t\t\t\tfor (let i: number = 0; i < axisBreaks.length; i++) {\r\n\t\t\t\t\tlet axisBreak: ValueAxisBreak = axisBreaks.get(i);\r\n\t\t\t\t\tlet startValue: number = $math.min(axisBreak.startValue, axisBreak.endValue);\r\n\t\t\t\t\tlet endValue: number = $math.max(axisBreak.startValue, axisBreak.endValue);\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// sort by adjustedStartValue\r\n\t\t\t\tthis.axisBreaks.sortByKey(\"adjustedStartValue\");\r\n\r\n\t\t\t\tlet firstAxisBreak: ValueAxisBreak = axisBreaks.get(0);\r\n\t\t\t\tlet previousEndValue: number = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);\r\n\r\n\t\t\t\t// process breaks\r\n\t\t\t\tfor (let i: number = 0; i < this.axisBreaks.length; i++) {\r\n\t\t\t\t\tlet axisBreak: ValueAxisBreak = axisBreaks.get(i);\r\n\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t// breaks can't overlap\r\n\t\t\t\t\t// if break starts before previous break ends\r\n\t\t\t\t\tif (startValue < previousEndValue) {\r\n\t\t\t\t\t\tstartValue = previousEndValue;\r\n\r\n\t\t\t\t\t\tif (endValue < previousEndValue) {\r\n\t\t\t\t\t\t\tendValue = previousEndValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\r\n\t\t\t\t\t// break difference\r\n\t\t\t\t\tlet axisBreakDif: number = endValue - startValue;\r\n\t\t\t\t\tlet axisBreakGridCount: number = Math.ceil(axisBreakDif / this._step * axisBreak.breakSize);\r\n\r\n\t\t\t\t\t// calculate min, max and step for axis break\r\n\t\t\t\t\tlet breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount);\r\n\t\t\t\t\taxisBreak.adjustedStep = breakMinMaxStep.step;\r\n\t\t\t\t\taxisBreak.adjustedMin = breakMinMaxStep.min;\r\n\t\t\t\t\taxisBreak.adjustedMax = breakMinMaxStep.max;\r\n\t\t\t\t\tpreviousEndValue = endValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\t\t}\r\n\t*/\r\n\r\n\t/**\r\n\t * Validates Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\t// first regular items\r\n\t\t\tlet value: number = this.minZoomed;\r\n\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\r\n\t\t\tlet i: number = 0;\r\n\t\t\twhile (value <= this._maxZoomed) {\r\n\t\t\t\tlet axisBreak: ValueAxisBreak = <ValueAxisBreak>this.isInBreak(value);\r\n\r\n\t\t\t\tif (!axisBreak) {\r\n\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === value);\r\n\t\t\t\t\tthis.processDataItem(dataItem);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\t\tif (dataItem.value != value) {\r\n\t\t\t\t\t\tdataItem.value = value;\r\n\t\t\t\t\t\tdataItem.text = this.formatLabel(value);\r\n\t\t\t\t\t\tif (dataItem.label.invalid) {\r\n\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet breakValue: number = axisBreak.adjustedMin;\r\n\r\n\t\t\t\t\t\twhile (breakValue <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tif (breakValue >= axisBreak.adjustedStartValue && breakValue <= axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === breakValue);\r\n\t\t\t\t\t\t\t\tthis.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\tif (dataItem.value != breakValue) {\r\n\t\t\t\t\t\t\t\t\tdataItem.value = breakValue;\r\n\t\t\t\t\t\t\t\t\tdataItem.text = this.formatLabel(breakValue);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.label.invalid) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreakValue += axisBreak.adjustedStep;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {ValueAxisDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tdataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tlet value: number = dataItem.value;\r\n\t\tlet endValue: number = dataItem.endValue;\r\n\r\n\t\tlet position: number = this.valueToPosition(value);\r\n\t\tlet endPosition: number = position;\r\n\t\tlet fillEndPosition: number = this.valueToPosition(value + this._step);\r\n\r\n\t\tif ($type.isNumber(endValue)) {\r\n\t\t\tendPosition = this.valueToPosition(endValue);\r\n\t\t\tfillEndPosition = endPosition;\r\n\t\t}\r\n\r\n\t\t// this point is needed to calculate distance to satisfy minGridDistance\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, position, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[NumberFormatter]].\r\n\t * \r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.numberFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * A coordinate of the axis' base value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\tlet baseValue: number = $math.fitToRange(this._baseValue, this.minZoomed, this.maxZoomed);\r\n\t\tlet position: number = this.valueToPosition(baseValue);\r\n\t\tlet basePoint: IPoint = this.renderer.positionToPoint(position);\r\n\t\treturn basePoint;\r\n\t}\r\n\r\n\t/**\r\n\t * A base value.\r\n\t *\r\n\t * This is a threshold value that will divide \"positive\" and \"negative\"\r\n\t * value ranges.\r\n\t *\r\n\t * Other scale-related functionality also depend on base value. E.g. stacks,\r\n\t * value-dependent coloring, etc.\r\n\t * \r\n\t * @param {number} value Base value\r\n\t */\r\n\tpublic set baseValue(value: number) {\r\n\t\tthis._baseValue = value;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\t\treturn this._baseValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to a pixel coordinate.\r\n\t *\r\n\t * An alias to `valueToPosition()`.\r\n\t * \r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Position (px)\r\n\t */\r\n\tpublic anyToPosition(value: number): number {\r\n\t\treturn this.valueToPosition(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to a pixel coordinate.\r\n\t * \r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Position (px)\r\n\t */\r\n\tpublic valueToPosition(value: number): number {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tlet strValue: string = value.toString();\r\n\t\t\tlet cachedPosition: number = this._valueToPosition[strValue];\r\n\r\n\t\t\tif ($type.isNumber(cachedPosition)) {\r\n\t\t\t\treturn cachedPosition;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// todo: think if possible to take previous value and do not go through all previous breaks\r\n\t\t\t\tlet min: number = this.min;\r\n\t\t\t\tlet max: number = this.max;\r\n\t\t\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\t\t\t\t\tlet difference: number = this._difference;\r\n\t\t\t\t\tif (!$type.isNumber(difference)) {\r\n\t\t\t\t\t\tdifference = this.adjustDifference(min, max);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\r\n\t\t\t\t\t\t\tif (value < startValue) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: startValue, end: endValue }, { start: min, end: max })) { // todo: check this once and set some flag in axisBreak\r\n\t\t\t\t\t\t\t\tstartValue = Math.max(startValue, min);\r\n\t\t\t\t\t\t\t\tendValue = Math.min(endValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\t\t\t\tif (value > endValue) {\r\n\t\t\t\t\t\t\t\t\tmin += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\t\t\t\telse if (value < startValue) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvalue = startValue + (value - startValue) * breakSize;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tlet position;\r\n\r\n\t\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\t\tposition = (value - min) / difference;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tposition = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tposition = $math.round(position, 5);\r\n\r\n\t\t\t\t\tthis._valueToPosition[strValue] = position;\r\n\t\t\t\t\treturn position;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an absolute position in pixels to a corresponding value within\r\n\t * axis' scale.\r\n\t * \r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Value\r\n\t */\r\n\tpublic positionToValue(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\t\tlet strPosition: string = position.toString();\r\n\t\tlet cachedValue: number = this._positionToValue[strPosition];\r\n\r\n\t\tif ($type.isNumber(cachedValue)) {\r\n\t\t\treturn cachedValue;\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tlet min: number = this.min;\r\n\t\t\tlet max: number = this.max;\r\n\r\n\t\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\t\tlet difference: number = max - min; //no need to adjust!\r\n\r\n\t\t\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t\t\tlet value: number = null;\r\n\r\n\t\t\t\t// in case we have some axis breaks\r\n\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\t\tlet breakStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet breakEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\tif ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n\r\n\t\t\t\t\t\tif (breakStartValue > max) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n\r\n\t\t\t\t\t\t\tbreakStartValue = $math.max(breakStartValue, min);\r\n\t\t\t\t\t\t\tbreakEndValue = $math.min(breakEndValue, max);\r\n\r\n\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\tdifference -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\r\n\t\t\t\t\t\t\t// position to the right of break end\r\n\t\t\t\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\t\t\t\tmin += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// position to the left of break start\r\n\t\t\t\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlet breakPosition: number = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\t\t\t\tvalue = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!$type.isNumber(value)) {\r\n\t\t\t\t\tvalue = position * difference + min;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._positionToValue[strPosition] = value;\r\n\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an X coordinate to a relative value in axis' scale.\r\n\t * \r\n\t * @param  {number}  x  X (px)\r\n\t * @return {number}     Value\r\n\t */\r\n\tpublic xToValue(x: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an Y coordinate to a relative value in axis' scale.\r\n\t * \r\n\t * @param  {number}  y  Y (px)\r\n\t * @return {number}     Value\r\n\t */\r\n\tpublic yToValue(y: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param {IPoint}   point  Coorinates (px)\r\n\t * @return {number}         Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\tif(this.renderer instanceof AxisRendererY){\r\n\t\t\treturn 1 - this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates smallest and biggest value for the axis scale.\r\n\t *\r\n\t * @todo Description (review)\r\n\t */\r\n\tprivate getMinMax() {\r\n\t\tlet min: number = Number.POSITIVE_INFINITY;\r\n\t\tlet max: number = Number.NEGATIVE_INFINITY;\r\n\r\n\t\t// only if min and max are not set from outside, we go through min and max influencers\r\n\t\tif (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.ignoreMinMax) {\r\n\t\t\t\t\t// check min\r\n\t\t\t\t\tlet seriesMin: number = series.min(this);\r\n\t\t\t\t\tif ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// check max\r\n\t\t\t\t\tlet seriesMax: number = series.max(this);\r\n\r\n\t\t\t\t\tif ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// if defined from outside\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._minReal = min;\r\n\t\tthis._maxReal = max;\r\n\r\n\t\tif (min == Number.POSITIVE_INFINITY) {\r\n\t\t\tmin = undefined;\r\n\t\t}\r\n\t\tif (max == Number.NEGATIVE_INFINITY) {\r\n\t\t\tmax = undefined;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n\r\n\t\tmin = this.fixMin(min);\r\n\t\tmax = this.fixMax(max);\r\n\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, dif, this._gridCount);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\t// do it for the second time (importat!)\r\n\t\tminMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\t// return min max if strict\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\t\tmin = this._minDefined;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\t\tmax = this._maxDefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// checking isNumber is good when all series are hidden\r\n\t\tif ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tthis._minAdjusted = min;\r\n\t\t\tthis._maxAdjusted = max;\r\n\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t * \r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t * \r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}      min        [description]\r\n\t * @param  {number}      max        [description]\r\n\t * @param  {number}      difference [description]\r\n\t * @param  {number}      gridCount  [description]\r\n\t * @param  {boolean}     strictMode [description]\r\n\t * @return {IMinMaxStep}            [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\t\t// will fail if 0\r\n\t\tif (gridCount <= 0) {\r\n\t\t\tgridCount = 1;\r\n\t\t}\r\n\r\n\t\tlet initialMin: number = min;\r\n\t\tlet initialMax: number = max;\r\n\r\n\t\t// in case min and max is the same, use max\r\n\t\tif (difference === 0) {\r\n\t\t\tdifference = max;\r\n\t\t}\r\n\r\n\r\n\t\t// the number by which we need to raise 10 to get difference\r\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\r\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\t\t// reduce this number by 10 times\r\n\t\tpower = power / 10;\r\n\r\n\t\tlet extra: number = power;\r\n\t\tif (strictMode) {\r\n\t\t\textra = 0;\r\n\t\t}\r\n\r\n\r\n\t\tif (!this.logarithmic) {\r\n\r\n\t\t\t// round down min\r\n\t\t\tmin = Math.floor(min / power) * power - extra;\r\n\t\t\t// round up max\r\n\t\t\tmax = Math.ceil(max / power) * power + extra;\r\n\r\n\t\t\t// don't let min go below 0 if real min is >= 0\r\n\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\tmin = 0;\r\n\t\t\t}\r\n\t\t\t// don't let max go above 0 if real max is <= 0\r\n\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\tmax = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\tthrow Error(\"Logarithmic value axis can not have vales <= 0.\");\r\n\t\t\t}\r\n\t\t\tmin = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n\t\t\tmax = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n\t\t}\r\n\t\t// repeat diff, exponent and power again with rounded values\r\n\t\t//difference = this.adjustDifference(min, max);\r\n\r\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\t\tpower = Math.pow(10, Math.floor(exponent));\r\n\t\tpower = power / 10;\r\n\r\n\t\t// approximate difference between two grid lines\r\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\r\n\r\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n\r\n\t\t// TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n\t\t// the step should divide by  2, 5, and 10.\r\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\r\n\t\tif (stepDivisor > 5) {\r\n\t\t\tstepDivisor = 10;\r\n\t\t}\r\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\r\n\t\t\tstepDivisor = 5;\r\n\t\t}\r\n\r\n\t\t// now get real step\r\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n\r\n\t\tlet decCount: number = 0;\r\n\t\t// in case numbers are smaller than 1\r\n\t\tif (stepPower < 1) {\r\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n\t\t\t// round step\r\n\t\t\tstep = $math.round(step, decCount);\r\n\t\t}\r\n\t\tif (!this.logarithmic) {\r\n\t\t\t// final min and max\t\t\r\n\t\t\tmin = $math.round(step * Math.floor(min / step), decCount);\r\n\t\t\tmax = $math.round(step * Math.ceil(max / step), decCount);\r\n\t\t}\r\n\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * A minimum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t * \r\n\t * @param {number}  value  Min value\r\n\t */\r\n\tpublic set min(value: number) {\r\n\t\tthis._minDefined = value;\r\n\t\tthis.getMinMax();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Min value\r\n\t */\r\n\tpublic get min(): number {\r\n\t\treturn this._minAdjusted;\r\n\t}\r\n\r\n\t/**\r\n\t * [step description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get step(): number {\r\n\t\treturn this._step;\r\n\t}\r\n\r\n\t/**\r\n\t * A maximum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t * \r\n\t * @param {number}  value  Max value\r\n\t */\r\n\tpublic set max(value: number) {\r\n\t\tthis._maxDefined = value;\r\n\t\tthis.getMinMax();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Max value\r\n\t */\r\n\tpublic get max(): number {\r\n\t\treturn this._maxAdjusted;\r\n\t}\r\n\r\n\t/**\r\n\t * Used for the Series to register itself as the user of this Axis.\r\n\t *\r\n\t * This will also decorate both the Series and Axis with event handlers, used\r\n\t * to redraw on Axis position/zoom change.\r\n\t *\r\n\t * A disposer for those events is returned, so that they can be disposed\r\n\t * together with Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {XYSeries}   series  Series\r\n\t * @return {IDisposer}          Disposer for events\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\treturn new MultiDisposer([\r\n\t\t\tsuper.registerSeries(series),\r\n\r\n\t\t\tseries.events.on(\"extremeschanged\", this.handleExtremesChange, this),\r\n\t\t\tseries.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this),\r\n\r\n\t\t\tthis.events.on(\"datarangechanged\", series.invalidateDataRange, series),\r\n\t\t\tthis.events.on(\"extremeschanged\", series.invalidate, series)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * Perform tasks after Axis zoom.\r\n\t */\r\n\tprotected handleSelectionExtremesChange(): void {\r\n\r\n\t\tlet selectionMin: number;\r\n\t\tlet selectionMax: number;\r\n\r\n\t\tlet allHidden: boolean = true;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.ignoreMinMax) {\r\n\r\n\t\t\t\tif (series.visible && !series.isHiding) {\r\n\t\t\t\t\tallHidden = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesSelectionMin: number = series.selectionMin(this);\r\n\t\t\t\tlet seriesSelectionMax: number = series.selectionMax(this);\r\n\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMin)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n\t\t\t\t\t\tselectionMin = seriesSelectionMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// check max\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMax)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n\t\t\t\t\t\tselectionMax = seriesSelectionMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMin = this.min;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMax = this.max;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n\t\tselectionMin = $math.fitToRange(minMaxStep.min, this.min, this.max);\r\n\t\tselectionMax = $math.fitToRange(minMaxStep.max, this.min, this.max);\r\n\r\n\t\t// do it for the second time !important\r\n\t\tdif = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tminMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tselectionMin = $math.max(selectionMin, this._minDefined);\r\n\t\t\tselectionMax = $math.min(selectionMax, this._maxDefined);\r\n\t\t}\r\n\r\n\t\tlet start: number = this.valueToPosition(selectionMin);\r\n\t\tlet end: number = this.valueToPosition(selectionMax);\r\n\r\n\t\t// in case all series are hidden or hiding, full zoomout\r\n\t\tif (allHidden) {\r\n\t\t\tstart = 0;\r\n\t\t\tend = 1;\r\n\t\t}\r\n\r\n\t\t// temp, not sure. solving selection.change jumping\r\n\t\t/*\r\n\t\tif(selectionMin < this.min){\r\n\t\t\tthis._minAdjusted = selectionMin;\r\n\t\t}\r\n\r\n\t\tif(selectionMax > this.max){\r\n\t\t\tthis._maxAdjusted = selectionMax;\r\n\t\t} \t*/\r\n\r\n\t\tthis.zoom({ start: start, end: end });\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether to blindly use exact `min` and `max` values set by user\r\n\t * when generating Axis scale.\r\n\t *\r\n\t * If not set, the Axis might slightly adjust those values to accomodate a\r\n\t * better looking grid.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean} value Use exact values?\r\n\t */\r\n\tpublic set strictMinMax(value: boolean) {\r\n\t\tthis.setPropertyValue(\"strictMinMax\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use exact values?\r\n\t */\r\n\tpublic get strictMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"strictMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this axis should use a logarithmic scale.\r\n\t *\r\n\t * Please note that logarithmic axis can **only** accommodate values bigger\r\n\t * than zero.\r\n\t *\r\n\t * Having zero or negative values will result in error and failure of the\r\n\t * whole chart.\r\n\t * \r\n\t * @param {boolean} value Logarithmic scale?\r\n\t */\r\n\tpublic set logarithmic(value: boolean) {\r\n\t\tthis.setPropertyValue(\"logarithmic\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Logarithmic scale?\r\n\t */\r\n\tpublic get logarithmic(): boolean {\r\n\t\treturn this.getPropertyValue(\"logarithmic\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tthis.getMinMax();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  ?\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueX\";\r\n\t\t}\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location: number, stackKey?: string): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  start     [description]\r\n\t * @param  {number}  end       [description]\r\n\t * @param  {number}  location  [description]\r\n\t * @return {string}            [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: number, end: number, location?: number): string {\r\n\t\tlet startPosition: number = this.valueToPosition(start);\r\n\t\tlet endPosition: number = this.valueToPosition(end);\r\n\r\n\t\treturn this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.tooltip.numberFormatter.format(value));\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t * \r\n\t * @param {number}   startValue      Start value\r\n\t * @param {number}   endValue        End value\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tlet start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\tlet end: number = (endValue - this.min) / (this.max - this.min);\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A smallest value in axis scale within current zoom.\r\n\t * \r\n\t * @return {number} Min zoom value\r\n\t */\r\n\tpublic get minZoomed(): number {\r\n\t\treturn $math.max(this.min, this._minZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * A biggest value in axis scale within current zoom.\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get maxZoomed(): number {\r\n\t\treturn $math.min(this.max, this._maxZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\r\n\t\tsuper.fixAxisBreaks();\r\n\r\n\t\t// process breaks\r\n\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t// break difference\r\n\t\t\tlet axisBreakDif: number = endValue - startValue;\r\n\t\t\tlet axisBreakGridCount: number = Math.ceil(axisBreakDif / this._step * axisBreak.breakSize);\r\n\r\n\t\t\t// calculate min, max and step for axis break\r\n\t\t\tlet breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount);\r\n\t\t\taxisBreak.adjustedStep = breakMinMaxStep.step;\r\n\t\t\taxisBreak.adjustedMin = breakMinMaxStep.min;\r\n\t\t\taxisBreak.adjustedMax = breakMinMaxStep.max;\r\n\t\t});\r\n\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value based on position\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\treturn this.numberFormatter.format(value);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nsystem.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;"]}