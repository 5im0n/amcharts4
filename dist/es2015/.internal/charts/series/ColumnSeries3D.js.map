{"version":3,"file":"ColumnSeries3D.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/series/ColumnSeries3D.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n * \r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<ColumnSeries3D, IColumnSeries3DEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<ColumnSeries3D, IColumnSeries3DEvents>>;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * \r\n\t * @return {Sprite} Element.\r\n\t */\r\n\tprotected getColumnTemplate(): Sprite {\r\n\t\tlet columnTemplate = new Rectangle3D();\r\n\t\tcolumnTemplate.width = percent(80);\r\n\t\tcolumnTemplate.height = percent(80);\r\n\t\treturn columnTemplate;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t * \r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\t\tlet dx: number = this.chart.dx3D;\r\n\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template: Rectangle3D = <Rectangle3D>this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template: Rectangle3D = <Rectangle3D>this.columns.template;  // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nsystem.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;"]}