{"version":3,"file":"TextLink.js","sourceRoot":"","sources":["../../../../../src/.internal/core/elements/TextLink.ts"],"names":[],"mappings":"AAAA;;GAEG;;;;;;;;;;;AAEH;;;;;GAKG;AACH,OAAO,EAAE,IAAI,EAA+C,MAAM,0BAA0B,CAAC;AAS7F,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAChE,OAAO,EAAE,iBAAiB,EAAE,MAAM,oCAAoC,CAAC;AA2BvE;;;;;GAKG;AAEH;;;;;GAKG;AACH;IAA8B,4BAAI;IAyBjC;;OAEG;IACH;QAAA,YACC,iBAAO,SAkBP;QAhBA,KAAI,CAAC,SAAS,GAAG,UAAU,CAAC;QAC5B,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,IAAI,eAAe,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAE9C,KAAI,CAAC,IAAI,GAAG,eAAe,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAEpD,IAAI,UAAU,GAAG,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC7C,UAAU,CAAC,UAAU,CAAC,IAAI,GAAG,eAAe,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAE1E,IAAI,SAAS,GAAG,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC3C,SAAS,CAAC,UAAU,CAAC,IAAI,GAAG,eAAe,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAExE,KAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC,OAAO,CAAC;QAEhD,KAAI,CAAC,UAAU,EAAE,CAAC;;IACnB,CAAC;IAEF,eAAC;AAAD,CAAC,AAjDD,CAA8B,IAAI,GAiDjC","sourcesContent":["/**\r\n * A module that defines Text element used to indicate links.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Text, ITextProperties, ITextAdapters, ITextEvents } from \"../../core/elements/Text\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[TextLink]].\r\n */\r\nexport interface ITextLinkProperties extends ITextProperties { }\r\n\r\n/**\r\n * Defines events for [[TextLink]].\r\n */\r\nexport interface ITextLinkEvents extends ITextEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TextLink]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface ITextLinkAdapters extends ITextAdapters, ITextLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a text element with a link.\r\n * \r\n * @see {@link ITextLinkEvents} for a list of available events\r\n * @see {@link ITextLinkAdapters} for a list of available Adapters\r\n */\r\nexport class TextLink extends Text {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {ITextLinkProperties}\r\n\t */\r\n\tpublic _properties: ITextLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @type {ITextLinkAdapters}\r\n\t */\r\n\tpublic _adapter: ITextLinkAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<TextLink, ITextLinkEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<TextLink, ITextLinkEvents>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TextLink\";\r\n\t\tthis.selectable = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"primaryButton\");\t\r\n\r\n\t\tlet hoverState = this.states.create(\"hover\");\r\n\t\thoverState.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\r\n\t\tlet downState = this.states.create(\"down\");\r\n\t\tdownState.properties.fill = interfaceColors.getFor(\"primaryButtonDown\");\r\n\r\n\t\tthis.cursorOverStyle = MouseCursorStyle.pointer;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}"]}