{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * A collection of universal utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { system } from \"../System\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { percent, Percent } from \"./Percent\";\r\nimport { Container } from \"../Container\";\r\nimport { ITheme } from \"../../themes/ITheme\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $string from \"./String\";\r\nimport * as $strings from \"./Strings\";\r\nimport * as $object from \"./Object\";\r\n\r\n/**\r\n * ============================================================================\r\n * MISC FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Copies all properties of one object to the other, omitting undefined.\r\n *\r\n * @param  {Object}   fromObject  Source object\r\n * @param  {Object}   toObject    Target object\r\n * @return {Object}               Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\r\nexport function copyProperties(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t// only if value is set\r\n\t\tif ($type.hasValue(value)) {\r\n\t\t\t(<any>target)[key] = value;\r\n\t\t}\r\n\t});\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Copies all properties of one object to the other.\r\n *\r\n * @param  {Object}  source     Source object\r\n * @param  {Object}  recipient  Target object\r\n * @return {Object}             Updated target object\r\n */\r\nexport function copy(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t(<any>target)[key] = value;\r\n\t});\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Checks if value is not empty (undefined or zero-length string).\r\n *\r\n * @param  {any}      value  Value to check\r\n * @return {boolean}         `true` if value is \"empty\"\r\n */\r\nexport function empty(value: any): boolean {\r\n\treturn !$type.hasValue(value) || (value.toString() === \"\");\r\n}\r\n\r\n/**\r\n * [relativeToValue description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {$type.Optional<number | Percent>}  percent  [description]\r\n * @param  {number}                            full     [description]\r\n * @return {number}                                     [description]\r\n */\r\nexport function relativeToValue(percent: $type.Optional<number | Percent>, full: number): number {\r\n\tif ($type.isNumber(percent)) {\r\n\t\treturn percent;\r\n\r\n\t} else if (percent != null && $type.isNumber(percent.value)) {\r\n\t\treturn full * percent.value;\r\n\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * [relativeRadiusToValue description]\r\n *\r\n * Differs from relativeToValue so that if a value is negative, it subtracts\r\n * it from full value.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {$type.Optional<number | Percent>}  percent             [description]\r\n * @param  {number}                            full                [description]\r\n * @param  {boolean}                           subtractIfNegative  [description]\r\n * @return {number}                                                [description]\r\n */\r\nexport function relativeRadiusToValue(percent: $type.Optional<number | Percent>, full: number, subtractIfNegative?: boolean): $type.Optional<number> {\r\n\tlet value: $type.Optional<number>;\r\n\r\n\tif ($type.isNumber(percent)) {\r\n\t\tvalue = percent;\r\n\r\n\t\tif (value < 0) {\r\n\t\t\tif (subtractIfNegative) {\r\n\t\t\t\tvalue = full + value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = full - value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} else if (percent != null && $type.isNumber(percent.value)) {\r\n\t\tvalue = full * percent.value;\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * [valueToRelative description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number | Percent}  value  [description]\r\n * @param  {number}            full   [description]\r\n * @return {number}                   [description]\r\n */\r\nexport function valueToRelative(value: number | Percent, full: number): number {\r\n\tif (value instanceof Percent) {\r\n\t\treturn value.value;\r\n\t}\r\n\telse {\r\n\t\treturn value / full;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * STRING FORMATTING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts camelCased text to dashed version:\r\n * (\"thisIsString\" > \"this-is-string\")\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function camelToDashed(str: string): string {\r\n\treturn str.replace(/\\W+/g, '-').replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\n/**\r\n * Converts tring to uppercase.\r\n *\r\n * @param  {string}  str  String to convert\r\n * @return {string}       uppercased string\r\n * @todo Maybe make it better\r\n */\r\nexport function capitalize(str: string): string {\r\n\tlet arr: string[] = str.split(\"\");\r\n\tarr[0] = arr[0].toUpperCase();\r\n\treturn arr.join(\"\");\r\n}\r\n\r\n/**\r\n * Converts any value into its string representation.\r\n *\r\n * @param  {any}     value  Value\r\n * @return {string}         String represantation of the value\r\n */\r\nexport function stringify(value: any): string {\r\n\treturn JSON.stringify(value);\r\n}\r\n\r\n/**\r\n * Splits the text into multiple lines, respecting maximum character count.\r\n * Prioretizes splitting on spaces and punctuation. Falls back on splitting\r\n * mid-word if there's no other option.\r\n *\r\n * @param  {string}    text      Text\r\n * @param  {number}    maxChars  Maximum number of characters per line\r\n * @return {string[]}            An array of split text\r\n */\r\nexport function splitTextByCharCount(text: string, maxChars: number, fullWords?: boolean, rtl?: boolean): string[] {\r\n\r\n\t// Maybe the text fits?\r\n\tif (text.length <= maxChars) {\r\n\t\treturn [text];\r\n\t}\r\n\r\n\t// Init result\r\n\tlet res: string[] = [];\r\n\r\n\t// Split by spacing\r\n\tlet currentIndex: number = -1;\r\n\tlet words: string[] = text.split(/[\\s]+/);\r\n\t//let prefix: string = \"\";\r\n\r\n\t/*if (rtl) {\r\n\t\twords.reverse();\r\n\t}*/\r\n\t//console.log(words);\r\n\r\n\t// Process each word\r\n\tfor (let i = 0; i < words.length; i++) {\r\n\r\n\t\t// Get word and symbol count\r\n\t\tlet word: string = words[i];\r\n\t\tlet wordLength: number = word.length;\r\n\r\n\t\t// Ignore empty words\r\n\t\tif (wordLength === 0) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// Append space\r\n\t\tif (i < (words.length - 1)) {\r\n\t\t\tif (rtl) {\r\n\t\t\t\tword = \" \" + word;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tword += \" \";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check word length\r\n\t\tif ((wordLength > maxChars) && fullWords !== true) {\r\n\t\t\t// A single word is longer than allowed symbol count\r\n\t\t\t// Break it up\r\n\t\t\tif (rtl) {\r\n\t\t\t\tword = reverseString(word);\r\n\t\t\t}\r\n\t\t\tlet parts: RegExpMatchArray | null = word.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\r\n\r\n\t\t\t// TODO is this correct ?\r\n\t\t\tif (parts) {\r\n\t\t\t\tif (rtl) {\r\n\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\tparts[x] = reverseString(parts[x]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//parts.reverse();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tres = res.concat(parts);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\t// Init current line\r\n\t\t\tif (currentIndex === -1) {\r\n\t\t\t\tres.push(\"\");\r\n\t\t\t\tcurrentIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\t// Check if we need to break into another line\r\n\t\t\tif (((res[currentIndex].length + wordLength + 1) > maxChars) && res[currentIndex] !== \"\") {\r\n\t\t\t\tres.push(\"\");\r\n\t\t\t\tcurrentIndex++;\r\n\t\t\t}\r\n\r\n\t\t\t// Add word\r\n\t\t\tres[currentIndex] += word;\r\n\r\n\t\t}\r\n\r\n\t\t// Update index\r\n\t\tcurrentIndex = res.length - 1;\r\n\t}\r\n\t//console.log(res);\r\n\t/*if (rtl) {\r\n\t\tres.reverse();\r\n\t}*/\r\n\r\n\t// Do we have only one word that does not fit?\r\n\t// Since fullWords is set and we can't split the word, we end up with empty\r\n\t// set.\r\n\tif (res.length == 1 && fullWords && (res[0].length > maxChars)) {\r\n\t\tres = [];\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n\r\n/**\r\n * Truncates the text to certain character count.\r\n *\r\n * Will add ellipsis if the string is truncated. Optionally, can truncate on full words only.\r\n *\r\n * For RTL support, pass in the fifth parameter as `true`.\r\n *\r\n * @param  {string}   text       Input text\r\n * @param  {number}   maxChars   Maximum character count of output\r\n * @param  {string}   ellipsis   Ellipsis string, i.e. \"...\"\r\n * @param  {boolean}  fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`\r\n * @param  {boolean}  rtl        Is this an RTL text?\r\n * @return {string}              Truncated text\r\n */\r\nexport function truncateWithEllipsis(text: string, maxChars: number, ellipsis: string, fullWords?: boolean, rtl?: boolean): string {\r\n\r\n\tif (text.length <= maxChars) {\r\n\t\treturn text;\r\n\t}\r\n\r\n\t// Calc max chars\r\n\tmaxChars -= ellipsis.length;\r\n\tif (maxChars < 1) {\r\n\t\tmaxChars = 1;\r\n\t\t//ellipsis = \"\";\r\n\t}\r\n\r\n\t// Get lines\r\n\tlet lines = splitTextByCharCount(text, maxChars, fullWords, rtl);\r\n\r\n\t// Use first line\r\n\treturn lines[0] + ellipsis;\r\n}\r\n\r\n/**\r\n * Removes whitespace from beginning and end of the string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function trim(str: string): string {\r\n\treturn str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n};\r\n\r\n/**\r\n * Removes whitespace from end of the string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function rtrim(str: string): string {\r\n\treturn str.replace(/[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n};\r\n\r\n/**\r\n * Removes whitespace from beginning of the string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function ltrim(str: string): string {\r\n\treturn str.replace(/^[\\s\\uFEFF\\xA0]+/g, \"\");\r\n};\r\n\r\n/**\r\n * Reverses string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function reverseString(str: string): string {\r\n\treturn str.split(\"\").reverse().join(\"\");\r\n}\r\n\r\n/**\r\n * Removes quotes from the string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function unquote(str: string): string {\r\n\tlet res = str.trim();\r\n\tres = str.replace(/^'(.*)'$/, \"$1\");\r\n\tif (res == str) {\r\n\t\tres = str.replace(/^\"(.*)\"$/, \"$1\");\r\n\t}\r\n\treturn res;\r\n}\r\n\r\n/**\r\n * Pads a string with additional characters to certain length.\r\n *\r\n * @param  {any}            value  A numeric value\r\n * @param  {number = 0}     len    Result string length in characters\r\n * @param  {string = \"0\"}   char   A character to use for padding\r\n * @return {string}                Padded value as string\r\n */\r\nexport function padString(value: any, len: number = 0, char: string = \"0\"): string {\r\n\tif (typeof value !== \"string\")\r\n\t\tvalue = value.toString();\r\n\treturn len > value.length ? Array(len - value.length + 1).join(char) + value : value;\r\n}\r\n\r\n/**\r\n * Tries to determine format type.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {string}   format  Format string\r\n * @return {string}          Format type (\"string\" | \"number\" | \"date\" | \"duration\")\r\n */\r\nexport function getFormat(format: string): string {\r\n\r\n\t// Undefined?\r\n\tif (typeof format === \"undefined\")\r\n\t\treturn $strings.STRING;\r\n\r\n\t// Cleanup and lowercase format\r\n\tformat = format.toLowerCase().replace(/^\\[[^\\]]*\\]/, \"\");\r\n\r\n\t// Remove style tags\r\n\tformat = format.replace(/\\[[^\\]]+\\]/, \"\");\r\n\r\n\t// Trim\r\n\tformat = format.trim();\r\n\r\n\t// Check for any explicit format hints (i.e. /Date)\r\n\tlet hints: RegExpMatchArray | null = format.match(/\\/(date|number|duration)$/);\r\n\r\n\tif (hints) {\r\n\t\treturn hints[1];\r\n\t}\r\n\r\n\t// Check for explicit hints\r\n\tif (format === $strings.NUMBER) {\r\n\t\treturn $strings.NUMBER;\r\n\t}\r\n\r\n\tif (format === $strings.DATE) {\r\n\t\treturn $strings.DATE;\r\n\t}\r\n\r\n\tif (format === $strings.DURATION) {\r\n\t\treturn $strings.DURATION;\r\n\t}\r\n\r\n\t// Detect number formatting symbols\r\n\tif (format.match(/[#0]/)) {\r\n\t\treturn $strings.NUMBER;\r\n\t}\r\n\r\n\t// Detect date formatting symbols\r\n\tif (format.match(/[ymwdhnsqaxkzgtei]/)) {\r\n\t\treturn $strings.DATE;\r\n\t}\r\n\r\n\t// Nothing? Let's display as string\r\n\treturn $strings.STRING;\r\n}\r\n\r\n/**\r\n * Cleans up format:\r\n * * Strips out formatter hints\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  format  Format\r\n * @return {string}          Cleaned format\r\n */\r\nexport function cleanFormat(format: string): string {\r\n\treturn format.replace(/\\/(date|number|duration)$/i, \"\");\r\n}\r\n\r\n/**\r\n * Strips all tags from the string.\r\n *\r\n * @param  {string}  text  Source string\r\n * @return {string}        String without tags\r\n */\r\nexport function stripTags(text: string): string {\r\n\treturn text ? text.replace(/<[^>]*>/g, \"\") : text;\r\n}\r\n\r\n/**\r\n * Removes new lines and tags from a string.\r\n *\r\n * @param  {string}  text  String to conver\r\n * @return {string}        Converted string\r\n */\r\nexport function plainText(text: string): string {\r\n\treturn text ? stripTags(text.replace(/[\\n\\r]+/g, \". \")) : text;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CONVERSION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param  {number}  value  Numeric value\r\n * @return {string}         Numeric value as string\r\n */\r\nexport function numberToString(value: number): string {\r\n\t// TODO handle Infinity and -Infinity\r\n\tif ($type.isNaN(value)) {\r\n\t\treturn \"NaN\";\r\n\t}\r\n\r\n\tif (value === Infinity) {\r\n\t\treturn \"Infinity\";\r\n\t}\r\n\r\n\tif (value === -Infinity) {\r\n\t\treturn \"-Infinity\";\r\n\t}\r\n\r\n\t// Negative 0\r\n\tif ((value === 0) && (1 / value === -Infinity)) {\r\n\t\treturn \"-0\";\r\n\t}\r\n\r\n\t// Preserve negative and deal with absoute values\r\n\tlet negative = value < 0;\r\n\r\n\tvalue = Math.abs(value);\r\n\r\n\t// TODO test this\r\n\tlet parsed = $type.getValue(/^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value));\r\n\tlet digits = parsed[1];\r\n\tlet decimals = parsed[2] || \"\";\r\n\r\n\tlet res: string;\r\n\r\n\t// Leave the nummber as it is if it does not use exponents\r\n\tif (parsed[3] == null) {\r\n\t\tres = (decimals === \"\" ? digits : digits + \".\" + decimals);\r\n\r\n\t} else {\r\n\t\tlet exponent = +parsed[3];\r\n\r\n\t\t// Deal with decimals\r\n\t\tif (value < 1) {\r\n\t\t\tlet zeros = exponent - 1;\r\n\r\n\t\t\tres = \"0.\" + $string.repeat(\"0\", zeros) + digits + decimals;\r\n\r\n\t\t\t// Deal with integers\r\n\t\t} else {\r\n\t\t\tlet zeros = exponent - decimals.length;\r\n\r\n\t\t\tif (zeros === 0) {\r\n\t\t\t\tres = digits + decimals;\r\n\r\n\t\t\t} else if (zeros < 0) {\r\n\t\t\t\tres = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tres = digits + decimals + $string.repeat(\"0\", zeros);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn negative ? \"-\" + res : res;\r\n}\r\n\r\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param  {Date | number | string}  value  A value of any type\r\n * @return {Date}                           Date object representing a value\r\n */\r\nexport function anyToDate(value: Date | number | string): Date {\r\n\tif ($type.isDate(value)) {\r\n\t\t// TODO maybe don't create a new Date ?\r\n\t\treturn new Date(value);\r\n\t}\r\n\r\n\telse if ($type.isNumber(value)) {\r\n\t\treturn new Date(value);\r\n\t}\r\n\r\n\telse {\r\n\t\t// Try converting to number (assuming timestamp)\r\n\t\tlet num = Number(value);\r\n\r\n\t\tif (!$type.isNumber(num)) {\r\n\t\t\treturn new Date(value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new Date(num);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Tries converting any value to a number.\r\n *\r\n * @param  {any}     value  Source value\r\n * @return {number}         Number\r\n */\r\nexport function anyToNumber(value: Date | number | string): $type.Optional<number> {\r\n\tif ($type.isDate(value)) {\r\n\t\treturn value.getTime();\r\n\t}\r\n\r\n\telse if ($type.isNumber(value)) {\r\n\t\treturn value;\r\n\t}\r\n\r\n\telse if ($type.isString(value)) {\r\n\t\t// Try converting to number (assuming timestamp)\r\n\t\tlet num = Number(value);\r\n\r\n\t\tif (!$type.isNumber(num)) {\r\n\t\t\t// Failing\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn num;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns a year day.\r\n *\r\n * @param  {Date}     date  Date\r\n * @param  {boolean}  utc   Assume UTC dates?\r\n * @return {number}         Year day\r\n * @todo Account for UTC\r\n */\r\nexport function getYearDay(date: Date, utc: boolean = false): number {\r\n\tlet first = new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\r\n\treturn Math.floor((date.getTime() - first.getTime()) / 86400000) + 1;\r\n}\r\n\r\n/**\r\n * Returns week number for a given date.\r\n *\r\n * @param  {Date}     date  Date\r\n * @param  {boolean}  utc   Assume UTC dates?\r\n * @return {number}         Week number\r\n * @todo Account for UTC\r\n */\r\nexport function getWeek(date: Date, utc: boolean = false): number {\r\n\tlet day = getYearDay(date, utc) - 1;\r\n\tlet week = Math.floor((day - (date.getDay() || 7) + 10) / 7);\r\n\tif (week === 0) {\r\n\t\tweek = 53;\r\n\t}\r\n\telse if (week === 53) {\r\n\t\tweek = 1;\r\n\t}\r\n\treturn week;\r\n}\r\n\r\n/**\r\n * Returns a week number in the month.\r\n *\r\n * @param  {Date}     date  Source Date\r\n * @param  {boolean}  utc   Assume UTC dates?\r\n * @return {number}         Week number in month\r\n */\r\nexport function getMonthWeek(date: Date, utc: boolean = false): number {\r\n\tlet firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);\r\n\tlet currentWeek = getWeek(date, utc);\r\n\tif (currentWeek == 1) {\r\n\t\tcurrentWeek = 53;\r\n\t}\r\n\treturn currentWeek - firstWeek + 1;\r\n}\r\n\r\n/**\r\n * Returns a year day out of the given week number.\r\n *\r\n * @param  {number}   week     Week\r\n * @param  {number}   year     Year\r\n * @param  {number}   weekday  Weekday\r\n * @param  {boolean}  utc      Assume UTC dates\r\n * @return {number}            Day in a year\r\n */\r\nexport function getDayFromWeek(week: number, year: number, weekday: number = 1, utc: boolean = false): number {\r\n\tlet date = new Date(year, 0, 4, 0, 0, 0, 0);\r\n\tif (utc) {\r\n\t\tdate.setUTCFullYear(year);\r\n\t}\r\n\tlet day = week * 7 + weekday - ((date.getDay() || 7) + 3);\r\n\treturn day;\r\n}\r\n\r\n/**\r\n * Returns 12-hour representation out of the 24-hour hours.\r\n *\r\n * @param  {number}  hours  24-hour number\r\n * @return {number}         12-hour number\r\n */\r\nexport function get12Hours(hours: number, base?: number): number {\r\n\tif (hours > 12) {\r\n\t\thours -= 12;\r\n\t}\r\n\telse if (hours === 0) {\r\n\t\thours = 12;\r\n\t}\r\n\treturn $type.hasValue(base) ? hours + (base - 1) : hours;\r\n}\r\n\r\n/**\r\n * Returns a string name of the tome zone.\r\n *\r\n * @param  {Date}     date     Date object\r\n * @param  {boolean}  long     Should return long (\"Pacific Standard Time\") or short abbreviation (\"PST\")\r\n * @param  {boolean}  savings  Include information if it's in daylight savings mode\r\n * @return {string}            Time zone name\r\n */\r\nexport function getTimeZone(date: Date, long: boolean = false, savings: boolean = false): string {\r\n\tlet wotz = date.toLocaleString(\"UTC\");\r\n\tlet wtz = date.toLocaleString(\"UTC\", { timeZoneName: long ? \"long\" : \"short\" }).substr(wotz.length);\r\n\t//wtz = wtz.replace(/[+-]+[0-9]+$/, \"\");\r\n\tif (savings === false) {\r\n\t\twtz = wtz.replace(/ (standard|daylight|summer|winter) /i, \" \");\r\n\t}\r\n\treturn wtz;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * NUMBER-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns a random number between `from` and `to`.\r\n *\r\n * @param  {number}  from  From number\r\n * @param  {number}  to    To number\r\n * @return {number}        Random number\r\n */\r\nexport function random(from: number, to: number): number {\r\n\treturn Math.floor(Math.random() * to) + from;\r\n}\r\n\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * @param  {number}  value  Input value\r\n * @param  {number}  min    Minimum value\r\n * @param  {number}  max    Maximum value\r\n * @return {number}         Possibly adjusted value\r\n */\r\nexport function fitNumber(value: number, min: number, max: number): number {\r\n\tif (value > max) {\r\n\t\treturn max;\r\n\t}\r\n\telse if (value < min) {\r\n\t\treturn min;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * If the value is does not fit withing specified range, it \"wraps\" around the\r\n * values.\r\n *\r\n * For example, if we have input value 10 with min set at 1 and max set at 8,\r\n * the value will not fit. The remainder that does not fit (2) will be added\r\n * to `min`, resulting in 3.\r\n *\r\n * The output of regular `fitNumber()` would return 8 instead.\r\n *\r\n * @param  {number}  value  Input value\r\n * @param  {number}  min    Minimum value\r\n * @param  {number}  max    Maximum value\r\n * @return {number}         Possibly adjusted value\r\n */\r\nexport function fitNumberRelative(value: number, min: number, max: number): number {\r\n\tlet gap = max - min;\r\n\tlet step = gap / 100;\r\n\tif (value > max) {\r\n\t\tvalue = min + (value - gap * Math.floor(value / gap));\r\n\t}\r\n\telse if (value < min) {\r\n\t\tvalue = min + (value - gap * Math.floor(value / gap));\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * SPRITE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts SVG element coordinates to coordinates within specific [[Sprite]].\r\n *\r\n * @param  {IPoint}  point   SVG coordinates\r\n * @param  {Sprite}  sprite  Sprite\r\n * @return {IPoint}         Sprite coordinates\r\n */\r\nexport function svgPointToSprite(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet x: number = point.x;\r\n\tlet y: number = point.y;\r\n\tlet sprites: Sprite[] = [];\r\n\r\n\twhile ($type.hasValue(sprite.parent)) {\r\n\t\tsprites.push(sprite);\r\n\t\tsprite = sprite.parent;\r\n\t}\r\n\r\n\tsprites.reverse();\r\n\r\n\tfor (var i = 0; i < sprites.length; i++) {\r\n\t\tlet sprite: Sprite = sprites[i];\r\n\t\tlet angle: number = sprite.rotation;\r\n\r\n\t\tlet relativeX = x - sprite.pixelX;\r\n\t\tlet relativeY = y - sprite.pixelY;\r\n\r\n\t\tif (sprite.dx) {\r\n\t\t\tx -= sprite.dx;\r\n\t\t}\r\n\t\tif (sprite.dy) {\r\n\t\t\ty -= sprite.dy;\r\n\t\t}\r\n\r\n\t\tx = ($math.cos(-angle) * relativeX - $math.sin(-angle) * relativeY) / sprite.scale - sprite.pixelPaddingLeft;\r\n\t\ty = ($math.cos(-angle) * relativeY + $math.sin(-angle) * relativeX) / sprite.scale - sprite.pixelPaddingTop;\r\n\t}\r\n\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n/**\r\n * Converts coordinates within [[Sprite]] to coordinates relative to the whole\r\n * SVG element.\r\n *\r\n * @param  {IPoint}  point   Sprite coordinates\r\n * @param  {Sprite}  sprite  Sprite\r\n * @return {IPoint}          SVG coordinates\r\n */\r\nexport function spritePointToSvg(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet x: number = point.x;\r\n\tlet y: number = point.y;\r\n\twhile ($type.hasValue(sprite.parent)) {\r\n\t\tlet angle: number = sprite.rotation;\r\n\r\n\t\tx += sprite.pixelPaddingLeft;\r\n\t\ty += sprite.pixelPaddingTop;\r\n\r\n\t\tif (sprite.dx) {\r\n\t\t\tx += sprite.dx;\r\n\t\t}\r\n\t\tif (sprite.dy) {\r\n\t\t\ty += sprite.dy;\r\n\t\t}\r\n\r\n\t\tlet relativeX = sprite.pixelX + ((x * $math.cos(angle) - y * $math.sin(angle))) * sprite.scale;\r\n\t\tlet relativeY = sprite.pixelY + ((x * $math.sin(angle) + y * $math.cos(angle))) * sprite.scale;\r\n\r\n\t\tx = relativeX;\r\n\t\ty = relativeY;\r\n\r\n\t\tsprite = sprite.parent;\r\n\t}\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n/**\r\n * Converts a rectangle expressed in SVG element coordinates to coordinates\r\n * within specific [[Sprite]].\r\n *\r\n * @param  {IRectangle}  rect    SVG rectangle\r\n * @param  {Sprite}      sprite  Sprite\r\n * @return {IRectangle}          Sprite rectangle\r\n */\r\nexport function svgRectToSprite(rect: IRectangle, sprite: Sprite): IRectangle {\r\n\tlet p1: IPoint = svgPointToSprite(rect, sprite);\r\n\tlet p2: IPoint = svgPointToSprite({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n\treturn { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n\r\n/**\r\n * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.\r\n *\r\n * @param  {IRectangle}  rect    Sprite rectangle\r\n * @param  {Sprite}      sprite  Sprite\r\n * @return {IRectangle}          SVG rectangle\r\n */\r\nexport function spriteRectToSvg(rect: IRectangle, sprite: Sprite): IRectangle {\r\n\tlet p1: IPoint = spritePointToSvg(rect, sprite);\r\n\tlet p2: IPoint = spritePointToSvg({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n\treturn { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n\r\n/**\r\n * Converts global document-wide coordinates to coordinates within SVG element.\r\n *\r\n * @param  {IPoint}       point         Global coordinates\r\n * @param  {HTMLElement}  svgContainer  SVG element\r\n * @return {IPoint}                     SVG coordinates\r\n */\r\nexport function documentPointToSvg(point: IPoint, svgContainer: HTMLElement): IPoint {\r\n\tlet bbox = svgContainer.getBoundingClientRect();\r\n\r\n\treturn {\r\n\t\t\"x\": point.x - bbox.left,\r\n\t\t\"y\": point.y - bbox.top\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts SVG coordinates to global document-wide coordinates.\r\n *\r\n * @param  {IPoint}       point         SVG coordinates\r\n * @param  {HTMLElement}  svgContainer  SVG element\r\n * @return {IPoint}                     Global coordinates\r\n */\r\nexport function svgPointToDocument(point: IPoint, svgContainer: HTMLElement): IPoint {\r\n\tlet bbox = svgContainer.getBoundingClientRect();\r\n\r\n\treturn {\r\n\t\t\"x\": point.x + bbox.left,\r\n\t\t\"y\": point.y + bbox.top\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts document-wide global coordinates to coordinates within specific\r\n * [[Sprite]].\r\n *\r\n * @param  {IPoint}  point   Global coordinates\r\n * @param  {Sprite}  sprite  Sprite\r\n * @return {IPoint}          Sprite coordinates\r\n */\r\nexport function documentPointToSprite(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet svgPoint: IPoint = documentPointToSvg(point, sprite.htmlContainer);\r\n\treturn svgPointToSprite(svgPoint, sprite);\r\n}\r\n\r\n/**\r\n * Converts coordinates within [[Sprite]] to global document coordinates.\r\n *\r\n * @param  {IPoint}  point   Sprite coordinates\r\n * @param  {Sprite}  sprite  Sprite\r\n * @return {IPoint}          Global coordinates\r\n */\r\nexport function spritePointToDocument(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet svgPoint: IPoint = spritePointToSvg(point, sprite);\r\n\treturn svgPointToDocument(svgPoint, sprite.htmlContainer);\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * INSTANTIATION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A shortcut to creating a chart instance.\r\n *\r\n * The first argument is either a reference to or an id of a DOM element to be\r\n * used as a container for the chart.\r\n *\r\n * The second argument is the type reference of the chart type. (for plain\r\n * JavaScript users this can also be a string indicating chart type)\r\n *\r\n * ```TypeScript\r\n * let chart = amcharts4.create(\"chartdiv\", pie.PieChart);\r\n * ```\r\n * ```JavaScript\r\n * // Can pass in chart type reference like this:\r\n * var chart = amcharts4.create(\"chartdiv\", amcharts4.pie.PieChart);\r\n *\r\n * // ... or chart class type as a string:\r\n * var chart = amcharts4.create(\"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @param  {HTMLElement | string}  htmlElement  Reference or id of the target container element\r\n * @param  {T}                     classType    Class type of the target chart type\r\n * @return {T}                                  Chart instance\r\n */\r\nexport function create<T extends Sprite>(htmlElement: $type.Optional<HTMLElement | string>, classType: { new(): T; }): T {\r\n\r\n\t// This is a nasty hack for the benefit of vanilla JS users, who do not\r\n\t// enjoy benefits of type-check anyway.\r\n\t// We're allowing passing in a name of the class rather than type reference\r\n\t// itself.\r\n\tlet classError: $type.Optional<Error>;\r\n\tif ($type.isString(classType)) {\r\n\t\tif ($type.hasValue(system.registeredClasses[classType])) {\r\n\t\t\tclassType = system.registeredClasses[classType];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tclassType = system.registeredClasses[\"Container\"];\r\n\t\t\tclassError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t// Create the chart\r\n\tlet chart = system.createChild(htmlElement, classType);\r\n\r\n\t// Error?\r\n\tif (classError) {\r\n\t\tchart.raiseCriticalError(classError);\r\n\t}\r\n\r\n\treturn chart;\r\n\r\n}\r\n\r\n/**\r\n * A shortcut to creating a chart from a config object.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let chart amcharts4.createFromConfig({ ... }, \"chartdiv\", xy.XYChart );\r\n * ```\r\n * ```JavaScript\r\n * var chart amcharts4.createFromConfig({ ... }, \"chartdiv\", \"XYChart\" );\r\n * ```\r\n *\r\n * If `chartType` parameter is not supplied it must be set in a config object,\r\n * via reference to chart type, e.g.:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": xy.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": amcharts4.xy.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * Or via string: (if you are using JavaScript)\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * A `container` can either be a reference to an HTML container to put chart\r\n * in, or it's unique id.\r\n *\r\n * If `container` is not specified, it must be included in the config object:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @param  {any}                   config       Config object in property/value pairs\r\n * @param  {string | HTMLElement}  htmlElement  Container reference or ID\r\n * @param  {typeof Chart}          objectType   Chart type\r\n * @return {Chart}                              A newly created chart instance\r\n * @todo Throw exception if type is not correct\r\n */\r\nexport function createFromConfig(config: { [index: string]: any }, htmlElement?: string | HTMLElement, classType?: typeof Sprite | string): Sprite {\r\n\r\n\t// Extract chart type from config if necessary\r\n\tif (!$type.hasValue(classType)) {\r\n\t\tclassType = config.type;\r\n\t\tdelete config.type;\r\n\t}\r\n\r\n\t// Extract element from config if necessary\r\n\tif (!$type.hasValue(htmlElement)) {\r\n\t\thtmlElement = config.container;\r\n\t\tdelete config.container;\r\n\t}\r\n\r\n\t// Check if we need to extract actual type reference\r\n\tlet finalType;\r\n\tlet classError: $type.Optional<Error>;\r\n\tif ($type.isString(classType) && $type.hasValue(system.registeredClasses[classType])) {\r\n\t\tfinalType = system.registeredClasses[classType];\r\n\t}\r\n\telse {\r\n\t\tfinalType = Container;\r\n\t\tclassError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n\t}\r\n\r\n\t// Create the chart\r\n\tlet chart = system.createChild(htmlElement, finalType);\r\n\r\n\t// Set config\r\n\tif (classError) {\r\n\t\tchart.raiseCriticalError(classError);\r\n\t}\r\n\telse {\r\n\t\tchart.config = config;\r\n\t}\r\n\r\n\treturn chart;\r\n\r\n}\r\n\r\n/**\r\n * Applies a theme to System, and subsequently all chart instances created\r\n * from that point forward.\r\n *\r\n * amCharts supports multiple themes. Calling `useTheme` multiple times will\r\n * make the System apply multiple themes, rather than overwrite previously\r\n * set one.\r\n *\r\n * This enables combining features from multiple themes on the same chart.\r\n * E.g.:\r\n *\r\n * ```TypeScript\r\n * amcharts4.useTheme(amcharts4.themes.material);\r\n * amcharts4.useTheme(amcharts4.themes.animated);\r\n * ```\r\n * ```JavaScript\r\n * amcharts4.useTheme(amcharts4.themes.material);\r\n * amcharts4.useTheme(amcharts4.themes.animated);\r\n * ```\r\n *\r\n * The above will apply both the Material color and animation options to all\r\n * charts created.\r\n *\r\n * @param {ITheme}  value  A reference to a theme\r\n */\r\nexport function useTheme(value: ITheme): void {\r\n\tsystem.themes.push(value);\r\n}\r\n\r\n/**\r\n * Removes a theme from \"active themes\" list, so it won't get applied to any\r\n * charts created subsequently.\r\n * \r\n * @param {ITheme}  value  A reference to a theme\r\n */\r\nexport function unuseTheme(value: ITheme): void {\r\n\t$array.remove(system.themes, value);\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DEPRECATED FUNCTIONS\r\n * @todo Review and remove\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns element's width.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {HTMLElement}  element  Element\r\n * @return {number}                Width (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function width(element: HTMLElement): number {\r\n\treturn element.clientWidth;\r\n}\r\n\r\n/**\r\n * Returns element's height.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {HTMLElement}  element  Element\r\n * @return {number}                Height (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function height(element: HTMLElement): number {\r\n\treturn element.clientHeight;\r\n}\r\n\r\n/**\r\n * Returns number of decimals\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {number}  number  Input number\r\n * @return {number}          Number of decimals\r\n */\r\nexport function decimalPlaces(number: number): number {\r\n\tvar match = ('' + number).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n\tif (!match) { return 0; }\r\n\treturn Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\r\n}\r\n"]}