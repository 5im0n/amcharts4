{"version":3,"file":"Math.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Math.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * A collection of Math-related functions\r\n *\r\n * @todo Comment trigonometric functions?\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { IRange } from \"../defs/IRange\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport const PI = Math.PI;\r\nexport const HALFPI = PI / 2;\r\nexport const RADIANS = PI / 180;\r\nexport const DEGREES = 180 / PI;\r\n\r\n/**\r\n * Rounds the numeric value to whole number or specific precision of set.\r\n *\r\n * @param  {number} value      Value\r\n * @param  {number} precision  Precision (number of decimal points)\r\n * @return {number}            Rounded value\r\n */\r\nexport function round(value: number, precision?: number): number {\r\n\tif (!$type.isNumber(precision) || precision <= 0) {\r\n\t\treturn Math.round(value);\r\n\t}\r\n\telse {\r\n\t\tlet d: number = Math.pow(10, precision);\r\n\t\treturn Math.round(value * d) / d;\r\n\t}\r\n}\r\n\r\n/**\r\n * Stretches `t` so that it will always be between `from` and `to`.\r\n *\r\n * @param  {number} t     Number from 0 to 1\r\n * @param  {number} from  Lowest possible value\r\n * @param  {number} to    Highest possible value\r\n * @return {number}       Adjusted value\r\n */\r\nexport function stretch(t: number, from: number, to: number): number {\r\n\treturn (t * (to - from)) + from;\r\n}\r\n\r\n\r\n/**\r\n * Adjust numeric value so it fits to specific value range.\r\n *\r\n * @param  {number} value     Value\r\n * @param  {number} minValue  Lowest possible value\r\n * @param  {number} maxValue  Highest possible value\r\n * @return {number}           Adjusted value\r\n */\r\nexport function fitToRange(value: number, minValue: number, maxValue: number): number {\r\n\tif (maxValue < minValue) {\r\n\t\tlet temp = maxValue;\r\n\t\tmaxValue = minValue;\r\n\t\tminValue = temp;\r\n\t}\r\n\r\n\tif (value < minValue) {\r\n\t\tvalue = minValue;\r\n\t}\r\n\r\n\tif (value > maxValue) {\r\n\t\tvalue = maxValue;\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Returns sine of a number.\r\n *\r\n * @param  {number} value  Value\r\n * @return {number}        Sine\r\n */\r\nexport function sin(value: number): number {\r\n\treturn round(Math.sin(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns tan of a number.\r\n *\r\n * @param  {number} value  Value\r\n * @return {number}        Sine\r\n */\r\nexport function tan(value: number): number {\r\n\treturn round(Math.tan(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns cosine of a number.\r\n *\r\n * @param  {number} value  Value\r\n * @return {number}        Cosine\r\n */\r\nexport function cos(value: number): number {\r\n\treturn round(Math.cos(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns biggest value out of passed in numeric values.\r\n *\r\n * @param  {number}  left   Numeric value\r\n * @param  {number}  right  Numeric value\r\n * @return {number}         Biggest value\r\n */\r\nexport function max(left: number, right: number): number;\r\nexport function max(left: number, right: $type.Optional<number>): number;\r\nexport function max(left: $type.Optional<number>, right: number): number;\r\nexport function max(left: $type.Optional<number>, right: $type.Optional<number>): $type.Optional<number>;\r\nexport function max(left: any, right: any): any {\r\n\tif ($type.isNumber(left)) {\r\n\t\tif ($type.isNumber(right)) {\r\n\t\t\tif (right > left) {\r\n\t\t\t\treturn right;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn left;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn left;\r\n\t\t}\r\n\r\n\t} else if ($type.isNumber(right)) {\r\n\t\treturn right;\r\n\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns smallest value out of passed in numeric values.\r\n *\r\n * @param  {number}  left   Numeric value\r\n * @param  {number}  right  Numeric value\r\n * @return {number}         Smallest value\r\n */\r\nexport function min(left: number, right: number): number;\r\nexport function min(left: number, right: $type.Optional<number>): number;\r\nexport function min(left: $type.Optional<number>, right: number): number;\r\nexport function min(left: $type.Optional<number>, right: $type.Optional<number>): $type.Optional<number>;\r\nexport function min(left: any, right: any): any {\r\n\tif ($type.isNumber(left)) {\r\n\t\tif ($type.isNumber(right)) {\r\n\t\t\tif (right < left) {\r\n\t\t\t\treturn right;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn left;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn left;\r\n\t\t}\r\n\r\n\t} else if ($type.isNumber(right)) {\r\n\t\treturn right;\r\n\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns the closest value from the array of values to the reference value.\r\n *\r\n * @param  {number[]}  values  Array of values\r\n * @param  {number}    value   Reference value\r\n * @return {number}            Closes value from the array\r\n */\r\nexport function closest(values: number[], referenceValue: number): number {\r\n\treturn values.reduce(function(prev, curr) {\r\n\t\treturn (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);\r\n\t});\r\n}\r\n\r\n/**\r\n * Checks whether two ranges of values intersect.\r\n *\r\n * @param {IRange}    range1  Range 1\r\n * @param {IRange}    range2  Range 2\r\n * @return {boolean}          Any intersecting numbers?\r\n */\r\nexport function intersect(range1: IRange, range2: IRange): boolean {\r\n\tlet start1: number = $type.getValue(range1.start);\r\n\tlet start2: number = $type.getValue(range2.start);\r\n\tlet end1: number = $type.getValue(range1.end);\r\n\tlet end2: number = $type.getValue(range2.end);\r\n\r\n\treturn Math.max(start1, start2) <= Math.min(end1, end2);\r\n}\r\n\r\n/**\r\n * Inverts the range of values.\r\n *\r\n * @param {IRange}  range  Range\r\n */\r\nexport function invertRange(range: IRange) {\r\n\tlet start: number = $type.getValue(range.start);\r\n\tlet end: number = $type.getValue(range.end);\r\n\treturn { start: 1 - end, end: 1 - start };\r\n}\r\n\r\n/**\r\n * Returns an intersection range between two ranges of values.\r\n *\r\n * @param  {IRange}  range1  Range 1\r\n * @param  {IRange}  range2  Range 2\r\n * @return {IRange}          Intersecting value range\r\n */\r\nexport function intersection(range1: IRange, range2: IRange): $type.Optional<IRange> {\r\n\tlet start1: number = $type.getValue(range1.start);\r\n\tlet start2: number = $type.getValue(range2.start);\r\n\tlet end1: number = $type.getValue(range1.end);\r\n\tlet end2: number = $type.getValue(range2.end);\r\n\r\n\tlet startMin: number = Math.min(start1, start2);\r\n\tlet startMax: number = Math.max(start1, start2);\r\n\r\n\tlet endMin: number = Math.min(end1, end2);\r\n\tlet endMax: number = Math.max(end1, end2);\r\n\r\n\tif (endMin < startMax) {\r\n\t\treturn undefined;\r\n\t}\r\n\telse {\r\n\t\treturn { start: startMax, end: endMin };\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns pixel \"distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param  {IPoint}  point1  Point 1\r\n * @param  {IPoint}  point2  Point 2\r\n * @return {number}          Distance in relative pixels\r\n */\r\nexport function getDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\r\n}\r\n\r\n/**\r\n * Returns scale based on original and end position of the two points.\r\n *\r\n * @param  {IPoint}  point1       Current position of point 1\r\n * @param  {IPoint}  startPoint1  Start position of point 1\r\n * @param  {IPoint}  point2       Current position of point 1\r\n * @param  {IPoint}  startPoint2  Start position of point 2\r\n * @return {number}  Scale        Calculated scale\r\n */\r\nexport function getScale(point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): number {\r\n\tlet initialDistance: number = getDistance(startPoint1, startPoint2);\r\n\tlet currentDistance: number = getDistance(point1, point2);\r\n\r\n\treturn Math.abs(currentDistance / initialDistance);\r\n}\r\n\r\n/**\r\n * Returns an exact mid point between two points.\r\n *\r\n * @param  {IPoint}  point1     Position of point 1\r\n * @param  {IPoint}  point2     Position of point 2\r\n * @return {IPoint}  Mid point  Position of mid-point\r\n */\r\nexport function getMidPoint(point1: IPoint, point2: IPoint, position?: number): IPoint {\r\n\tif (!$type.isNumber(position)) {\r\n\t\tposition = 0.5;\r\n\t}\r\n\r\n\treturn {\r\n\t\t\"x\": (point1.x + (point2.x - point1.x) * position),\r\n\t\t\"y\": (point1.y + (point2.y - point1.y) * position)\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns difference in angles between starting and ending position of two\r\n * vectors.\r\n *\r\n * @param  {IPoint}  point1       Current position of point 1\r\n * @param  {IPoint}  startPoint1  Start position of point 1\r\n * @param  {IPoint}  point2       Current position of point 1\r\n * @param  {IPoint}  startPoint2  Start position of point 2\r\n * @return {number}               Angle difference in degrees\r\n */\r\nexport function getRotation(point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): number {\r\n\r\n\t// Get start and end angles\r\n\tlet startAngle: number = getAngle(startPoint1, startPoint2);\r\n\tlet angle: number = getAngle(point1, point2);\r\n\r\n\t// Calculate angle\r\n\tlet diff: number = startAngle - angle;\r\n\tif (diff < 0) {\r\n\t\tdiff += 360;\r\n\t}\r\n\r\n\treturn diff;\r\n}\r\n\r\n/**\r\n * Calculates angle of the vector based on two or one point.\r\n *\r\n * @param  {IPoint}  point1  Point 1\r\n * @param  {IPoint}  point2  Point 2\r\n * @return {number}          Angle in degrees\r\n */\r\nexport function getAngle(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: point1.x * 2, y: point1.y * 2 };\r\n\t}\r\n\tlet diffX: number = point2.x - point1.x;\r\n\tlet diffY: number = point2.y - point1.y;\r\n\tlet angle: number = Math.atan2(diffY, diffX) * DEGREES;\r\n\tif (angle < 0) {\r\n\t\tangle += 360;\r\n\t}\r\n\treturn normalizeAngle(angle);\r\n}\r\n\r\n/**\r\n * Returns the shift in coordinates of the center when item is rotated, moved\r\n * and scaled at the same time.\r\n *\r\n * @param  {IPoint}  center       Current center\r\n * @param  {IPoint}  point1       Frst reference point\r\n * @param  {IPoint}  startPoint1  Original position of the first reference point\r\n * @param  {IPoint}  point2       Second reference point\r\n * @param  {IPoint}  startPoint2  Original position of the first reference point\r\n * @return {IPoint}               Shift in center point coordinates\r\n */\r\nexport function getCenterShift(center: IPoint, point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): IPoint {\r\n\r\n\t// Get angle\r\n\tlet angle: number = getRotation(point1, startPoint1, point2, startPoint2) - 90;\r\n\tif (angle < 0) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\t// Get distance between new position\r\n\tlet distance: number = getDistance(point1, point2);\r\n\r\n\t// Calculate new X\r\n\tlet l: number = 1;\r\n\tif ((angle > 90) && (angle < 270)) {\r\n\t\tl = -1;\r\n\t}\r\n\t//console.log(angle, l);\r\n\tlet x: number = Math.cos(angle) / distance + point1.x;\r\n\tlet y: number = Math.cos(angle) / distance + point1.y;\r\n\t//console.log(x, y)\r\n\r\n\tlet shift: IPoint = {\r\n\t\t\"x\": x - center.x,\r\n\t\t\"y\": y - center.y\r\n\t}\r\n\treturn shift;\r\n}\r\n\r\n/**\r\n * Converts an array of points into a bounding box rectangle.\r\n *\r\n * Array can contain any number of points.\r\n *\r\n * @param  {IPoint[]}              points  Points\r\n * @return {Optional<IRectangle>}          Bounding box rectangle\r\n */\r\nexport function getBBox(points: IPoint[]): $type.Optional<IRectangle> {\r\n\tif (points) {\r\n\t\tlet length = points.length;\r\n\r\n\t\tif (length !== 0) {\r\n\t\t\tlet left!: number;\r\n\t\t\tlet right!: number;\r\n\t\t\tlet top!: number;\r\n\t\t\tlet bottom!: number;\r\n\r\n\t\t\tfor (let i: number = 0; i < length; i++) {\r\n\t\t\t\tlet point: IPoint = points[i];\r\n\r\n\t\t\t\tif (!$type.isNumber(right) || (point.x > right)) {\r\n\t\t\t\t\tright = point.x;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(left) || (point.x < left)) {\r\n\t\t\t\t\tleft = point.x;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(top) || (point.y < top)) {\r\n\t\t\t\t\ttop = point.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(bottom) || (point.y > bottom)) {\r\n\t\t\t\t\tbottom = point.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn { x: left, y: top, width: right - left, height: bottom - top };\r\n\t\t}\r\n\t}\r\n\r\n\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n}\r\n\r\n/**\r\n * Returns a [[IRectangle]] object representing a common rectangle that fits\r\n * all passed in rectangles in it.\r\n *\r\n * @param {IRectangle[]}           rectangles  An array of rectangles\r\n * @return {Optional<IRectangle>}              Common rectangle\r\n */\r\nexport function getCommonRectangle(rectangles: IRectangle[]): $type.Optional<IRectangle> {\r\n\tlet length = rectangles.length;\r\n\r\n\tif (length !== 0) {\r\n\t\tlet minX!: number;\r\n\t\tlet minY!: number;\r\n\t\tlet maxX!: number;\r\n\t\tlet maxY!: number;\r\n\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tlet rectangle = rectangles[i];\r\n\t\t\tminX = min(rectangle.x, minX);\r\n\t\t\tminY = min(rectangle.y, minY);\r\n\t\t\tmaxX = max(rectangle.x + rectangle.width, maxX);\r\n\t\t\tmaxY = max(rectangle.y + rectangle.height, maxY);\r\n\t\t}\r\n\r\n\t\treturn { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\r\n\t}\r\n}\r\n\r\n/**\r\n * [getPointOnQuadraticCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {IPoint}  pointA        [description]\r\n * @param  {IPoint}  pointB        [description]\r\n * @param  {IPoint}  controlPoint  [description]\r\n * @param  {number}  position      [description]\r\n * @return {IPoint}                [description]\r\n */\r\nexport function getPointOnQuadraticCurve(pointA: IPoint, pointB: IPoint, controlPoint: IPoint, position: number): IPoint {\r\n\tlet x: number = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\r\n\tlet y: number = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n/**\r\n * [getPointOnCubicCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {IPoint}  pointA         [description]\r\n * @param  {IPoint}  pointB         [description]\r\n * @param  {IPoint}  controlPointA  [description]\r\n * @param  {IPoint}  controlPointB  [description]\r\n * @param  {number}  position       [description]\r\n * @return {IPoint}                 [description]\r\n */\r\nexport function getPointOnCubicCurve(pointA: IPoint, pointB: IPoint, controlPointA: IPoint, controlPointB: IPoint, position: number): IPoint {\r\n\tlet point: IPoint = { x: 0, y: 0 };\r\n\tlet mt1: number = 1 - position;\r\n\tlet mt2: number = mt1 * mt1;\r\n\tlet mt3: number = mt2 * mt1;\r\n\r\n\tpoint.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\r\n\tpoint.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\r\n\r\n\treturn point;\r\n}\r\n\r\n/**\r\n * [getCubicControlPointA description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {IPoint}  p0        [description]\r\n * @param  {IPoint}  p1        [description]\r\n * @param  {IPoint}  p2        [description]\r\n * @param  {IPoint}  p3        [description]\r\n * @param  {number}  tensionX  [description]\r\n * @param  {number}  tensionY  [description]\r\n * @return {IPoint}            [description]\r\n */\r\nexport function getCubicControlPointA(p0: IPoint, p1: IPoint, p2: IPoint, p3: IPoint, tensionX: number, tensionY: number): IPoint {\r\n\ttensionX = adjustTension(tensionX);\r\n\ttensionY = adjustTension(tensionY);\r\n\treturn { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };\r\n}\r\n\r\n/**\r\n * [getCubicControlPointB description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {IPoint}  p0        [description]\r\n * @param  {IPoint}  p1        [description]\r\n * @param  {IPoint}  p2        [description]\r\n * @param  {IPoint}  p3        [description]\r\n * @param  {number}  tensionX  [description]\r\n * @param  {number}  tensionY  [description]\r\n * @return {IPoint}            [description]\r\n */\r\nexport function getCubicControlPointB(p0: IPoint, p1: IPoint, p2: IPoint, p3: IPoint, tensionX: number, tensionY: number): IPoint {\r\n\ttensionX = adjustTension(tensionX);\r\n\ttensionY = adjustTension(tensionY);\r\n\treturn { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };\r\n}\r\n\r\n/**\r\n * [adjustTension description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number}  tension  [description]\r\n * @return {number}           [description]\r\n */\r\nexport function adjustTension(tension: number): number {\r\n\treturn 1 - tension + 0.00001;\r\n}\r\n\r\n/**\r\n * [normalizeAngle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number}  value  [description]\r\n * @return {number}         [description]\r\n */\r\nexport function normalizeAngle(value: number): number {\r\n\tif (value == 360) {\r\n\t\treturn 360;\r\n\t}\r\n\treturn value % 360;\r\n}\r\n\r\n\r\n\r\n/**\r\n * [normalizeAngleToRange description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\r\n * @param {number}   value       [description]\r\n * @param {number}   startAngle  [description]\r\n * @param {number}   endAngle    [description]\r\n * @return {number}              [description]\r\n */\r\nexport function fitAngleToRange(value: number, startAngle: number, endAngle: number): number {\r\n\r\n\tif (startAngle > endAngle) {\r\n\t\tlet temp: number = startAngle;\r\n\t\tstartAngle = endAngle;\r\n\t\tendAngle = temp;\r\n\t}\r\n\r\n\tvalue = normalizeAngle(value);\r\n\r\n\tlet count = (startAngle - normalizeAngle(startAngle)) / 360;\r\n\r\n\tif(value < startAngle){\r\n\t\tvalue += 360 * (count + 1);\r\n\t}\r\n\r\n\tlet maxEnd: number = startAngle + (endAngle - startAngle) / 2 + 180;\r\n\tlet maxStart: number = startAngle + (endAngle - startAngle) / 2 - 180;\r\n\r\n\tif (value > endAngle) {\r\n\r\n\t\tif (value - 360 > startAngle) {\r\n\t\t\tvalue -= 360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (value < maxEnd) {\r\n\t\t\t\tvalue = endAngle;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (value < startAngle) {\r\n\t\tif (value > maxStart) {\r\n\t\t\tvalue = startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue = endAngle;\r\n\t\t}\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\r\n * center is at the circle center.\r\n *\r\n * Used to find out max radius of an arc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {number}      startAngle  Start angle\r\n * @param  {number}      endAngle    End angle\r\n * @param  {number}      radius    \t Relative radius\r\n * @return {IRectangle}              Rectangle\r\n */\r\nexport function getArcRect(startAngle: number, endAngle: number, radius?: number): IRectangle {\r\n\t// do not normalize here!\r\n\t//startAngle = normalizeAngle(startAngle);\r\n\t//endAngle = normalizeAngle(endAngle);\r\n\r\n\tif (!$type.isNumber(radius)) {\r\n\t\tradius = 1;\r\n\t}\r\n\r\n\tif (startAngle == endAngle) {\r\n\t\tendAngle += 360;\r\n\t}\r\n\r\n\tif (startAngle > endAngle) {\r\n\t\tlet temp = endAngle;\r\n\t\tendAngle = startAngle;\r\n\t\tstartAngle = temp;\r\n\t}\r\n\r\n\tlet minX!: number;\r\n\tlet maxX!: number;\r\n\tlet minY!: number;\r\n\tlet maxY!: number;\r\n\r\n\tfor (let angle = startAngle; angle < endAngle; angle += 0.1) {\r\n\t\tminX = min(cos(angle) * radius, minX);\r\n\t\tmaxX = max(cos(angle) * radius, maxX);\r\n\t\tminY = min(sin(angle) * radius, minY);\r\n\t\tmaxY = max(sin(angle) * radius, maxY);\r\n\t}\r\n\r\n\treturn { x: minX, y: minY, width: (maxX - minX), height: (maxY - minY) };\r\n}\r\n\r\n/**\r\n * Returns true if a point is within rectangle\r\n *\r\n * @param  {IPoint}      point\r\n * @param  {IRectangle}  rectangle \r\n * @return {boolean} \r\n */\r\nexport function isInRectangle(point:IPoint, rectangle:IRectangle):boolean{\r\n\tif(point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y > rectangle.y && point.y < rectangle.y + rectangle.height){\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/*\r\nexport function getLineIntersection(pointA1: IPoint, pointA2: IPoint, pointB1: IPoint, pointB2: IPoint) {\r\n\tlet x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n\tlet y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) /((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n\treturn { x: x, y: y };\r\n}\r\n*/"]}