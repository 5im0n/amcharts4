{"version":3,"file":"Percent.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Percent.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAC5C,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;AAE9B;;;;;GAKG;AAEH;;GAEG;AACH;IASC;;;;OAIG;IACH,iBAAY,OAAe;QAC1B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;IACvB,CAAC;IAuBD,sBAAW,0BAAK;QArBhB;;;;;;;;;;;;;;;;;;;;WAoBG;aACH;YACC,OAAO,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAC1B,CAAC;;;OAAA;IAOD,sBAAW,4BAAO;QALlB;;;;WAIG;aACH;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;;;OAAA;IAUF,cAAC;AAAD,CAAC,AA5DD,IA4DC","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { percent, isPercent } from \"./Type\";\r\nexport { percent, isPercent };\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a relative value. (percent)\r\n */\r\nexport class Percent {\r\n\r\n\t/**\r\n\t * Value in percent.\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tprotected _value: number;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t * \r\n\t * @param {number}  percent  Percent value\r\n\t */\r\n\tconstructor(percent: number) {\r\n\t\tthis._value = percent;\r\n\t}\r\n\r\n\t/**\r\n\t * Relative value.\r\n\t *\r\n\t * E.g. 100% is 1, 50% is 0.5, etc.\r\n\t *\r\n\t * This is useful to apply transformations to other values. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let value = 256;\r\n\t * let percent = new amcharts4.Percent(50);\r\n\t * console.log(value * percent.value); // outputs 128\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var value = 256;\r\n\t * var percent = new amcharts4.Percent(50);\r\n\t * console.log(value * percent.value); // outputs 128\r\n\t * ```\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Relative value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this._value / 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Value in percent.\r\n\t * \r\n\t * @return {number} Percent\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/*public toString(): string {\r\n\t\treturn \"\" + this._value + \"%\";\r\n\t}\r\n\r\n\tpublic toNumber(): number {\r\n\t\treturn this.percent;\r\n\t}*/\r\n\r\n}"]}