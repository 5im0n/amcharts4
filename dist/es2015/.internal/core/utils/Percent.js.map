{"version":3,"file":"Percent.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Percent.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAC5C,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;AAE9B;;;;;GAKG;AAEH;;GAEG;AACH;IASC;;;;OAIG;IACH,iBAAY,OAAe;QAC1B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;IACvB,CAAC;IAuBD,sBAAW,0BAAK;QArBhB;;;;;;;;;;;;;;;;;;;;WAoBG;aACH;YACC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAC1B,CAAC;;;OAAA;IAOD,sBAAW,4BAAO;QALlB;;;;WAIG;aACH;YACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;;;OAAA;IAUF,cAAC;AAAD,CAAC,AA5DD,IA4DC","sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { percent, isPercent } from \"./Type\";\nexport { percent, isPercent };\n\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Represents a relative value. (percent)\n */\nexport class Percent {\n\n\t/**\n\t * Value in percent.\n\t * \n\t * @type {number}\n\t */\n\tprotected _value: number;\n\n\t/**\n\t * Constructor.\n\t * \n\t * @param {number}  percent  Percent value\n\t */\n\tconstructor(percent: number) {\n\t\tthis._value = percent;\n\t}\n\n\t/**\n\t * Relative value.\n\t *\n\t * E.g. 100% is 1, 50% is 0.5, etc.\n\t *\n\t * This is useful to apply transformations to other values. E.g.:\n\t *\n\t * ```TypeScript\n\t * let value = 256;\n\t * let percent = new amcharts4.Percent(50);\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t * ```JavaScript\n\t * var value = 256;\n\t * var percent = new amcharts4.Percent(50);\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t *\n\t * @readonly\n\t * @return {number} Relative value\n\t */\n\tpublic get value(): number {\n\t\treturn this._value / 100;\n\t}\n\n\t/**\n\t * Value in percent.\n\t * \n\t * @return {number} Percent\n\t */\n\tpublic get percent(): number {\n\t\treturn this._value;\n\t}\n\n\t/*public toString(): string {\n\t\treturn \"\" + this._value + \"%\";\n\t}\n\n\tpublic toNumber(): number {\n\t\treturn this.percent;\n\t}*/\n\n}"]}