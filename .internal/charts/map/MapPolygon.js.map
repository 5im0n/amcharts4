{"version":3,"file":"MapPolygon.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/map/MapPolygon.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { system } from \"../../core/System\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n * \r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonProperties}\r\n\t */\r\n\tpublic _properties: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonAdapters}\r\n\t */\r\n\tpublic _adapter: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t * \r\n\t * @type {SpriteEventDispatcher<AMEvent<MapPolygon, IMapPolygonEvents>>} Event dispatcher instance\r\n\t */\r\n\tpublic events: SpriteEventDispatcher<AMEvent<MapPolygon, IMapPolygonEvents>>;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t * \r\n\t * @type {Polygon}\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t * \r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\t/*this.events.on(\"focus\", (event) => {\r\n\t\t\t//this.toFront();\r\n\t\t\t//this.isFocused = true;\r\n\t\t});*/\r\n\r\n\t\tthis.tooltipPosition = \"mouse\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t * \r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\r\n\t\t\tthis.series.fillRule(this);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this \r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's horizontal overflow in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Overflow (px)\r\n\t */\r\n\tpublic get overflowX(): number {\r\n\t\treturn this.polygon.overflowX;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's vertical overflow in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Overflow (px)\r\n\t */\r\n\tpublic get overflowY(): number {\r\n\t\treturn this.polygon.overflowY;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nsystem.registeredClasses[\"MapPolygon\"] = MapPolygon;"]}