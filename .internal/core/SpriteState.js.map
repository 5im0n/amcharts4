{"version":3,"file":"SpriteState.js","sourceRoot":"","sources":["../../../../src/.internal/core/SpriteState.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module contains functionality related to [[Sprite]] states.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"./Base\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { ListTemplate, ListDisposer } from \"./utils/List\";\r\nimport { Filter } from \"./rendering/filters/Filter\";\r\nimport { Sprite, ISpriteProperties } from \"./Sprite\";\r\nimport { ShapeRendering } from \"./defs/ShapeRendering\";\r\nimport { HorizontalCenter } from \"./defs/HorizontalCenter\";\r\nimport { VerticalCenter } from \"./defs/VerticalCenter\";\r\nimport { VerticalAlign } from \"./defs/VerticalAlign\";\r\nimport { Align } from \"./defs/Align\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\n\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $ease from \"./utils/Ease\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n/**\r\n * Defines a state for [[Sprite]].\r\n *\r\n * A \"state\" is a special object that has all the same properties as the\r\n * [[Sprite]] of the same type, and which can be used to quickly apply a set\r\n * of property values. (set state)\r\n *\r\n * When [[Sprite]] (or any object that extends Sprite) is created it creates a\r\n * \"default\" state. You can modify the \"default\" state so that when the Sprite\r\n * returns to default state certain properties are added.\r\n *\r\n * Default state can be accessed using Sprite's `defaultState` getter.\r\n *\r\n * ```\r\n * sprite.defaultState.fillOpacity = 0.5;\r\n * ```\r\n *\r\n * If Sprite is \"hoverable\", it automatically adds a \"hover\" state, which is\r\n * applied when it has a cursor over it.\r\n *\r\n * ```\r\n * let hoverstate = sprite.states.create(\"hover\");\r\n * hoverstate.fillOpacity = 1;\r\n * ```\r\n *\r\n * The above will automatically apply \"hover\" state when the Sprite is hovered,\r\n * thus will set its `fillOpacity` property to 1, and will reset it to 0.5 when\r\n * it's no longer hovered.\r\n *\r\n * Every object that inherits from [[Sprite]] can and will add their own\r\n * properties to the available list.\r\n *\r\n * User can create their own states, and apply them as needed:\r\n *\r\n * ```\r\n * let myCustomState = sprite.states.create(\"mystate\");\r\n * myCustomState.fillOpacity = 0.5;\r\n * myCustomState.strokeOpacity = 0.8;\r\n * sprite.setState(\"mystate\");\r\n * ```\r\n *\r\n * @see {@link SpriteState}\r\n * @important\r\n */\r\nexport class SpriteState<P, A> extends BaseObject {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ISpriteProperties}\r\n\t */\r\n\tpublic _properties: P;\r\n\r\n\t/**\r\n\t * Defines adapter types.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SpriteAdapters}\r\n\t */\r\n\tpublic _adapter: A;\r\n\r\n\t/**\r\n\t * Title of the state, i.e. \"default\", \"hidden\", etc.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpublic name: string;\r\n\r\n\t/**\r\n\t * Reference to [[Sprite]] element this State is for.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic sprite: Sprite;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t *\r\n\t * @type {Adapter<Sprite, SpriteAdapters>}\r\n\t */\r\n\tpublic adapter = new Adapter<this, A>(this);\r\n\r\n\t/**\r\n\t * Duration of the transition to this state. 0 means instantenous transition.\r\n\t * Any number means the [[Sprite]] will transit smoothly to this state,\r\n\t * animating all animatable properties.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic transitionDuration: number = 0;\r\n\r\n\t/**\r\n\t * Easing function to use when transitioning to this state.\r\n\t *\r\n\t * @see {@link Ease}\r\n\t * @type {(number) => number}\r\n\t */\r\n\tpublic easing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Collection of properties and their values that should be applied to [[Sprite]]\r\n\t * when switching to this State.\r\n\t *\r\n\t * The property values set on a [[SpriteState]] will override the ones set\r\n\t * directly on a [[Sprite]].\r\n\t *\r\n\t * @type {Dictionary<string, any>}\r\n\t */\r\n\tpublic properties: P = <P>{};\r\n\r\n\t/**\r\n\t * A collection of key/value pairs that can be used to bind specific Sprite\r\n\t * properties to [[DataItem]].\r\n\t *\r\n\t * For example: `fill` property can be bound to `myCustomColor` field in\r\n\t * DataItem. The Sprite will automatically get the value for `fill` from its\r\n\t * DataItem.\r\n\t *\r\n\t * SpriteState-specific binding will override binding set directly on\r\n\t * [[Sprite]]. I.e. you can make Sprite use different fill color on hover by\r\n\t * adding a `fill` binding to a different DataItem key for Sprite's \"hover\"\r\n\t * state object.\r\n\t *\r\n\t * @see {@link Sprite}\r\n\t * @type {Object}\r\n\t */\r\n\tpublic propertyFields: {[index in keyof this[\"_properties\"]]?: string } = {};\r\n\t//public propertyFields: Dictionary<keyof this[\"_properties\"], string> = new Dictionary<keyof this[\"_properties\"], string>();;\r\n\r\n\t/**\r\n\t * A list of [[Filter]] elements to be applied to the relative [[Sprite]]\r\n\t * when switching to this State.\r\n\t *\r\n\t * @param {ListTemplate<Filter>}\r\n\t */\r\n\tpublic filters = new ListTemplate<Filter>(new Filter());\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SpriteState\";\r\n\r\n\t\t// Make filter list disposable\r\n\t\tthis._disposers.push(new ListDisposer(this.filters));\r\n\r\n\t\t// Decorate adapter with events so that we can apply its settings whenever\r\n\t\t// it is modified\r\n\t\tthis.adapter.events.on(\"insert\", (ev: any) => {\r\n\t\t\t(<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n\t\t});\r\n\t\tthis.adapter.events.on(\"remove\", (ev: any) => {\r\n\t\t\t(<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n\t\t});\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns [[Sprite]] element's property value.\r\n\t *\r\n\t * Will check if there are any bindings with [[DataItem]] and if there are\r\n\t * any method callbacks set up for the specific property.\r\n\t *\r\n\t * @param  {Properties}  propertyName  Property name\r\n\t * @return {any}                       Property value\r\n\t */\r\n\tpublic getPropertyValue<Key extends keyof P>(propertyName: Key): P[Key] {\r\n\t\tlet propValue: any = this.properties[propertyName];\r\n\t\tlet sprite: Sprite = this.sprite;\r\n\r\n\t\tlet fieldName: string = this.propertyFields[propertyName];\r\n\t\tif (sprite) {\r\n\t\t\tif ($type.hasValue(fieldName)) {\r\n\t\t\t\tif (sprite.dataItem) {\r\n\t\t\t\t\tpropValue = (<any>sprite.dataItem.dataContext)[fieldName];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Apply adapters\r\n\t\t\t// If the value itself is undefined, we're going to pass in Sprite's\r\n\t\t\t// value to adapters\r\n\t\t\t// @todo get rid of <any>\r\n\t\t\tif (!$type.hasValue(propValue)) {\r\n\t\t\t\tlet spriteValue = sprite.getPropertyValue(<any>propertyName);\r\n\t\t\t\tpropValue = this.adapter.apply(<any>propertyName, sprite.getPropertyValue(<any>propertyName));\r\n\t\t\t\tif (propValue == spriteValue) {\r\n\t\t\t\t\tpropValue = undefined;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tpropValue = this.adapter.apply(<any>propertyName, propValue)\r\n\t\t\t}\r\n\r\n\t\t\t/*let method = this.propertyMethods.getKey(propertyName);\r\n\t\t\tif (method) {\r\n\t\t\t\tpropValue = method(sprite, propertyName);\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\treturn propValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all property and style values from another [[SpriteState]] object.\r\n\t *\r\n\t * @param {SpriteState}  source  Source [[SpriteState]]\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tif (source != this) {\r\n\t\t\tthis.transitionDuration = source.transitionDuration;\r\n\t\t\tthis.easing = source.easing;\r\n\r\n\t\t\t$utils.copyProperties(source.properties, this.properties);\r\n\t\t\t$utils.copyProperties(source.propertyFields, this.propertyFields);\r\n\t\t\tthis.filters.copyFrom(source.filters);\r\n\t\t\tthis.adapter.copyFrom(source.adapter);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all values that should be applied by the SpriteState.\r\n\t *\r\n\t * It takes adapters into account.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {ISpriteProperties} Properties\r\n\t * @todo Add adapter values\r\n\t * @todo proper type this[\"_properties\"]\r\n\t */\r\n\tpublic get allValues(): P {\r\n\r\n\t\t// Init return value\r\n\t\tlet res: P = <P>{};\r\n\r\n\t\t// Apply adapters to all values\r\n\t\t$object.each(this.properties, (prop, value) => {\r\n\t\t\tres[prop] = this.getPropertyValue(prop);\r\n\t\t});\r\n\r\n\t\t// Cycle through all adapters and add values for missing properties\r\n\t\tlet keys = this.adapter.keys;\r\n\t\tfor (let x in keys) {\r\n\t\t\tlet prop = keys[x];\r\n\t\t\tlet value = this.getPropertyValue<any>(prop);\r\n\t\t\t(<any>res)[prop] = value;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the State to initial state - no values or Filters applied.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis.properties = <P>{};\r\n\t\tthis.filters.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif ($type.hasValue(config) && $type.hasValue(config[\"properties\"])) {\r\n\t\t\t$object.each(config[\"properties\"], (key, value) => {\r\n\t\t\t\tif($type.isString(value)) {\r\n\t\t\t\t\tif(value.match(/^[0-9.\\-]+\\%$/)) {\r\n\t\t\t\t\t\tconfig[\"properties\"][key] = $type.percent($type.toNumber(value));\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n\t\t\t\t\t\tconfig[\"properties\"][key] = $type.toColor(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}"]}