{"version":3,"file":"System.js","sourceRoot":"","sources":["../../../../src/.internal/core/System.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents, IBaseObjectEvents } from \"./Base\";\r\nimport { EventDispatcher, AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { Container } from \"./Container\";\r\nimport { SVGContainer } from \"./rendering/SVGContainer\";\r\nimport { Component } from \"./Component\";\r\nimport { Paper } from \"./rendering/Paper\";\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { raf } from \"./utils/AsyncPending\";\r\nimport { TextFormatter } from \"./formatters/TextFormatter\";\r\nimport { animations, IAnimationObject } from \"./utils/Animation\";\r\nimport { Tooltip } from \"./elements/Tooltip\";\r\nimport { Preloader } from \"./elements/Preloader\";\r\nimport { triggerIdle } from \"./utils/AsyncPending\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $dom from \"./utils/DOM\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $type from \"./utils/Type\";\r\nimport { percent } from \"./utils/Percent\";\r\nimport { FocusFilter } from \"./rendering/filters/FocusFilter\";\r\nimport { AmChartsLogo } from \"./elements/AmChartsLogo\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Define events available for [[System]]\r\n */\r\nexport interface ISystemEvents extends IBaseObjectEvents {\r\n\r\n\t/**\r\n\t * Invoked when update cycle starts. Before invalid elements are re-validated.\r\n\t */\r\n\tonenterframe: {};\r\n\r\n\t/**\r\n\t * Invoked when udpate cycle ends. After invalid elements have been\r\n\t * re-validated.\r\n\t */\r\n\tonexitframe: {};\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\r\nexport class System extends BaseObjectEvents {\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t *\r\n\t * @type {EventDispatcher}\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<System, ISystemEvents>>;\r\n\r\n\t/**\r\n\t * A [[Paper]] instance to create elements, that are not yet ready to be\r\n\t * placed in visible DOM.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Paper}\r\n\t */\r\n\tpublic ghostPaper: Paper;\r\n\r\n\t/**\r\n\t * All currently applied themes. All new chart instances created will\r\n\t * automatically inherit and retain System's themes.\r\n\t *\r\n\t * @type {ITheme}\r\n\t */\r\n\tpublic themes: ITheme[] = [];\r\n\r\n\t/**\r\n\t * List of all loaded available themes.\r\n\t *\r\n\t * Whenever a theme loads, it registers itself in System's `loadedThemes`\r\n\t * collection.\r\n\t */\r\n\tpublic loadedThemes: { [index: string]: ITheme } = {};\r\n\r\n\t/**\r\n\t * An indeternal counter used to generate unique IDs.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tprotected _uidCount: number = 0;\r\n\r\n\t/**\r\n\t * amCharts Version.\r\n\t *\r\n\t * This follows npm's semver specification.\r\n\t *\r\n\t * @see {@link https://docs.npmjs.com/misc/semver}\r\n\t * @type {string}\r\n\t */\r\n\tstatic VERSION: string = \"4.0.0-beta.1\";\r\n\r\n\t/**\r\n\t * Console output enabled.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic verbose: boolean = true;\r\n\r\n\t/**\r\n\t * A array of all SVG Containers (one SVG container per chart instance).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Array<SVGContainer>}\r\n\t */\r\n\tpublic svgContainers: Array<SVGContainer>;\r\n\r\n\t/**\r\n\t * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\r\n\t * during next cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Array<Sprite>}\r\n\t */\r\n\tpublic invalidSprites: Array<Sprite>;\r\n\r\n\t/**\r\n\t * Components are added to this list when their data provider changes to\r\n\t * a new one or data is added/removed from their data provider.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Array<Component>}\r\n\t */\r\n\tpublic invalidDatas: Array<Component>;\r\n\r\n\r\n\t/**\r\n\t * Components are added to this list when values of their raw data change.\r\n\t * Used when we want a smooth animation from one set of values to another.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Array<Component>}\r\n\t */\r\n\tpublic invalidRawDatas: Array<Component>;\r\n\r\n\t/**\r\n\t * Components are added to this list when values of their data changes\r\n\t * (but not data provider itself).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Array<Component>}\r\n\t */\r\n\tpublic invalidDataItems: Array<Component>;\r\n\r\n\t/**\r\n\t * Components are added to this list when their data range (selection) is\r\n\t * changed, e.g. zoomed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Array<Component>}\r\n\t */\r\n\tpublic invalidDataRange: Array<Component>;\r\n\r\n\t/**\r\n\t * A list of [[Sprite]] objects that have invalid(ated) positions, that need\r\n\t * to be recalculated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Array<Sprite>}\r\n\t */\r\n\tpublic invalidPositions: Array<Sprite>;\r\n\r\n\t/**\r\n\t * A list of [[Container]] objects with invalid(ated) layouts.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Array<Container>}\r\n\t */\r\n\tpublic invalidLayouts: Array<Container>;\r\n\r\n\t/**\r\n\t * Invalid sizes\r\n\t * @rodo Remove commented code\r\n\t */\r\n\t//public invalidSizes: Array<Sprite>;\r\n\r\n\t/**\r\n\t * Number of times per second charts will be updated.\r\n\t *\r\n\t * This means that each time an element is invalidated it will wait for the\r\n\t * next cycle to be re-validated, and possibly redrawn.\r\n\t *\r\n\t * This happens every `1000 / frameRate` milliseconds.\r\n\t *\r\n\t * Reducing this number may reduce the load on the CPU, but might slightly\r\n\t * reduce smoothness of the animations.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic frameRate: number = 60;\r\n\r\n\t/**\r\n\t * Number of times per second component container is measured.\r\n\t *\r\n\t * It is not wise to measure container as often as `frameRate`, as this would\r\n\t * use a lot of CPU when resizing window.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic measureRate: number = 10;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t * @private\r\n\t * @type {number}\r\n\t */\r\n\tpublic measureCounter: number = 0;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t * @private\r\n\t * @type {number}\r\n\t */\r\n\tpublic measureAt: number;\r\n\r\n\t/**\r\n\t * amCharts will add `class` property to some elements. All those class names\r\n\t * will be prefixed by `classNamePrefix`.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpublic classNamePrefix: string = \"amcharts-\";\r\n\r\n\t/**\r\n\t * Holds the global instancce to [[TextFormatter]].\r\n\t *\r\n\t * All classes and instances are to reuse this universal text formatter,\r\n\t * rather than create their own instance of it.\r\n\t *\r\n\t * @type {TextFormatter}\r\n\t */\r\n\tpublic textFormatter: TextFormatter;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @todo Needed?\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic dummyCounter: number = 0;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @todo Needed?\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic dummyCounter2: number = 0;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic time: number;\r\n\r\n\t/**\r\n\t * Keeps register of class references so that they can be instnatiated using\r\n\t * string key.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic registeredClasses: { [index: string]: any } = {};\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic commercialLicense:boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.events = new EventDispatcher();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs initialization of the System object.\r\n\t *\r\n\t * Called when the first [[Sprite]] object is created.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic init(): void {\r\n\r\n\t\tthis.svgContainers = [];\r\n\r\n\t\tthis.invalidPositions = [];\r\n\r\n\t\tthis.invalidSprites = [];\r\n\r\n\t\tthis.invalidDatas = [];\r\n\r\n\t\tthis.invalidRawDatas = [];\r\n\r\n\t\tthis.invalidDataRange = [];\r\n\r\n\t\tthis.invalidDataItems = [];\r\n\r\n\t\tthis.invalidLayouts = [];\r\n\r\n\t\tthis.textFormatter = new TextFormatter();\r\n\r\n\t\t// frame at which we should measure\r\n\t\tthis.measureAt = Math.round(this.frameRate / this.measureRate);\r\n\r\n\t\t// ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\r\n\t\tlet ghostDiv: HTMLDivElement = document.createElement(\"div\");\r\n\t\tghostDiv.hidden = true;\r\n\t\tdocument.body.appendChild(ghostDiv);\r\n\t\tlet ghostSvgContainer = new SVGContainer(ghostDiv);\r\n\t\tthis.ghostPaper = new Paper(ghostSvgContainer.SVGContainer);\r\n\t\tthis.ghostPaper.id = \"ghost\";\r\n\r\n\r\n\t\traf(() => {\r\n\t\t\tthis.update();\r\n\t\t});\r\n\r\n\t\tsystem.time = Date.now();\r\n\r\n\t\t// Create an id for system\r\n\t\tthis.uid;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a unique chart system-wide ID.\r\n\t *\r\n\t * @return {string} Generated ID\r\n\t */\r\n\tpublic getUniqueId(): string {\r\n\t\tlet uid = system._uidCount;\r\n\t\tsystem._uidCount += 1;\r\n\t\treturn \"id-\" + uid;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates all HTML and SVG containers needed for the chart instance, as well\r\n\t * as the new [[Sprite]] (as specified in `classType` parameter).\r\n\t *\r\n\t * @param  {Optional<HTMLElement | string>}  htmlElement  A container to creat elements in\r\n\t * @param  {T}                               classType    A class definition of the new element to create\r\n\t * @return {T}                                            Newly-created Sprite object\r\n\t */\r\n\tpublic createChild<T extends Sprite>(htmlElement: $type.Optional<HTMLElement | string>, classType: { new(): T; }): T {\r\n\t\tlet htmlContainer = $dom.getElement(htmlElement);\r\n\r\n\t\tif (htmlContainer) {\r\n\r\n\t\t\t// we need to create another div with position:absolute in order div elements added inside could be positioned relatively\r\n\t\t\t/*\r\n\t\t\tlet innerContainer = document.createElement(\"div\");\r\n\t\t\tlet style = innerContainer.style;\r\n\t\t\tstyle.width = \"100%\";\r\n\t\t\tstyle.height = \"100%\";\r\n\t\t\tstyle.position = \"relative\";\r\n*/\r\n\t\t\t//\thtmlContainer.appendChild(innerContainer);\r\n\r\n\t\t\tlet svgDiv = new SVGContainer(htmlContainer);\r\n\t\t\tlet paper = new Paper(svgDiv.SVGContainer);\r\n\t\t\tpaper.id = \"svg-\" + (system.svgContainers.length - 1);\r\n\r\n\t\t\t// the approach with masks is chosen because overflow:visible is set on SVG element in order tooltips could go outside\r\n\t\t\t// svg area - this is often needed when working with small charts.\r\n\r\n\t\t\t// main container which holds content container and tooltips container\r\n\t\t\tlet container = new Container();\r\n\t\t\tcontainer.htmlContainer = htmlContainer;\r\n\t\t\tcontainer.svgContainer = svgDiv.SVGContainer;\r\n\t\t\tcontainer.width = percent(100);\r\n\t\t\tcontainer.height = percent(100);\r\n\t\t\tcontainer.paper = paper;\r\n\t\t\t// this is set from parent container, but this one doesn't have, so do it manually.\r\n\t\t\tcontainer.relativeWidth = 1;\r\n\t\t\tcontainer.relativeHeight = 1;\r\n\r\n\t\t\tsvgDiv.container = container;\r\n\t\t\t// content container\r\n\t\t\t// setting mask directly on classType object would result mask to shift together with object transformations\r\n\t\t\tlet contentContainer = container.createChild(Container);\r\n\t\t\tcontentContainer.layout = \"absolute\";\r\n\t\t\tcontentContainer.width = percent(100);\r\n\t\t\tcontentContainer.height = percent(100);\r\n\r\n\t\t\t// content mask\r\n\t\t\tcontentContainer.mask = contentContainer.background;\r\n\r\n\t\t\t// creating classType instance\r\n\t\t\tlet sprite = contentContainer.createChild(classType);\r\n\t\t\tsprite.focusFilter = new FocusFilter();\r\n\r\n\t\t\t// tooltip container\r\n\t\t\tlet tooltipContainer: Container = container.createChild(Container);\r\n\t\t\ttooltipContainer.width = percent(100);\r\n\t\t\ttooltipContainer.height = percent(100);\r\n\r\n\t\t\tcontentContainer.tooltipContainer = tooltipContainer;\r\n\t\t\tsprite.tooltip = new Tooltip();\r\n\t\t\tsprite.tooltip.hide(0);\r\n\r\n\t\t\t//@todo: maybe we don't need to create one by default but only on request?\r\n\t\t\tcontentContainer.preloader = new Preloader();\r\n\r\n\t\t\tif(!this.commercialLicense){\r\n\t\t\t\tlet logo = contentContainer.createChild(AmChartsLogo);\r\n\t\t\t\tlogo.scale = 0.3;\r\n\t\t\t\tlogo.y = percent(100);\r\n\t\t\t\tlogo.verticalCenter = \"bottom\";\r\n\t\t\t\tlogo.tooltip = sprite.tooltip;\r\n\t\t\t}\r\n\r\n\t\t\tsprite.numberFormatter; // need to create one.\r\n\r\n\t\t\treturn sprite;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsystem.log(\"html container not found\");\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reports time elapsed since timer was reset.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Needed?\r\n\t * @param {string}   msg    Message to report in console\r\n\t * @param {boolean}  reset  Reset time counter\r\n\t */\r\n\tpublic reportTime(msg: string, reset?: boolean): void {\r\n\t\tif (system.dummyCounter < 6) {\r\n\t\t\t//console.log(Date.now() - system.time, msg, this.dummyCounter2);\r\n\t\t}\r\n\t\tif (reset) {\r\n\t\t\tsystem.time = Date.now();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n\t *\r\n\t * When the chart element is invalidated, it is not immediately redrawn.\r\n\t *\r\n\t * Instead it waits for the next `update()` cycle to be re-validated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic update(): void {\r\n\r\n\t\tthis.dispatchImmediately(\"onenterframe\");\r\n\r\n\t\tthis.measureCounter++;\r\n\t\tif (this.measureCounter >= this.measureAt) {\r\n\t\t\tthis.measureCounter = 0;\r\n\t\t\tthis.measure();\r\n\t\t}\r\n\r\n\t\tthis.reportTime(\"**********************\")\r\n\r\n\t\tthis.validateLayouts();\r\n\t\tthis.validatePositions();\r\n\r\n\t\t// data objects first - do all calculations\r\n\t\t// only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\r\n\t\t// important to go backwards, as items are removed!\r\n\t\t// TODO use iterator instead\r\n\t\twhile (this.invalidDatas.length > 0) {\r\n\t\t\tlet component: Component = this.invalidDatas[0];\r\n\t\t\tlet dataProvider: Component = component.dataProvider;\r\n\r\n\t\t\tif (dataProvider && dataProvider.dataInvalid) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdataProvider.validateData();\r\n\t\t\t\t\tif (dataProvider.dataValidationProgress < 1) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(this.invalidDatas, dataProvider);\r\n\t\t\t\t\tdataProvider.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateData();\r\n\t\t\t\t\tif (component.dataValidationProgress < 1) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(this.invalidDatas, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.reportTime(\"data\");\r\n\r\n\t\twhile (this.invalidRawDatas.length > 0) {\r\n\t\t\tlet component: Component = this.invalidRawDatas[0];\r\n\t\t\ttry {\r\n\t\t\t\tcomponent.validateRawData();\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\t$array.remove(this.invalidRawDatas, component);\r\n\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (this.invalidDataItems.length > 0) {\r\n\t\t\tlet component: Component = this.invalidDataItems[0];\r\n\r\n\t\t\tlet dataProvider: Component = component.dataProvider;\r\n\r\n\t\t\t// this is needed to avoid partial value validation when data is parsed in chunks\r\n\t\t\tif (component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataItems();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(this.invalidDataItems, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(system.invalidDataItems, component);\r\n\t\t}\r\n\r\n\t\tthis.reportTime(\"value\")\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (this.invalidDataRange.length > 0) {\r\n\t\t\tlet component: Component = this.invalidDataRange[0];\r\n\r\n\t\t\tlet dataProvider: Component = component.dataProvider;\r\n\r\n\t\t\tif (component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataRange();\r\n\t\t\t\t\tif (!component.skipRangeEvent) {\r\n\t\t\t\t\t\tcomponent.dispatchImmediately(\"datarangechanged\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcomponent.skipRangeEvent = false;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(this.invalidDataRange, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(system.invalidDataRange, component);\r\n\t\t}\r\n\r\n\t\tthis.reportTime(\"data elements \" + this.invalidSprites.length)\r\n\r\n\t\tlet skippedSprites: Sprite[] = [];\r\n\r\n\t\t// display objects later\r\n\t\t// TODO use iterator instead\r\n\t\twhile (this.invalidSprites.length > 0) {\r\n\t\t\tthis.validateLayouts();\r\n\t\t\tthis.validatePositions();\r\n\t\t\tlet sprite: Sprite = this.invalidSprites[this.invalidSprites.length - 1];\r\n\t\t\t// we need to check this, as validateLayout might validate sprite\r\n\r\n\t\t\tif (sprite && !sprite.isDisposed()) {\r\n\t\t\t\tif (sprite instanceof Component && (sprite.dataInvalid || (sprite.dataProvider && sprite.dataProvider.dataInvalid))) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// @todo? maybe we should only check if preloader is visible and render only preloader sprites?\r\n\t\t\t\t\t// if not, think how can we the next line better.\r\n\t\t\t\t\tif (sprite.renderingFrame > 1) {\r\n\t\t\t\t\t\tsprite.renderingFrame--;\r\n\t\t\t\t\t\tskippedSprites.push(sprite);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid) {\r\n\t\t\t\t\t\t// void\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tsprite.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t$array.remove(this.invalidSprites, sprite);\r\n\t\t\t\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// this might seem too much, but it's ok\r\n\t\t\t$array.remove(system.invalidSprites, sprite);\r\n\t\t}\r\n\r\n\t\tsystem.invalidSprites = skippedSprites;\r\n\r\n\t\tthis.reportTime(\" sprites validated\")\r\n\r\n\t\t// TODO make this more efficient\r\n\t\t// TODO don't copy the array\r\n\t\t$array.each(animations.slice(), (x) => {\r\n\t\t\tx.update();\r\n\t\t});\r\n\r\n\t\tthis.reportTime(\"anim\")\r\n\r\n\t\t// to avoid flicker, we validate positions last time\r\n\t\t//this.validateLayouts();\r\n\t\t//this.validatePositions();\r\n\r\n\t\ttriggerIdle();\r\n\r\n\t\tthis.reportTime(\"even\")\r\n\r\n\t\t// to avoid flicker, we validate positions last time\r\n\t\tthis.validateLayouts();\r\n\t\tthis.validatePositions();\r\n\r\n\t\tthis.dispatchImmediately(\"onexitframe\");\r\n\r\n\t\tsystem.dummyCounter++\r\n\r\n\t\traf(() => {\r\n\t\t\tthis.update();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Sprite]] elements that have\r\n\t * invalid(ated) positions.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validatePositions(): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\twhile (this.invalidPositions.length > 0) {\r\n\t\t\tlet sprite: Sprite = this.invalidPositions[this.invalidPositions.length - 1];\r\n\t\t\ttry {\r\n\t\t\t\tsprite.validatePosition();\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\t$array.remove(this.invalidPositions, sprite);\r\n\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Container]] elements that have\r\n\t * invalid(ated) layouts.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validateLayouts(): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\twhile (this.invalidLayouts.length > 0) {\r\n\t\t\tlet container: Container = this.invalidLayouts[this.invalidLayouts.length - 1];\r\n\t\t\ttry {\r\n\t\t\t\tcontainer.validateLayout();\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\t$array.remove(this.invalidLayouts, container);\r\n\t\t\t\tcontainer.raiseCriticalError(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)measures all top-level SVG containers for size.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic measure(): void {\r\n\t\t$array.each(this.svgContainers, (svgContainer) => {\r\n\t\t\tif (svgContainer.autoResize) {\r\n\t\t\t\tsvgContainer.measure();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets style property on DOM element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Still needed?\r\n\t */\r\n\tpublic setStyle(element: HTMLElement | SVGSVGElement, property: string, value: string): void {\r\n\t\t(<any>element.style)[property] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Outputs string to console if `verbose` is `true`.\r\n\t *\r\n\t * @param {any} value Message to output to console\r\n\t */\r\n\tpublic log(value: any): void {\r\n\t\tif (this.verbose) {\r\n\t\t\tif (console) {\r\n\t\t\t\tconsole.log(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a theme to System, and subsequently all chart instances created\r\n\t * from that point forward.\r\n\t *\r\n\t * amCharts supports multiple themes. Calling `useTheme` multiple times will\r\n\t * make the System apply multiple themes, rather than overwrite previously\r\n\t * set one.\r\n\t *\r\n\t * This enables combining features from multiple themes on the same chart.\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * amcharts4.system.useTheme(amcharts4.system.loadedThemes.material);\r\n\t * amcharts4.system.useTheme(amcharts4.system.loadedThemes.animated);\r\n\t * ```\r\n\t *\r\n\t * The above will apply both the Material color and animation options to all\r\n\t * charts created.\r\n\t *\r\n\t * @param {ITheme} value A reference to a theme\r\n\t */\r\n\tpublic useTheme(value: ITheme): void {\r\n\t\tthis.themes.push(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Get current theme\r\n\t * @return {ITheme} [description]\r\n\t */\r\n\t/*public get theme(): ITheme {\r\n\t\treturn $array.last(this.themes);\r\n\t}*/\r\n}\r\n\r\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should access this system variable, rather than instantiate their\r\n * own.\r\n */\r\nexport let system = new System();\r\n\r\n/**\r\n * Init the System just once\r\n */\r\nsystem.init();\r\n"]}