{"version":3,"file":"Base.js","sourceRoot":"","sources":["../../../../src/.internal/core/Base.ts"],"names":[],"mappings":"AAAA;;GAEG;;;;;;;;;;;AASH,OAAO,EAAE,IAAI,EAAe,YAAY,EAAE,MAAM,cAAc,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,oBAAoB,CAAC;AACpE,OAAO,EAAE,QAAQ,EAAa,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,eAAe,EAAW,MAAM,yBAAyB,CAAC;AACnE,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAOnD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAGtC,OAAO,KAAK,MAAM,MAAM,eAAe,CAAC;AAExC,OAAO,KAAK,OAAO,MAAM,gBAAgB,CAAC;AAC1C,OAAO,KAAK,KAAK,MAAM,cAAc,CAAC;AAEtC;;;GAGG;AACH;IA6GC,oDAAoD;IAEpD;;;OAGG;IACH;QAvGA;;;;;;;;WAQG;QACO,cAAS,GAAY,KAAK,CAAC;QAErC;;;;WAIG;QACO,eAAU,GAAqB,EAAE,CAAC;QAwF3C,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC;IAC/B,CAAC;IAOD,sBAAW,2BAAG;QALd;;;;WAIG;aACH;YACC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;gBACjC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;;;OAAA;IAOD,sBAAW,0BAAE;QAKb;;WAEG;aACH;YACC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;QACjB,CAAC;QAfD;;;;WAIG;aACH,UAAc,KAAa;YAC1B,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC/B,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;QAClB,CAAC;;;OAAA;IAeD,sBAAW,2BAAG;QANd;;;;;WAKG;aACH;YACC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,IAAI,GAAG,IAAI,UAAU,EAAe,CAAC;YAC3C,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;;;OAAA;IAED;;;;OAIG;IACI,+BAAU,GAAjB;QAAA,iBAYC;QAXA,wBAAwB;QACxB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAErC,wBAAwB;YACxB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK,EAAE,KAAK;oBAChC,KAAK,CAAC,KAAI,CAAC,CAAC;gBACb,CAAC,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;IACF,CAAC;IAQD,sBAAW,8BAAM;QAIjB;;;WAGG;aACH;YACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAhBD;;;;;WAKG;aACH,UAAkB,KAAe;YAChC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAUD;;;;;OAKG;IACI,qCAAgB,GAAvB;QACC,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACI,+BAAU,GAAjB;QACC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,4BAAO,GAAd;QACC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAEtB,IAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;YAE1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YAEvB,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,UAAC,CAAC;gBAChB,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,cAAc;YACd,IAAI,CAAC,UAAU,EAAE,CAAC;YAElB,0BAA0B;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAC;YAED,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;IACF,CAAC;IAED;;;;;OAKG;IACI,kCAAa,GAApB,UAAqB,MAAiB;QACrC,aAAa;QACb,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACrB,IAAI,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACpD,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAClC,CAAC;QACF,CAAC;QAED,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,GAAG;IACJ,CAAC;IAED;;;;;OAKG;IACI,0BAAK,GAAZ,UAA6B,OAAgB;QAC5C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACd,OAAO,GAAG,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QAC3C,CAAC;QAED,IAAI,SAAS,GAAS,IAAoB,IAAI,CAAC,WAAY,EAAE,CAAC;QAC9D,SAAS,CAAC,OAAO,GAAG,OAAO,CAAC;QAC5B,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC;QAE5B,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEzB,qBAAqB;QACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE5B,MAAM,CAAC,SAAS,CAAC;IAClB,CAAC;IAQD,sBAAW,8BAAM;QANjB;;;;;WAKG;aACH;YACC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,EAAc,CAAC;YACvC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;;;OAAA;IAED;;;;OAIG;IACI,6BAAQ,GAAf,UAAgB,MAAY;IAC5B,CAAC;IAQD,sBAAW,iCAAS;QAOpB;;;WAGG;aACH;YACC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACxB,CAAC;QAnBD;;;;;WAKG;aACH,UAAqB,KAAa;YACjC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB;;eAEG;QACJ,CAAC;;;OAAA;IAUD;;;;;;OAMG;IACI,6BAAQ,GAAf,UAAgB,GAAW,EAAE,KAAU;QACtC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACI,6BAAQ,GAAf,UAAgB,GAAW;QAC1B,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACI,+BAAU,GAAjB;QACC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED;;;;;;;;;OASG;IACI,+BAAU,GAAjB,UAAkB,EAAc,EAAE,KAAa;QAA/C,iBAYC;QAXA,IAAM,EAAE,GAAG,UAAU,CAAC;YACrB,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC7B,EAAE,EAAE,CAAC;QACN,CAAC,EAAE,KAAK,CAAC,CAAC;QAEV,IAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC;YAC7B,YAAY,CAAC,EAAE,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,MAAM,CAAC,QAAQ,CAAC;IACjB,CAAC;IAmBD,sBAAW,8BAAM;QAjBjB;;;;;WAKG;QAEH;;;;;;;;;WASG;aACH,UAAkB,MAAc;YAC/B,IAAI,CAAC;gBACJ,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC;YACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACV;;mBAEG;gBACG,IAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACnC,CAAC;QACF,CAAC;;;OAAA;IAED;;;;;OAKG;IACO,kCAAa,GAAvB,UAAwB,MAAe;QAAvC,iBA2QC;QAzQA,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACb,MAAM,CAAC;QACR,CAAC;QAED,aAAa;QACb,IAAI,MAAM,GAAQ,IAAI,CAAC;QAEvB,mCAAmC;QACnC,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,UAAC,SAAS,EAAE,WAAW;YAElD,wCAAwC;YACxC,EAAE,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAEjC,IAAI,MAAS,CAAC;gBAEd,+CAA+C;gBAC/C,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAO,WAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/E,sBAAsB;oBACtB,EAAE,CAAC,CAAC,MAAI,GAAG,KAAI,CAAC,mBAAmB,CAAO,WAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjE,MAAM,CAAC,SAAS,CAAC,GAAG,MAAI,CAAC;oBAC1B,CAAC;oBACD,IAAI,CAAC,CAAC;wBACL,MAAI,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC1B,CAAC;gBAEF,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,2BAA2B;oBAC3B,MAAI,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC1B,CAAC;gBAED;;;mBAGG;gBAEH,EAAE,CAAC,CAAC,MAAI,YAAY,OAAO,CAAC,CAAC,CAAC;oBAE7B,4CAA4C;oBAC5C,qEAAqE;oBACrE,KAAI,CAAC,eAAe,CAAC,MAAI,EAAE,WAAW,CAAC,CAAC;gBAEzC,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,MAAI,YAAY,eAAe,CAAC,CAAC,CAAC;oBAE1C,oDAAoD;oBACpD,qEAAqE;oBACrE,KAAI,CAAC,aAAa,CAAC,MAAI,EAAE,WAAW,CAAC,CAAC;gBAEvC,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAE/B,gDAAgD;oBAChD,qEAAqE;oBACrE,uCAAuC;oBACvC,MAAM,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;gBAEjC,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAM,WAAW,YAAY,UAAU,CAAC,CAAC,CAAC;oBAEjD,4DAA4D;oBAC5D,qEAAqE;oBACrE,MAAM,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;gBAEjC,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,MAAI,YAAY,UAAU,CAAC,CAAC,CAAC;oBAErC,+BAA+B;oBAC/B,qEAAqE;oBACrE,gEAAgE;oBAChE,MAAI,CAAC,MAAM,GAAG,WAAW,CAAC;gBAE3B,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,MAAI,YAAY,YAAY,CAAC,CAAC,CAAC;oBAEvC,2BAA2B;oBAC3B,qEAAqE;oBAErE,mCAAmC;oBACnC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBAEhC,iBAAiB;wBACjB,iEAAiE;wBACjE,gDAAgD;wBAChD,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,UAAC,KAAK,EAAE,KAAK;4BACrC,IAAI,IAAI,GAAG,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;4BAC1C,IAAI,QAAQ,CAAC;4BACb,EAAE,CAAC,CAAC,MAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAC1B,QAAQ,GAAG,MAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BACjC,CAAC;4BACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gCACf,QAAQ,GAAG,MAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;4BAC9B,CAAC;4BACD,IAAI,CAAC,CAAC;gCACL,QAAQ,GAAG,MAAI,CAAC,MAAM,EAAE,CAAC;4BAC1B,CAAC;4BACD,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAE3B,yDAAyD;gCACzD,yBAAyB;gCACzB,EAAE,CAAC,CAAC,QAAQ,YAAY,UAAU,CAAC,CAAC,CAAC;oCAC9B,QAAS,CAAC,MAAM,GAAG,KAAK,CAAC;gCAChC,CAAC;gCACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oCAC5D,OAAO,CAAC,iBAAiB,CAAS,KAAK,EAAU,QAAQ,CAAC,CAAC;gCAC5D,CAAC;gCACD,IAAI,CAAC,CAAC;oCACL,MAAI,CAAC,QAAQ,CAAC,MAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;gCAC9C,CAAC;4BAEF,CAAC;wBACF,CAAC,CAAC,CAAC;oBAEJ,CAAC;oBACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBAGtC,uBAAuB;wBACvB,0BAA0B;wBAC1B,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,UAAC,QAAQ,EAAE,UAAU;4BAE9C,IAAI,QAAQ,GAAS,MAAI,CAAC,QAAS,CAAC,QAAQ,CAAC,CAAC;4BAC9C,EAAE,CAAC,CAAC,QAAQ,YAAY,OAAO,CAAC,CAAC,CAAC;gCACjC,KAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;4BAC5C,CAAC;4BACD,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,YAAY,eAAe,CAAC,CAAC,CAAC;gCAC9C,KAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;4BAC1C,CAAC;4BACD,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,YAAY,kBAAkB,CAAC,CAAC,CAAC;gCACjD,KAAI,CAAC,yBAAyB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;4BACtD,CAAC;4BACD,IAAI,CAAC,EAAE,CAAC,CAAC,MAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,UAAU,CAAC,CAAC,CAAC;gCACxD,6DAA6D;gCACvD,MAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,CAAC,MAAM,GAAG,UAAU,CAAC;4BACpD,CAAC;4BACD,IAAI,CAAC,CAAC;gCACL,iDAAiD;gCACjD,MAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;4BACtC,CAAC;wBACF,CAAC,CAAC,CAAC;oBAEJ,CAAC;oBACD,IAAI,CAAC,CAAC;wBAEL,kBAAkB;wBAClB,iDAAiD;oBAElD,CAAC;gBAEF,CAAC;gBAED,IAAI,CAAC,EAAE,CAAC,CAAC,MAAI,YAAY,IAAI,CAAC,CAAC,CAAC;oBAE/B,aAAa;oBACb,qEAAqE;oBAErE,gCAAgC;oBAChC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBACjC,WAAW,GAAG,CAAC,WAAW,CAAC,CAAC;oBAC7B,CAAC;oBAED,gBAAgB;oBAChB,+BAA+B;oBAC/B,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,UAAC,KAAK,EAAE,KAAK;wBAErC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BAE3B,aAAa;4BACb,EAAE;4BACF,gEAAgE;4BAChE,iCAAiC;4BACjC,EAAE;4BACF,iEAAiE;4BACjE,iDAAiD;4BAEjD,IAAI,QAAQ,SAAA,CAAC;4BACb,EAAE,CAAC,CAAC,MAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAC1B,QAAQ,GAAG,MAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BACjC,CAAC;4BACD,IAAI,CAAC,CAAC;gCACL,IAAI,UAAQ,GAAG,KAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;gCAC/C,MAAI,CAAC,IAAI,CAAC,UAAQ,CAAC,CAAC;4BACrB,CAAC;4BAED,yDAAyD;4BACzD,yBAAyB;4BACzB,EAAE,CAAC,CAAC,QAAQ,YAAY,UAAU,CAAC,CAAC,CAAC;gCAC9B,QAAS,CAAC,MAAM,GAAG,KAAK,CAAC;4BAChC,CAAC;wBAEF,CAAC;wBACD,IAAI,CAAC,CAAC;4BAEL,eAAe;4BACf,qDAAqD;4BACrD,EAAE,CAAC,CAAC,MAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAC1B,MAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;4BAC7B,CAAC;4BACD,IAAI,CAAC,CAAC;gCACL,MAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAClB,CAAC;wBAEF,CAAC;oBAEF,CAAC,CAAC,CAAC;gBAEJ,CAAC;gBAED,IAAI,CAAC,EAAE,CAAC,CAAC,MAAI,YAAY,kBAAkB,CAAC,CAAC,CAAC;oBAE7C,iCAAiC;oBACjC,qEAAqE;oBAErE,KAAI,CAAC,yBAAyB,CAAC,MAAI,EAAE,WAAW,CAAC,CAAC;gBAEnD,CAAC;gBAED,IAAI,CAAC,EAAE,CAAC,CAAC,MAAI,YAAY,UAAU,CAAC,CAAC,CAAC;oBAErC,mBAAmB;oBACnB,qEAAqE;oBACrE,QAAQ;gBAET,CAAC;gBAED,IAAI,CAAC,EAAE,CAAC,CAAC,MAAI,YAAY,KAAK,IAAI,MAAI,YAAY,OAAO,CAAC,CAAC,CAAC;oBAE3D,8BAA8B;oBAC9B,qEAAqE;oBACrE,MAAM,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;gBAEjC,CAAC;gBAED,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAI,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAE9D,uBAAuB;oBACvB,qEAAqE;oBAErE,OAAO,CAAC,iBAAiB,CAAS,WAAW,EAAU,MAAI,CAAC,CAAC;gBAE9D,CAAC;gBAED,IAAI,CAAC,CAAC;oBAEL,4DAA4D;oBAC5D,qEAAqE;oBAErE,yCAAyC;oBACzC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBACjC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;4BACxC,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;wBACpD,CAAC;wBACD,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;4BACpD,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;wBAClC,CAAC;oBACF,CAAC;oBAED,SAAS;oBACT,MAAM,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;gBAEjC,CAAC;YAEF,CAAC;QACF,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEtB,CAAC;IAES,oCAAe,GAAzB,UAA0B,IAAuB,EAAE,MAAW;QAC7D,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,KAAK;gBAC/B,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAES,kCAAa,GAAvB,UAAwB,IAA0B,EAAE,MAAW;QAC9D,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,KAAK;gBAC/B,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAED;;;;;;OAMG;IACO,8CAAyB,GAAnC,UAAoC,IAAkC,EAAE,MAAW;QAElF,6BAA6B;QAC7B,gDAAgD;QAChD,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAE5B,4DAA4D;YAC5D,gBAAgB;YAChB,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,QAAQ,EAAE,UAAU;gBACzC,IAAI,QAAQ,CAAC;gBAEb,wCAAwC;gBACxC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC3B,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAClC,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAClC,CAAC;gBAED,WAAW;gBACX,EAAE,CAAC,CAAC,QAAQ,YAAY,UAAU,CAAC,CAAC,CAAC;oBACpC,QAAQ,CAAC,MAAM,GAAG,UAAU,CAAC;gBAC9B,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACjE,OAAO,CAAC,iBAAiB,CAAS,UAAU,EAAU,QAAQ,CAAC,CAAC;gBACjE,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBACvC,CAAC;YACF,CAAC,CAAC,CAAC;QAEJ,CAAC;IACF,CAAC;IAED;;;;;;;;;OASG;IACO,gCAAW,GAArB,UAAsB,CAAS,EAAE,CAAS;QACzC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAID,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,CAAC,CAAC,CAAC;QACX,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAED,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;IACF,CAAC;IAED;;;;;;;;OAQG;IACO,yBAAI,GAAd,UAAe,KAAa;QAC3B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;OAMG;IACO,wCAAmB,GAA7B,UAA8B,SAAiB;QAC9C,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,IAAI,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC;QAClD,CAAC;QACD,MAAM,CAAC;IACR,CAAC;IAED;;;;;;;OAOG;IACO,wCAAmB,GAA7B,UAA8B,MAAW;QACxC,IAAI,GAAW,CAAC;QAChB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QAChD,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACZ,CAAC;IAED;;;;;;OAMG;IACO,uCAAkB,GAA5B,UAA6B,MAAW;QACvC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9D,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACjD,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,MAAM,KAAK,CAAC,kBAAkB,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC;YAC1D,CAAC;QACF,CAAC;QACD,MAAM,CAAC;IACR,CAAC;IAED;;;;;;OAMG;IACO,gCAAW,GAArB,UAAsB,IAAY;QACjC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IACpC,CAAC;IAEF,iBAAC;AAAD,CAAC,AAl1BD,IAk1BC;;AAKqC,CAAC;AAEvC;;;;GAIG;AACH;IAAsC,oCAAU;IAE/C;;OAEG;IACH;QAAA,YACC,iBAAO,SAGP;QAED;;WAEG;QACI,YAAM,GAA4D,IAAI,eAAe,EAAE,CAAC;QAP9F,KAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC;QACpC,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;;IACnC,CAAC;IAOD;;;;;;;;OAQG;IACI,mCAAQ,GAAf,UAAgB,SAAiB,EAAE,IAAU;QAC5C,oCAAoC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;gBACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;gBAC5B,IAAI,CAAC,MAAO,CAAC,QAAQ,CAAC,SAAS,EAAE;oBACtC,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,IAAI;iBACZ,CAAC,CAAC;YACJ,CAAC;YACD,IAAI,CAAC,CAAC;gBACC,IAAI,CAAC,MAAO,CAAC,QAAQ,CAAC,SAAS,EAAE;oBACtC,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,IAAI;iBACZ,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;IACF,CAAC;IAED;;;;;;OAMG;IACI,8CAAmB,GAA1B,UAA2B,SAAiB,EAAE,IAAU;QACvD,oCAAoC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;gBACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;gBAC5B,IAAI,CAAC,MAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACzD,CAAC;YACD,IAAI,CAAC,CAAC;gBACC,IAAI,CAAC,MAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE;oBACjD,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,IAAI;iBACZ,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;IACF,CAAC;IAEF,uBAAC;AAAD,CAAC,AArED,CAAsC,UAAU,GAqE/C","sourcesContent":["/**\r\n * Base functionality\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IClone } from \"./utils/Clone\";\r\nimport { List, ListGrouper, ListTemplate } from \"./utils/List\";\r\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\r\nimport { Disposer, IDisposer } from \"./utils/Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Color, color } from \"./utils/Color\";\r\nimport { Percent, percent } from \"./utils/Percent\";\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { SpriteState } from \"./SpriteState\";\r\nimport { Language } from \"./utils/Language\";\r\nimport { Ordering } from \"./utils/Order\";\r\n\r\nimport { system } from \"./System\";\r\nimport { cache } from \"./utils/Cache\";\r\n\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\r\nexport class BaseObject implements IClone<BaseObject>, IDisposer {\r\n\r\n\t/**\r\n\t * A unique ID for this object.\r\n\t *\r\n\t * Generated on first access by `uid()` getter.\r\n\t *\r\n\t * @type {string}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _uid: string;\r\n\r\n\t/**\r\n\t * Indicates if this object has already been deleted. Any\r\n\t * destruction/disposal code should take this into account when deciding\r\n\t * wheter to run potentially costly disposal operations if they already have\r\n\t * been run.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * User-defined id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _id: string;\r\n\r\n\t/**\r\n\t * Holds a universal mapping collection, so that elements and their children\r\n\t * can create and look up all kinds of relations between id and object.\r\n\t *\r\n\t * @type {Dictionary<string, any>}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _map: Dictionary<string, any>;\r\n\r\n\t/**\r\n\t * The theme used by this object.\r\n\t *\r\n\t * @type {ITheme[]}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _themes: ITheme[];\r\n\r\n\t// @review\r\n\t/**\r\n\t * A list of objects that are clones of this object. An object needs to\r\n\t * maintain a list of its clones so that properties can be re-applied to\r\n\t * clones whenever property on the object they were cloned from changes.\r\n\t *\r\n\t * @type {Dictionary<string, BaseObject>}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _clones: List<BaseObject>;\r\n\r\n\r\n\t// @review\r\n\t/**\r\n\t * Reference to the original object this object was cloned from. We need to\r\n\t * keep this so we can disassociate it from source object when this object\r\n\t * is disposed.\r\n\t *\r\n\t * @type {BaseObject}\r\n\t * @deprecated\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic clonedFrom: BaseObject;\r\n\r\n\t/**\r\n\t * A class name for the object.\r\n\t *\r\n\t * This property is used by deriving classes to identify which class it is.\r\n\t * We could derive the class name from the object itself, however method of\r\n\t * doing so is too costly, so we are relying on this property to quickly\r\n\t * access type of class.\r\n\t *\r\n\t * @type {string}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _className: string;\r\n\r\n\t/**\r\n\t * [cloneId description]\r\n\t *\r\n\t * @type {string}\r\n\t * @todo Needs description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic cloneId: string;\r\n\r\n\t/**\r\n\t * Identifies if this object is a \"template\" and should not be treated as\r\n\t * real object that is drawn or actually used in the chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic isTemplate: boolean;\r\n\r\n\t//protected _classes: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t * * Sets class name\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.className = \"BaseObject\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns object's internal unique ID.\r\n\t *\r\n\t * @return {string} Unique ID\r\n\t */\r\n\tpublic get uid(): string {\r\n\t\tif (!this._uid) {\r\n\t\t\tthis._uid = system.getUniqueId();\r\n\t\t\tsystem.map.setKey(this._uid, this);\r\n\t\t}\r\n\t\treturn this._uid;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the user-defined id of the element.\r\n\t *\r\n\t * @param {string} value Id\r\n\t */\r\n\tpublic set id(value: string) {\r\n\t\tsystem.map.setKey(value, this);\r\n\t\tthis._id = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Id\r\n\t */\r\n\tpublic get id(): string {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a universal collection for mapping ids with objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {Dictionary<string, any>} Map collection\r\n\t */\r\n\tpublic get map(): Dictionary<string, any> {\r\n\t\tif (!this._map) {\r\n\t\t\tthis._map = new Dictionary<string, any>();\r\n\t\t}\r\n\t\treturn this._map;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies properties from all assigned themes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\t// TODO is this needed ?\r\n\t\tif (system) {\r\n\t\t\tlet themes = this.getCurrentThemes();\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\tif (themes) {\r\n\t\t\t\t$array.each(themes, (theme, index) => {\r\n\t\t\t\t\ttheme(this);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of themes to be used for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ITheme[]} value An array of themes\r\n\t */\r\n\tpublic set themes(value: ITheme[]) {\r\n\t\tthis._themes = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {ITheme[]} An array of themes\r\n\t */\r\n\tpublic get themes(): ITheme[] {\r\n\t\treturn this._themes;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of themes that should be applied to this element. It could\r\n\t * either be a list of themes set explicitly on this element, or system-wide.\r\n\t *\r\n\t * @return {ITheme[]} List of themes\r\n\t */\r\n\tpublic getCurrentThemes(): ITheme[] {\r\n\t\treturn this.themes || system.themes;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already been disposed.\r\n\t *\r\n\t * @return {boolean} Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = null;\r\n\r\n\t\t\t$array.each(a, (x) => {\r\n\t\t\t\tx.dispose();\r\n\t\t\t});\r\n\r\n\t\t\t// Clear cache\r\n\t\t\tthis.clearCache();\r\n\r\n\t\t\t// remove from clones list\r\n\t\t\tif (this.clonedFrom) {\r\n\t\t\t\tthis.clonedFrom.clones.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tsystem.map.removeKey(this._uid);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes disposable object and removes it from `_disposers`.\r\n\t *\r\n\t * @param {IDisposer} target Object to dispose\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic removeDispose(target: IDisposer): void {\r\n\t\t//if(target){\r\n\t\tif (!this._disposed) {\r\n\t\t\tlet index = $array.indexOf(this._disposers, target);\r\n\t\t\tif (index > -1) {\r\n\t\t\t\tthis._disposers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttarget.dispose();\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a copy of this object and returns the clone.\r\n\t *\r\n\t * @param   {string}  cloneId  An id to use for clone (if not set a unique id will be generated)\r\n\t * @returns {Object}           Clone\r\n\t */\r\n\tpublic clone<A extends this>(cloneId?: string): this {\r\n\t\tif (!cloneId) {\r\n\t\t\tcloneId = \"clone-\" + system.getUniqueId();\r\n\t\t}\r\n\r\n\t\tlet newObject: this = new (<{ new(): A; }>this.constructor)();\r\n\t\tnewObject.cloneId = cloneId;\r\n\t\tnewObject.clonedFrom = this;\r\n\r\n\t\tnewObject.copyFrom(this);\r\n\r\n\t\t// add to clones list\r\n\t\tthis.clones.push(newObject);\r\n\r\n\t\treturn newObject;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a collection of object's clones.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {Dictionary<string, BaseObject>} Clones\r\n\t */\r\n\tpublic get clones(): List<BaseObject> {\r\n\t\tif (!this._clones) {\r\n\t\t\tthis._clones = new List<BaseObject>();\r\n\t\t}\r\n\t\treturn this._clones;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from different element.\r\n\t *\r\n\t * @param {this} object Source element\r\n\t */\r\n\tpublic copyFrom(object: this): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Element's class name. (a class that was used to instantiate the element)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {string}  value  Class name\r\n\t */\r\n\tpublic set className(value: string) {\r\n\t\tthis._className = value;\r\n\t\t/*if (system) {\r\n\t\t\tsystem.registeredClasses[value] = typeof this;\r\n\t\t}*/\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Class name\r\n\t */\r\n\tpublic get className(): string {\r\n\t\treturn this._className;\r\n\t}\r\n\r\n\t/**\r\n\t * Caches value in object's cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {string}  key    Key\r\n\t * @param {any}     value  Value\r\n\t */\r\n\tpublic setCache(key: string, value: any): void {\r\n\t\tcache.set(this.uid, key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves cached value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  key  Key\r\n\t * @return {any}          Value\r\n\t */\r\n\tpublic getCache(key: string): any {\r\n\t\treturn cache.get(this.uid, key);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears object's local cache.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic clearCache(): void {\r\n\t\tcache.clear(this.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n\t * timeouts created by the object will be cleared when object itself is\r\n\t * disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {() => void}  fn     Callback function\r\n\t * @param  {number}      delay  Timeout (ms)\r\n\t * @return {IDisposer}          Disposer for timeout\r\n\t */\r\n\tpublic setTimeout(fn: () => void, delay: number): IDisposer {\r\n\t\tconst id = setTimeout(() => {\r\n\t\t\tthis.removeDispose(disposer);\r\n\t\t\tfn();\r\n\t\t}, delay);\r\n\r\n\t\tconst disposer = new Disposer(() => {\r\n\t\t\tclearTimeout(id);\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(disposer);\r\n\t\treturn disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * JSON-BASED CONFIG PROCESSING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Use this property to set JSON-based config. When set, triggers processing\r\n\t * routine, which will go thorugh all properties, and try to apply values,\r\n\t * create instances, etc.\r\n\t *\r\n\t * Use this with caution, as it is a time-consuming process. It's used for\r\n\t * initialchart setup only, not routine operations.\r\n\t *\r\n\t * @param {object} json JSON config\r\n\t */\r\n\tpublic set config(config: object) {\r\n\t\ttry {\r\n\t\t\tthis.processConfig(config);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\t/*if (this instanceof Sprite) {\r\n\t\t\t\tthis.raiseCriticalError(e);\r\n\t\t\t}*/\r\n\t\t\t(<any>this).raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the JSON config.\r\n\t *\r\n\t * @param {object}  json  JSON config\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected processConfig(config?: object): void {\r\n\r\n\t\tif (!config) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get target\r\n\t\tlet target = <any>this;\r\n\r\n\t\t// Iterate through all of the items\r\n\t\t$object.eachOrdered(config, (configKey, configValue) => {\r\n\r\n\t\t\t// Check if there's a property in target\r\n\t\t\tif (this.hasProperty(configKey)) {\r\n\r\n\t\t\t\tlet item: any;\r\n\r\n\t\t\t\t// Do we have instructions to create an object?\r\n\t\t\t\tif ($type.isObject(configValue) && $type.hasValue((<any>configValue)[\"type\"])) {\r\n\t\t\t\t\t// Create new instance\r\n\t\t\t\t\tif (item = this.createClassInstance((<any>configValue)[\"type\"])) {\r\n\t\t\t\t\t\ttarget[configKey] = item;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\titem = target[configKey];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Get item from the object\r\n\t\t\t\t\titem = target[configKey];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * It is...\r\n\t\t\t\t * --------------------------------------------------------------------\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif (item instanceof Adapter) {\r\n\r\n\t\t\t\t\t// ... an Adapter, try to add handlers to it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tthis.processAdapters(item, configValue);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof EventDispatcher) {\r\n\r\n\t\t\t\t\t// ... an EventDispatcher, try to add handlers to it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tthis.processEvents(item, configValue);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.asIs(configKey)) {\r\n\r\n\t\t\t\t\t// ... a special field, just set it to new value\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t// (no need to add each indvidual item)\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (<any>configValue instanceof BaseObject) {\r\n\r\n\t\t\t\t\t// ... a BaseObject object, we just going to use it as it is\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof BaseObject) {\r\n\r\n\t\t\t\t\t// ... another child BaseObject\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t// Let's just pass in config part in and let itself deal with it\r\n\t\t\t\t\titem.config = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof ListTemplate) {\r\n\r\n\t\t\t\t\t// ... a list with template\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t// Let's see what we can do with it\r\n\t\t\t\t\tif ($type.isArray(configValue)) {\r\n\r\n\t\t\t\t\t\t// It's an array.\r\n\t\t\t\t\t\t// Create a list item for entry, or try to apply properties to an\r\n\t\t\t\t\t\t// existing entry if possible and it is present.\r\n\t\t\t\t\t\t$array.each(configValue, (entry, index) => {\r\n\t\t\t\t\t\t\tlet type = this.getConfigEntryType(entry);\r\n\t\t\t\t\t\t\tlet listItem;\r\n\t\t\t\t\t\t\tif (item.hasIndex(index)) {\r\n\t\t\t\t\t\t\t\tlistItem = item.getIndex(index);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (type) {\r\n\t\t\t\t\t\t\t\tlistItem = item.create(type);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlistItem = item.create();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.isObject(entry)) {\r\n\r\n\t\t\t\t\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t\t\t\t\t// deal if its own config\r\n\t\t\t\t\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n\t\t\t\t\t\t\t\t\t$object.copyAllProperties(<Object>entry, <Object>listItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\titem.setIndex(item.indexOf(listItem), entry);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.isObject(configValue)) {\r\n\r\n\r\n\t\t\t\t\t\t// It's a single oject.\r\n\t\t\t\t\t\t// Treat it as a template.\r\n\t\t\t\t\t\t$object.each(configValue, (entryKey, entryValue) => {\r\n\r\n\t\t\t\t\t\t\tlet listItem = (<any>item.template)[entryKey];\r\n\t\t\t\t\t\t\tif (listItem instanceof Adapter) {\r\n\t\t\t\t\t\t\t\tthis.processAdapters(listItem, entryValue);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (listItem instanceof EventDispatcher) {\r\n\t\t\t\t\t\t\t\tthis.processEvents(listItem, entryValue);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (listItem instanceof DictionaryTemplate) {\r\n\t\t\t\t\t\t\t\tthis.processDictionaryTemplate(listItem, entryValue);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (item.template[entryKey] instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t// Template is a BaseObject. Let it deal with its own config.\r\n\t\t\t\t\t\t\t\t(<any>item.template[entryKey]).config = entryValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t// Aything else. Just assing and be done with it.\r\n\t\t\t\t\t\t\t\titem.template[entryKey] = entryValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t// Something else?\r\n\t\t\t\t\t\t// Not sure what to do with it on a list - ignore\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof List) {\r\n\r\n\t\t\t\t\t// ... a list\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t// Convert to array if necessary\r\n\t\t\t\t\tif (!$type.isArray(configValue)) {\r\n\t\t\t\t\t\tconfigValue = [configValue];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// It's an array\r\n\t\t\t\t\t// Create a list item for entry\r\n\t\t\t\t\t$array.each(configValue, (entry, index) => {\r\n\r\n\t\t\t\t\t\tif ($type.isObject(entry)) {\r\n\r\n\t\t\t\t\t\t\t// An object.\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t// Let's see if we can instantiate a class out of it, or we need\r\n\t\t\t\t\t\t\t// to push it into list as it is.\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t// If there are items already at the specified index in the list,\r\n\t\t\t\t\t\t\t// apply properties rather than create a new one.\r\n\r\n\t\t\t\t\t\t\tlet listItem;\r\n\t\t\t\t\t\t\tif (item.hasIndex(index)) {\r\n\t\t\t\t\t\t\t\tlistItem = item.getIndex(index);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlet listItem = this.createEntryInstance(entry);\r\n\t\t\t\t\t\t\t\titem.push(listItem);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t\t\t\t// deal if its own config\r\n\t\t\t\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t// Basic value.\r\n\t\t\t\t\t\t\t// Just push it into list, or override existing value\r\n\t\t\t\t\t\t\tif (item.hasIndex(index)) {\r\n\t\t\t\t\t\t\t\titem.setIndex(index, entry);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\titem.push(entry);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof DictionaryTemplate) {\r\n\r\n\t\t\t\t\t// ... a dictionary with template\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\tthis.processDictionaryTemplate(item, configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof Dictionary) {\r\n\r\n\t\t\t\t\t// ... a dictionary\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t// @todo\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof Color || item instanceof Percent) {\r\n\r\n\t\t\t\t\t// ... it's a Color or Percent\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($type.isObject(item) && $type.isObject(configValue)) {\r\n\r\n\t\t\t\t\t// ... a regular object\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t$object.copyAllProperties(<Object>configValue, <Object>item);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// ... something else - probably a simple property or object\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t// Maybe convert to `Percent` or `Color`?\r\n\t\t\t\t\tif ($type.isString(configValue)) {\r\n\t\t\t\t\t\tif (configValue.match(/^[0-9.\\-]+\\%$/)) {\r\n\t\t\t\t\t\t\tconfigValue = percent($type.toNumber(configValue));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (configValue.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n\t\t\t\t\t\t\tconfigValue = color(configValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Assign\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}, this.configOrder);\r\n\r\n\t}\r\n\r\n\tprotected processAdapters(item: Adapter<any, any>, config: any): void {\r\n\t\tif ($type.isObject(config)) {\r\n\t\t\t$object.each(config, (key, entry) => {\r\n\t\t\t\titem.add(key, entry);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected processEvents(item: EventDispatcher<any>, config: any): void {\r\n\t\tif ($type.isObject(config)) {\r\n\t\t\t$object.each(config, (key, entry) => {\r\n\t\t\t\titem.on(key, entry);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON config for a [[DictionaryTemplate]] item.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<any, any>}  item    Item\r\n\t * @param {any}                           config  Config\r\n\t */\r\n\tprotected processDictionaryTemplate(item: DictionaryTemplate<any, any>, config: any): void {\r\n\r\n\t\t// We can only process object\r\n\t\t// Not sure what to do with other types - ignore\r\n\t\tif ($type.isObject(config)) {\r\n\r\n\t\t\t// Create an entry for each item, or override properties for\r\n\t\t\t// existing one.\r\n\t\t\t$object.each(config, (entryKey, entryValue) => {\r\n\t\t\t\tlet listItem;\r\n\r\n\t\t\t\t// Get existing one, or create a new one\r\n\t\t\t\tif (item.hasKey(entryKey)) {\r\n\t\t\t\t\tlistItem = item.getKey(entryKey);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem = item.create(entryKey);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set data\r\n\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\tlistItem.config = entryValue;\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entryValue)) {\r\n\t\t\t\t\t$object.copyAllProperties(<Object>entryValue, <Object>listItem);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem.setKey(entryKey, entryValue);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Language must come first, so it's all set up when the rest of the\r\n\t\t// elements are being instantiated\r\n\t\telse if (a == \"language\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"language\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if field should be just assigned as is, without any checking when\r\n\t * processing JSON config.\r\n\t *\r\n\t * Extending functions can override this function to do their own checks.\r\n\t * \r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn $array.indexOf([\"locale\"], field) != -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a relevant class instance if such class definition exists.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  className  Class name\r\n\t * @return {Object}             Instance\r\n\t */\r\n\tprotected createClassInstance(className: string): Object {\r\n\t\tif ($type.hasValue(system.registeredClasses[className])) {\r\n\t\t\treturn new system.registeredClasses[className]();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a class instance for a config entry using it's type. (as set in\r\n\t * `type` property)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {any}  config  Config part\r\n\t * @return {any}          Instance\r\n\t */\r\n\tprotected createEntryInstance(config: any): any {\r\n\t\tlet res: Object;\r\n\t\tif ($type.hasValue(config[\"type\"])) {\r\n\t\t\tres = this.createClassInstance(config[\"type\"]);\r\n\t\t}\r\n\t\tif (!res) {\r\n\t\t\treturn config;\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines config object type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {any}  config  Config part\r\n\t * @return {any}          Type\r\n\t */\r\n\tprotected getConfigEntryType(config: any): any {\r\n\t\tif ($type.hasValue(config[\"type\"])) {\r\n\t\t\tif ($type.hasValue(system.registeredClasses[config[\"type\"]])) {\r\n\t\t\t\treturn system.registeredClasses[config[\"type\"]];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this element has a property.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}   prop  Property name\r\n\t * @return {boolean}        Has property?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop in this ? true : false;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[BaseObjectEvents]].\r\n */\r\nexport interface IBaseObjectEvents { };\r\n\r\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\r\nexport class BaseObjectEvents extends BaseObject {\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"BaseObjectEvents\";\r\n\t\tthis._disposers.push(this.events);\r\n\t}\r\n\r\n\t/**\r\n\t * An [[EventDispatcher]] instance\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<BaseObject, IBaseObjectEvents>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Dispatches an event using own event dispatcher. Will automatically\r\n\t * populate event data object with event type and target (this element).\r\n\t * It also checks if there are any handlers registered for this sepecific\r\n\t * event.\r\n\t *\r\n\t * @param {string} eventType Event type (name)\r\n\t * @param {any}    data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatch(eventType: string, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Works like `dispatch`, except event is triggered immediately, without\r\n\t * waiting for the next frame cycle.\r\n\t *\r\n\t * @param {string} eventType Event type (name)\r\n\t * @param {any}    data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatchImmediately(eventType: string, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, data);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"]}