{"version":3,"file":"Color.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Color.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * This module contains Color object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { iRGB, iHSV, iHSL, color, isColor, castColor } from \"./Colors\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\n\r\n// Re-export\r\nexport { iRGB, iHSV, iHSL, color, isColor, castColor };\r\n\r\n/**\r\n * Represents a color.\r\n *\r\n * `Color` accepts value only in [[iRGB]] object format. To create `Color`\r\n * object by parsing it from any supported string-based formats, use helper\r\n * [[color]] function:\r\n *\r\n * ```TypeScript\r\n * amcharts4.color(\"#ff0000\");\r\n * amcharts4.color(\"#f00\");\r\n * amcharts4.color(\"rgb(255, 0, 0)\");\r\n * amcharts4.color(\"rgba(255, 0, 0, 0.5)\");\r\n * amcharts4.color({ r: 255, g: 0, b: 0 });\r\n * amcharts4.color(\"red\");\r\n * ```\r\n * ```JavaScript\r\n * amcharts4.color(\"#ff0000\");\r\n * amcharts4.color(\"#f00\");\r\n * amcharts4.color(\"rgb(255, 0, 0)\");\r\n * amcharts4.color(\"rgba(255, 0, 0, 0.5)\");\r\n * amcharts4.color({ r: 255, g: 0, b: 0 });\r\n * amcharts4.color(\"red\");\r\n * ```\r\n */\r\nexport class Color {\r\n\r\n\t/**\r\n\t * Light color (used when light contrasting color is required).\r\n\t *\r\n\t * @param {Color}\r\n\t * @ignore\r\n\t */\r\n\tprotected _lightColor: $type.Optional<Color>;\r\n\r\n\t/**\r\n\t * Dark color (used when dark contrasting color is required).\r\n\t *\r\n\t * @param {Color}\r\n\t * @ignore\r\n\t */\r\n\tprotected _darkColor: $type.Optional<Color>;\r\n\r\n\t/**\r\n\t * Holds RGB value of the color.\r\n\t *\r\n\t * @type {iRGB}\r\n\t */\r\n\tprotected _value: $type.Optional<iRGB>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param {iRGB} color Source color\r\n\t */\r\n\tconstructor(color?: iRGB) {\r\n\t\tthis._value = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns [[iRGB]] representation of the color.\r\n\t *\r\n\t * @return {iRGB} RGB object\r\n\t */\r\n\tpublic get rgb(): $type.Optional<iRGB> {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns color hex value string, e.g. \"#FF0000\".\r\n\t *\r\n\t * @return {string} Hex color code\r\n\t */\r\n\tpublic get hex(): string {\r\n\t\treturn this._value ? $colors.rgbToHex(this._value) : \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `rgba()` representation of the color, e.g.:\r\n\t * `rgba(255, 0, 0, 0.5)`.\r\n\t *\r\n\t * @return {string} rgba color string\r\n\t */\r\n\tpublic get rgba(): string {\r\n\t\treturn this._value ? $colors.rgbToRGBA(this._value) : \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Set alpha (transparency) of the color.\r\n\t *\r\n\t * @param {number} value Alpha (0-1)\r\n\t */\r\n\tpublic set alpha(value: number) {\r\n\t\tif (this._value) {\r\n\t\t\tthis._value.a = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current transparency.\r\n\t *\r\n\t * @return {number} Alpha (0-1)\r\n\t */\r\n\tpublic get alpha(): number {\r\n\t\tif (this._value != null && this._value.a != null) {\r\n\t\t\treturn this._value.a;\r\n\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets \"light\" color. Used when determining contrasting color.\r\n\t *\r\n\t * @param {Color} color Color\r\n\t */\r\n\tpublic set lightColor(color: Color) {\r\n\t\tthis._lightColor = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current light color setting.\r\n\t *\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get lightColor(): Color {\r\n\t\tif (!this._lightColor) {\r\n\t\t\tthis._lightColor = new Color({ r: 255, g: 255, b: 255 });\r\n\t\t}\r\n\t\treturn this._lightColor;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets \"dark\" color. Used when determining contrasting color.\r\n\t *\r\n\t * @param {Color} color Color\r\n\t */\r\n\tpublic set darkColor(color: Color) {\r\n\t\tthis._darkColor = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current dark color setting.\r\n\t *\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get darkColor(): Color {\r\n\t\tif (!this._darkColor) {\r\n\t\t\tthis._darkColor = new Color({ r: 0, g: 0, b: 0 });\r\n\t\t}\r\n\t\treturn this._darkColor;\r\n\t}\r\n\r\n\t/**\r\n\t * Overrides `toString` method so that [[Color]] object can be used as\r\n\t * string.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} String represantion of color (usable in CSS)\r\n\t */\r\n\tpublic toString(): string {\r\n\t\treturn this.alpha < 1 ? this.rgba : this.hex;\r\n\t}\r\n\r\n\t/**\r\n\t * Retruns a new [[Color]] which is percent lighter (positivive value),\r\n\t * or darker (negative value).\r\n\t *\r\n\t * Parameter is in the scale of -1 to 1.\r\n\t *\r\n\t * @param  {number}  percent  Increase/decrease lightness by X\r\n\t * @return {Color}            New Color\r\n\t */\r\n\tpublic lighten(percent: number): Color {\r\n\t\treturn $colors.lighten(this, percent);\r\n\t}\r\n\r\n\t/**\r\n\t * Retruns a new [[Color]] which is percent brighter (positivive value),\r\n\t * or darker (negative value).\r\n\t *\r\n\t * Parameter is in the scale of -1 to 1.\r\n\t *\r\n\t * @param  {number}  percent  Increase/decrease brightness by X\r\n\t * @return {Color}            New Color\r\n\t */\r\n\tpublic brighten(percent: number): Color {\r\n\t\treturn $colors.brighten(this, percent);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] based on current color with specific saturation\r\n\t * applied.\r\n\t *\r\n\t * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n\t * saturated).\r\n\t *\r\n\t * @param  {number}  saturation  Saturation (0-1)\r\n\t * @return {Color}               New (saturated) color\r\n\t */\r\n\tpublic saturate(saturation: number): Color {\r\n\t\treturn $colors.saturate(this, saturation);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a either light or dark color that contrasts specifically with\r\n\t * this color.\r\n\t *\r\n\t * Uses properties `darkColor` (default black) and `lightColor` (default\r\n\t * white).\r\n\t *\r\n\t * Useful when determining which color label should be on a colored\r\n\t * background, so that it stands out.\r\n\t *\r\n\t * @return {Color} Contrasting color\r\n\t */\r\n\tpublic get alternative(): Color {\r\n\t\tif (this.rgb != null) {\r\n\t\t\treturn $colors.isLight(this.rgb) ? this.darkColor : this.lightColor;\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Color does not exist\");\r\n\t\t}\r\n\t}\r\n}\r\n"]}